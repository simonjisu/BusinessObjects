{"sample_id": 0, "db_id": "department_management", "final": {"question": "How many heads of the departments are older than 56 ?", "sql": "SELECT count(*) FROM head WHERE age  >  56", "source_tables": ["head"]}}
{"sample_id": 1, "db_id": "department_management", "final": {"question": "List the name, born state and age of the heads of departments ordered by age.", "sql": "SELECT name ,  born_state ,  age FROM head ORDER BY age", "source_tables": ["head"]}}
{"sample_id": 5, "db_id": "department_management", "final": {"question": "What are the names of the heads who are born outside the California state?", "sql": "SELECT name FROM head WHERE born_state != 'California'", "source_tables": ["head"]}}
{"sample_id": 14, "db_id": "department_management", "final": {"question": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "source_tables": ["management", "department"]}}
{"sample_id": 13, "db_id": "department_management", "final": {"question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'", "source_tables": ["head", "management", "department"]}}
{"sample_id": 11, "db_id": "department_management", "final": {"question": "How many departments are led by heads who are not mentioned?", "sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);", "source_tables": ["management", "department"]}}
{"sample_id": 8, "db_id": "department_management", "final": {"question": "In which year were most departments established?", "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1", "source_tables": ["department"]}}
{"sample_id": 9, "db_id": "department_management", "final": {"question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", "source_tables": ["management", "department"]}}
{"sample_id": 2, "db_id": "department_management", "final": {"question": "List the creation year, name and budget of each department.", "sql": "SELECT creation ,  name ,  budget_in_billions FROM department", "source_tables": ["department"]}}
{"sample_id": 16, "db_id": "farm", "final": {"question": "How many farms are there?", "sql": "SELECT count(*) FROM farm", "source_tables": ["farm"]}}
{"sample_id": 21, "db_id": "farm", "final": {"question": "Return the hosts of competitions for which the theme is not Aliens?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "source_tables": ["farm_competition"]}}
{"sample_id": 50, "db_id": "farm", "final": {"question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}}
{"sample_id": 29, "db_id": "farm", "final": {"question": "Count the number of different statuses.", "sql": "SELECT count(DISTINCT Status) FROM city", "source_tables": ["city"]}}
{"sample_id": 51, "db_id": "farm", "final": {"question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}}
{"sample_id": 23, "db_id": "farm", "final": {"question": "Return the themes of farm competitions, sorted by year ascending.", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "source_tables": ["farm_competition"]}}
{"sample_id": 53, "db_id": "farm", "final": {"question": "What are the official names of cities that have population over 1500 or less than 500?", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "source_tables": ["city"]}}
{"sample_id": 41, "db_id": "farm", "final": {"question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 26, "db_id": "farm", "final": {"question": "What are the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows) ,  min(Cows) FROM farm", "source_tables": ["farm"]}}
{"sample_id": 28, "db_id": "farm", "final": {"question": "How many different statuses do cities have?", "sql": "SELECT count(DISTINCT Status) FROM city", "source_tables": ["city"]}}
{"sample_id": 38, "db_id": "farm", "final": {"question": "Show the status of the city that has hosted the greatest number of competitions.", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 19, "db_id": "farm", "final": {"question": "What is the total horses record for each farm, sorted ascending?", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "source_tables": ["farm"]}}
{"sample_id": 52, "db_id": "farm", "final": {"question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "source_tables": ["city"]}}
{"sample_id": 47, "db_id": "farm", "final": {"question": "What is the most common status across all cities?", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 24, "db_id": "farm", "final": {"question": "What is the average number of working horses of farms with more than 5000 total number of horses?", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "source_tables": ["farm"]}}
{"sample_id": 33, "db_id": "farm", "final": {"question": "What is the official name and status of the city with the most residents?", "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 22, "db_id": "farm", "final": {"question": "What are the themes of farm competitions sorted by year in ascending order?", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "source_tables": ["farm_competition"]}}
{"sample_id": 20, "db_id": "farm", "final": {"question": "What are the hosts of competitions whose theme is not \"Aliens\"?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "source_tables": ["farm_competition"]}}
{"sample_id": 18, "db_id": "farm", "final": {"question": "List the total number of horses on farms in ascending order.", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "source_tables": ["farm"]}}
{"sample_id": 35, "db_id": "farm", "final": {"question": "Give the years and official names of the cities of each competition.", "sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 46, "db_id": "farm", "final": {"question": "List the most common type of Status across cities.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 34, "db_id": "farm", "final": {"question": "Show the years and the official names of the host cities of competitions.", "sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 54, "db_id": "farm", "final": {"question": "Show the census ranking of cities whose status are not \"Village\".", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "source_tables": ["city"]}}
{"sample_id": 30, "db_id": "farm", "final": {"question": "List official names of cities in descending order of population.", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "source_tables": ["city"]}}
{"sample_id": 98, "db_id": "student_assessment", "final": {"question": "What are the first names of the people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name", "source_tables": ["people"]}}
{"sample_id": 60, "db_id": "student_assessment", "final": {"question": "what are the first name and last name of all candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "source_tables": ["people", "candidates"]}}
{"sample_id": 97, "db_id": "student_assessment", "final": {"question": "List the first names of people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name", "source_tables": ["people"]}}
{"sample_id": 96, "db_id": "student_assessment", "final": {"question": "What are the names of the courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name", "source_tables": ["courses"]}}
{"sample_id": 66, "db_id": "student_assessment", "final": {"question": "What are the ids of all students for courses and what are the names of those courses?", "sql": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id", "source_tables": ["courses", "student_course_registrations"]}}
{"sample_id": 105, "db_id": "student_assessment", "final": {"question": "List the id of students who registered course statistics in the order of registration date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "source_tables": ["courses", "student_course_registrations"]}}
{"sample_id": 58, "db_id": "student_assessment", "final": {"question": "what is id of students who registered some courses but the least number of courses in these students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "source_tables": ["student_course_registrations"]}}
{"sample_id": 92, "db_id": "student_assessment", "final": {"question": "What are the different cities where people live?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "source_tables": ["people_addresses", "addresses"]}}
{"sample_id": 101, "db_id": "student_assessment", "final": {"question": "Find the id of courses which are registered or attended by student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_attendance", "student_course_registrations"]}}
{"sample_id": 67, "db_id": "student_assessment", "final": {"question": "What is detail of the student who most recently registered course?", "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "source_tables": ["students", "student_course_registrations"]}}
{"sample_id": 100, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who either registered or attended a course?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance", "student_course_registrations"]}}
{"sample_id": 82, "db_id": "student_assessment", "final": {"question": "For each course id, how many students are registered and what are the course names?", "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "source_tables": ["courses", "students", "student_course_registrations"]}}
{"sample_id": 85, "db_id": "student_assessment", "final": {"question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?", "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"", "source_tables": ["people", "candidate_assessments", "candidates"]}}
{"sample_id": 108, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "source_tables": ["courses", "student_course_attendance"]}}
{"sample_id": 74, "db_id": "student_assessment", "final": {"question": "What is the id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "source_tables": ["people", "candidates"]}}
{"sample_id": 56, "db_id": "student_assessment", "final": {"question": "which course has most number of registered students?", "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_course_registrations"]}}
{"sample_id": 75, "db_id": "student_assessment", "final": {"question": "Find id of the candidate who most recently accessed the course?", "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "source_tables": ["candidate_assessments"]}}
{"sample_id": 77, "db_id": "student_assessment", "final": {"question": "What is detail of the student who registered the most number of courses?", "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "student_course_registrations"]}}
{"sample_id": 64, "db_id": "student_assessment", "final": {"question": "List the id of students who attended some courses?", "sql": "SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance"]}}
{"sample_id": 79, "db_id": "student_assessment", "final": {"question": "List the id of students who registered some courses and the number of their registered courses?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "source_tables": ["students", "student_course_registrations"]}}
{"sample_id": 93, "db_id": "student_assessment", "final": {"question": "Find distinct cities of address of students?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "source_tables": ["students", "people_addresses", "addresses"]}}
{"sample_id": 88, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who registered for course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "source_tables": ["student_course_attendance"]}}
{"sample_id": 94, "db_id": "student_assessment", "final": {"question": "What are the different cities where students live?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "source_tables": ["students", "people_addresses", "addresses"]}}
{"sample_id": 68, "db_id": "student_assessment", "final": {"question": "What details do we have on the students who registered for courses most recently?", "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "source_tables": ["students", "student_course_registrations"]}}
{"sample_id": 71, "db_id": "student_assessment", "final": {"question": "How many courses do the student whose id is 171 attend?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "source_tables": ["courses", "student_course_attendance"]}}
{"sample_id": 76, "db_id": "student_assessment", "final": {"question": "What is the id of the candidate who most recently accessed the course?", "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "source_tables": ["candidate_assessments"]}}
{"sample_id": 87, "db_id": "student_assessment", "final": {"question": "What are the id of students who registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "source_tables": ["student_course_attendance"]}}
{"sample_id": 80, "db_id": "student_assessment", "final": {"question": "For every student who is registered for some course, how many courses are they registered for?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "source_tables": ["students", "student_course_registrations"]}}
{"sample_id": 83, "db_id": "student_assessment", "final": {"question": "Find id of candidates whose assessment code is \"Pass\"?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "source_tables": ["candidate_assessments"]}}
{"sample_id": 78, "db_id": "student_assessment", "final": {"question": "What are the details of the student who registered for the most number of courses?", "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "student_course_registrations"]}}
{"sample_id": 104, "db_id": "student_assessment", "final": {"question": "What are all details of the students who registered but did not attend any course?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_attendance", "student_course_registrations"]}}
{"sample_id": 124, "db_id": "bike_1", "final": {"question": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "source_tables": ["weather"]}}
{"sample_id": 118, "db_id": "bike_1", "final": {"question": "What is the average latitude and longitude in San Jose?", "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "source_tables": ["station"]}}
{"sample_id": 206, "db_id": "bike_1", "final": {"question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "source_tables": ["trip", "weather"]}}
{"sample_id": 188, "db_id": "bike_1", "final": {"question": "What are the ids of the trips that lasted the longest and how long did they last?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "source_tables": ["trip"]}}
{"sample_id": 176, "db_id": "bike_1", "final": {"question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "source_tables": ["weather"]}}
{"sample_id": 193, "db_id": "bike_1", "final": {"question": "List all the distinct stations from which a trip of duration below 100 started.", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}}
{"sample_id": 210, "db_id": "bike_1", "final": {"question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "source_tables": ["trip", "station"]}}
{"sample_id": 126, "db_id": "bike_1", "final": {"question": "How many different bike ids are there?", "sql": "SELECT count(DISTINCT bike_id) FROM trip", "source_tables": ["trip"]}}
{"sample_id": 157, "db_id": "bike_1", "final": {"question": "For each zip code, return how many times max wind speed reached 25?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "source_tables": ["weather"]}}
{"sample_id": 146, "db_id": "bike_1", "final": {"question": "What are the 3 most common cloud covers in the zip code of 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "source_tables": ["weather"]}}
{"sample_id": 179, "db_id": "bike_1", "final": {"question": "Find the ids and names of stations from which at least 200 trips started.", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "source_tables": ["trip"]}}
{"sample_id": 129, "db_id": "bike_1", "final": {"question": "How many stations does Mountain View city has?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "source_tables": ["station"]}}
{"sample_id": 199, "db_id": "bike_1", "final": {"question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}}
{"sample_id": 202, "db_id": "bike_1", "final": {"question": "What are the days that had the smallest temperature range, and what was that range?", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 177, "db_id": "bike_1", "final": {"question": "List the name and the number of stations for all the cities that have at least 15 stations.", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "source_tables": ["station"]}}
{"sample_id": 198, "db_id": "bike_1", "final": {"question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}}
{"sample_id": 127, "db_id": "bike_1", "final": {"question": "What is the number of distinct cities the stations are located at?", "sql": "SELECT count(DISTINCT city) FROM station", "source_tables": ["station"]}}
{"sample_id": 189, "db_id": "bike_1", "final": {"question": "For each station, return its longitude and the average duration of trips that started from the station.", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 154, "db_id": "bike_1", "final": {"question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "source_tables": ["weather"]}}
{"sample_id": 148, "db_id": "bike_1", "final": {"question": "What is the zip code that has the lowest average mean sea level pressure?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 182, "db_id": "bike_1", "final": {"question": "For each zip code, select all those that have an average mean visiblity below 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "source_tables": ["weather"]}}
{"sample_id": 172, "db_id": "bike_1", "final": {"question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "source_tables": ["station", "status"]}}
{"sample_id": 205, "db_id": "bike_1", "final": {"question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "source_tables": ["trip", "weather"]}}
{"sample_id": 139, "db_id": "bike_1", "final": {"question": "What is the latitude, longitude, city of the station from which the shortest trip started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "source_tables": ["trip", "station"]}}
{"sample_id": 134, "db_id": "bike_1", "final": {"question": "What are the start station's name and id for the one that had the most start trips in August?", "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}}
{"sample_id": 125, "db_id": "bike_1", "final": {"question": "From the trip record, find the number of unique bikes.", "sql": "SELECT count(DISTINCT bike_id) FROM trip", "source_tables": ["trip"]}}
{"sample_id": 158, "db_id": "bike_1", "final": {"question": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "source_tables": ["weather"]}}
{"sample_id": 195, "db_id": "bike_1", "final": {"question": "Find all the zip codes in which the max dew point have never reached 70.", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}}
{"sample_id": 204, "db_id": "bike_1", "final": {"question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "source_tables": ["station", "status"]}}
{"sample_id": 169, "db_id": "bike_1", "final": {"question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "source_tables": ["station", "status"]}}
{"sample_id": 175, "db_id": "bike_1", "final": {"question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "source_tables": ["weather"]}}
{"sample_id": 178, "db_id": "bike_1", "final": {"question": "What is the name of every city that has at least 15 stations and how many stations does it have?", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "source_tables": ["station"]}}
{"sample_id": 132, "db_id": "bike_1", "final": {"question": "What are the different names for each station that has ever had 7 bikes available?", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "source_tables": ["station", "status"]}}
{"sample_id": 200, "db_id": "bike_1", "final": {"question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}}
{"sample_id": 192, "db_id": "bike_1", "final": {"question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 166, "db_id": "bike_1", "final": {"question": "How many trips did not end in San Francisco?", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"", "source_tables": ["trip", "station"]}}
{"sample_id": 116, "db_id": "bike_1", "final": {"question": "What is the station station and end station for the trips with the three smallest ids?", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "source_tables": ["trip"]}}
{"sample_id": 163, "db_id": "bike_1", "final": {"question": "Which trip started from the station with the largest dock count? Give me the trip id.", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "source_tables": ["trip", "station"]}}
{"sample_id": 165, "db_id": "bike_1", "final": {"question": "Count the number of trips that did not end in San Francisco city.", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"", "source_tables": ["trip", "station"]}}
{"sample_id": 191, "db_id": "bike_1", "final": {"question": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 174, "db_id": "bike_1", "final": {"question": "What is the name, latitude, and city of the station that is located the furthest South?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "source_tables": ["station"]}}
{"sample_id": 187, "db_id": "bike_1", "final": {"question": "What are the ids and durations of the trips with the top 3 durations?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "source_tables": ["trip"]}}
{"sample_id": 190, "db_id": "bike_1", "final": {"question": "For each start station id, what is its name, longitude and average duration of trips started there?", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 203, "db_id": "bike_1", "final": {"question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "source_tables": ["station", "status"]}}
{"sample_id": 147, "db_id": "bike_1", "final": {"question": "What is the zip code in which the average mean sea level pressure is the lowest?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 133, "db_id": "bike_1", "final": {"question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}}
{"sample_id": 164, "db_id": "bike_1", "final": {"question": "What is the id of the trip that started from the station with the highest dock count?", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "source_tables": ["trip", "station"]}}
{"sample_id": 119, "db_id": "bike_1", "final": {"question": "What is the id of the trip that has the shortest duration?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "source_tables": ["trip"]}}
{"sample_id": 138, "db_id": "bike_1", "final": {"question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "source_tables": ["weather"]}}
{"sample_id": 128, "db_id": "bike_1", "final": {"question": "How many different cities have these stations?", "sql": "SELECT count(DISTINCT city) FROM station", "source_tables": ["station"]}}
{"sample_id": 207, "db_id": "bike_1", "final": {"question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "source_tables": ["trip", "station"]}}
{"sample_id": 197, "db_id": "bike_1", "final": {"question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}}
{"sample_id": 162, "db_id": "bike_1", "final": {"question": "What is the installation date for each ending station on all the trips?", "sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "source_tables": ["trip", "station"]}}
{"sample_id": 168, "db_id": "bike_1", "final": {"question": "On which day has it neither been foggy nor rained in the zip code of 94107?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "source_tables": ["weather"]}}
{"sample_id": 114, "db_id": "bike_1", "final": {"question": "For each city, what is the highest latitude for its stations?", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "source_tables": ["station"]}}
{"sample_id": 161, "db_id": "bike_1", "final": {"question": "For each trip, return its ending station's installation date.", "sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "source_tables": ["trip", "station"]}}
{"sample_id": 153, "db_id": "bike_1", "final": {"question": "When and in what zip code did max temperature reach 80?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "source_tables": ["weather"]}}
{"sample_id": 184, "db_id": "bike_1", "final": {"question": "For each city, list their names in decreasing order by their highest station latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "source_tables": ["station"]}}
{"sample_id": 110, "db_id": "bike_1", "final": {"question": "What are the dates with a maximum temperature higher than 85?", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "source_tables": ["weather"]}}
{"sample_id": 209, "db_id": "bike_1", "final": {"question": "How many trips started from Mountain View city and ended at Palo Alto city?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "source_tables": ["trip", "station"]}}
{"sample_id": 130, "db_id": "bike_1", "final": {"question": "How many stations are in Mountain View?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "source_tables": ["station"]}}
{"sample_id": 183, "db_id": "bike_1", "final": {"question": "List all the cities in a decreasing order of each city's stations' highest latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "source_tables": ["station"]}}
{"sample_id": 225, "db_id": "book_2", "final": {"question": "Show publishers that have more than one publication.", "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1", "source_tables": ["publication"]}}
{"sample_id": 230, "db_id": "book_2", "final": {"question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "source_tables": ["publication"]}}
{"sample_id": 226, "db_id": "book_2", "final": {"question": "Show different publishers together with the number of publications they have.", "sql": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher", "source_tables": ["publication"]}}
{"sample_id": 233, "db_id": "book_2", "final": {"question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "sql": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"", "source_tables": ["publication"]}}
{"sample_id": 221, "db_id": "book_2", "final": {"question": "List the publication dates of publications with 3 lowest prices.", "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "source_tables": ["publication"]}}
{"sample_id": 213, "db_id": "book_2", "final": {"question": "How many books are there?", "sql": "SELECT count(*) FROM book", "source_tables": ["book"]}}
{"sample_id": 219, "db_id": "book_2", "final": {"question": "What are the distinct publishers of publications with price higher than 5000000?", "sql": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000", "source_tables": ["publication"]}}
{"sample_id": 215, "db_id": "book_2", "final": {"question": "List the titles of the books in ascending order of issues.", "sql": "SELECT Title FROM book ORDER BY Issues ASC", "source_tables": ["book"]}}
{"sample_id": 222, "db_id": "book_2", "final": {"question": "Show the title and publication dates of books.", "sql": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID", "source_tables": ["publication", "book"]}}
{"sample_id": 228, "db_id": "book_2", "final": {"question": "List the writers who have written more than one book.", "sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "source_tables": ["book"]}}
{"sample_id": 214, "db_id": "book_2", "final": {"question": "List the writers of the books in ascending alphabetical order.", "sql": "SELECT Writer FROM book ORDER BY Writer ASC", "source_tables": ["book"]}}
{"sample_id": 231, "db_id": "book_2", "final": {"question": "What is the number of distinct publication dates?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "source_tables": ["publication"]}}
{"sample_id": 247, "db_id": "musical", "final": {"question": "Return the names of musicals who have the nominee Bob Fosse.", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "source_tables": ["musical"]}}
{"sample_id": 273, "db_id": "musical", "final": {"question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"", "source_tables": ["musical"]}}
{"sample_id": 250, "db_id": "musical", "final": {"question": "Show names of actors and names of musicals they are in.", "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "source_tables": ["musical", "actor"]}}
{"sample_id": 246, "db_id": "musical", "final": {"question": "What are the names of musicals with nominee \"Bob Fosse\"?", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "source_tables": ["musical"]}}
{"sample_id": 238, "db_id": "musical", "final": {"question": "What are the characters and duration of actors?", "sql": "SELECT Character ,  Duration FROM actor", "source_tables": ["actor"]}}
{"sample_id": 248, "db_id": "musical", "final": {"question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "source_tables": ["musical"]}}
{"sample_id": 239, "db_id": "musical", "final": {"question": "Return the characters and durations for each actor.", "sql": "SELECT Character ,  Duration FROM actor", "source_tables": ["actor"]}}
{"sample_id": 255, "db_id": "musical", "final": {"question": "What are the names of actors ordered descending by the year in which their musical was awarded?", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "source_tables": ["musical", "actor"]}}
{"sample_id": 261, "db_id": "musical", "final": {"question": "How many musicals has each nominee been nominated for?", "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "source_tables": ["musical"]}}
{"sample_id": 235, "db_id": "musical", "final": {"question": "Count the number of actors.", "sql": "SELECT count(*) FROM actor", "source_tables": ["actor"]}}
{"sample_id": 254, "db_id": "musical", "final": {"question": "Show names of actors in descending order of the year their musical is awarded.", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "source_tables": ["musical", "actor"]}}
{"sample_id": 237, "db_id": "musical", "final": {"question": "What are the names of actors, ordered alphabetically?", "sql": "SELECT Name FROM actor ORDER BY Name ASC", "source_tables": ["actor"]}}
{"sample_id": 260, "db_id": "musical", "final": {"question": "Show different nominees and the number of musicals they have been nominated.", "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "source_tables": ["musical"]}}
{"sample_id": 265, "db_id": "musical", "final": {"question": "Return the most frequent result across all musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}}
{"sample_id": 245, "db_id": "musical", "final": {"question": "Return the duration of the actor with the greatest age.", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "source_tables": ["actor"]}}
{"sample_id": 257, "db_id": "musical", "final": {"question": "How many actors have appeared in each musical?", "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "source_tables": ["musical", "actor"]}}
{"sample_id": 266, "db_id": "musical", "final": {"question": "List the nominees that have been nominated more than two musicals.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}}
{"sample_id": 243, "db_id": "musical", "final": {"question": "Return the characters for actors, ordered by age descending.", "sql": "SELECT Character FROM actor ORDER BY age DESC", "source_tables": ["actor"]}}
{"sample_id": 256, "db_id": "musical", "final": {"question": "Show names of musicals and the number of actors who have appeared in the musicals.", "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "source_tables": ["musical", "actor"]}}
{"sample_id": 244, "db_id": "musical", "final": {"question": "What is the duration of the oldest actor?", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "source_tables": ["actor"]}}
{"sample_id": 267, "db_id": "musical", "final": {"question": "Who are the nominees who have been nominated more than two times?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}}
{"sample_id": 258, "db_id": "musical", "final": {"question": "Show names of musicals which have at least three actors.", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "source_tables": ["musical", "actor"]}}
{"sample_id": 251, "db_id": "musical", "final": {"question": "What are the names of actors and the musicals that they are in?", "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "source_tables": ["musical", "actor"]}}
{"sample_id": 272, "db_id": "musical", "final": {"question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"", "source_tables": ["musical"]}}
{"sample_id": 283, "db_id": "twitter_1", "final": {"question": "Return the text of tweets about the topic 'intern'.", "sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "source_tables": ["tweets"]}}
{"sample_id": 286, "db_id": "twitter_1", "final": {"question": "Find the name and email for the users who have more than one follower.", "sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "source_tables": ["user_profiles", "follows"]}}
{"sample_id": 285, "db_id": "twitter_1", "final": {"question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "source_tables": ["user_profiles", "follows"]}}
{"sample_id": 280, "db_id": "twitter_1", "final": {"question": "Find the number of users who posted some tweets.", "sql": "SELECT count(DISTINCT UID) FROM tweets", "source_tables": ["tweets"]}}
{"sample_id": 287, "db_id": "twitter_1", "final": {"question": "Find the names of users who have more than one tweet.", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 275, "db_id": "twitter_1", "final": {"question": "What is the partition id of the user named \"Iron Man\".", "sql": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "source_tables": ["user_profiles"]}}
{"sample_id": 278, "db_id": "twitter_1", "final": {"question": "Find the number of followers for each user.", "sql": "SELECT count(*) FROM follows GROUP BY f1", "source_tables": ["follows"]}}
{"sample_id": 297, "db_id": "twitter_1", "final": {"question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 291, "db_id": "twitter_1", "final": {"question": "Find the name and email of the user followed by the least number of people.", "sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "source_tables": ["user_profiles"]}}
{"sample_id": 299, "db_id": "twitter_1", "final": {"question": "Find the average number of followers for the users who had some tweets.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 294, "db_id": "twitter_1", "final": {"question": "List the text of all tweets in the order of date.", "sql": "SELECT text FROM tweets ORDER BY createdate", "source_tables": ["tweets"]}}
{"sample_id": 288, "db_id": "twitter_1", "final": {"question": "Find the id of users who are followed by Mary and Susan.", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"", "source_tables": ["user_profiles", "follows"]}}
{"sample_id": 295, "db_id": "twitter_1", "final": {"question": "Find the name of each user and number of tweets tweeted by each of them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 279, "db_id": "twitter_1", "final": {"question": "Find the number of tweets in record.", "sql": "SELECT count(*) FROM tweets", "source_tables": ["tweets"]}}
{"sample_id": 277, "db_id": "twitter_1", "final": {"question": "How many followers does each user have?", "sql": "SELECT count(*) FROM follows", "source_tables": ["follows"]}}
{"sample_id": 281, "db_id": "twitter_1", "final": {"question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.", "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "source_tables": ["user_profiles"]}}
{"sample_id": 318, "db_id": "product_catalog", "final": {"question": "Find the entry name of the catalog with the highest price (in USD).", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "source_tables": ["catalog_contents"]}}
{"sample_id": 334, "db_id": "product_catalog", "final": {"question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"]}}
{"sample_id": 330, "db_id": "product_catalog", "final": {"question": "What are the names of catalog entries with level number 8?", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}}
{"sample_id": 311, "db_id": "product_catalog", "final": {"question": "Which catalog publisher has published the most catalogs?", "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["catalogs"]}}
{"sample_id": 309, "db_id": "product_catalog", "final": {"question": "Find all the catalog publishers whose name contains \"Murray\"", "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"", "source_tables": ["catalogs"]}}
{"sample_id": 332, "db_id": "product_catalog", "final": {"question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "source_tables": ["catalog_contents"]}}
{"sample_id": 326, "db_id": "product_catalog", "final": {"question": "Which catalog content has the smallest capacity? Return the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "source_tables": ["catalog_contents"]}}
{"sample_id": 310, "db_id": "product_catalog", "final": {"question": "Which catalog publishers have substring \"Murray\" in their names?", "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"", "source_tables": ["catalogs"]}}
{"sample_id": 338, "db_id": "product_catalog", "final": {"question": "On which days more than one revisions were made on catalogs.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}}
{"sample_id": 331, "db_id": "product_catalog", "final": {"question": "Find the names of the products with length smaller than 3 or height greater than 5.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "source_tables": ["catalog_contents"]}}
{"sample_id": 328, "db_id": "product_catalog", "final": {"question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"", "source_tables": ["catalog_contents"]}}
{"sample_id": 315, "db_id": "product_catalog", "final": {"question": "What are the entry names of catalog with the attribute possessed by most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}}
{"sample_id": 327, "db_id": "product_catalog", "final": {"question": "Find the names of all the products whose stock number starts with \"2\".", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"", "source_tables": ["catalog_contents"]}}
{"sample_id": 329, "db_id": "product_catalog", "final": {"question": "Find the names of catalog entries with level number 8.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}}
{"sample_id": 324, "db_id": "product_catalog", "final": {"question": "Which catalog content has the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "source_tables": ["catalog_contents"]}}
{"sample_id": 305, "db_id": "product_catalog", "final": {"question": "What is the attribute data type of the attribute with name \"Green\"?", "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"", "source_tables": ["attribute_definitions"]}}
{"sample_id": 302, "db_id": "product_catalog", "final": {"question": "What are all the catalog entry names?", "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 337, "db_id": "product_catalog", "final": {"question": "Find the dates on which more than one revisions were made.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}}
{"sample_id": 313, "db_id": "product_catalog", "final": {"question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "source_tables": ["catalogs", "catalog_structure"]}}
{"sample_id": 335, "db_id": "product_catalog", "final": {"question": "Find the name and capacity of products with price greater than 700 (in USD).", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}}
{"sample_id": 306, "db_id": "product_catalog", "final": {"question": "Find the attribute data type for the attribute named \"Green\".", "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"", "source_tables": ["attribute_definitions"]}}
{"sample_id": 340, "db_id": "product_catalog", "final": {"question": "Find the total number of catalog contents.", "sql": "SELECT count(*) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 325, "db_id": "product_catalog", "final": {"question": "Find the name of the product that has the smallest capacity.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "source_tables": ["catalog_contents"]}}
{"sample_id": 323, "db_id": "product_catalog", "final": {"question": "What is the product with the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "source_tables": ["catalog_contents"]}}
{"sample_id": 322, "db_id": "product_catalog", "final": {"question": "Give me the average and minimum price (in Euro) of the products.", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 426, "db_id": "flight_1", "final": {"question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 371, "db_id": "flight_1", "final": {"question": "What is average and maximum salary of all employees.", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "source_tables": ["employee"]}}
{"sample_id": 353, "db_id": "flight_1", "final": {"question": "What is the minimum, average, and maximum distance of all aircrafts.", "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 431, "db_id": "flight_1", "final": {"question": "Show the name of aircraft which fewest people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 361, "db_id": "flight_1", "final": {"question": "How many employees do we have?", "sql": "SELECT count(*) FROM Employee", "source_tables": ["employee"]}}
{"sample_id": 416, "db_id": "flight_1", "final": {"question": "What is the name of each aircraft and how many flights does each one complete?", "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 411, "db_id": "flight_1", "final": {"question": "What is the aircraft name for the flight with number 99", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 410, "db_id": "flight_1", "final": {"question": "What destination has the fewest number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 373, "db_id": "flight_1", "final": {"question": "Show the id and name of the employee with maximum salary.", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"]}}
{"sample_id": 415, "db_id": "flight_1", "final": {"question": "Show aircraft names and number of flights for each aircraft.", "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 413, "db_id": "flight_1", "final": {"question": "Show all flight numbers with aircraft Airbus A340-300.", "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 436, "db_id": "flight_1", "final": {"question": "What is the salaray and name of the employee that is certified to fly the most planes?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate"]}}
{"sample_id": 383, "db_id": "flight_1", "final": {"question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "source_tables": ["flight"]}}
{"sample_id": 433, "db_id": "flight_1", "final": {"question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 407, "db_id": "flight_1", "final": {"question": "Which origin has most number of flights?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 391, "db_id": "flight_1", "final": {"question": "Show flight number for all flights with more than 2000 distance.", "sql": "SELECT flno FROM Flight WHERE distance  >  2000", "source_tables": ["flight"]}}
{"sample_id": 352, "db_id": "flight_1", "final": {"question": "What is the name and distance for the aircraft that has an id of 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "source_tables": ["aircraft"]}}
{"sample_id": 401, "db_id": "flight_1", "final": {"question": "What is the average distance and average price for flights from Los Angeles.", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "source_tables": ["flight"]}}
{"sample_id": 403, "db_id": "flight_1", "final": {"question": "Show all origins and the number of flights from each origin.", "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "source_tables": ["flight"]}}
{"sample_id": 386, "db_id": "flight_1", "final": {"question": "What are the numbers of all flights coming from Los Angeles?", "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"", "source_tables": ["flight"]}}
{"sample_id": 345, "db_id": "flight_1", "final": {"question": "Show name and distance for all aircrafts.", "sql": "SELECT name ,  distance FROM Aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 404, "db_id": "flight_1", "final": {"question": "For each origin, how many flights came from there?", "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "source_tables": ["flight"]}}
{"sample_id": 424, "db_id": "flight_1", "final": {"question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 423, "db_id": "flight_1", "final": {"question": "Show names for all aircrafts of which John Williams has certificates.", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 398, "db_id": "flight_1", "final": {"question": "What is the flight number and its distance for the one with the maximum price?", "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 346, "db_id": "flight_1", "final": {"question": "What are the names and distances for all airplanes?", "sql": "SELECT name ,  distance FROM Aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 399, "db_id": "flight_1", "final": {"question": "Show the flight number of flights with three lowest distances.", "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "source_tables": ["flight"]}}
{"sample_id": 347, "db_id": "flight_1", "final": {"question": "Show ids for all aircrafts with more than 1000 distance.", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "source_tables": ["aircraft"]}}
{"sample_id": 372, "db_id": "flight_1", "final": {"question": "What is the average and largest salary of all employees?", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "source_tables": ["employee"]}}
{"sample_id": 422, "db_id": "flight_1", "final": {"question": "What are the ids of all employees that don't have certificates?", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}}
{"sample_id": 406, "db_id": "flight_1", "final": {"question": "What are the destinations and number of flights to each one?", "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "source_tables": ["flight"]}}
{"sample_id": 363, "db_id": "flight_1", "final": {"question": "Show name and salary for all employees sorted by salary.", "sql": "SELECT name ,  salary FROM Employee ORDER BY salary", "source_tables": ["employee"]}}
{"sample_id": 394, "db_id": "flight_1", "final": {"question": "What is the average price for flights from LA to Honolulu?", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "source_tables": ["flight"]}}
{"sample_id": 412, "db_id": "flight_1", "final": {"question": "What is the name of the aircraft that was on flight number 99?", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 393, "db_id": "flight_1", "final": {"question": "What is the average price for flights from Los Angeles to Honolulu.", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "source_tables": ["flight"]}}
{"sample_id": 437, "db_id": "flight_1", "final": {"question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 380, "db_id": "flight_1", "final": {"question": "What is the id and salary of the employee named Mark Young?", "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "source_tables": ["employee"]}}
{"sample_id": 382, "db_id": "flight_1", "final": {"question": "What is the number of flights?", "sql": "SELECT count(*) FROM Flight", "source_tables": ["flight"]}}
{"sample_id": 432, "db_id": "flight_1", "final": {"question": "What are the names of the aircraft that the least people are certified to fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 364, "db_id": "flight_1", "final": {"question": "What is the name and salary of all employees in order of salary?", "sql": "SELECT name ,  salary FROM Employee ORDER BY salary", "source_tables": ["employee"]}}
{"sample_id": 418, "db_id": "flight_1", "final": {"question": "What are the names for all aircrafts with at least 2 flights?", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 419, "db_id": "flight_1", "final": {"question": "How many employees have certificate.", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}}
{"sample_id": 414, "db_id": "flight_1", "final": {"question": "What are the flight numbers for the aircraft Airbus A340-300?", "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 376, "db_id": "flight_1", "final": {"question": "What is the name of the 3 employees who get paid the least?", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "source_tables": ["employee"]}}
{"sample_id": 370, "db_id": "flight_1", "final": {"question": "What is the name and salary of the employee with the id 242518965?", "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "source_tables": ["employee"]}}
{"sample_id": 357, "db_id": "flight_1", "final": {"question": "Show the name of aircrafts with top three lowest distances.", "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "source_tables": ["aircraft"]}}
{"sample_id": 417, "db_id": "flight_1", "final": {"question": "Show names for all aircraft with at least two flights.", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "source_tables": ["aircraft", "flight"]}}
{"sample_id": 354, "db_id": "flight_1", "final": {"question": "Return the minimum, average and maximum distances traveled across all aircrafts.", "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 356, "db_id": "flight_1", "final": {"question": "What is the id and name of the aircraft that can cover the maximum distance?", "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "source_tables": ["aircraft"]}}
{"sample_id": 358, "db_id": "flight_1", "final": {"question": "What are the aircrafts with top 3 shortest lengthes? List their names.", "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "source_tables": ["aircraft"]}}
{"sample_id": 421, "db_id": "flight_1", "final": {"question": "Show ids for all employees who don't have a certificate.", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}}
{"sample_id": 350, "db_id": "flight_1", "final": {"question": "What is the count of aircrafts that have a distance between 1000 and 5000?", "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "source_tables": ["aircraft"]}}
{"sample_id": 343, "db_id": "flight_1", "final": {"question": "How many aircrafts do we have?", "sql": "SELECT count(*) FROM Aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 362, "db_id": "flight_1", "final": {"question": "What is the number of employees?", "sql": "SELECT count(*) FROM Employee", "source_tables": ["employee"]}}
{"sample_id": 387, "db_id": "flight_1", "final": {"question": "Show origins of all flights with destination Honolulu.", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "source_tables": ["flight"]}}
{"sample_id": 378, "db_id": "flight_1", "final": {"question": "What are the names of all employees who have a salary higher than average?", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "source_tables": ["employee"]}}
{"sample_id": 349, "db_id": "flight_1", "final": {"question": "How many aircrafts have distance between 1000 and 5000?", "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "source_tables": ["aircraft"]}}
{"sample_id": 522, "db_id": "allergy_1", "final": {"question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy", "source_tables": ["has_allergy", "allergy_type", "student"]}}
{"sample_id": 520, "db_id": "allergy_1", "final": {"question": "What are the last names and ages of the students who are allergic to milk and cat?", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 459, "db_id": "allergy_1", "final": {"question": "How many students are there?", "sql": "SELECT count(*) FROM Student", "source_tables": ["student"]}}
{"sample_id": 444, "db_id": "allergy_1", "final": {"question": "What are the different allergy types?", "sql": "SELECT DISTINCT allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 488, "db_id": "allergy_1", "final": {"question": "What student id corresponds to the oldest student?", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "source_tables": ["student"]}}
{"sample_id": 510, "db_id": "allergy_1", "final": {"question": "How many students who are female are allergic to milk or eggs?", "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 493, "db_id": "allergy_1", "final": {"question": "Show all ages and corresponding number of students.", "sql": "SELECT age ,  count(*) FROM Student GROUP BY age", "source_tables": ["student"]}}
{"sample_id": 525, "db_id": "allergy_1", "final": {"question": "Find the average age of the students who have allergies with food and animal types.", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 453, "db_id": "allergy_1", "final": {"question": "Show all allergy types and the number of allergies in each type.", "sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "source_tables": ["allergy_type"]}}
{"sample_id": 506, "db_id": "allergy_1", "final": {"question": "What are the students ids of students who have more than one allergy?", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "source_tables": ["has_allergy"]}}
{"sample_id": 498, "db_id": "allergy_1", "final": {"question": "How many students live in each city?", "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 491, "db_id": "allergy_1", "final": {"question": "Which major has most number of students?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 524, "db_id": "allergy_1", "final": {"question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 511, "db_id": "allergy_1", "final": {"question": "How many students have a food allergy?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 463, "db_id": "allergy_1", "final": {"question": "How many different advisors are listed?", "sql": "SELECT count(DISTINCT advisor) FROM Student", "source_tables": ["student"]}}
{"sample_id": 449, "db_id": "allergy_1", "final": {"question": "What is the type of allergy Cat?", "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"", "source_tables": ["allergy_type"]}}
{"sample_id": 484, "db_id": "allergy_1", "final": {"question": "What is the minimum, mean, and maximum age across all students?", "sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "source_tables": ["student"]}}
{"sample_id": 528, "db_id": "allergy_1", "final": {"question": "What is the full name of each student who is not allergic to any type of food.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 445, "db_id": "allergy_1", "final": {"question": "Show all allergies and their types.", "sql": "SELECT allergy ,  allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 447, "db_id": "allergy_1", "final": {"question": "Show all allergies with type food.", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "source_tables": ["allergy_type"]}}
{"sample_id": 468, "db_id": "allergy_1", "final": {"question": "What cities do students live in?", "sql": "SELECT DISTINCT city_code FROM Student", "source_tables": ["student"]}}
{"sample_id": 476, "db_id": "allergy_1", "final": {"question": "What are the student ids for students over 20 years old?", "sql": "SELECT StuID FROM Student WHERE age  >  20", "source_tables": ["student"]}}
{"sample_id": 480, "db_id": "allergy_1", "final": {"question": "Who advises student 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "source_tables": ["student"]}}
{"sample_id": 446, "db_id": "allergy_1", "final": {"question": "What are the allergies and their types?", "sql": "SELECT allergy ,  allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 455, "db_id": "allergy_1", "final": {"question": "Which allergy type has most number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["allergy_type"]}}
{"sample_id": 508, "db_id": "allergy_1", "final": {"question": "Which students are unaffected by allergies?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 478, "db_id": "allergy_1", "final": {"question": "Give the city that the student whose family name is Kim lives in.", "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"", "source_tables": ["student"]}}
{"sample_id": 456, "db_id": "allergy_1", "final": {"question": "Which allergy type is most common?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["allergy_type"]}}
{"sample_id": 503, "db_id": "allergy_1", "final": {"question": "How many students have cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "source_tables": ["has_allergy"]}}
{"sample_id": 474, "db_id": "allergy_1", "final": {"question": "How many students are 18 years old?", "sql": "SELECT count(*) FROM Student WHERE age  =  18", "source_tables": ["student"]}}
{"sample_id": 492, "db_id": "allergy_1", "final": {"question": "What is the largest major?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 452, "db_id": "allergy_1", "final": {"question": "How many animal type allergies exist?", "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "source_tables": ["allergy_type"]}}
{"sample_id": 469, "db_id": "allergy_1", "final": {"question": "Show first name, last name, age for all female students. Their sex is F.", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "source_tables": ["student"]}}
{"sample_id": 479, "db_id": "allergy_1", "final": {"question": "Who is the advisor of student with ID 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "source_tables": ["student"]}}
{"sample_id": 451, "db_id": "allergy_1", "final": {"question": "How many allergies have type animal?", "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "source_tables": ["allergy_type"]}}
{"sample_id": 518, "db_id": "allergy_1", "final": {"question": "How many students are affected by each allergy type?", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 504, "db_id": "allergy_1", "final": {"question": "How many students are affected by cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "source_tables": ["has_allergy"]}}
{"sample_id": 482, "db_id": "allergy_1", "final": {"question": "Give the number of students living in either HKG or CHI.", "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"", "source_tables": ["student"]}}
{"sample_id": 523, "db_id": "allergy_1", "final": {"question": "Find the first name and gender of the student who has allergy to milk but not cat.", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 441, "db_id": "allergy_1", "final": {"question": "How many different allergy types exist?", "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 515, "db_id": "allergy_1", "final": {"question": "Show all allergies with number of students affected.", "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "source_tables": ["has_allergy"]}}
{"sample_id": 475, "db_id": "allergy_1", "final": {"question": "Show all student ids who are older than 20.", "sql": "SELECT StuID FROM Student WHERE age  >  20", "source_tables": ["student"]}}
{"sample_id": 481, "db_id": "allergy_1", "final": {"question": "How many students live in HKG or CHI?", "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"", "source_tables": ["student"]}}
{"sample_id": 497, "db_id": "allergy_1", "final": {"question": "Show all cities and corresponding number of students.", "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 509, "db_id": "allergy_1", "final": {"question": "How many female students have milk or egg allergies?", "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 473, "db_id": "allergy_1", "final": {"question": "How many students are age 18?", "sql": "SELECT count(*) FROM Student WHERE age  =  18", "source_tables": ["student"]}}
{"sample_id": 450, "db_id": "allergy_1", "final": {"question": "What is allergy type of a cat allergy?", "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"", "source_tables": ["allergy_type"]}}
{"sample_id": 529, "db_id": "allergy_1", "final": {"question": "Find the number of male (sex is 'M') students who have some food type allery.", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 458, "db_id": "allergy_1", "final": {"question": "Which allergy type is the least common?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "source_tables": ["allergy_type"]}}
{"sample_id": 465, "db_id": "allergy_1", "final": {"question": "Show all majors.", "sql": "SELECT DISTINCT Major FROM Student", "source_tables": ["student"]}}
{"sample_id": 532, "db_id": "allergy_1", "final": {"question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 466, "db_id": "allergy_1", "final": {"question": "What are the different majors?", "sql": "SELECT DISTINCT Major FROM Student", "source_tables": ["student"]}}
{"sample_id": 487, "db_id": "allergy_1", "final": {"question": "Show the student id of the oldest student.", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "source_tables": ["student"]}}
{"sample_id": 440, "db_id": "allergy_1", "final": {"question": "How many allergy entries are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 519, "db_id": "allergy_1", "final": {"question": "Find the last name and age of the student who has allergy to both milk and cat.", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 462, "db_id": "allergy_1", "final": {"question": "What are the full names of all students", "sql": "SELECT Fname ,  Lname FROM Student", "source_tables": ["student"]}}
{"sample_id": 512, "db_id": "allergy_1", "final": {"question": "How many students are affected by food related allergies?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 442, "db_id": "allergy_1", "final": {"question": "How many distinct allergies are there?", "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 584, "db_id": "store_1", "final": {"question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "source_tables": ["albums", "artists"]}}
{"sample_id": 551, "db_id": "store_1", "final": {"question": "List every album's title.", "sql": "SELECT title FROM albums;", "source_tables": ["albums"]}}
{"sample_id": 600, "db_id": "store_1", "final": {"question": "What si the youngest employee's first and last name?", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "source_tables": ["employees"]}}
{"sample_id": 592, "db_id": "store_1", "final": {"question": "What is Nancy Edwards's address?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 601, "db_id": "store_1", "final": {"question": "List top 10 employee work longest in the company. List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "source_tables": ["employees"]}}
{"sample_id": 599, "db_id": "store_1", "final": {"question": "Who is the youngest employee in the company? List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "source_tables": ["employees"]}}
{"sample_id": 570, "db_id": "store_1", "final": {"question": "What are the titles of all the Aerosmith albums?", "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";", "source_tables": ["albums", "artists"]}}
{"sample_id": 638, "db_id": "store_1", "final": {"question": "What are the names of all playlists that have more than 100 tracks?", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "source_tables": ["playlist_tracks", "playlists"]}}
{"sample_id": 606, "db_id": "store_1", "final": {"question": "What are the first and last names of all the employees and how many people report to them?", "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "source_tables": ["employees"]}}
{"sample_id": 596, "db_id": "store_1", "final": {"question": "How many employees live in Canada?", "sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "source_tables": ["employees"]}}
{"sample_id": 562, "db_id": "store_1", "final": {"question": "How many invoices were billed from Chicago, IL?", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "source_tables": ["invoices"]}}
{"sample_id": 568, "db_id": "store_1", "final": {"question": "What is the number of invoices and total money billed in them from CA?", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "source_tables": ["invoices"]}}
{"sample_id": 627, "db_id": "store_1", "final": {"question": "List title of albums have the number of tracks greater than 10.", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["albums", "tracks"]}}
{"sample_id": 586, "db_id": "store_1", "final": {"question": "What is the count of customers that Steve Johnson supports?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "source_tables": ["customers", "employees"]}}
{"sample_id": 647, "db_id": "store_1", "final": {"question": "Find number of tracks in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "source_tables": ["genres", "tracks"]}}
{"sample_id": 617, "db_id": "store_1", "final": {"question": "Who is the composer of track Fast As a Shark?", "sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "source_tables": ["tracks"]}}
{"sample_id": 539, "db_id": "store_1", "final": {"question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "source_tables": ["invoices"]}}
{"sample_id": 557, "db_id": "store_1", "final": {"question": "List the customers first and last name of 10 least expensive invoices.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 644, "db_id": "store_1", "final": {"question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "playlists", "tracks"]}}
{"sample_id": 587, "db_id": "store_1", "final": {"question": "What is the title, phone and hire date of Nancy Edwards?", "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 634, "db_id": "store_1", "final": {"question": "What are the names of the tracks that are Rock or Jazz songs?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"", "source_tables": ["genres", "tracks"]}}
{"sample_id": 569, "db_id": "store_1", "final": {"question": "List Aerosmith's albums.", "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";", "source_tables": ["albums", "artists"]}}
{"sample_id": 604, "db_id": "store_1", "final": {"question": "How many employees who are IT staff are from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "source_tables": ["employees"]}}
{"sample_id": 648, "db_id": "store_1", "final": {"question": "How many tracks are in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "source_tables": ["genres", "tracks"]}}
{"sample_id": 542, "db_id": "store_1", "final": {"question": "What are the names of the countries and average invoice size of the top countries by size?", "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "source_tables": ["invoices"]}}
{"sample_id": 577, "db_id": "store_1", "final": {"question": "How many customers live in Prague city?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "source_tables": ["customers"]}}
{"sample_id": 540, "db_id": "store_1", "final": {"question": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "source_tables": ["invoices"]}}
{"sample_id": 581, "db_id": "store_1", "final": {"question": "What country does Roberto Almeida live?", "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";", "source_tables": ["customers"]}}
{"sample_id": 611, "db_id": "store_1", "final": {"question": "List all media types.", "sql": "SELECT name FROM media_types;", "source_tables": ["media_types"]}}
{"sample_id": 590, "db_id": "store_1", "final": {"question": "What is the first and last name of the employee who reports to Nancy Edwards?", "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 625, "db_id": "store_1", "final": {"question": "List name of all tracks in Balls to the Wall.", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "source_tables": ["albums", "tracks"]}}
{"sample_id": 556, "db_id": "store_1", "final": {"question": "What are the titles of all albums that start with A in alphabetical order?", "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "source_tables": ["albums"]}}
{"sample_id": 558, "db_id": "store_1", "final": {"question": "What are the first and last names of the customers with the 10 cheapest invoices?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 537, "db_id": "store_1", "final": {"question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["invoices"]}}
{"sample_id": 544, "db_id": "store_1", "final": {"question": "What are the first and last names of the 5 customers who purchased something most recently?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 621, "db_id": "store_1", "final": {"question": "What is the name of tracks whose genre is Rock?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";", "source_tables": ["genres", "tracks"]}}
{"sample_id": 646, "db_id": "store_1", "final": {"question": "What are the names of all the tracks that are in both the Movies and music playlists?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "playlists", "tracks"]}}
{"sample_id": 632, "db_id": "store_1", "final": {"question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";", "source_tables": ["media_types", "genres", "tracks"]}}
{"sample_id": 629, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";", "source_tables": ["media_types", "genres", "tracks"]}}
{"sample_id": 538, "db_id": "store_1", "final": {"question": "What are the top 5 countries by number of invoices and how many do they have?", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["invoices"]}}
{"sample_id": 563, "db_id": "store_1", "final": {"question": "List the number of invoices from the US, grouped by state.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;", "source_tables": ["invoices"]}}
{"sample_id": 610, "db_id": "store_1", "final": {"question": "How much money did Lucas Mancini spend?", "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "source_tables": ["customers", "invoices"]}}
{"sample_id": 603, "db_id": "store_1", "final": {"question": "Find the number of employees whose title is IT Staff from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "source_tables": ["employees"]}}
{"sample_id": 576, "db_id": "store_1", "final": {"question": "What is the email and phone number of Astrid Gruber the customer?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "source_tables": ["customers"]}}
{"sample_id": 628, "db_id": "store_1", "final": {"question": "What are the names of the albums that have more than 10 tracks?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["albums", "tracks"]}}
{"sample_id": 582, "db_id": "store_1", "final": {"question": "In which country does Roberto Almeida?", "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";", "source_tables": ["customers"]}}
{"sample_id": 543, "db_id": "store_1", "final": {"question": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 574, "db_id": "store_1", "final": {"question": "What is the company where Eduardo Martins is a customer?", "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "source_tables": ["customers"]}}
{"sample_id": 641, "db_id": "store_1", "final": {"question": "How much is the track Fast As a Shark?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "source_tables": ["tracks"]}}
{"sample_id": 580, "db_id": "store_1", "final": {"question": "How many customers are from California?", "sql": "SELECT count(*) FROM customers WHERE state = \"CA\";", "source_tables": ["customers"]}}
{"sample_id": 546, "db_id": "store_1", "final": {"question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 619, "db_id": "store_1", "final": {"question": "How long does track Fast As a Shark has?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "source_tables": ["tracks"]}}
{"sample_id": 631, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";", "source_tables": ["media_types", "genres", "tracks"]}}
{"sample_id": 583, "db_id": "store_1", "final": {"question": "List the name of albums that are released by aritist whose name has 'Led'", "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "source_tables": ["albums", "artists"]}}
{"sample_id": 554, "db_id": "store_1", "final": {"question": "What are the titles of all the albums alphabetically ascending?", "sql": "SELECT title FROM albums ORDER BY title;", "source_tables": ["albums"]}}
{"sample_id": 547, "db_id": "store_1", "final": {"question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 579, "db_id": "store_1", "final": {"question": "How many customers in state of CA?", "sql": "SELECT count(*) FROM customers WHERE state = \"CA\";", "source_tables": ["customers"]}}
{"sample_id": 565, "db_id": "store_1", "final": {"question": "List the state in the US with the most invoices.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["invoices"]}}
{"sample_id": 608, "db_id": "store_1", "final": {"question": "How many orders does Luca Mancini have in his invoices?", "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "source_tables": ["customers", "invoices"]}}
{"sample_id": 571, "db_id": "store_1", "final": {"question": "How many albums does Billy Cobham has?", "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";", "source_tables": ["albums", "artists"]}}
{"sample_id": 541, "db_id": "store_1", "final": {"question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "source_tables": ["invoices"]}}
{"sample_id": 602, "db_id": "store_1", "final": {"question": "What are the first and last names of the top 10 longest-serving employees?", "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "source_tables": ["employees"]}}
{"sample_id": 567, "db_id": "store_1", "final": {"question": "List the number of invoices and the invoice total from California.", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "source_tables": ["invoices"]}}
{"sample_id": 550, "db_id": "store_1", "final": {"question": "How many tracks does each genre have and what are the names of the top 5?", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["genres", "tracks"]}}
{"sample_id": 613, "db_id": "store_1", "final": {"question": "List all different genre types.", "sql": "SELECT DISTINCT name FROM genres;", "source_tables": ["genres"]}}
{"sample_id": 594, "db_id": "store_1", "final": {"question": "What is the full name of the employee who has the most customers?", "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "employees"]}}
{"sample_id": 666, "db_id": "journal_committee", "final": {"question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "source_tables": ["journal_committee", "journal"]}}
{"sample_id": 650, "db_id": "journal_committee", "final": {"question": "List the names of editors in ascending order of age.", "sql": "SELECT Name FROM editor ORDER BY Age ASC", "source_tables": ["editor"]}}
{"sample_id": 661, "db_id": "journal_committee", "final": {"question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.", "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000", "source_tables": ["journal_committee", "editor", "journal"]}}
{"sample_id": 656, "db_id": "journal_committee", "final": {"question": "Please show the most common age of editors.", "sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["editor"]}}
{"sample_id": 655, "db_id": "journal_committee", "final": {"question": "What are the different ages of editors? Show each age along with the number of editors of that age.", "sql": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age", "source_tables": ["editor"]}}
{"sample_id": 657, "db_id": "journal_committee", "final": {"question": "Show the distinct themes of journals.", "sql": "SELECT DISTINCT Theme FROM journal", "source_tables": ["journal"]}}
{"sample_id": 652, "db_id": "journal_committee", "final": {"question": "List the names of editors who are older than 25.", "sql": "SELECT Name FROM editor WHERE Age  >  25", "source_tables": ["editor"]}}
{"sample_id": 651, "db_id": "journal_committee", "final": {"question": "What are the names and ages of editors?", "sql": "SELECT Name ,  Age FROM editor", "source_tables": ["editor"]}}
{"sample_id": 659, "db_id": "journal_committee", "final": {"question": "For each journal_committee, find the editor name and the journal theme.", "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "source_tables": ["journal_committee", "editor", "journal"]}}
{"sample_id": 662, "db_id": "journal_committee", "final": {"question": "Show the id, name of each editor and the number of journal committees they are on.", "sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id", "source_tables": ["editor", "journal_committee"]}}
{"sample_id": 670, "db_id": "customers_card_transactions", "final": {"question": "What are the account ids, customer ids, and account names for all the accounts?", "sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 728, "db_id": "customers_card_transactions", "final": {"question": "What are the ids and first names of customers who do not hold a credit card?", "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 744, "db_id": "customers_card_transactions", "final": {"question": "Return the type of transaction with the highest total amount.", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"]}}
{"sample_id": 732, "db_id": "customers_card_transactions", "final": {"question": "How many different card types are there?", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 685, "db_id": "customers_card_transactions", "final": {"question": "Show the first names and last names of customers without any account.", "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "accounts"]}}
{"sample_id": 710, "db_id": "customers_card_transactions", "final": {"question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 718, "db_id": "customers_card_transactions", "final": {"question": "Return the id and full name of the customer who has the fewest accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 708, "db_id": "customers_card_transactions", "final": {"question": "Count the number of customer cards of the type Debit.", "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"", "source_tables": ["customers_cards"]}}
{"sample_id": 742, "db_id": "customers_card_transactions", "final": {"question": "What are the different transaction types, and how many transactions of each have taken place?", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}}
{"sample_id": 717, "db_id": "customers_card_transactions", "final": {"question": "What is the customer id, first and last name with least number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 733, "db_id": "customers_card_transactions", "final": {"question": "Show all transaction types.", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 689, "db_id": "customers_card_transactions", "final": {"question": "How many customers have an account?", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 734, "db_id": "customers_card_transactions", "final": {"question": "What are the different types of transactions?", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 730, "db_id": "customers_card_transactions", "final": {"question": "What are the different card type codes?", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 673, "db_id": "customers_card_transactions", "final": {"question": "What is the first name, last name, and phone of the customer with account name 162?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 700, "db_id": "customers_card_transactions", "final": {"question": "What are card ids, customer ids, card types, and card numbers for each customer card?", "sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "source_tables": ["customers_cards"]}}
{"sample_id": 725, "db_id": "customers_card_transactions", "final": {"question": "Show all card type codes and the number of customers holding cards in each type.", "sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}}
{"sample_id": 737, "db_id": "customers_card_transactions", "final": {"question": "What is the average and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 743, "db_id": "customers_card_transactions", "final": {"question": "What is the transaction type that has processed the greatest total amount in transactions?", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"]}}
{"sample_id": 738, "db_id": "customers_card_transactions", "final": {"question": "Return the average transaction amount, as well as the total amount of all transactions.", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 740, "db_id": "customers_card_transactions", "final": {"question": "What are the different card types, and how many transactions have been made with each?", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "source_tables": ["customers_cards", "financial_transactions"]}}
{"sample_id": 709, "db_id": "customers_card_transactions", "final": {"question": "How many credit cards does customer Blanche Huels have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 711, "db_id": "customers_card_transactions", "final": {"question": "Show all customer ids and the number of cards owned by each customer.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "source_tables": ["customers_cards"]}}
{"sample_id": 698, "db_id": "customers_card_transactions", "final": {"question": "How many customer cards are there?", "sql": "SELECT count(*) FROM Customers_cards", "source_tables": ["customers_cards"]}}
{"sample_id": 704, "db_id": "customers_card_transactions", "final": {"question": "Return the full name and phone of the customer who has card number 4560596484842.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 687, "db_id": "customers_card_transactions", "final": {"question": "Show distinct first and last names for all customers with an account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "accounts"]}}
{"sample_id": 677, "db_id": "customers_card_transactions", "final": {"question": "Show all customer ids and the number of accounts for each customer.", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"]}}
{"sample_id": 735, "db_id": "customers_card_transactions", "final": {"question": "Show the number of transaction types.", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 741, "db_id": "customers_card_transactions", "final": {"question": "Show the transaction type and the number of transactions.", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}}
{"sample_id": 706, "db_id": "customers_card_transactions", "final": {"question": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 739, "db_id": "customers_card_transactions", "final": {"question": "Show the card type codes and the number of transactions.", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "source_tables": ["customers_cards", "financial_transactions"]}}
{"sample_id": 688, "db_id": "customers_card_transactions", "final": {"question": "What are the full names of customers who have accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "accounts"]}}
{"sample_id": 714, "db_id": "customers_card_transactions", "final": {"question": "Return the id of the customer who has the most cards, as well as the number of cards.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}}
{"sample_id": 705, "db_id": "customers_card_transactions", "final": {"question": "How many cards does customer Art Turcotte have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 696, "db_id": "customers_card_transactions", "final": {"question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "source_tables": ["customers"]}}
{"sample_id": 676, "db_id": "customers_card_transactions", "final": {"question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 668, "db_id": "customers_card_transactions", "final": {"question": "Count the number of accounts.", "sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 691, "db_id": "customers_card_transactions", "final": {"question": "How many customers do we have?", "sql": "SELECT count(*) FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 671, "db_id": "customers_card_transactions", "final": {"question": "Show other account details for account with name 338.", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "source_tables": ["accounts"]}}
{"sample_id": 745, "db_id": "customers_card_transactions", "final": {"question": "Show the account id and the number of transactions for each account", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "source_tables": ["financial_transactions"]}}
{"sample_id": 672, "db_id": "customers_card_transactions", "final": {"question": "What are the other account details for the account with the name 338?", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "source_tables": ["accounts"]}}
{"sample_id": 701, "db_id": "customers_card_transactions", "final": {"question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.", "sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"", "source_tables": ["customers_cards"]}}
{"sample_id": 712, "db_id": "customers_card_transactions", "final": {"question": "What are the different customer ids, and how many cards does each one hold?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "source_tables": ["customers_cards"]}}
{"sample_id": 695, "db_id": "customers_card_transactions", "final": {"question": "What is the phone and email for customer with first name Aniyah and last name Feest?", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "source_tables": ["customers"]}}
{"sample_id": 721, "db_id": "customers_card_transactions", "final": {"question": "What is the card type code with most number of cards?", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}}
{"sample_id": 679, "db_id": "customers_card_transactions", "final": {"question": "Show the customer id and number of accounts with most accounts.", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts"]}}
{"sample_id": 686, "db_id": "customers_card_transactions", "final": {"question": "What are the full names of customers who do not have any accounts?", "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "accounts"]}}
{"sample_id": 699, "db_id": "customers_card_transactions", "final": {"question": "Show ids, customer ids, card type codes, card numbers for all cards.", "sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "source_tables": ["customers_cards"]}}
{"sample_id": 766, "db_id": "race_track", "final": {"question": "What are the names, classes, and dates for all races?", "sql": "SELECT name ,  CLASS ,  date FROM race", "source_tables": ["race"]}}
{"sample_id": 756, "db_id": "race_track", "final": {"question": "Return the minimum, maximum, and average seating across all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "source_tables": ["track"]}}
{"sample_id": 784, "db_id": "race_track", "final": {"question": "What are the names and dates of races, and the names of the tracks where they are held?", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["track", "race"]}}
{"sample_id": 788, "db_id": "race_track", "final": {"question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "source_tables": ["track"]}}
{"sample_id": 776, "db_id": "race_track", "final": {"question": "Return the names of tracks that have no had any races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "source_tables": ["track", "race"]}}
{"sample_id": 757, "db_id": "race_track", "final": {"question": "Show the name, location, open year for all tracks with a seating higher than the average.", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "source_tables": ["track"]}}
{"sample_id": 781, "db_id": "race_track", "final": {"question": "Show the name of track with most number of races.", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["track", "race"]}}
{"sample_id": 752, "db_id": "race_track", "final": {"question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "source_tables": ["track"]}}
{"sample_id": 785, "db_id": "race_track", "final": {"question": "Show the name and location of track with 1 race.", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "source_tables": ["track", "race"]}}
{"sample_id": 769, "db_id": "race_track", "final": {"question": "What is the race class with most number of races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "source_tables": ["race"]}}
{"sample_id": 773, "db_id": "race_track", "final": {"question": "What are the names for tracks without a race in class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "source_tables": ["track", "race"]}}
{"sample_id": 782, "db_id": "race_track", "final": {"question": "What is the name of the track that has had the greatest number of races?", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["track", "race"]}}
{"sample_id": 770, "db_id": "race_track", "final": {"question": "Give the class of races that is most common.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "source_tables": ["race"]}}
{"sample_id": 775, "db_id": "race_track", "final": {"question": "Show all track names that have had no races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "source_tables": ["track", "race"]}}
{"sample_id": 761, "db_id": "race_track", "final": {"question": "How many races are there?", "sql": "SELECT count(*) FROM race", "source_tables": ["race"]}}
{"sample_id": 762, "db_id": "race_track", "final": {"question": "Count the number of races.", "sql": "SELECT count(*) FROM race", "source_tables": ["race"]}}
{"sample_id": 787, "db_id": "race_track", "final": {"question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "source_tables": ["track"]}}
{"sample_id": 751, "db_id": "race_track", "final": {"question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "source_tables": ["track"]}}
{"sample_id": 786, "db_id": "race_track", "final": {"question": "What are the names and locations of tracks that have had exactly 1 race?", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "source_tables": ["track", "race"]}}
{"sample_id": 780, "db_id": "race_track", "final": {"question": "What are the names of different tracks, and how many races has each had?", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "source_tables": ["track", "race"]}}
{"sample_id": 758, "db_id": "race_track", "final": {"question": "What are the names, locations, and years of opening for tracks with seating higher than average?", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "source_tables": ["track"]}}
{"sample_id": 764, "db_id": "race_track", "final": {"question": "Return the different classes of races.", "sql": "SELECT DISTINCT CLASS FROM race", "source_tables": ["race"]}}
{"sample_id": 749, "db_id": "race_track", "final": {"question": "Show the name and location for all tracks.", "sql": "SELECT name ,  LOCATION FROM track", "source_tables": ["track"]}}
{"sample_id": 771, "db_id": "race_track", "final": {"question": "List the race class with at least two races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "source_tables": ["race"]}}
{"sample_id": 768, "db_id": "race_track", "final": {"question": "What are the different classes of races, and how many races correspond to each?", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "source_tables": ["race"]}}
{"sample_id": 806, "db_id": "coffee_shop", "final": {"question": "Which months have more than 2 happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "source_tables": ["happy_hour"]}}
{"sample_id": 802, "db_id": "coffee_shop", "final": {"question": "Find the address and staff number of the shops that do not have any happy hour.", "sql": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)", "source_tables": ["shop", "happy_hour"]}}
{"sample_id": 800, "db_id": "coffee_shop", "final": {"question": "What are the average score and average staff number of all shops?", "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 805, "db_id": "coffee_shop", "final": {"question": "Which month has the most happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "source_tables": ["happy_hour"]}}
{"sample_id": 804, "db_id": "coffee_shop", "final": {"question": "which shop has happy hour most frequently? List its id and number of happy hours.", "sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["happy_hour"]}}
{"sample_id": 799, "db_id": "coffee_shop", "final": {"question": "Show the shop addresses ordered by their opening year.", "sql": "SELECT address FROM shop ORDER BY open_year", "source_tables": ["shop"]}}
{"sample_id": 793, "db_id": "coffee_shop", "final": {"question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "sql": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase", "source_tables": ["member"]}}
{"sample_id": 801, "db_id": "coffee_shop", "final": {"question": "Find the id and address of the shops whose score is below the average score.", "sql": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)", "source_tables": ["shop"]}}
{"sample_id": 791, "db_id": "coffee_shop", "final": {"question": "Give me the names of members whose address is in Harford or Waterbury.", "sql": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'", "source_tables": ["member"]}}
{"sample_id": 798, "db_id": "coffee_shop", "final": {"question": "Which address do not have any member with the black membership card?", "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'", "source_tables": ["member"]}}
{"sample_id": 851, "db_id": "chinook_1", "final": {"question": "What city does the employee who helps the customer with postal code 70174 live in?", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "source_tables": ["customer", "employee"]}}
{"sample_id": 843, "db_id": "chinook_1", "final": {"question": "What is the average unit price of tracks that belong to Jazz genre?", "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"", "source_tables": ["track", "genre"]}}
{"sample_id": 835, "db_id": "chinook_1", "final": {"question": "What is the name of the most common genre in all tracks?", "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["track", "genre"]}}
{"sample_id": 876, "db_id": "chinook_1", "final": {"question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["album", "artist"]}}
{"sample_id": 870, "db_id": "chinook_1", "final": {"question": "What are the first names and support rep ids for employees serving 10 or more customers?", "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "source_tables": ["customer", "employee"]}}
{"sample_id": 841, "db_id": "chinook_1", "final": {"question": "How many tracks belong to rock genre?", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "source_tables": ["track", "genre"]}}
{"sample_id": 879, "db_id": "chinook_1", "final": {"question": "What is the average unit price of rock tracks?", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "source_tables": ["track", "genre"]}}
{"sample_id": 855, "db_id": "chinook_1", "final": {"question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"", "source_tables": ["customer", "invoice"]}}
{"sample_id": 863, "db_id": "chinook_1", "final": {"question": "List the phone numbers of all employees.", "sql": "SELECT Phone FROM EMPLOYEE", "source_tables": ["employee"]}}
{"sample_id": 858, "db_id": "chinook_1", "final": {"question": "What are the last names of customers without invoice totals exceeding 20?", "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "source_tables": ["customer", "invoice"]}}
{"sample_id": 816, "db_id": "chinook_1", "final": {"question": "Find the different billing countries for all invoices.", "sql": "SELECT distinct(BillingCountry) FROM INVOICE", "source_tables": ["invoice"]}}
{"sample_id": 880, "db_id": "chinook_1", "final": {"question": "Find the average unit price of tracks from the Rock genre.", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "source_tables": ["track", "genre"]}}
{"sample_id": 854, "db_id": "chinook_1", "final": {"question": "Find the number of different cities that employees live in.", "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "source_tables": ["employee"]}}
{"sample_id": 817, "db_id": "chinook_1", "final": {"question": "Find the names of all artists that have \"a\" in their names.", "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"", "source_tables": ["artist"]}}
{"sample_id": 886, "db_id": "chinook_1", "final": {"question": "Find the distinct unit prices for tracks.", "sql": "SELECT distinct(UnitPrice) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 826, "db_id": "chinook_1", "final": {"question": "What is the name of the artist with the greatest number of albums?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["album", "artist"]}}
{"sample_id": 871, "db_id": "chinook_1", "final": {"question": "Please show the employee last names that serves no more than 20 customers.", "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "source_tables": ["customer", "employee"]}}
{"sample_id": 809, "db_id": "chinook_1", "final": {"question": "List the names of all music genres.", "sql": "SELECT Name FROM GENRE", "source_tables": ["genre"]}}
{"sample_id": 813, "db_id": "chinook_1", "final": {"question": "What are the first names and last names of the employees who live in Calgary city.", "sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"", "source_tables": ["employee"]}}
{"sample_id": 866, "db_id": "chinook_1", "final": {"question": "Count the number of tracks that are of the media type \"AAC audio file\".", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "source_tables": ["mediatype", "track"]}}
{"sample_id": 874, "db_id": "chinook_1", "final": {"question": "What are all the album titles, in alphabetical order?", "sql": "SELECT Title FROM ALBUM ORDER BY Title", "source_tables": ["album"]}}
{"sample_id": 819, "db_id": "chinook_1", "final": {"question": "Find the title of all the albums of the artist \"AC/DC\".", "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"", "source_tables": ["album", "artist"]}}
{"sample_id": 808, "db_id": "chinook_1", "final": {"question": "Find the number of albums.", "sql": "SELECT count(*) FROM ALBUM", "source_tables": ["album"]}}
{"sample_id": 844, "db_id": "chinook_1", "final": {"question": "Find the average unit price of jazz tracks.", "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"", "source_tables": ["track", "genre"]}}
{"sample_id": 889, "db_id": "chinook_1", "final": {"question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "source_tables": ["album", "track", "genre"]}}
{"sample_id": 882, "db_id": "chinook_1", "final": {"question": "Find the maximum and minimum millisecond lengths of pop tracks.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"", "source_tables": ["track", "genre"]}}
{"sample_id": 842, "db_id": "chinook_1", "final": {"question": "Count the number of tracks that are part of the rock genre.", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "source_tables": ["track", "genre"]}}
{"sample_id": 850, "db_id": "chinook_1", "final": {"question": "Find the full names of employees who help customers with the first name Leonie.", "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"", "source_tables": ["customer", "employee"]}}
{"sample_id": 845, "db_id": "chinook_1", "final": {"question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?", "sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"", "source_tables": ["customer"]}}
{"sample_id": 830, "db_id": "chinook_1", "final": {"question": "Find the average unit price for a track.", "sql": "SELECT AVG(UnitPrice) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 837, "db_id": "chinook_1", "final": {"question": "What is the least common media type in all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["mediatype", "track"]}}
{"sample_id": 839, "db_id": "chinook_1", "final": {"question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "source_tables": ["album", "track"]}}
{"sample_id": 821, "db_id": "chinook_1", "final": {"question": "Hom many albums does the artist \"Metallica\" have?", "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"", "source_tables": ["album", "artist"]}}
{"sample_id": 878, "db_id": "chinook_1", "final": {"question": "What are the names of artists who have not released any albums?", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}}
{"sample_id": 869, "db_id": "chinook_1", "final": {"question": "Please show the employee first names and ids of employees who serve at least 10 customers.", "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "source_tables": ["customer", "employee"]}}
{"sample_id": 846, "db_id": "chinook_1", "final": {"question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".", "sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"", "source_tables": ["customer"]}}
{"sample_id": 890, "db_id": "chinook_1", "final": {"question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "source_tables": ["album", "track", "genre"]}}
{"sample_id": 836, "db_id": "chinook_1", "final": {"question": "Find the name of the genre that is most frequent across all tracks.", "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["track", "genre"]}}
{"sample_id": 860, "db_id": "chinook_1", "final": {"question": "What are the different first names for customers from Brazil who have also had an invoice?", "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"", "source_tables": ["customer", "invoice"]}}
{"sample_id": 884, "db_id": "chinook_1", "final": {"question": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"", "source_tables": ["employee"]}}
{"sample_id": 815, "db_id": "chinook_1", "final": {"question": "What are the distinct billing countries of the invoices?", "sql": "SELECT distinct(BillingCountry) FROM INVOICE", "source_tables": ["invoice"]}}
{"sample_id": 885, "db_id": "chinook_1", "final": {"question": "What are the distinct unit prices of all tracks?", "sql": "SELECT distinct(UnitPrice) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 853, "db_id": "chinook_1", "final": {"question": "How many distinct cities does the employees live in?", "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "source_tables": ["employee"]}}
{"sample_id": 820, "db_id": "chinook_1", "final": {"question": "What are the titles of albums by the artist \"AC/DC\"?", "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"", "source_tables": ["album", "artist"]}}
{"sample_id": 888, "db_id": "chinook_1", "final": {"question": "Cound the number of artists who have not released an album.", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "source_tables": ["artist", "album"]}}
{"sample_id": 852, "db_id": "chinook_1", "final": {"question": "Find the cities corresponding to employees who help customers with the postal code 70174.", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "source_tables": ["customer", "employee"]}}
{"sample_id": 832, "db_id": "chinook_1", "final": {"question": "Find the maximum and minimum durations of tracks in milliseconds.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 818, "db_id": "chinook_1", "final": {"question": "What are the names of artist who have the letter 'a' in their names?", "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"", "source_tables": ["artist"]}}
{"sample_id": 847, "db_id": "chinook_1", "final": {"question": "How many customers have email that contains \"gmail.com\"?", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "source_tables": ["customer"]}}
{"sample_id": 868, "db_id": "chinook_1", "final": {"question": "Find the average millisecond length of Latin and Pop tracks.", "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"", "source_tables": ["track", "genre"]}}
{"sample_id": 921, "db_id": "insurance_fnol", "final": {"question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "source_tables": ["customers", "first_notification_of_loss", "services"]}}
{"sample_id": 919, "db_id": "insurance_fnol", "final": {"question": "Find the names of users who do not have a first notification of loss record.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "first_notification_of_loss"]}}
{"sample_id": 906, "db_id": "insurance_fnol", "final": {"question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 901, "db_id": "insurance_fnol", "final": {"question": "Find the total and average amount of settlements.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 918, "db_id": "insurance_fnol", "final": {"question": "Count the total number of available services.", "sql": "SELECT count(*) FROM services", "source_tables": ["services"]}}
{"sample_id": 897, "db_id": "insurance_fnol", "final": {"question": "What are all the customer phone numbers under the most popular policy type?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["available_policies"]}}
{"sample_id": 891, "db_id": "insurance_fnol", "final": {"question": "Find all the phone numbers.", "sql": "SELECT customer_phone FROM available_policies", "source_tables": ["available_policies"]}}
{"sample_id": 914, "db_id": "insurance_fnol", "final": {"question": "List all the policy types used by the customer enrolled in the most policies.", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers", "available_policies", "customers_policies"]}}
{"sample_id": 904, "db_id": "insurance_fnol", "final": {"question": "Which services have been used more than twice in first notification of loss? Return the service name.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "source_tables": ["services", "first_notification_of_loss"]}}
{"sample_id": 925, "db_id": "insurance_fnol", "final": {"question": "Find the IDs of customers whose name contains \"Diana\".", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "source_tables": ["customers"]}}
{"sample_id": 913, "db_id": "insurance_fnol", "final": {"question": "What are all the policy types of the customer that has the most policies listed?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers", "available_policies", "customers_policies"]}}
{"sample_id": 909, "db_id": "insurance_fnol", "final": {"question": "What is the name of the customer who has the most policies listed?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 931, "db_id": "insurance_fnol", "final": {"question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 896, "db_id": "insurance_fnol", "final": {"question": "Which policy type appears most frequently in the available policies?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["available_policies"]}}
{"sample_id": 895, "db_id": "insurance_fnol", "final": {"question": "Which policy type has the most records in the database?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["available_policies"]}}
{"sample_id": 920, "db_id": "insurance_fnol", "final": {"question": "Which customers do not have a first notification of loss record? Give me the customer names.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "first_notification_of_loss"]}}
{"sample_id": 922, "db_id": "insurance_fnol", "final": {"question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "source_tables": ["customers", "first_notification_of_loss", "services"]}}
{"sample_id": 902, "db_id": "insurance_fnol", "final": {"question": "Return the sum and average of all settlement amounts.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 927, "db_id": "insurance_fnol", "final": {"question": "What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 911, "db_id": "insurance_fnol", "final": {"question": "What are all the policy types of the customer named \"Dayana Robel\"?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "source_tables": ["customers", "available_policies", "customers_policies"]}}
{"sample_id": 898, "db_id": "insurance_fnol", "final": {"question": "Find the phone numbers of customers using the most common policy type among the available policies.", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["available_policies"]}}
{"sample_id": 924, "db_id": "insurance_fnol", "final": {"question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "source_tables": ["customers", "first_notification_of_loss", "services"]}}
{"sample_id": 892, "db_id": "insurance_fnol", "final": {"question": "What are all the phone numbers?", "sql": "SELECT customer_phone FROM available_policies", "source_tables": ["available_policies"]}}
{"sample_id": 930, "db_id": "insurance_fnol", "final": {"question": "What is the ordered list of customer ids?", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "source_tables": ["customers"]}}
{"sample_id": 917, "db_id": "insurance_fnol", "final": {"question": "How many services are there?", "sql": "SELECT count(*) FROM services", "source_tables": ["services"]}}
{"sample_id": 939, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "sql": "SELECT max(OMIM) FROM enzyme", "source_tables": ["enzyme"]}}
{"sample_id": 972, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many different FDA approval statuses exist for medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}}
{"sample_id": 946, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names and trade names of the medcines that are FDA approved?", "sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "source_tables": ["medicine"]}}
{"sample_id": 969, "db_id": "medicine_enzyme_interaction", "final": {"question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["enzyme", "medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 933, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many kinds of enzymes are there?", "sql": "SELECT count(*) FROM enzyme", "source_tables": ["enzyme"]}}
{"sample_id": 955, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "source_tables": ["enzyme", "medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 953, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 959, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many medicines have the FDA approval status 'No' ?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "source_tables": ["medicine"]}}
{"sample_id": 950, "db_id": "medicine_enzyme_interaction", "final": {"question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 948, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 966, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 937, "db_id": "medicine_enzyme_interaction", "final": {"question": "List the names and the locations that the enzymes can make an effect.", "sql": "SELECT name ,  LOCATION FROM enzyme", "source_tables": ["enzyme"]}}
{"sample_id": 944, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of enzymes whose product is not 'Heme'?", "sql": "SELECT name FROM enzyme WHERE product != 'Heme'", "source_tables": ["enzyme"]}}
{"sample_id": 945, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "source_tables": ["medicine"]}}
{"sample_id": 968, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 942, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "source_tables": ["enzyme"]}}
{"sample_id": 940, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the maximum OMIM value in the database?", "sql": "SELECT max(OMIM) FROM enzyme", "source_tables": ["enzyme"]}}
{"sample_id": 961, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many enzymes do not have any interactions?", "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 958, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "source_tables": ["medicine_enzyme_interaction"]}}
{"sample_id": 965, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 951, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 957, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the most common interaction type between enzymes and medicine? And how many are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "source_tables": ["medicine_enzyme_interaction"]}}
{"sample_id": 949, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the ids and names of the medicine that can interact with two or more enzymes?", "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 954, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 964, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 947, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 994, "db_id": "university_basketball", "final": {"question": "What are the all games score and location of the school called Clemson?", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 983, "db_id": "university_basketball", "final": {"question": "Find the founded year of the newest non public school.", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "source_tables": ["university"]}}
{"sample_id": 1008, "db_id": "university_basketball", "final": {"question": "Count the number of different affiliation types.", "sql": "SELECT count(DISTINCT affiliation) FROM university", "source_tables": ["university"]}}
{"sample_id": 997, "db_id": "university_basketball", "final": {"question": "Show the enrollment and primary_conference of the oldest college.", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "source_tables": ["university"]}}
{"sample_id": 980, "db_id": "university_basketball", "final": {"question": "What are the public schools and what are their locations?", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "source_tables": ["university"]}}
{"sample_id": 1021, "db_id": "university_basketball", "final": {"question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"]}}
{"sample_id": 992, "db_id": "university_basketball", "final": {"question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 998, "db_id": "university_basketball", "final": {"question": "What are the enrollment and primary conference for the university which was founded the earliest?", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "source_tables": ["university"]}}
{"sample_id": 1004, "db_id": "university_basketball", "final": {"question": "Count the number of universities that do not participate in the baketball match.", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 1005, "db_id": "university_basketball", "final": {"question": "Find the schools that were either founded after 1850 or public.", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "source_tables": ["university"]}}
{"sample_id": 1003, "db_id": "university_basketball", "final": {"question": "How many schools do not participate in the basketball match?", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 1007, "db_id": "university_basketball", "final": {"question": "Find how many different affiliation types there are.", "sql": "SELECT count(DISTINCT affiliation) FROM university", "source_tables": ["university"]}}
{"sample_id": 1000, "db_id": "university_basketball", "final": {"question": "Return the total and minimum enrollments across all schools.", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "source_tables": ["university"]}}
{"sample_id": 1001, "db_id": "university_basketball", "final": {"question": "Find the total student enrollment for different affiliation type schools.", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 995, "db_id": "university_basketball", "final": {"question": "What are the average enrollment size of the universities that are founded before 1850?", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "source_tables": ["university"]}}
{"sample_id": 1020, "db_id": "university_basketball", "final": {"question": "What is all the information about the basketball match?", "sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"]}}
{"sample_id": 1019, "db_id": "university_basketball", "final": {"question": "List all information regarding the basketball match.", "sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"]}}
{"sample_id": 1016, "db_id": "university_basketball", "final": {"question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 991, "db_id": "university_basketball", "final": {"question": "What is the team name and acc regular season score of the school that was founded for the longest time?", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 1017, "db_id": "university_basketball", "final": {"question": "What is the maximum enrollment across all schools?", "sql": "SELECT max(Enrollment) FROM university", "source_tables": ["university"]}}
{"sample_id": 1018, "db_id": "university_basketball", "final": {"question": "Return the maximum enrollment across all schools.", "sql": "SELECT max(Enrollment) FROM university", "source_tables": ["university"]}}
{"sample_id": 993, "db_id": "university_basketball", "final": {"question": "Find the location and all games score of the school that has Clemson as its team name.", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 985, "db_id": "university_basketball", "final": {"question": "How many schools are in the basketball match?", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "source_tables": ["basketball_match"]}}
{"sample_id": 1010, "db_id": "university_basketball", "final": {"question": "How many universities have a location that contains NY?", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "source_tables": ["university"]}}
{"sample_id": 1022, "db_id": "university_basketball", "final": {"question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"]}}
{"sample_id": 996, "db_id": "university_basketball", "final": {"question": "Return the average enrollment of universities founded before 1850.", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "source_tables": ["university"]}}
{"sample_id": 1006, "db_id": "university_basketball", "final": {"question": "What are the schools that were either founded before 1850 or are public?", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "source_tables": ["university"]}}
{"sample_id": 1039, "db_id": "phone_1", "final": {"question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1037, "db_id": "phone_1", "final": {"question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?", "sql": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";", "source_tables": ["screen_mode", "chip_model", "phone"]}}
{"sample_id": 1023, "db_id": "phone_1", "final": {"question": "the names of models that launched between 2002 and 2004.", "sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;", "source_tables": ["chip_model"]}}
{"sample_id": 1034, "db_id": "phone_1", "final": {"question": "List the name of the company that produced more than one phone model.", "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "source_tables": ["phone"]}}
{"sample_id": 1041, "db_id": "phone_1", "final": {"question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1050, "db_id": "phone_1", "final": {"question": "Find the names of the chip models that are not used by any phone with full accreditation type.", "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1028, "db_id": "phone_1", "final": {"question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?", "sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1040, "db_id": "phone_1", "final": {"question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1029, "db_id": "phone_1", "final": {"question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1048, "db_id": "phone_1", "final": {"question": "List all the model names sorted by their launch year.", "sql": "SELECT model_name FROM chip_model ORDER BY launch_year", "source_tables": ["chip_model"]}}
{"sample_id": 1049, "db_id": "phone_1", "final": {"question": "Find the average ram mib size of the chip models that are never used by any phone.", "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1024, "db_id": "phone_1", "final": {"question": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "sql": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;", "source_tables": ["chip_model"]}}
{"sample_id": 1038, "db_id": "phone_1", "final": {"question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;", "source_tables": ["screen_mode", "chip_model", "phone"]}}
{"sample_id": 1032, "db_id": "phone_1", "final": {"question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"", "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1035, "db_id": "phone_1", "final": {"question": "List the maximum, minimum and average number of used kb in screen mode.", "sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;", "source_tables": ["screen_mode"]}}
{"sample_id": 1047, "db_id": "phone_1", "final": {"question": "Count the number of chip model that do not have wifi.", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}}
{"sample_id": 1026, "db_id": "phone_1", "final": {"question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?", "sql": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";", "source_tables": ["phone"]}}
{"sample_id": 1062, "db_id": "match_season", "final": {"question": "Show the distinct position of players from college UCLA or Duke.", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "source_tables": ["match_season"]}}
{"sample_id": 1083, "db_id": "match_season", "final": {"question": "Who are the different players, what season do they play in, and what is the name of the team they are on?", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "source_tables": ["team", "match_season"]}}
{"sample_id": 1060, "db_id": "match_season", "final": {"question": "Show the players from college UCLA.", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "source_tables": ["match_season"]}}
{"sample_id": 1075, "db_id": "match_season", "final": {"question": "Who are the players from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1072, "db_id": "match_season", "final": {"question": "Show the season, the player, and the name of the country that player belongs to.", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "source_tables": ["match_season", "country"]}}
{"sample_id": 1063, "db_id": "match_season", "final": {"question": "What are the different positions of players from UCLA or Duke colleges?", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "source_tables": ["match_season"]}}
{"sample_id": 1095, "db_id": "match_season", "final": {"question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "sql": "SELECT player FROM match_season ORDER BY College ASC", "source_tables": ["match_season"]}}
{"sample_id": 1096, "db_id": "match_season", "final": {"question": "Show the most common position of players in match seasons.", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["match_season"]}}
{"sample_id": 1085, "db_id": "match_season", "final": {"question": "Return the positions of players on the team Ryley Goldner.", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "source_tables": ["team", "match_season"]}}
{"sample_id": 1070, "db_id": "match_season", "final": {"question": "Show all team names.", "sql": "SELECT Name FROM Team", "source_tables": ["team"]}}
{"sample_id": 1107, "db_id": "match_season", "final": {"question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1102, "db_id": "match_season", "final": {"question": "Show the name of colleges that have at least two players in descending alphabetical order.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}}
{"sample_id": 1106, "db_id": "match_season", "final": {"question": "What are the names of countries that have both players with position forward and players with position defender?", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1067, "db_id": "match_season", "final": {"question": "Count the number of different teams involved in match season.", "sql": "SELECT count(DISTINCT Team) FROM match_season", "source_tables": ["match_season"]}}
{"sample_id": 1069, "db_id": "match_season", "final": {"question": "Who are the different players and how many years has each played?", "sql": "SELECT Player ,  Years_Played FROM player", "source_tables": ["player"]}}
{"sample_id": 1094, "db_id": "match_season", "final": {"question": "Return all players sorted by college in ascending alphabetical order.", "sql": "SELECT player FROM match_season ORDER BY College ASC", "source_tables": ["match_season"]}}
{"sample_id": 1071, "db_id": "match_season", "final": {"question": "What are the names of all teams?", "sql": "SELECT Name FROM Team", "source_tables": ["team"]}}
{"sample_id": 1086, "db_id": "match_season", "final": {"question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "source_tables": ["team", "match_season"]}}
{"sample_id": 1092, "db_id": "match_season", "final": {"question": "Show the country names and the corresponding number of players.", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "source_tables": ["match_season", "country"]}}
{"sample_id": 1064, "db_id": "match_season", "final": {"question": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "source_tables": ["match_season"]}}
{"sample_id": 1097, "db_id": "match_season", "final": {"question": "What is the position that is most common among players in match seasons?", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["match_season"]}}
{"sample_id": 1079, "db_id": "match_season", "final": {"question": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1082, "db_id": "match_season", "final": {"question": "Show the season, the player, and the name of the team that players belong to.", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "source_tables": ["team", "match_season"]}}
{"sample_id": 1077, "db_id": "match_season", "final": {"question": "Give the different positions of players who play for the country with the capital Dublin.", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1056, "db_id": "match_season", "final": {"question": "Show all official native languages that contain the word \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "source_tables": ["country"]}}
{"sample_id": 1061, "db_id": "match_season", "final": {"question": "Who are the players from UCLA?", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "source_tables": ["match_season"]}}
{"sample_id": 1103, "db_id": "match_season", "final": {"question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}}
{"sample_id": 1073, "db_id": "match_season", "final": {"question": "For each player, what are their name, season, and country that they belong to?", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "source_tables": ["match_season", "country"]}}
{"sample_id": 1055, "db_id": "match_season", "final": {"question": "What are the names and capitals of each country?", "sql": "SELECT Country_name ,  Capital FROM country", "source_tables": ["country"]}}
{"sample_id": 1089, "db_id": "match_season", "final": {"question": "What are the players who played for Columbus Crew, and how many years did each play for?", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "source_tables": ["team", "player"]}}
{"sample_id": 1052, "db_id": "match_season", "final": {"question": "How many countries are there in total?", "sql": "SELECT count(*) FROM country", "source_tables": ["country"]}}
{"sample_id": 1074, "db_id": "match_season", "final": {"question": "Which players are from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1088, "db_id": "match_season", "final": {"question": "Show the players and years played for players from team \"Columbus Crew\".", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "source_tables": ["team", "player"]}}
{"sample_id": 1099, "db_id": "match_season", "final": {"question": "What are the three colleges from which the most players are from?", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}}
{"sample_id": 1147, "db_id": "climbing", "final": {"question": "Which range contains the most mountains?", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"]}}
{"sample_id": 1133, "db_id": "climbing", "final": {"question": "What is the height of the mountain climbined by the climbing who had the most points?", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1112, "db_id": "climbing", "final": {"question": "List the names of climbers in descending order of points.", "sql": "SELECT Name FROM climber ORDER BY Points DESC", "source_tables": ["climber"]}}
{"sample_id": 1144, "db_id": "climbing", "final": {"question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}}
{"sample_id": 1118, "db_id": "climbing", "final": {"question": "How many distinct countries are the climbers from?", "sql": "SELECT COUNT(DISTINCT Country) FROM climber", "source_tables": ["climber"]}}
{"sample_id": 1111, "db_id": "climbing", "final": {"question": "Count the number of climbers.", "sql": "SELECT count(*) FROM climber", "source_tables": ["climber"]}}
{"sample_id": 1116, "db_id": "climbing", "final": {"question": "What is the maximum point for climbers whose country is United Kingdom?", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "source_tables": ["climber"]}}
{"sample_id": 1131, "db_id": "climbing", "final": {"question": "What are the names of climbers and the corresponding heights of the mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1142, "db_id": "climbing", "final": {"question": "List the names of mountains that do not have any climber.", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1145, "db_id": "climbing", "final": {"question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}}
{"sample_id": 1149, "db_id": "climbing", "final": {"question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "source_tables": ["mountain"]}}
{"sample_id": 1139, "db_id": "climbing", "final": {"question": "How many climbers are from each country?", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "source_tables": ["climber"]}}
{"sample_id": 1130, "db_id": "climbing", "final": {"question": "Show the names of climbers and the heights of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1148, "db_id": "climbing", "final": {"question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "source_tables": ["mountain"]}}
{"sample_id": 1126, "db_id": "climbing", "final": {"question": "List the distinct ranges of the mountains with the top 3 prominence.", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "source_tables": ["mountain"]}}
{"sample_id": 1125, "db_id": "climbing", "final": {"question": "Return the name of the mountain with the greatest height.", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}}
{"sample_id": 1113, "db_id": "climbing", "final": {"question": "What are the names of the climbers, ordered by points descending?", "sql": "SELECT Name FROM climber ORDER BY Points DESC", "source_tables": ["climber"]}}
{"sample_id": 1128, "db_id": "climbing", "final": {"question": "Show names of climbers and the names of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1137, "db_id": "climbing", "final": {"question": "What are the times used by climbers who climbed mountains in the country of Uganda?", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1138, "db_id": "climbing", "final": {"question": "Please show the countries and the number of climbers from each country.", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "source_tables": ["climber"]}}
{"sample_id": 1134, "db_id": "climbing", "final": {"question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1141, "db_id": "climbing", "final": {"question": "Which countries have more than one mountain?", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "source_tables": ["mountain"]}}
{"sample_id": 1110, "db_id": "climbing", "final": {"question": "How many climbers are there?", "sql": "SELECT count(*) FROM climber", "source_tables": ["climber"]}}
{"sample_id": 1127, "db_id": "climbing", "final": {"question": "What are the different ranges of the 3 mountains with the highest prominence?", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "source_tables": ["mountain"]}}
{"sample_id": 1162, "db_id": "body_builder", "final": {"question": "What are the names of body builders in descending order of total scores?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1151, "db_id": "body_builder", "final": {"question": "List the total scores of body builders in ascending order.", "sql": "SELECT Total FROM body_builder ORDER BY Total ASC", "source_tables": ["body_builder"]}}
{"sample_id": 1165, "db_id": "body_builder", "final": {"question": "What are the birth places that are shared by at least two people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "source_tables": ["people"]}}
{"sample_id": 1170, "db_id": "body_builder", "final": {"question": "How many persons are not body builders?", "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1161, "db_id": "body_builder", "final": {"question": "What is the average total score of body builders with height bigger than 200?", "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1167, "db_id": "body_builder", "final": {"question": "Show all information about each body builder.", "sql": "SELECT * FROM body_builder", "source_tables": ["body_builder"]}}
{"sample_id": 1159, "db_id": "body_builder", "final": {"question": "What are the birth date and birth place of the body builder with the highest total points?", "sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1172, "db_id": "body_builder", "final": {"question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?", "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1152, "db_id": "body_builder", "final": {"question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "sql": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "source_tables": ["body_builder"]}}
{"sample_id": 1166, "db_id": "body_builder", "final": {"question": "List the height and weight of people in descending order of height.", "sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "source_tables": ["people"]}}
{"sample_id": 1164, "db_id": "body_builder", "final": {"question": "What is the most common birth place of people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 1169, "db_id": "body_builder", "final": {"question": "How many distinct birth places are there?", "sql": "SELECT count(DISTINCT Birth_Place) FROM people", "source_tables": ["people"]}}
{"sample_id": 1171, "db_id": "body_builder", "final": {"question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1156, "db_id": "body_builder", "final": {"question": "What are the names of body builders?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1185, "db_id": "election_representative", "final": {"question": "What are the lifespans of representatives in descending order of vote percent?", "sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC", "source_tables": ["election", "representative"]}}
{"sample_id": 1192, "db_id": "election_representative", "final": {"question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.", "sql": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"", "source_tables": ["representative"]}}
{"sample_id": 1187, "db_id": "election_representative", "final": {"question": "What are the different parties of representative? Show the party name and the number of representatives in each party.", "sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party", "source_tables": ["representative"]}}
{"sample_id": 1181, "db_id": "election_representative", "final": {"question": "What are the names of representatives and the dates of elections they participated in.", "sql": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID", "source_tables": ["election", "representative"]}}
{"sample_id": 1178, "db_id": "election_representative", "final": {"question": "What are the names and parties of representatives?", "sql": "SELECT Name ,  Party FROM representative", "source_tables": ["representative"]}}
{"sample_id": 1177, "db_id": "election_representative", "final": {"question": "What are the minimum and maximum vote percents of elections?", "sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election", "source_tables": ["election"]}}
{"sample_id": 1183, "db_id": "election_representative", "final": {"question": "What are the names of representatives in descending order of votes?", "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC", "source_tables": ["election", "representative"]}}
{"sample_id": 1189, "db_id": "election_representative", "final": {"question": "What parties have at least three representatives?", "sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3", "source_tables": ["representative"]}}
{"sample_id": 1191, "db_id": "election_representative", "final": {"question": "List the names of representatives that have not participated in elections listed here.", "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)", "source_tables": ["election", "representative"]}}
{"sample_id": 1174, "db_id": "election_representative", "final": {"question": "How many elections are there?", "sql": "SELECT count(*) FROM election", "source_tables": ["election"]}}
{"sample_id": 1186, "db_id": "election_representative", "final": {"question": "What is the average number of votes of representatives from party \"Republican\"?", "sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"", "source_tables": ["election", "representative"]}}
{"sample_id": 1190, "db_id": "election_representative", "final": {"question": "What states have at least two representatives?", "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "source_tables": ["representative"]}}
{"sample_id": 1202, "db_id": "apartment_rentals", "final": {"question": "Show the addresses and phones of all the buildings managed by \"Brenden\".", "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1234, "db_id": "apartment_rentals", "final": {"question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "source_tables": ["apartment_bookings", "guests"]}}
{"sample_id": 1239, "db_id": "apartment_rentals", "final": {"question": "What are the facility codes of the apartments with more than four bedrooms?", "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "source_tables": ["apartments", "apartment_facilities"]}}
{"sample_id": 1243, "db_id": "apartment_rentals", "final": {"question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "source_tables": ["apartments", "apartment_buildings"]}}
{"sample_id": 1210, "db_id": "apartment_rentals", "final": {"question": "Return the apartment number and the number of rooms for each apartment.", "sql": "SELECT apt_number ,  room_count FROM Apartments", "source_tables": ["apartments"]}}
{"sample_id": 1205, "db_id": "apartment_rentals", "final": {"question": "Find all the building full names containing the word \"court\".", "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1199, "db_id": "apartment_rentals", "final": {"question": "Give me a list of all the distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1265, "db_id": "apartment_rentals", "final": {"question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}}
{"sample_id": 1229, "db_id": "apartment_rentals", "final": {"question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1237, "db_id": "apartment_rentals", "final": {"question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"", "source_tables": ["apartment_bookings", "guests"]}}
{"sample_id": 1204, "db_id": "apartment_rentals", "final": {"question": "What are the building full names that contain the word \"court\"?", "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1260, "db_id": "apartment_rentals", "final": {"question": "Show the most common apartment type code.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1248, "db_id": "apartment_rentals", "final": {"question": "Show the booking status code and the corresponding number of bookings.", "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "source_tables": ["apartment_bookings"]}}
{"sample_id": 1228, "db_id": "apartment_rentals", "final": {"question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1241, "db_id": "apartment_rentals", "final": {"question": "Find the total number of rooms in the apartments that have facility code \"Gym\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"", "source_tables": ["apartments", "apartment_facilities"]}}
{"sample_id": 1271, "db_id": "apartment_rentals", "final": {"question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1214, "db_id": "apartment_rentals", "final": {"question": "Return the apartment numbers of the apartments with type code \"Flat\".", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "source_tables": ["apartments"]}}
{"sample_id": 1270, "db_id": "apartment_rentals", "final": {"question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1217, "db_id": "apartment_rentals", "final": {"question": "What are the first names and last names of all the guests?", "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests", "source_tables": ["guests"]}}
{"sample_id": 1198, "db_id": "apartment_rentals", "final": {"question": "Show all distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1208, "db_id": "apartment_rentals", "final": {"question": "What is the average number of bedrooms of all apartments?", "sql": "SELECT avg(bedroom_count) FROM Apartments", "source_tables": ["apartments"]}}
{"sample_id": 1220, "db_id": "apartment_rentals", "final": {"question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1247, "db_id": "apartment_rentals", "final": {"question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"", "source_tables": ["apartments", "apartment_buildings"]}}
{"sample_id": 1224, "db_id": "apartment_rentals", "final": {"question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1218, "db_id": "apartment_rentals", "final": {"question": "Return the date of birth for all the guests with gender code \"Male\".", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "source_tables": ["guests"]}}
{"sample_id": 1236, "db_id": "apartment_rentals", "final": {"question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"", "source_tables": ["apartment_bookings", "guests"]}}
{"sample_id": 1235, "db_id": "apartment_rentals", "final": {"question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "source_tables": ["apartment_bookings", "guests"]}}
{"sample_id": 1200, "db_id": "apartment_rentals", "final": {"question": "Show the short names of the buildings managed by \"Emma\".", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1245, "db_id": "apartment_rentals", "final": {"question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "source_tables": ["apartments", "apartment_buildings"]}}
{"sample_id": 1252, "db_id": "apartment_rentals", "final": {"question": "Return the apartment number with the largest number of bedrooms.", "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1251, "db_id": "apartment_rentals", "final": {"question": "Sort the apartment numbers in ascending order of room count.", "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "source_tables": ["apartments"]}}
{"sample_id": 1216, "db_id": "apartment_rentals", "final": {"question": "Return the first names and last names of all guests", "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests", "source_tables": ["guests"]}}
{"sample_id": 1226, "db_id": "apartment_rentals", "final": {"question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?", "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1227, "db_id": "apartment_rentals", "final": {"question": "Tell me the booking status code for the apartment with number \"Suite 634\".", "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1246, "db_id": "apartment_rentals", "final": {"question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"", "source_tables": ["apartments", "apartment_buildings"]}}
{"sample_id": 1230, "db_id": "apartment_rentals", "final": {"question": "Show the average room count of the apartments that have booking status code \"Provisional\".", "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1203, "db_id": "apartment_rentals", "final": {"question": "What are the address and phone number of the buildings managed by \"Brenden\"?", "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1267, "db_id": "apartment_rentals", "final": {"question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "source_tables": ["guests"]}}
{"sample_id": 1196, "db_id": "apartment_rentals", "final": {"question": "Show the start dates and end dates of all the apartment bookings.", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}}
{"sample_id": 1232, "db_id": "apartment_rentals", "final": {"question": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "source_tables": ["apartment_bookings", "guests"]}}
{"sample_id": 1250, "db_id": "apartment_rentals", "final": {"question": "Return all the apartment numbers sorted by the room count in ascending order.", "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "source_tables": ["apartments"]}}
{"sample_id": 1201, "db_id": "apartment_rentals", "final": {"question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "source_tables": ["apartment_buildings"]}}
{"sample_id": 1259, "db_id": "apartment_rentals", "final": {"question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1197, "db_id": "apartment_rentals", "final": {"question": "What are the start date and end date of each apartment booking?", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}}
{"sample_id": 1231, "db_id": "apartment_rentals", "final": {"question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?", "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1258, "db_id": "apartment_rentals", "final": {"question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1269, "db_id": "apartment_rentals", "final": {"question": "Find the number of apartments that have no facility.", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartments", "apartment_facilities"]}}
{"sample_id": 1195, "db_id": "apartment_rentals", "final": {"question": "Count the total number of apartment bookings.", "sql": "SELECT count(*) FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}}
{"sample_id": 1281, "db_id": "game_injury", "final": {"question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["injury_accident", "game"]}}
{"sample_id": 1282, "db_id": "game_injury", "final": {"question": "What are the id and name of the stadium where the most injury accidents happened?", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["injury_accident", "stadium", "game"]}}
{"sample_id": 1284, "db_id": "game_injury", "final": {"question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "source_tables": ["stadium", "injury_accident", "game"]}}
{"sample_id": 1288, "db_id": "game_injury", "final": {"question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'", "source_tables": ["stadium", "injury_accident", "game"]}}
{"sample_id": 1279, "db_id": "game_injury", "final": {"question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "sql": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "source_tables": ["injury_accident"]}}
{"sample_id": 1283, "db_id": "game_injury", "final": {"question": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["injury_accident", "stadium", "game"]}}
{"sample_id": 1280, "db_id": "game_injury", "final": {"question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "source_tables": ["injury_accident", "game"]}}
{"sample_id": 1276, "db_id": "game_injury", "final": {"question": "List the season, home team, away team of all the games.", "sql": "SELECT season ,  home_team ,  away_team FROM game", "source_tables": ["game"]}}
{"sample_id": 1291, "db_id": "game_injury", "final": {"question": "How many games has each stadium held?", "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "source_tables": ["stadium", "game"]}}
{"sample_id": 1290, "db_id": "game_injury", "final": {"question": "Which stadium name contains the substring \"Bank\"?", "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"", "source_tables": ["stadium"]}}
{"sample_id": 1278, "db_id": "game_injury", "final": {"question": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "source_tables": ["stadium"]}}
{"sample_id": 1303, "db_id": "soccer_1", "final": {"question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1302, "db_id": "soccer_1", "final": {"question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot", "source_tables": ["player_attributes"]}}
{"sample_id": 1299, "db_id": "soccer_1", "final": {"question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1300, "db_id": "soccer_1", "final": {"question": "List the names of all left-footed players who have overall rating between 85 and 90.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1293, "db_id": "soccer_1", "final": {"question": "List all country and league names.", "sql": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id", "source_tables": ["league", "country"]}}
{"sample_id": 1305, "db_id": "soccer_1", "final": {"question": "Who are the top 3 players in terms of overall rating?", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1298, "db_id": "soccer_1", "final": {"question": "What are the names of players who have the best dribbling?", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1304, "db_id": "soccer_1", "final": {"question": "List all of the ids for left-footed players with a height between 180cm and 190cm.", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1314, "db_id": "performance_attendance", "final": {"question": "Show the most common location of performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["performance"]}}
{"sample_id": 1310, "db_id": "performance_attendance", "final": {"question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"", "sql": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"", "source_tables": ["performance"]}}
{"sample_id": 1316, "db_id": "performance_attendance", "final": {"question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.", "sql": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000", "source_tables": ["performance"]}}
{"sample_id": 1319, "db_id": "performance_attendance", "final": {"question": "Show the dates of performances with attending members whose roles are \"Violin\".", "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"", "source_tables": ["member", "member_attendance", "performance"]}}
{"sample_id": 1311, "db_id": "performance_attendance", "final": {"question": "What is the average number of attendees for performances?", "sql": "SELECT avg(Attendance) FROM performance", "source_tables": ["performance"]}}
{"sample_id": 1321, "db_id": "performance_attendance", "final": {"question": "List the names of members who did not attend any performance.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "source_tables": ["member", "member_attendance"]}}
{"sample_id": 1315, "db_id": "performance_attendance", "final": {"question": "Show the locations that have at least two performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "source_tables": ["performance"]}}
{"sample_id": 1312, "db_id": "performance_attendance", "final": {"question": "What is the date of the performance with the highest number of attendees?", "sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "source_tables": ["performance"]}}
{"sample_id": 1318, "db_id": "performance_attendance", "final": {"question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC", "source_tables": ["member", "member_attendance", "performance"]}}
{"sample_id": 1359, "db_id": "college_2", "final": {"question": "What are the names and budgets of departments with budgets greater than the average?", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}}
{"sample_id": 1485, "db_id": "college_2", "final": {"question": "How many instructors teach a course in the Spring of 2010?", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}}
{"sample_id": 1454, "db_id": "college_2", "final": {"question": "Find the total number of students and total number of instructors for each department.", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "source_tables": ["student", "instructor", "department"]}}
{"sample_id": 1461, "db_id": "college_2", "final": {"question": "What are the names of students who have taken Statistics courses?", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["student", "course", "takes"]}}
{"sample_id": 1458, "db_id": "college_2", "final": {"question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}}
{"sample_id": 1327, "db_id": "college_2", "final": {"question": "Give the name and building of the departments with greater than average budget.", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}}
{"sample_id": 1487, "db_id": "college_2", "final": {"question": "What are the names and average salaries for departments with average salary higher than 42000?", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "source_tables": ["instructor"]}}
{"sample_id": 1389, "db_id": "college_2", "final": {"question": "What are the names of instructors who advise more than one student?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "source_tables": ["instructor", "advisor"]}}
{"sample_id": 1482, "db_id": "college_2", "final": {"question": "Find the salaries of all distinct instructors that are less than the largest salary.", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "source_tables": ["instructor"]}}
{"sample_id": 1373, "db_id": "college_2", "final": {"question": "What is the name of the department with the most credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "source_tables": ["course"]}}
{"sample_id": 1484, "db_id": "college_2", "final": {"question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}}
{"sample_id": 1405, "db_id": "college_2", "final": {"question": "Which year had the greatest number of courses?", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}}
{"sample_id": 1379, "db_id": "college_2", "final": {"question": "What are the names and buildings of the deparments, sorted by budget descending?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "source_tables": ["department"]}}
{"sample_id": 1403, "db_id": "college_2", "final": {"question": "How many courses are provided in each semester and year?", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "source_tables": ["section"]}}
{"sample_id": 1415, "db_id": "college_2", "final": {"question": "Give id of the instructor who advises students in the History department.", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "source_tables": ["student", "advisor"]}}
{"sample_id": 1417, "db_id": "college_2", "final": {"question": "What are the names and salaries of instructors who advises students in the History department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1412, "db_id": "college_2", "final": {"question": "Find the semester and year which has the least number of student taking any class.", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "source_tables": ["takes"]}}
{"sample_id": 1490, "db_id": "college_2", "final": {"question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1429, "db_id": "college_2", "final": {"question": "Give the title of the course offered in Chandler during the Fall of 2010.", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "source_tables": ["course", "section"]}}
{"sample_id": 1369, "db_id": "college_2", "final": {"question": "What are the names of the students who took classes in 2009 or 2010?", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "source_tables": ["student", "takes"]}}
{"sample_id": 1381, "db_id": "college_2", "final": {"question": "Give the name of the highest paid instructor.", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "source_tables": ["instructor"]}}
{"sample_id": 1476, "db_id": "college_2", "final": {"question": "Find courses that ran in Fall 2009 or in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1440, "db_id": "college_2", "final": {"question": "Find the name of instructors who didn't teach any courses?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1392, "db_id": "college_2", "final": {"question": "Find the number of rooms with more than 50 capacity for each building.", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "source_tables": ["classroom"]}}
{"sample_id": 1445, "db_id": "college_2", "final": {"question": "What are the names of instructors who didn't teach courses in the Spring?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1326, "db_id": "college_2", "final": {"question": "What is the name and building of the departments whose budget is more than the average budget?", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}}
{"sample_id": 1386, "db_id": "college_2", "final": {"question": "list in alphabetic order all course names and their instructors' names in year 2008.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "source_tables": ["course", "teaches", "instructor"]}}
{"sample_id": 1323, "db_id": "college_2", "final": {"question": "What are the distinct buildings with capacities of greater than 50?", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "source_tables": ["classroom"]}}
{"sample_id": 1334, "db_id": "college_2", "final": {"question": "How many rooms does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "source_tables": ["classroom"]}}
{"sample_id": 1349, "db_id": "college_2", "final": {"question": "What are the titles of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}}
{"sample_id": 1388, "db_id": "college_2", "final": {"question": "Find the name of instructors who are advising more than one student.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "source_tables": ["instructor", "advisor"]}}
{"sample_id": 1468, "db_id": "college_2", "final": {"question": "Find the names of all instructors who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1460, "db_id": "college_2", "final": {"question": "Find the name of students who took some course offered by Statistics department.", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["student", "course", "takes"]}}
{"sample_id": 1384, "db_id": "college_2", "final": {"question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "source_tables": ["student"]}}
{"sample_id": 1400, "db_id": "college_2", "final": {"question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "source_tables": ["instructor"]}}
{"sample_id": 1472, "db_id": "college_2", "final": {"question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}}
{"sample_id": 1411, "db_id": "college_2", "final": {"question": "How many students are in each department?", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "source_tables": ["student"]}}
{"sample_id": 1471, "db_id": "college_2", "final": {"question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1409, "db_id": "college_2", "final": {"question": "What is the name of the deparment with the highest enrollment?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 1351, "db_id": "college_2", "final": {"question": "Count the number of distinct instructors who have taught a course.", "sql": "SELECT COUNT (DISTINCT id) FROM teaches", "source_tables": ["teaches"]}}
{"sample_id": 1465, "db_id": "college_2", "final": {"question": "What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}}
{"sample_id": 1339, "db_id": "college_2", "final": {"question": "Count the number of departments which offer courses.", "sql": "SELECT count(DISTINCT dept_name) FROM course", "source_tables": ["course"]}}
{"sample_id": 1481, "db_id": "college_2", "final": {"question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1470, "db_id": "college_2", "final": {"question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1483, "db_id": "college_2", "final": {"question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "source_tables": ["instructor"]}}
{"sample_id": 1330, "db_id": "college_2", "final": {"question": "Find the name and building of the department with the highest budget.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "source_tables": ["department"]}}
{"sample_id": 1371, "db_id": "college_2", "final": {"question": "What are the names of the 3 departments with the most courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["course"]}}
{"sample_id": 1426, "db_id": "college_2", "final": {"question": "Find the names of students who have taken any course in the fall semester of year 2003.", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "source_tables": ["student", "takes"]}}
{"sample_id": 1335, "db_id": "college_2", "final": {"question": "Count the number of classrooms in Lamberton.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "source_tables": ["classroom"]}}
{"sample_id": 1431, "db_id": "college_2", "final": {"question": "What are the names of instructors who have taught C Programming courses?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "source_tables": ["instructor", "course", "teaches"]}}
{"sample_id": 1433, "db_id": "college_2", "final": {"question": "What are the names and salaries of instructors who advise students in the Math department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1435, "db_id": "college_2", "final": {"question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1399, "db_id": "college_2", "final": {"question": "How many total credits are offered by each department?", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "source_tables": ["course"]}}
{"sample_id": 1344, "db_id": "college_2", "final": {"question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "source_tables": ["course", "prereq"]}}
{"sample_id": 1398, "db_id": "college_2", "final": {"question": "Find the total credits of courses provided by different department.", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "source_tables": ["course"]}}
{"sample_id": 1328, "db_id": "college_2", "final": {"question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "source_tables": ["classroom"]}}
{"sample_id": 1337, "db_id": "college_2", "final": {"question": "Count the number of students who have advisors.", "sql": "SELECT count(DISTINCT s_id) FROM advisor", "source_tables": ["advisor"]}}
{"sample_id": 1331, "db_id": "college_2", "final": {"question": "What is the department name and corresponding building for the department with the greatest budget?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "source_tables": ["department"]}}
{"sample_id": 1353, "db_id": "college_2", "final": {"question": "What is the sum of budgets of the Marketing and Finance departments?", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "source_tables": ["department"]}}
{"sample_id": 1418, "db_id": "college_2", "final": {"question": "Find the id of the courses that do not have any prerequisite?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "source_tables": ["course", "prereq"]}}
{"sample_id": 1457, "db_id": "college_2", "final": {"question": "What are the names of students who have taken the prerequisite for the course International Finance?", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "source_tables": ["student", "course", "prereq", "takes"]}}
{"sample_id": 1366, "db_id": "college_2", "final": {"question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}}
{"sample_id": 1477, "db_id": "college_2", "final": {"question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1478, "db_id": "college_2", "final": {"question": "Find courses that ran in Fall 2009 and in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1401, "db_id": "college_2", "final": {"question": "What is the lowest salary in departments with average salary greater than the overall average.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "source_tables": ["instructor"]}}
{"sample_id": 1336, "db_id": "college_2", "final": {"question": "How many students have advisors?", "sql": "SELECT count(DISTINCT s_id) FROM advisor", "source_tables": ["advisor"]}}
{"sample_id": 1393, "db_id": "college_2", "final": {"question": "How many rooms in each building have a capacity of over 50?", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "source_tables": ["classroom"]}}
{"sample_id": 1414, "db_id": "college_2", "final": {"question": "What is the id of the instructor who advises of all students from History department?", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "source_tables": ["student", "advisor"]}}
{"sample_id": 1448, "db_id": "college_2", "final": {"question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "source_tables": ["instructor", "department"]}}
{"sample_id": 1329, "db_id": "college_2", "final": {"question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "source_tables": ["classroom"]}}
{"sample_id": 1424, "db_id": "college_2", "final": {"question": "Find the title of course whose prerequisite is course Differential Geometry.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "source_tables": ["course", "prereq"]}}
{"sample_id": 1469, "db_id": "college_2", "final": {"question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1368, "db_id": "college_2", "final": {"question": "Find the name of students who took any class in the years of 2009 and 2010.", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "source_tables": ["student", "takes"]}}
{"sample_id": 1456, "db_id": "college_2", "final": {"question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "source_tables": ["student", "course", "prereq", "takes"]}}
{"sample_id": 1466, "db_id": "college_2", "final": {"question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}}
{"sample_id": 1395, "db_id": "college_2", "final": {"question": "What are the greatest and average capacity for rooms in each building?", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "source_tables": ["classroom"]}}
{"sample_id": 1416, "db_id": "college_2", "final": {"question": "Find the name and salary of the instructors who are advisors of any student from History department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1413, "db_id": "college_2", "final": {"question": "Which semeseter and year had the fewest students?", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "source_tables": ["takes"]}}
{"sample_id": 1370, "db_id": "college_2", "final": {"question": "Find the names of the top 3 departments that provide the largest amount of courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["course"]}}
{"sample_id": 1442, "db_id": "college_2", "final": {"question": "Find the id of instructors who didn't teach any courses?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1480, "db_id": "college_2", "final": {"question": "Find courses that ran in Fall 2009 but not in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1340, "db_id": "college_2", "final": {"question": "How many different courses offered by Physics department?", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "source_tables": ["course"]}}
{"sample_id": 1462, "db_id": "college_2", "final": {"question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["course", "section"]}}
{"sample_id": 1453, "db_id": "college_2", "final": {"question": "What are the names of students who haven't taken any Biology courses?", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "source_tables": ["student", "course", "takes"]}}
{"sample_id": 1365, "db_id": "college_2", "final": {"question": "What are the titles of courses that are in the Statistics department but not the Psychology department?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}}
{"sample_id": 1324, "db_id": "college_2", "final": {"question": "Count the number of rooms that are not in the Lamberton building.", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "source_tables": ["classroom"]}}
{"sample_id": 1356, "db_id": "college_2", "final": {"question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "source_tables": ["classroom"]}}
{"sample_id": 1441, "db_id": "college_2", "final": {"question": "What are the names of instructors who didn't teach?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1346, "db_id": "college_2", "final": {"question": "How many courses that do not have prerequisite?", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}}
{"sample_id": 1479, "db_id": "college_2", "final": {"question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1364, "db_id": "college_2", "final": {"question": "Find the title of course that is provided by Statistics but not Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}}
{"sample_id": 1382, "db_id": "college_2", "final": {"question": "List the information of all instructors ordered by their salary in ascending order.", "sql": "SELECT * FROM instructor ORDER BY salary", "source_tables": ["instructor"]}}
{"sample_id": 1410, "db_id": "college_2", "final": {"question": "Find the total number of students in each department.", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "source_tables": ["student"]}}
{"sample_id": 1322, "db_id": "college_2", "final": {"question": "Find the buildings which have rooms with capacity more than 50.", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "source_tables": ["classroom"]}}
{"sample_id": 1489, "db_id": "college_2", "final": {"question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1446, "db_id": "college_2", "final": {"question": "Find the name of the department which has the highest average salary of professors.", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "source_tables": ["instructor"]}}
{"sample_id": 1423, "db_id": "college_2", "final": {"question": "Give the title of the prerequisite to the course International Finance.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "source_tables": ["course", "prereq"]}}
{"sample_id": 1422, "db_id": "college_2", "final": {"question": "What is the title of the prerequisite class of International Finance course?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "source_tables": ["course", "prereq"]}}
{"sample_id": 1387, "db_id": "college_2", "final": {"question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "source_tables": ["course", "teaches", "instructor"]}}
{"sample_id": 1450, "db_id": "college_2", "final": {"question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "source_tables": ["course", "classroom", "section"]}}
{"sample_id": 1394, "db_id": "college_2", "final": {"question": "Find the maximum and average capacity among rooms in each building.", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "source_tables": ["classroom"]}}
{"sample_id": 1437, "db_id": "college_2", "final": {"question": "What is the title of the course that is a prerequisite for Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "source_tables": ["course", "prereq"]}}
{"sample_id": 1505, "db_id": "debate", "final": {"question": "Show the names of people who have been on the negative side of debates at least twice.", "sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["debate_people", "people"]}}
{"sample_id": 1500, "db_id": "debate", "final": {"question": "Show the distinct venues of debates", "sql": "SELECT DISTINCT Venue FROM debate", "source_tables": ["debate"]}}
{"sample_id": 1497, "db_id": "debate", "final": {"question": "What is the party of the youngest people?", "sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 1506, "db_id": "debate", "final": {"question": "List the names of people that have not been on the affirmative side of debates.", "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "source_tables": ["people", "debate_people"]}}
{"sample_id": 1503, "db_id": "debate", "final": {"question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "source_tables": ["debate_people", "people", "debate"]}}
{"sample_id": 1499, "db_id": "debate", "final": {"question": "Show the party that has the most people.", "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 1501, "db_id": "debate", "final": {"question": "Show the names of people, and dates and venues of debates they are on the affirmative side.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "source_tables": ["debate_people", "people", "debate"]}}
{"sample_id": 1504, "db_id": "debate", "final": {"question": "Show the names of people and the number of times they have been on the affirmative side of debates.", "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "source_tables": ["debate_people", "people"]}}
{"sample_id": 1496, "db_id": "debate", "final": {"question": "Show the names of people aged either 35 or 36.", "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "source_tables": ["people"]}}
{"sample_id": 1525, "db_id": "insurance_and_eClaims", "final": {"question": "How many claim processing stages are there in total?", "sql": "SELECT count(*) FROM claims_processing_stages", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1530, "db_id": "insurance_and_eClaims", "final": {"question": "Which customers have the substring \"Diana\" in their names? Return the customer details.", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "source_tables": ["customers"]}}
{"sample_id": 1528, "db_id": "insurance_and_eClaims", "final": {"question": "Which claim processing stage has the most claims? Show the claim status name.", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["claims_processing_stages", "claims_processing"]}}
{"sample_id": 1532, "db_id": "insurance_and_eClaims", "final": {"question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "source_tables": ["customers", "policies"]}}
{"sample_id": 1508, "db_id": "insurance_and_eClaims", "final": {"question": "Sort the customer names in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "source_tables": ["customers"]}}
{"sample_id": 1534, "db_id": "insurance_and_eClaims", "final": {"question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "source_tables": ["customers", "policies"]}}
{"sample_id": 1533, "db_id": "insurance_and_eClaims", "final": {"question": "Find the names of customers who either have an deputy policy or uniformed policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "source_tables": ["customers", "policies"]}}
{"sample_id": 1541, "db_id": "insurance_and_eClaims", "final": {"question": "What is the description of the claim status \"Open\"?", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1516, "db_id": "insurance_and_eClaims", "final": {"question": "What are the total amount and average amount paid in claim headers?", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "source_tables": ["claim_headers"]}}
{"sample_id": 1514, "db_id": "insurance_and_eClaims", "final": {"question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "source_tables": ["policies"]}}
{"sample_id": 1513, "db_id": "insurance_and_eClaims", "final": {"question": "Find all the policy types that are used by more than 2 customers.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "source_tables": ["policies"]}}
{"sample_id": 1512, "db_id": "insurance_and_eClaims", "final": {"question": "Find the type code of the most frequently used policy.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["policies"]}}
{"sample_id": 1539, "db_id": "insurance_and_eClaims", "final": {"question": "Find the name of the customer that has been involved in the most policies.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "policies"]}}
{"sample_id": 1517, "db_id": "insurance_and_eClaims", "final": {"question": "Find the total amount claimed in the most recently created document.", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "source_tables": ["claims_documents", "claim_headers"]}}
{"sample_id": 1546, "db_id": "insurance_and_eClaims", "final": {"question": "Find the customer who started a policy most recently.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "source_tables": ["customers", "policies"]}}
{"sample_id": 1519, "db_id": "insurance_and_eClaims", "final": {"question": "What is the name of the customer who has made the largest amount of claim in a single claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "source_tables": ["customers", "policies", "claim_headers"]}}
{"sample_id": 1535, "db_id": "insurance_and_eClaims", "final": {"question": "Find the names of all the customers and staff members.", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 1518, "db_id": "insurance_and_eClaims", "final": {"question": "How much amount in total were claimed in the most recently created document?", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "source_tables": ["claims_documents", "claim_headers"]}}
{"sample_id": 1537, "db_id": "insurance_and_eClaims", "final": {"question": "Find the number of records of each policy type and its type code.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "source_tables": ["policies"]}}
{"sample_id": 1523, "db_id": "insurance_and_eClaims", "final": {"question": "Find the names of customers who have no policies associated.", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "policies"]}}
{"sample_id": 1529, "db_id": "insurance_and_eClaims", "final": {"question": "Find the names of customers whose name contains \"Diana\".", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "source_tables": ["customers"]}}
{"sample_id": 1515, "db_id": "insurance_and_eClaims", "final": {"question": "Find the total and average amount paid in claim headers.", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "source_tables": ["claim_headers"]}}
{"sample_id": 1521, "db_id": "insurance_and_eClaims", "final": {"question": "What is the name of the customer who has made the minimum amount of payment in one claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "source_tables": ["customers", "policies", "claim_headers"]}}
{"sample_id": 1540, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer have the most policies? Give me the customer details.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "policies"]}}
{"sample_id": 1572, "db_id": "customers_and_invoices", "final": {"question": "What are the first names and ids for customers who have two or more accounts?", "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1592, "db_id": "customers_and_invoices", "final": {"question": "What is the id of the account with the most transactions?", "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["financial_transactions"]}}
{"sample_id": 1553, "db_id": "customers_and_invoices", "final": {"question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1599, "db_id": "customers_and_invoices", "final": {"question": "Show the invoice number and the number of transactions for each invoice.", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "source_tables": ["financial_transactions"]}}
{"sample_id": 1582, "db_id": "customers_and_invoices", "final": {"question": "Count the number of financial transactions that the account with the name 337 has.", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "source_tables": ["accounts", "financial_transactions"]}}
{"sample_id": 1577, "db_id": "customers_and_invoices", "final": {"question": "How many transactions do we have?", "sql": "SELECT count(*) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 1602, "db_id": "customers_and_invoices", "final": {"question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?", "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "source_tables": ["invoices", "financial_transactions"]}}
{"sample_id": 1591, "db_id": "customers_and_invoices", "final": {"question": "Show the account id with most number of transactions.", "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["financial_transactions"]}}
{"sample_id": 1567, "db_id": "customers_and_invoices", "final": {"question": "What is the customer id, first and last name with most number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1585, "db_id": "customers_and_invoices", "final": {"question": "Show ids for all transactions whose amounts are greater than the average.", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "source_tables": ["financial_transactions"]}}
{"sample_id": 1547, "db_id": "customers_and_invoices", "final": {"question": "Show the number of accounts.", "sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 1565, "db_id": "customers_and_invoices", "final": {"question": "How many accounts does each customer have? List the number and customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"]}}
{"sample_id": 1569, "db_id": "customers_and_invoices", "final": {"question": "Show id, first name and last name for all customers and the number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1610, "db_id": "customers_and_invoices", "final": {"question": "Return the order ids and details for orderes with two or more invoices.", "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "source_tables": ["invoices", "orders"]}}
{"sample_id": 1579, "db_id": "customers_and_invoices", "final": {"question": "How many transaction does each account have? Show the number and account id.", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 1611, "db_id": "customers_and_invoices", "final": {"question": "What is the customer last name, id and phone number with most number of orders?", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 1568, "db_id": "customers_and_invoices", "final": {"question": "Return the id and full name of the customer with the most accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1621, "db_id": "customers_and_invoices", "final": {"question": "Show all product names and the number of customers having an order on each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "source_tables": ["order_items", "products", "orders"]}}
{"sample_id": 1562, "db_id": "customers_and_invoices", "final": {"question": "What are the distinct first names, last names, and phone numbers for customers with accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "accounts"]}}
{"sample_id": 1573, "db_id": "customers_and_invoices", "final": {"question": "Show the number of customers.", "sql": "SELECT count(*) FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 1597, "db_id": "customers_and_invoices", "final": {"question": "Show all product colors.", "sql": "SELECT DISTINCT product_color FROM Products", "source_tables": ["products"]}}
{"sample_id": 1626, "db_id": "customers_and_invoices", "final": {"question": "Give the order ids for all orders, as well as the total product quantity in each.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1576, "db_id": "customers_and_invoices", "final": {"question": "How many customers are there of each gender?", "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "source_tables": ["customers"]}}
{"sample_id": 1601, "db_id": "customers_and_invoices", "final": {"question": "What is the invoice number and invoice date for the invoice with most number of transactions?", "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "source_tables": ["invoices", "financial_transactions"]}}
{"sample_id": 1548, "db_id": "customers_and_invoices", "final": {"question": "How many accounts are there?", "sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 1606, "db_id": "customers_and_invoices", "final": {"question": "What are the invoice dates, order ids, and order details for all invoices?", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "source_tables": ["invoices", "orders"]}}
{"sample_id": 1616, "db_id": "customers_and_invoices", "final": {"question": "What are the different product names, and what is the sum of quantity ordered for each product?", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "source_tables": ["order_items", "products"]}}
{"sample_id": 1598, "db_id": "customers_and_invoices", "final": {"question": "What are the different product colors?", "sql": "SELECT DISTINCT product_color FROM Products", "source_tables": ["products"]}}
{"sample_id": 1554, "db_id": "customers_and_invoices", "final": {"question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1561, "db_id": "customers_and_invoices", "final": {"question": "Show the unique first names, last names, and phone numbers for all customers with any account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "accounts"]}}
{"sample_id": 1590, "db_id": "customers_and_invoices", "final": {"question": "Return the names and ids of each account, as well as the number of transactions.", "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "source_tables": ["accounts", "financial_transactions"]}}
{"sample_id": 1556, "db_id": "customers_and_invoices", "final": {"question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?", "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1558, "db_id": "customers_and_invoices", "final": {"question": "What are the full names of customers with the account name 900?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1589, "db_id": "customers_and_invoices", "final": {"question": "Show the account name, id and the number of transactions for each account.", "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "source_tables": ["accounts", "financial_transactions"]}}
{"sample_id": 1594, "db_id": "customers_and_invoices", "final": {"question": "What are the ids and names of accounts with 4 or more transactions?", "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "source_tables": ["accounts", "financial_transactions"]}}
{"sample_id": 1586, "db_id": "customers_and_invoices", "final": {"question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "source_tables": ["financial_transactions"]}}
{"sample_id": 1624, "db_id": "customers_and_invoices", "final": {"question": "How many different products correspond to each order id?", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1575, "db_id": "customers_and_invoices", "final": {"question": "Show the number of customers for each gender.", "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "source_tables": ["customers"]}}
{"sample_id": 1574, "db_id": "customers_and_invoices", "final": {"question": "Count the number of customers.", "sql": "SELECT count(*) FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 1615, "db_id": "customers_and_invoices", "final": {"question": "Show all product names and the total quantity ordered for each product name.", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "source_tables": ["order_items", "products"]}}
{"sample_id": 1622, "db_id": "customers_and_invoices", "final": {"question": "What are teh names of the different products, as well as the number of customers who have ordered each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "source_tables": ["order_items", "products", "orders"]}}
{"sample_id": 1557, "db_id": "customers_and_invoices", "final": {"question": "Show the first name and last name for the customer with account name 900.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1580, "db_id": "customers_and_invoices", "final": {"question": "Count the number of financial transactions that correspond to each account id.", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 1583, "db_id": "customers_and_invoices", "final": {"question": "What is the average, minimum, maximum, and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 1560, "db_id": "customers_and_invoices", "final": {"question": "Count the number of customers who do not have an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "source_tables": ["customers", "accounts"]}}
{"sample_id": 1628, "db_id": "customers_and_invoices", "final": {"question": "Count the number of products that were never ordered.", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "source_tables": ["order_items", "products"]}}
{"sample_id": 1612, "db_id": "customers_and_invoices", "final": {"question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 1571, "db_id": "customers_and_invoices", "final": {"question": "Show first name and id for all customers with at least 2 accounts.", "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1614, "db_id": "customers_and_invoices", "final": {"question": "What are the names of products that have never been ordered?", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 1632, "db_id": "wedding", "final": {"question": "Show the opening year in whcih at least two churches opened.", "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "source_tables": ["church"]}}
{"sample_id": 1635, "db_id": "wedding", "final": {"question": "Show the name and opening year for three churches that opened most recently.", "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "source_tables": ["church"]}}
{"sample_id": 1647, "db_id": "wedding", "final": {"question": "Show all countries and the number of people from each country.", "sql": "SELECT country ,  count(*) FROM people GROUP BY country", "source_tables": ["people"]}}
{"sample_id": 1642, "db_id": "wedding", "final": {"question": "Show all church names except for those that had a wedding in year 2015.", "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015", "source_tables": ["wedding", "church"]}}
{"sample_id": 1638, "db_id": "wedding", "final": {"question": "Show the minimum, maximum, and average age for all people.", "sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people", "source_tables": ["people"]}}
{"sample_id": 1639, "db_id": "wedding", "final": {"question": "Show the name and country for all people whose age is smaller than the average.", "sql": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "source_tables": ["people"]}}
{"sample_id": 1640, "db_id": "wedding", "final": {"question": "Show the pair of male and female names in all weddings after year 2014", "sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014", "source_tables": ["wedding", "people"]}}
{"sample_id": 1633, "db_id": "wedding", "final": {"question": "Show the organizer and name for churches that opened between 1830 and 1840.", "sql": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840", "source_tables": ["church"]}}
{"sample_id": 1637, "db_id": "wedding", "final": {"question": "Show the country where people older than 30 and younger than 25 are from.", "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30", "source_tables": ["people"]}}
{"sample_id": 1643, "db_id": "wedding", "final": {"question": "Show all church names that have hosted least two weddings.", "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "source_tables": ["wedding", "church"]}}
{"sample_id": 1644, "db_id": "wedding", "final": {"question": "Show the names for all females from Canada having a wedding in year 2016.", "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'", "source_tables": ["wedding", "people"]}}
{"sample_id": 1631, "db_id": "wedding", "final": {"question": "List all church names in descending order of opening date.", "sql": "SELECT name FROM church ORDER BY open_date DESC", "source_tables": ["church"]}}
{"sample_id": 1676, "db_id": "theme_gallery", "final": {"question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?", "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "source_tables": ["exhibition"]}}
{"sample_id": 1685, "db_id": "theme_gallery", "final": {"question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1668, "db_id": "theme_gallery", "final": {"question": "How many exhibitions has each artist had?", "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1688, "db_id": "theme_gallery", "final": {"question": "What are the names of artist whose exhibitions draw over 200 attendees on average?", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "source_tables": ["exhibition", "artist", "exhibition_record"]}}
{"sample_id": 1664, "db_id": "theme_gallery", "final": {"question": "Count the number of exhibitions that happened in or after 2005.", "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "source_tables": ["exhibition"]}}
{"sample_id": 1667, "db_id": "theme_gallery", "final": {"question": "Show all artist names and the number of exhibitions for each artist.", "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1670, "db_id": "theme_gallery", "final": {"question": "Return the name and country corresponding to the artist who has had the most exhibitions.", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1682, "db_id": "theme_gallery", "final": {"question": "What are the names of artists who did not have an exhibition in 2004?", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1681, "db_id": "theme_gallery", "final": {"question": "Show all artist names who didn't have an exhibition in 2004.", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1654, "db_id": "theme_gallery", "final": {"question": "Return the different countries for artists.", "sql": "SELECT DISTINCT country FROM artist", "source_tables": ["artist"]}}
{"sample_id": 1651, "db_id": "theme_gallery", "final": {"question": "Show all artist name, age, and country ordered by the yeared they joined.", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "source_tables": ["artist"]}}
{"sample_id": 1663, "db_id": "theme_gallery", "final": {"question": "How many exhibition are there in year 2005 or after?", "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "source_tables": ["exhibition"]}}
{"sample_id": 1683, "db_id": "theme_gallery", "final": {"question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1684, "db_id": "theme_gallery", "final": {"question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1656, "db_id": "theme_gallery", "final": {"question": "What are the names and year of joining for artists that do not have the country \"United States\"?", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "source_tables": ["artist"]}}
{"sample_id": 1649, "db_id": "theme_gallery", "final": {"question": "How many artists do we have?", "sql": "SELECT count(*) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 1657, "db_id": "theme_gallery", "final": {"question": "How many artists are above age 46 and joined after 1990?", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "source_tables": ["artist"]}}
{"sample_id": 1665, "db_id": "theme_gallery", "final": {"question": "Show theme and year for all exhibitions with ticket prices lower than 15.", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "source_tables": ["exhibition"]}}
{"sample_id": 1673, "db_id": "theme_gallery", "final": {"question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?", "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1672, "db_id": "theme_gallery", "final": {"question": "What are the names of artists that have not had any exhibitions?", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1674, "db_id": "theme_gallery", "final": {"question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.", "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1677, "db_id": "theme_gallery", "final": {"question": "Show theme and year for all exhibitions in an descending order of ticket price.", "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "source_tables": ["exhibition"]}}
{"sample_id": 1660, "db_id": "theme_gallery", "final": {"question": "Return the average and minimum ages across artists from the United States.", "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "source_tables": ["artist"]}}
{"sample_id": 1661, "db_id": "theme_gallery", "final": {"question": "What is the name of the artist who joined latest?", "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "source_tables": ["artist"]}}
{"sample_id": 1697, "db_id": "epinions_1", "final": {"question": "Find the number of items that did not receive any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1717, "db_id": "epinions_1", "final": {"question": "Find the number of users who did not write any review.", "sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "source_tables": ["review", "useracct"]}}
{"sample_id": 1691, "db_id": "epinions_1", "final": {"question": "Find the number of reviews.", "sql": "SELECT count(*) FROM review", "source_tables": ["review"]}}
{"sample_id": 1707, "db_id": "epinions_1", "final": {"question": "Find the name and id of the item with the highest average rating.", "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1", "source_tables": ["item", "review"]}}
{"sample_id": 1709, "db_id": "epinions_1", "final": {"question": "For each user, return the name and the average rating of reviews given by them.", "sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "source_tables": ["review", "useracct"]}}
{"sample_id": 1715, "db_id": "epinions_1", "final": {"question": "Find the names of the items that did not receive any review.", "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1695, "db_id": "epinions_1", "final": {"question": "How many different users wrote some reviews?", "sql": "SELECT count(DISTINCT u_id) FROM review", "source_tables": ["review"]}}
{"sample_id": 1702, "db_id": "epinions_1", "final": {"question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "source_tables": ["item", "review"]}}
{"sample_id": 1701, "db_id": "epinions_1", "final": {"question": "Find the titles of items that received any rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "source_tables": ["item", "review"]}}
{"sample_id": 1690, "db_id": "epinions_1", "final": {"question": "List all information in the item table.", "sql": "SELECT * FROM item", "source_tables": ["item"]}}
{"sample_id": 1699, "db_id": "epinions_1", "final": {"question": "Find the names of goods that receive a rating of 10.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10", "source_tables": ["item", "review"]}}
{"sample_id": 1696, "db_id": "epinions_1", "final": {"question": "How many different items were reviewed by some users?", "sql": "SELECT count(DISTINCT i_id) FROM review", "source_tables": ["review"]}}
{"sample_id": 1714, "db_id": "epinions_1", "final": {"question": "Find the name of the target user with the lowest trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "source_tables": ["trust", "useracct"]}}
{"sample_id": 1704, "db_id": "epinions_1", "final": {"question": "Find the name of the item with the lowest average rating.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1", "source_tables": ["item", "review"]}}
{"sample_id": 1689, "db_id": "epinions_1", "final": {"question": "Find the id of the item whose title is \"orange\".", "sql": "SELECT i_id FROM item WHERE title  =  \"orange\"", "source_tables": ["item"]}}
{"sample_id": 1694, "db_id": "epinions_1", "final": {"question": "Find the highest rank of all reviews.", "sql": "SELECT min(rank) FROM review", "source_tables": ["review"]}}
{"sample_id": 1698, "db_id": "epinions_1", "final": {"question": "Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "source_tables": ["review", "useracct"]}}
{"sample_id": 1712, "db_id": "epinions_1", "final": {"question": "Find the name of the source user with the highest average trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1", "source_tables": ["trust", "useracct"]}}
{"sample_id": 1723, "db_id": "riding_club", "final": {"question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".", "sql": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"", "source_tables": ["player"]}}
{"sample_id": 1732, "db_id": "riding_club", "final": {"question": "List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "source_tables": ["player_coach", "player"]}}
{"sample_id": 1722, "db_id": "riding_club", "final": {"question": "List the name and residence for players whose occupation is not \"Researcher\".", "sql": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"", "source_tables": ["player"]}}
{"sample_id": 1733, "db_id": "riding_club", "final": {"question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"", "source_tables": ["player"]}}
{"sample_id": 1727, "db_id": "riding_club", "final": {"question": "Show the residences that have at least two players.", "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "source_tables": ["player"]}}
{"sample_id": 1735, "db_id": "riding_club", "final": {"question": "How many gold medals has the club with the most coaches won?", "sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["match_result", "coach"]}}
{"sample_id": 1726, "db_id": "riding_club", "final": {"question": "Please show the most common occupation of players.", "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["player"]}}
{"sample_id": 1720, "db_id": "riding_club", "final": {"question": "List the names of players in ascending order of votes.", "sql": "SELECT Player_name FROM player ORDER BY Votes ASC", "source_tables": ["player"]}}
{"sample_id": 1734, "db_id": "riding_club", "final": {"question": "How many coaches does each club has? List the club id, name and the number of coaches.", "sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id", "source_tables": ["club", "coach"]}}
{"sample_id": 1728, "db_id": "riding_club", "final": {"question": "Show the names of players and names of their coaches.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "source_tables": ["player", "player_coach", "coach"]}}
{"sample_id": 1743, "db_id": "gymnast", "final": {"question": "Return the average horizontal bar points across all gymnasts.", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "source_tables": ["gymnast"]}}
{"sample_id": 1775, "db_id": "gymnast", "final": {"question": "What are the ages of the gymnasts, ordered descending by their total points?", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1766, "db_id": "gymnast", "final": {"question": "List the names of gymnasts in ascending order by their heights.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1753, "db_id": "gymnast", "final": {"question": "What are the names of the five oldest people?", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "source_tables": ["people"]}}
{"sample_id": 1742, "db_id": "gymnast", "final": {"question": "What is the average horizontal bar points for all gymnasts?", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "source_tables": ["gymnast"]}}
{"sample_id": 1758, "db_id": "gymnast", "final": {"question": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1739, "db_id": "gymnast", "final": {"question": "What are the total points for all gymnasts, ordered by total points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "source_tables": ["gymnast"]}}
{"sample_id": 1744, "db_id": "gymnast", "final": {"question": "What are the names of people in ascending alphabetical order?", "sql": "SELECT Name FROM People ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 1771, "db_id": "gymnast", "final": {"question": "From which hometowns did both people older than 23 and younger than 20 come from?", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "source_tables": ["people"]}}
{"sample_id": 1760, "db_id": "gymnast", "final": {"question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1768, "db_id": "gymnast", "final": {"question": "List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1754, "db_id": "gymnast", "final": {"question": "What is the total point count of the youngest gymnast?", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1759, "db_id": "gymnast", "final": {"question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1745, "db_id": "gymnast", "final": {"question": "Return the names of people, ordered alphabetically.", "sql": "SELECT Name FROM People ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 1736, "db_id": "gymnast", "final": {"question": "How many gymnasts are there?", "sql": "SELECT count(*) FROM gymnast", "source_tables": ["gymnast"]}}
{"sample_id": 1763, "db_id": "gymnast", "final": {"question": "Return the hometown that is most common among gymnasts.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1761, "db_id": "gymnast", "final": {"question": "How many gymnasts are from each hometown?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1765, "db_id": "gymnast", "final": {"question": "Give the hometowns from which two or more gymnasts are from.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1741, "db_id": "gymnast", "final": {"question": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "source_tables": ["gymnast"]}}
{"sample_id": 1740, "db_id": "gymnast", "final": {"question": "List the total points of gymnasts in descending order of floor exercise points.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "source_tables": ["gymnast"]}}
{"sample_id": 1751, "db_id": "gymnast", "final": {"question": "Return the age of the person with the greatest height.", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 1769, "db_id": "gymnast", "final": {"question": "From which hometowns did no gymnasts come from?", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1756, "db_id": "gymnast", "final": {"question": "What is the average age of all gymnasts?", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1747, "db_id": "gymnast", "final": {"question": "Return the names of the gymnasts.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1808, "db_id": "small_bank_1", "final": {"question": "Find the name of accounts whose checking balance is below the average checking balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1812, "db_id": "small_bank_1", "final": {"question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "source_tables": ["savings", "checking"]}}
{"sample_id": 1809, "db_id": "small_bank_1", "final": {"question": "What are the names of customers with checking balances lower than the average checking balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1806, "db_id": "small_bank_1", "final": {"question": "Find the total saving balance for each account name.", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "source_tables": ["accounts", "savings"]}}
{"sample_id": 1814, "db_id": "small_bank_1", "final": {"question": "Find the name and checking balance of the account with the lowest saving balance.", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1785, "db_id": "small_bank_1", "final": {"question": "Find the number of accounts with a savings balance that is higher than the average savings balance.", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "source_tables": ["savings"]}}
{"sample_id": 1793, "db_id": "small_bank_1", "final": {"question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1803, "db_id": "small_bank_1", "final": {"question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1811, "db_id": "small_bank_1", "final": {"question": "What is the savings balance of the account belonging to the customer with the highest checking balance?", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1819, "db_id": "small_bank_1", "final": {"question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1801, "db_id": "small_bank_1", "final": {"question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1807, "db_id": "small_bank_1", "final": {"question": "What are the names of customers with accounts, and what are the total savings balances for each?", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "source_tables": ["accounts", "savings"]}}
{"sample_id": 1816, "db_id": "small_bank_1", "final": {"question": "Find the name, checking balance and saving balance of all accounts in the bank.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1780, "db_id": "small_bank_1", "final": {"question": "What is the total checking balance in all accounts?", "sql": "SELECT sum(balance) FROM checking", "source_tables": ["checking"]}}
{"sample_id": 1794, "db_id": "small_bank_1", "final": {"question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1776, "db_id": "small_bank_1", "final": {"question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "source_tables": ["accounts", "savings"]}}
{"sample_id": 1788, "db_id": "small_bank_1", "final": {"question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1786, "db_id": "small_bank_1", "final": {"question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1825, "db_id": "small_bank_1", "final": {"question": "What are names and savings balances of the three accounts with the highest savings balances?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "source_tables": ["accounts", "savings"]}}
{"sample_id": 1777, "db_id": "small_bank_1", "final": {"question": "What is the total balance of savings accounts not belonging to someone with the name Brown?", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "source_tables": ["accounts", "savings"]}}
{"sample_id": 1798, "db_id": "small_bank_1", "final": {"question": "Find the name of account that has the lowest total checking and saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1796, "db_id": "small_bank_1", "final": {"question": "List all customers\u2019 names in the alphabetical order.", "sql": "SELECT name FROM accounts ORDER BY name", "source_tables": ["accounts"]}}
{"sample_id": 1815, "db_id": "small_bank_1", "final": {"question": "What is the name and checking balance of the account which has the lowest savings balance?", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1797, "db_id": "small_bank_1", "final": {"question": "What are the names of all the customers in alphabetical order?", "sql": "SELECT name FROM accounts ORDER BY name", "source_tables": ["accounts"]}}
{"sample_id": 1791, "db_id": "small_bank_1", "final": {"question": "What are the checking and savings balances in accounts belonging to Brown?", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1781, "db_id": "small_bank_1", "final": {"question": "Find the total balance across checking accounts.", "sql": "SELECT sum(balance) FROM checking", "source_tables": ["checking"]}}
{"sample_id": 1784, "db_id": "small_bank_1", "final": {"question": "How many accounts have a savings balance above the average savings balance?", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "source_tables": ["savings"]}}
{"sample_id": 1779, "db_id": "small_bank_1", "final": {"question": "Count the number of accounts.", "sql": "SELECT count(*) FROM accounts", "source_tables": ["accounts"]}}
{"sample_id": 1813, "db_id": "small_bank_1", "final": {"question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "source_tables": ["savings", "checking"]}}
{"sample_id": 1787, "db_id": "small_bank_1", "final": {"question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1841, "db_id": "browser_web", "final": {"question": "Which accelerator name contains substring \"Opera\"?", "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"", "source_tables": ["web_client_accelerator"]}}
{"sample_id": 1828, "db_id": "browser_web", "final": {"question": "List the ids, names and market shares of all browsers.", "sql": "SELECT id ,  name ,  market_share FROM browser", "source_tables": ["browser"]}}
{"sample_id": 1830, "db_id": "browser_web", "final": {"question": "What is the id and market share of the browser Safari?", "sql": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'", "source_tables": ["browser"]}}
{"sample_id": 1832, "db_id": "browser_web", "final": {"question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998", "source_tables": ["accelerator_compatible_browser", "browser", "web_client_accelerator"]}}
{"sample_id": 1835, "db_id": "browser_web", "final": {"question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'", "source_tables": ["accelerator_compatible_browser", "browser", "web_client_accelerator"]}}
{"sample_id": 1836, "db_id": "browser_web", "final": {"question": "How many different kinds of clients are supported by the web clients accelerators?", "sql": "SELECT count(DISTINCT client) FROM web_client_accelerator", "source_tables": ["web_client_accelerator"]}}
{"sample_id": 1827, "db_id": "browser_web", "final": {"question": "List the name of browsers in descending order by market share.", "sql": "SELECT name FROM browser ORDER BY market_share DESC", "source_tables": ["browser"]}}
{"sample_id": 1840, "db_id": "browser_web", "final": {"question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'", "source_tables": ["accelerator_compatible_browser", "browser", "web_client_accelerator"]}}
{"sample_id": 1833, "db_id": "browser_web", "final": {"question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["accelerator_compatible_browser", "web_client_accelerator"]}}
{"sample_id": 1826, "db_id": "browser_web", "final": {"question": "How many main stream browsers whose market share is at least 5 exist?", "sql": "SELECT count(*) FROM browser WHERE market_share  >=  5", "source_tables": ["browser"]}}
{"sample_id": 1875, "db_id": "wrestler", "final": {"question": "Which locations are shared by more than two wrestlers?", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "source_tables": ["wrestler"]}}
{"sample_id": 1844, "db_id": "wrestler", "final": {"question": "How many wrestlers are there?", "sql": "SELECT count(*) FROM wrestler", "source_tables": ["wrestler"]}}
{"sample_id": 1859, "db_id": "wrestler", "final": {"question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1848, "db_id": "wrestler", "final": {"question": "What is the name of the wrestler with the fewest days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "source_tables": ["wrestler"]}}
{"sample_id": 1864, "db_id": "wrestler", "final": {"question": "Show different teams in eliminations and the number of eliminations from each team.", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "source_tables": ["elimination"]}}
{"sample_id": 1870, "db_id": "wrestler", "final": {"question": "What are the names of wrestlers days held less than 100?", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "source_tables": ["wrestler"]}}
{"sample_id": 1882, "db_id": "wrestler", "final": {"question": "Show the times of elimination by \"Punk\" or \"Orton\".", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "source_tables": ["elimination"]}}
{"sample_id": 1847, "db_id": "wrestler", "final": {"question": "What are the names of the wrestlers, ordered descending by days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "source_tables": ["wrestler"]}}
{"sample_id": 1880, "db_id": "wrestler", "final": {"question": "What is the number of distinct teams that suffer elimination?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "source_tables": ["elimination"]}}
{"sample_id": 1878, "db_id": "wrestler", "final": {"question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "source_tables": ["elimination"]}}
{"sample_id": 1874, "db_id": "wrestler", "final": {"question": "List the locations that are shared by more than two wrestlers.", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "source_tables": ["wrestler"]}}
{"sample_id": 1868, "db_id": "wrestler", "final": {"question": "Show the reign and days held of wrestlers.", "sql": "SELECT Reign ,  Days_held FROM wrestler", "source_tables": ["wrestler"]}}
{"sample_id": 1871, "db_id": "wrestler", "final": {"question": "Return the names of wrestlers with fewer than 100 days held.", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "source_tables": ["wrestler"]}}
{"sample_id": 1867, "db_id": "wrestler", "final": {"question": "Which teams had more than 3 eliminations?", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "source_tables": ["elimination"]}}
{"sample_id": 1872, "db_id": "wrestler", "final": {"question": "Please show the most common reigns of wrestlers.", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["wrestler"]}}
{"sample_id": 1850, "db_id": "wrestler", "final": {"question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "source_tables": ["wrestler"]}}
{"sample_id": 1862, "db_id": "wrestler", "final": {"question": "Show times of elimination of wrestlers with days held more than 50.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1863, "db_id": "wrestler", "final": {"question": "What are the times of elimination for wrestlers with over 50 days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1852, "db_id": "wrestler", "final": {"question": "What are the names and location of the wrestlers?", "sql": "SELECT Name ,  LOCATION FROM wrestler", "source_tables": ["wrestler"]}}
{"sample_id": 1849, "db_id": "wrestler", "final": {"question": "Return the name of the wrestler who had the lowest number of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "source_tables": ["wrestler"]}}
{"sample_id": 1846, "db_id": "wrestler", "final": {"question": "List the names of wrestlers in descending order of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "source_tables": ["wrestler"]}}
{"sample_id": 1854, "db_id": "wrestler", "final": {"question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "source_tables": ["elimination"]}}
{"sample_id": 1851, "db_id": "wrestler", "final": {"question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "source_tables": ["wrestler"]}}
{"sample_id": 1860, "db_id": "wrestler", "final": {"question": "List the time of elimination of the wrestlers with largest days held.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1908, "db_id": "school_finance", "final": {"question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "sql": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)", "source_tables": ["endowment"]}}
{"sample_id": 1900, "db_id": "school_finance", "final": {"question": "How many budgets are above 3000 in year 2001 or before?", "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "source_tables": ["budget"]}}
{"sample_id": 1884, "db_id": "school_finance", "final": {"question": "How many schools are there?", "sql": "SELECT count(*) FROM school", "source_tables": ["school"]}}
{"sample_id": 1891, "db_id": "school_finance", "final": {"question": "Show the average, maximum, minimum enrollment of all schools.", "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school", "source_tables": ["school"]}}
{"sample_id": 1888, "db_id": "school_finance", "final": {"question": "What are the total and average enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  avg(enrollment) FROM school", "source_tables": ["school"]}}
{"sample_id": 1907, "db_id": "school_finance", "final": {"question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "source_tables": ["endowment", "school"]}}
{"sample_id": 1898, "db_id": "school_finance", "final": {"question": "Show the names of all the donors except those whose donation amount less than 9.", "sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9", "source_tables": ["endowment"]}}
{"sample_id": 1896, "db_id": "school_finance", "final": {"question": "List all the names of schools with an endowment amount smaller than or equal to 10.", "sql": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10", "source_tables": ["endowment", "school"]}}
{"sample_id": 1902, "db_id": "school_finance", "final": {"question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "sql": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002", "source_tables": ["budget", "school"]}}
{"sample_id": 1904, "db_id": "school_finance", "final": {"question": "How many budget record has a budget amount smaller than the invested amount?", "sql": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "source_tables": ["budget"]}}
{"sample_id": 1909, "db_id": "school_finance", "final": {"question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "source_tables": ["budget", "school"]}}
{"sample_id": 1901, "db_id": "school_finance", "final": {"question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "source_tables": ["budget"]}}
{"sample_id": 1890, "db_id": "school_finance", "final": {"question": "List the name of the school with the smallest enrollment.", "sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1", "source_tables": ["school"]}}
{"sample_id": 1895, "db_id": "school_finance", "final": {"question": "List the names of the schools without any endowment.", "sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)", "source_tables": ["endowment", "school"]}}
{"sample_id": 1906, "db_id": "school_finance", "final": {"question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10", "source_tables": ["budget", "endowment", "school"]}}
{"sample_id": 1913, "db_id": "protein_institute", "final": {"question": "What are the average, maximum, and minimum number of floors for all buildings?", "sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building", "source_tables": ["building"]}}
{"sample_id": 1925, "db_id": "protein_institute", "final": {"question": "Show institution names along with the number of proteins for each institution.", "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id", "source_tables": ["protein", "institution"]}}
{"sample_id": 1923, "db_id": "protein_institute", "final": {"question": "Show the names and heights of buildings with at least two institutions founded after 1880.", "sql": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2", "source_tables": ["building", "institution"]}}
{"sample_id": 1929, "db_id": "protein_institute", "final": {"question": "How many institutions do not have an associated protein in our record?", "sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)", "source_tables": ["protein", "institution"]}}
{"sample_id": 1910, "db_id": "protein_institute", "final": {"question": "How many buildings are there?", "sql": "SELECT count(*) FROM building", "source_tables": ["building"]}}
{"sample_id": 1916, "db_id": "protein_institute", "final": {"question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "sql": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'", "source_tables": ["institution"]}}
{"sample_id": 1922, "db_id": "protein_institute", "final": {"question": "For each building, show the name of the building and the number of institutions in it.", "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id", "source_tables": ["building", "institution"]}}
{"sample_id": 1920, "db_id": "protein_institute", "final": {"question": "Show the name of buildings that do not have any institution.", "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)", "source_tables": ["building", "institution"]}}
{"sample_id": 1919, "db_id": "protein_institute", "final": {"question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "sql": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000", "source_tables": ["institution"]}}
{"sample_id": 1924, "db_id": "protein_institute", "final": {"question": "Show all the distinct institution types.", "sql": "SELECT DISTINCT TYPE FROM institution", "source_tables": ["institution"]}}
{"sample_id": 1918, "db_id": "protein_institute", "final": {"question": "Show the institution type with the largest number of institutions.", "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["institution"]}}
{"sample_id": 1917, "db_id": "protein_institute", "final": {"question": "Show institution types, along with the number of institutions and total enrollment for each type.", "sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE", "source_tables": ["institution"]}}
{"sample_id": 1939, "db_id": "cinema", "final": {"question": "What are the name and location of the cinema with the largest capacity?", "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "source_tables": ["cinema"]}}
{"sample_id": 1930, "db_id": "cinema", "final": {"question": "Show all the locations where no cinema has capacity over 800.", "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800", "source_tables": ["cinema"]}}
{"sample_id": 1937, "db_id": "cinema", "final": {"question": "Find the distinct locations that has a cinema.", "sql": "SELECT DISTINCT LOCATION FROM cinema", "source_tables": ["cinema"]}}
{"sample_id": 1957, "db_id": "cinema", "final": {"question": "In which locations are there more than one movie theater with capacity above 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "source_tables": ["cinema"]}}
{"sample_id": 1958, "db_id": "cinema", "final": {"question": "How many films have the word 'Dummy' in their titles?", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "source_tables": ["film"]}}
{"sample_id": 1940, "db_id": "cinema", "final": {"question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "source_tables": ["cinema"]}}
{"sample_id": 1942, "db_id": "cinema", "final": {"question": "What is the location with the most cinemas opened in year 2010 or later?", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["cinema"]}}
{"sample_id": 1952, "db_id": "cinema", "final": {"question": "Give me the title and highest price for each film.", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "source_tables": ["film", "schedule"]}}
{"sample_id": 1932, "db_id": "cinema", "final": {"question": "How many cinema do we have?", "sql": "SELECT count(*) FROM cinema", "source_tables": ["cinema"]}}
{"sample_id": 1936, "db_id": "cinema", "final": {"question": "What are all the locations with a cinema?", "sql": "SELECT DISTINCT LOCATION FROM cinema", "source_tables": ["cinema"]}}
{"sample_id": 1935, "db_id": "cinema", "final": {"question": "Show the cinema name and location for cinemas with capacity above average.", "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "source_tables": ["cinema"]}}
{"sample_id": 1944, "db_id": "cinema", "final": {"question": "Which locations have 2 or more cinemas with capacity over 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "source_tables": ["cinema"]}}
{"sample_id": 1943, "db_id": "cinema", "final": {"question": "Show all the locations with at least two cinemas with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "source_tables": ["cinema"]}}
{"sample_id": 1959, "db_id": "cinema", "final": {"question": "Count the number of films whose title contains the word 'Dummy'.", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "source_tables": ["film"]}}
{"sample_id": 1951, "db_id": "cinema", "final": {"question": "What are the title and maximum price of each film?", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "source_tables": ["film", "schedule"]}}
{"sample_id": 1945, "db_id": "cinema", "final": {"question": "Show the title and director for all films.", "sql": "SELECT title ,  directed_by FROM film", "source_tables": ["film"]}}
{"sample_id": 1931, "db_id": "cinema", "final": {"question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011", "source_tables": ["cinema"]}}
{"sample_id": 1954, "db_id": "cinema", "final": {"question": "What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "source_tables": ["film", "schedule"]}}
{"sample_id": 1975, "db_id": "products_for_hire", "final": {"question": "What are the coupon amount of the coupons owned by both good and bad customers?", "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'", "source_tables": ["customers", "discount_coupons"]}}
{"sample_id": 1968, "db_id": "products_for_hire", "final": {"question": "How many different product types are there?", "sql": "SELECT count(DISTINCT product_type_code) FROM products_for_hire", "source_tables": ["products_for_hire"]}}
{"sample_id": 1973, "db_id": "products_for_hire", "final": {"question": "What are the daily hire costs for the products with substring 'Book' in its name?", "sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'", "source_tables": ["products_for_hire"]}}
{"sample_id": 1972, "db_id": "products_for_hire", "final": {"question": "What are all the distinct payment types?", "sql": "SELECT DISTINCT payment_type_code FROM payments", "source_tables": ["payments"]}}
{"sample_id": 1970, "db_id": "products_for_hire", "final": {"question": "What is the average amount due for all the payments?", "sql": "SELECT avg(amount_due) FROM payments", "source_tables": ["payments"]}}
{"sample_id": 1965, "db_id": "products_for_hire", "final": {"question": "What is the product description of the product booked with an amount of 102.76?", "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76", "source_tables": ["products_booked", "products_for_hire"]}}
{"sample_id": 1971, "db_id": "products_for_hire", "final": {"question": "What are the maximum, minimum, and average booked count for the products booked?", "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked", "source_tables": ["products_booked"]}}
{"sample_id": 1961, "db_id": "products_for_hire", "final": {"question": "How many bookings did each customer make? List the customer id, first name, and the count.", "sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "source_tables": ["customers", "bookings"]}}
{"sample_id": 1966, "db_id": "products_for_hire", "final": {"question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", "source_tables": ["bookings", "products_for_hire", "products_booked"]}}
{"sample_id": 1963, "db_id": "products_for_hire", "final": {"question": "What are the id and the amount of refund of the booking that incurred the most times of payments?", "sql": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["payments", "bookings"]}}
{"sample_id": 1987, "db_id": "phone_market", "final": {"question": "Show the names of phones and the districts of markets they are on.", "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID", "source_tables": ["market", "phone_market", "phone"]}}
{"sample_id": 1988, "db_id": "phone_market", "final": {"question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking", "source_tables": ["market", "phone_market", "phone"]}}
{"sample_id": 1982, "db_id": "phone_market", "final": {"question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".", "sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"", "source_tables": ["phone"]}}
{"sample_id": 1980, "db_id": "phone_market", "final": {"question": "What are the memories and carriers of phones?", "sql": "SELECT Memory_in_G ,  Carrier FROM phone", "source_tables": ["phone"]}}
{"sample_id": 1978, "db_id": "phone_market", "final": {"question": "How many phones are there?", "sql": "SELECT count(*) FROM phone", "source_tables": ["phone"]}}
{"sample_id": 1989, "db_id": "phone_market", "final": {"question": "Show the names of phones that are on market with number of shops greater than 50.", "sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50", "source_tables": ["market", "phone_market", "phone"]}}
{"sample_id": 1979, "db_id": "phone_market", "final": {"question": "List the names of phones in ascending order of price.", "sql": "SELECT Name FROM phone ORDER BY Price ASC", "source_tables": ["phone"]}}
{"sample_id": 1981, "db_id": "phone_market", "final": {"question": "List the distinct carriers of phones with memories bigger than 32.", "sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32", "source_tables": ["phone"]}}
{"sample_id": 1991, "db_id": "phone_market", "final": {"question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "source_tables": ["phone_market", "phone"]}}
{"sample_id": 2005, "db_id": "gas_company", "final": {"question": "List all headquarters and the number of companies in each headquarter.", "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "source_tables": ["company"]}}
{"sample_id": 2037, "db_id": "gas_company", "final": {"question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2010, "db_id": "gas_company", "final": {"question": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "source_tables": ["company"]}}
{"sample_id": 2025, "db_id": "gas_company", "final": {"question": "Show company name and main industry without a gas station.", "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "source_tables": ["company", "station_company"]}}
{"sample_id": 2018, "db_id": "gas_company", "final": {"question": "For each location, how many gas stations are there in order?", "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "source_tables": ["gas_station"]}}
{"sample_id": 1998, "db_id": "gas_company", "final": {"question": "What are the companies and main industries of all companies that are not headquartered in the United States?", "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "source_tables": ["company"]}}
{"sample_id": 1999, "db_id": "gas_company", "final": {"question": "Show all company names and headquarters in the descending order of market value.", "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "source_tables": ["company"]}}
{"sample_id": 1996, "db_id": "gas_company", "final": {"question": "What is the name and rank of every company ordered by descending number of sales?", "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "source_tables": ["company"]}}
{"sample_id": 2038, "db_id": "gas_company", "final": {"question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2024, "db_id": "gas_company", "final": {"question": "For each company id, what are the companies and how many gas stations does each one operate?", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "source_tables": ["company", "station_company"]}}
{"sample_id": 2030, "db_id": "gas_company", "final": {"question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2011, "db_id": "gas_company", "final": {"question": "Show headquarters with at least two companies in the banking industry.", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "source_tables": ["company"]}}
{"sample_id": 2022, "db_id": "gas_company", "final": {"question": "What are the headquarters without companies that are in the banking industry?", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "source_tables": ["company"]}}
{"sample_id": 2035, "db_id": "gas_company", "final": {"question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "source_tables": ["company"]}}
{"sample_id": 2009, "db_id": "gas_company", "final": {"question": "List the main industry with highest total market value and its number of companies.", "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "source_tables": ["company"]}}
{"sample_id": 2007, "db_id": "gas_company", "final": {"question": "Show all main industry and total market value in each industry.", "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "source_tables": ["company"]}}
{"sample_id": 2016, "db_id": "gas_company", "final": {"question": "What is the total number of gas stations that opened between 2000 and 2005?", "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "source_tables": ["gas_station"]}}
{"sample_id": 2013, "db_id": "gas_company", "final": {"question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}}
{"sample_id": 2017, "db_id": "gas_company", "final": {"question": "Show all locations and the number of gas stations in each location ordered by the count.", "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "source_tables": ["gas_station"]}}
{"sample_id": 2019, "db_id": "gas_company", "final": {"question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "source_tables": ["company"]}}
{"sample_id": 2036, "db_id": "gas_company", "final": {"question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "source_tables": ["company"]}}
{"sample_id": 2000, "db_id": "gas_company", "final": {"question": "What are the names and headquarters of all companies ordered by descending market value?", "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "source_tables": ["company"]}}
{"sample_id": 2012, "db_id": "gas_company", "final": {"question": "What are the headquarters with at least two companies in the banking industry?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "source_tables": ["company"]}}
{"sample_id": 2034, "db_id": "gas_company", "final": {"question": "What are the locations of all the gas stations ordered by opening year?", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}}
{"sample_id": 2033, "db_id": "gas_company", "final": {"question": "order all gas station locations by the opening year.", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}}
{"sample_id": 2001, "db_id": "gas_company", "final": {"question": "Show minimum, maximum, and average market value for all companies.", "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "source_tables": ["company"]}}
{"sample_id": 2031, "db_id": "gas_company", "final": {"question": "Show the manager name with most number of gas stations opened after 2000.", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}}
{"sample_id": 2070, "db_id": "party_people", "final": {"question": "Count the number of party events.", "sql": "SELECT count(*) FROM party_events", "source_tables": ["party_events"]}}
{"sample_id": 2080, "db_id": "party_people", "final": {"question": "Which event names were used more than twice for party events?", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "source_tables": ["party_events"]}}
{"sample_id": 2054, "db_id": "party_people", "final": {"question": "Which minister left office the latest?", "sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2041, "db_id": "party_people", "final": {"question": "Show all distinct region names ordered by their labels.", "sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "source_tables": ["region"]}}
{"sample_id": 2079, "db_id": "party_people", "final": {"question": "find the event names that have more than 2 records.", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "source_tables": ["party_events"]}}
{"sample_id": 2072, "db_id": "party_people", "final": {"question": "How many events are there for each party?", "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["party_events", "party"]}}
{"sample_id": 2077, "db_id": "party_people", "final": {"question": "What is the name of member in charge of greatest number of events?", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_events", "member"]}}
{"sample_id": 2046, "db_id": "party_people", "final": {"question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "source_tables": ["party"]}}
{"sample_id": 2068, "db_id": "party_people", "final": {"question": "Which member names corresponding to members who are not in the Progress Party?", "sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"", "source_tables": ["member", "party"]}}
{"sample_id": 2066, "db_id": "party_people", "final": {"question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?", "sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1", "source_tables": ["member"]}}
{"sample_id": 2060, "db_id": "party_people", "final": {"question": "Return the name of the party with the most members.", "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party"]}}
{"sample_id": 2069, "db_id": "party_people", "final": {"question": "How many party events do we have?", "sql": "SELECT count(*) FROM party_events", "source_tables": ["party_events"]}}
{"sample_id": 2051, "db_id": "party_people", "final": {"question": "Show all ministers and parties they belong to in descending order of the time they took office.", "sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "source_tables": ["party"]}}
{"sample_id": 2065, "db_id": "party_people", "final": {"question": "Show the member names which are in both the party with id 3 and the party with id 1.", "sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1", "source_tables": ["member"]}}
{"sample_id": 2042, "db_id": "party_people", "final": {"question": "What are the different region names, ordered by labels?", "sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "source_tables": ["region"]}}
{"sample_id": 2074, "db_id": "party_people", "final": {"question": "What are the names of members who are not in charge of any events?", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "source_tables": ["party_events", "member"]}}
{"sample_id": 2076, "db_id": "party_people", "final": {"question": "Return the names of parties that have two or more events.", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party_events", "party"]}}
{"sample_id": 2061, "db_id": "party_people", "final": {"question": "Show all party names and their region names.", "sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "source_tables": ["region", "party"]}}
{"sample_id": 2053, "db_id": "party_people", "final": {"question": "Return the minister who left office at the latest time.", "sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2045, "db_id": "party_people", "final": {"question": "Show the ministers and the time they took and left office, listed by the time they left office.", "sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "source_tables": ["party"]}}
{"sample_id": 2063, "db_id": "party_people", "final": {"question": "Show names of parties that does not have any members.", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "source_tables": ["member", "party"]}}
{"sample_id": 2081, "db_id": "party_people", "final": {"question": "How many Annual Meeting events happened in the United Kingdom region?", "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"", "source_tables": ["party", "party_events", "region"]}}
{"sample_id": 2049, "db_id": "party_people", "final": {"question": "Show all ministers who do not belong to Progress Party.", "sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "source_tables": ["party"]}}
{"sample_id": 2062, "db_id": "party_people", "final": {"question": "What are the names of parties and their respective regions?", "sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "source_tables": ["region", "party"]}}
{"sample_id": 2056, "db_id": "party_people", "final": {"question": "What are the names of members and their corresponding parties?", "sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "source_tables": ["member", "party"]}}
{"sample_id": 2059, "db_id": "party_people", "final": {"question": "What is the name of party with most number of members?", "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party"]}}
{"sample_id": 2091, "db_id": "pilot_record", "final": {"question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.", "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005", "source_tables": ["pilot"]}}
{"sample_id": 2086, "db_id": "pilot_record", "final": {"question": "List the distinct positions of pilots older than 30.", "sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30", "source_tables": ["pilot"]}}
{"sample_id": 2093, "db_id": "pilot_record", "final": {"question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank", "source_tables": ["pilot", "aircraft", "pilot_record"]}}
{"sample_id": 2096, "db_id": "pilot_record", "final": {"question": "Show names of pilots that have more than one record.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "source_tables": ["pilot", "pilot_record"]}}
{"sample_id": 2095, "db_id": "pilot_record", "final": {"question": "Show the names of pilots and the number of records they have.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "source_tables": ["pilot", "pilot_record"]}}
{"sample_id": 2090, "db_id": "pilot_record", "final": {"question": "Show the most common nationality of pilots.", "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["pilot"]}}
{"sample_id": 2085, "db_id": "pilot_record", "final": {"question": "What are the positions and teams of pilots?", "sql": "SELECT POSITION ,  Team FROM pilot", "source_tables": ["pilot"]}}
{"sample_id": 2094, "db_id": "pilot_record", "final": {"question": "Show the fleet series of the aircrafts flied by pilots younger than 34", "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34", "source_tables": ["pilot", "aircraft", "pilot_record"]}}
{"sample_id": 2092, "db_id": "pilot_record", "final": {"question": "Show the names of pilots and models of aircrafts they have flied with.", "sql": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID", "source_tables": ["pilot", "aircraft", "pilot_record"]}}
{"sample_id": 2108, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List all document ids and receipt dates of documents.", "sql": "SELECT document_id ,  receipt_date FROM Documents;", "source_tables": ["documents"]}}
{"sample_id": 2100, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What document type codes do we have?", "sql": "SELECT document_type_code FROM Ref_Document_Types;", "source_tables": ["ref_document_types"]}}
{"sample_id": 2121, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.", "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "source_tables": ["ref_shipping_agents", "documents"]}}
{"sample_id": 2129, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["circulation_history", "employees"]}}
{"sample_id": 2127, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List all employees in the circulation history of the document with id 1. List the employee's name.", "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "source_tables": ["circulation_history", "employees"]}}
{"sample_id": 2104, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What are all role codes?", "sql": "SELECT role_code FROM ROLES;", "source_tables": ["roles"]}}
{"sample_id": 2125, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which document has the most draft copies? List its document id and number of draft copies.", "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "source_tables": ["draft_copies"]}}
{"sample_id": 2119, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What address was the document with id 4 mailed to?", "sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "source_tables": ["addresses", "documents_mailed"]}}
{"sample_id": 2115, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the name of the shipping agent of the document with id 2?", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "source_tables": ["ref_shipping_agents", "documents"]}}
{"sample_id": 2103, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the shipping agent code of shipping agent UPS?", "sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";", "source_tables": ["ref_shipping_agents"]}}
{"sample_id": 2110, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List roles that have more than one employee. List the role description and number of employees.", "sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;", "source_tables": ["roles", "employees"]}}
{"sample_id": 2099, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the description of document status code 'working'?", "sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";", "source_tables": ["ref_document_status"]}}
{"sample_id": 2126, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "source_tables": ["draft_copies"]}}
{"sample_id": 2118, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the receipt date of the document with id 3?", "sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "source_tables": ["documents"]}}
{"sample_id": 2107, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the role of the employee named Koby?", "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";", "source_tables": ["roles", "employees"]}}
{"sample_id": 2106, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many employees do we have?", "sql": "SELECT count(*) FROM Employees;", "source_tables": ["employees"]}}
{"sample_id": 2102, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What are the shipping agent names?", "sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;", "source_tables": ["ref_shipping_agents"]}}
{"sample_id": 2117, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;", "source_tables": ["ref_shipping_agents", "documents"]}}
{"sample_id": 2123, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is draft detail of the document with id 7?", "sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;", "source_tables": ["document_drafts"]}}
{"sample_id": 2144, "db_id": "local_govt_in_alabama", "final": {"question": "How many events did not have any participants?", "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)", "source_tables": ["participants_in_events", "events"]}}
{"sample_id": 2137, "db_id": "local_govt_in_alabama", "final": {"question": "List the service id and details for the events.", "sql": "SELECT service_id ,  event_details FROM EVENTS", "source_tables": ["events"]}}
{"sample_id": 2131, "db_id": "local_govt_in_alabama", "final": {"question": "what are the event details of the services that have the type code 'Marriage'?", "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "source_tables": ["services", "events"]}}
{"sample_id": 2135, "db_id": "local_govt_in_alabama", "final": {"question": "How many participants belong to the type 'Organizer'?", "sql": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'", "source_tables": ["participants"]}}
{"sample_id": 2143, "db_id": "local_govt_in_alabama", "final": {"question": "Which services type had both successful and failure event details?", "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", "source_tables": ["services", "events"]}}
{"sample_id": 2138, "db_id": "local_govt_in_alabama", "final": {"question": "How many events had participants whose details had the substring 'Dr.'", "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", "source_tables": ["participants_in_events", "participants"]}}
{"sample_id": 2133, "db_id": "local_govt_in_alabama", "final": {"question": "How many events have each participants attended? List the participant id, type and the number.", "sql": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID", "source_tables": ["participants_in_events", "participants"]}}
{"sample_id": 2140, "db_id": "local_govt_in_alabama", "final": {"question": "Which service id and type has the least number of participants?", "sql": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["participants_in_events", "events", "services", "participants"]}}
{"sample_id": 2142, "db_id": "local_govt_in_alabama", "final": {"question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", "source_tables": ["participants_in_events", "participants", "events"]}}
{"sample_id": 2187, "db_id": "formula_1", "final": {"question": "What are the names of all races held after 2000 in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "source_tables": ["circuits", "races"]}}
{"sample_id": 2222, "db_id": "formula_1", "final": {"question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2202, "db_id": "formula_1", "final": {"question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "pitstops", "drivers"]}}
{"sample_id": 2162, "db_id": "formula_1", "final": {"question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2223, "db_id": "formula_1", "final": {"question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2152, "db_id": "formula_1", "final": {"question": "Find the distinct names of all races held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "source_tables": ["races"]}}
{"sample_id": 2163, "db_id": "formula_1", "final": {"question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2185, "db_id": "formula_1", "final": {"question": "What are the names of the races held after 2017 in Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "source_tables": ["circuits", "races"]}}
{"sample_id": 2190, "db_id": "formula_1", "final": {"question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}}
{"sample_id": 2195, "db_id": "formula_1", "final": {"question": "What are the different names of all the races in reverse alphabetical order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "source_tables": ["races"]}}
{"sample_id": 2198, "db_id": "formula_1", "final": {"question": "What are the names of races held after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "source_tables": ["races"]}}
{"sample_id": 2175, "db_id": "formula_1", "final": {"question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2172, "db_id": "formula_1", "final": {"question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2186, "db_id": "formula_1", "final": {"question": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "source_tables": ["circuits", "races"]}}
{"sample_id": 2165, "db_id": "formula_1", "final": {"question": "How many drivers were in the Australian Grand Prix held in 2009?", "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "source_tables": ["results", "races"]}}
{"sample_id": 2167, "db_id": "formula_1", "final": {"question": "How many drivers did not race in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "source_tables": ["results", "races"]}}
{"sample_id": 2203, "db_id": "formula_1", "final": {"question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "pitstops", "drivers"]}}
{"sample_id": 2212, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "source_tables": ["results", "races"]}}
{"sample_id": 2158, "db_id": "formula_1", "final": {"question": "What are the forename and surname of the driver who has the smallest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2169, "db_id": "formula_1", "final": {"question": "What are the names and years of all races that had a driver with the last name Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2219, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["results", "races"]}}
{"sample_id": 2215, "db_id": "formula_1", "final": {"question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "source_tables": ["results", "races"]}}
{"sample_id": 2176, "db_id": "formula_1", "final": {"question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "source_tables": ["driverstandings", "drivers"]}}
{"sample_id": 2149, "db_id": "formula_1", "final": {"question": "What is the name and date of the race that occurred most recently?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}}
{"sample_id": 2188, "db_id": "formula_1", "final": {"question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}}
{"sample_id": 2200, "db_id": "formula_1", "final": {"question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "pitstops", "drivers"]}}
{"sample_id": 2213, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "source_tables": ["results", "races"]}}
{"sample_id": 2184, "db_id": "formula_1", "final": {"question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "source_tables": ["circuits", "races"]}}
{"sample_id": 2161, "db_id": "formula_1", "final": {"question": "What is the id and last name of the driver with the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2177, "db_id": "formula_1", "final": {"question": "What are all the different first names of the drivers who are in position as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "source_tables": ["driverstandings", "drivers"]}}
{"sample_id": 2207, "db_id": "formula_1", "final": {"question": "What are the names of all the circuits that are in the UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "source_tables": ["circuits"]}}
{"sample_id": 2206, "db_id": "formula_1", "final": {"question": "What are the names of circuits that belong to UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "source_tables": ["circuits"]}}
{"sample_id": 2197, "db_id": "formula_1", "final": {"question": "What are the names of all races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "source_tables": ["races"]}}
{"sample_id": 2192, "db_id": "formula_1", "final": {"question": "List the forenames of all distinct drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "source_tables": ["drivers"]}}
{"sample_id": 2225, "db_id": "formula_1", "final": {"question": "What are the ids and last names of all drivers who participated in the most races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2209, "db_id": "formula_1", "final": {"question": "What are the ids and locations of all circuits in France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "source_tables": ["circuits"]}}
{"sample_id": 2181, "db_id": "formula_1", "final": {"question": "For each nationality, how many different constructors are there?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "source_tables": ["constructors"]}}
{"sample_id": 2217, "db_id": "formula_1", "final": {"question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["results", "races"]}}
{"sample_id": 2182, "db_id": "formula_1", "final": {"question": "What are the numbers of races for each constructor id?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "source_tables": ["constructorstandings"]}}
{"sample_id": 2179, "db_id": "formula_1", "final": {"question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "source_tables": ["driverstandings", "drivers"]}}
{"sample_id": 2150, "db_id": "formula_1", "final": {"question": "Find the names of all races held in 2017.", "sql": "SELECT name FROM races WHERE YEAR = 2017", "source_tables": ["races"]}}
{"sample_id": 2157, "db_id": "formula_1", "final": {"question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2170, "db_id": "formula_1", "final": {"question": "Find the forename and surname of drivers whose nationality is German?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "source_tables": ["drivers"]}}
{"sample_id": 2196, "db_id": "formula_1", "final": {"question": "What are the names of races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "source_tables": ["races"]}}
{"sample_id": 2174, "db_id": "formula_1", "final": {"question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2173, "db_id": "formula_1", "final": {"question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2151, "db_id": "formula_1", "final": {"question": "What are the names of all the races that occurred in the year 2017?", "sql": "SELECT name FROM races WHERE YEAR = 2017", "source_tables": ["races"]}}
{"sample_id": 2201, "db_id": "formula_1", "final": {"question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "pitstops", "drivers"]}}
{"sample_id": 2228, "db_id": "machine_repair", "final": {"question": "List the names of technicians in ascending order of age.", "sql": "SELECT Name FROM technician ORDER BY Age ASC", "source_tables": ["technician"]}}
{"sample_id": 2239, "db_id": "machine_repair", "final": {"question": "For each team, how many technicians are there?", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "source_tables": ["technician"]}}
{"sample_id": 2227, "db_id": "machine_repair", "final": {"question": "What is the number of technicians?", "sql": "SELECT count(*) FROM technician", "source_tables": ["technician"]}}
{"sample_id": 2240, "db_id": "machine_repair", "final": {"question": "Please show the team that has the most number of technicians.", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["technician"]}}
{"sample_id": 2243, "db_id": "machine_repair", "final": {"question": "What is the team with at least 2 technicians?", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "source_tables": ["technician"]}}
{"sample_id": 2249, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "source_tables": ["machine", "technician", "repair_assignment"]}}
{"sample_id": 2230, "db_id": "machine_repair", "final": {"question": "What are the team and starting year of technicians?", "sql": "SELECT Team ,  Starting_Year FROM technician", "source_tables": ["technician"]}}
{"sample_id": 2234, "db_id": "machine_repair", "final": {"question": "Show the name of technicians aged either 36 or 37", "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "source_tables": ["technician"]}}
{"sample_id": 2241, "db_id": "machine_repair", "final": {"question": "What are the teams with the most technicians?", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["technician"]}}
{"sample_id": 2247, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "source_tables": ["machine", "technician", "repair_assignment"]}}
{"sample_id": 2254, "db_id": "machine_repair", "final": {"question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "source_tables": ["technician"]}}
{"sample_id": 2245, "db_id": "machine_repair", "final": {"question": "What are the names of technicians and the machine series that they repair?", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "source_tables": ["machine", "technician", "repair_assignment"]}}
{"sample_id": 2233, "db_id": "machine_repair", "final": {"question": "What is the name of the technician whose team is not 'NYY'?", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "source_tables": ["technician"]}}
{"sample_id": 2252, "db_id": "machine_repair", "final": {"question": "List the names of technicians who have not been assigned to repair machines.", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2226, "db_id": "machine_repair", "final": {"question": "How many technicians are there?", "sql": "SELECT count(*) FROM technician", "source_tables": ["technician"]}}
{"sample_id": 2231, "db_id": "machine_repair", "final": {"question": "What is the team and starting year for each technician?", "sql": "SELECT Team ,  Starting_Year FROM technician", "source_tables": ["technician"]}}
{"sample_id": 2248, "db_id": "machine_repair", "final": {"question": "Show names of technicians who are assigned to repair machines with value point more than 70.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "source_tables": ["machine", "technician", "repair_assignment"]}}
{"sample_id": 2244, "db_id": "machine_repair", "final": {"question": "Show names of technicians and series of machines they are assigned to repair.", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "source_tables": ["machine", "technician", "repair_assignment"]}}
{"sample_id": 2264, "db_id": "entrepreneur", "final": {"question": "What are the names of people in ascending order of weight?", "sql": "SELECT Name FROM People ORDER BY Weight ASC", "source_tables": ["people"]}}
{"sample_id": 2268, "db_id": "entrepreneur", "final": {"question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2266, "db_id": "entrepreneur", "final": {"question": "What are the names of entrepreneurs?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2292, "db_id": "entrepreneur", "final": {"question": "How many distinct companies are there?", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2277, "db_id": "entrepreneur", "final": {"question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2272, "db_id": "entrepreneur", "final": {"question": "What is the name of the entrepreneur with the greatest weight?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2276, "db_id": "entrepreneur", "final": {"question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2261, "db_id": "entrepreneur", "final": {"question": "What are the companies and investors that correspond to each entrepreneur?", "sql": "SELECT Company ,  Investor FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2269, "db_id": "entrepreneur", "final": {"question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2278, "db_id": "entrepreneur", "final": {"question": "What are the weights of entrepreneurs in descending order of money requested?", "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2289, "db_id": "entrepreneur", "final": {"question": "What are the names of people who are not entrepreneurs?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2290, "db_id": "entrepreneur", "final": {"question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}}
{"sample_id": 2257, "db_id": "entrepreneur", "final": {"question": "Count the number of entrepreneurs.", "sql": "SELECT count(*) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2267, "db_id": "entrepreneur", "final": {"question": "Return the names of entrepreneurs.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2258, "db_id": "entrepreneur", "final": {"question": "List the companies of entrepreneurs in descending order of money requested.", "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "source_tables": ["entrepreneur"]}}
{"sample_id": 2275, "db_id": "entrepreneur", "final": {"question": "Give the total money requested by entrepreneurs who are taller than 1.85.", "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2295, "db_id": "entrepreneur", "final": {"question": "Which company was started by the entrepreneur with the greatest height?", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2287, "db_id": "entrepreneur", "final": {"question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2284, "db_id": "entrepreneur", "final": {"question": "What are the investors that have invested in at least two entrepreneurs?", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "source_tables": ["entrepreneur"]}}
{"sample_id": 2256, "db_id": "entrepreneur", "final": {"question": "How many entrepreneurs are there?", "sql": "SELECT count(*) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2280, "db_id": "entrepreneur", "final": {"question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "source_tables": ["entrepreneur"]}}
{"sample_id": 2288, "db_id": "entrepreneur", "final": {"question": "List the names of people that are not entrepreneurs.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2283, "db_id": "entrepreneur", "final": {"question": "Return the investor who have invested in the greatest number of entrepreneurs.", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["entrepreneur"]}}
{"sample_id": 2285, "db_id": "entrepreneur", "final": {"question": "Return the investors who have invested in two or more entrepreneurs.", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "source_tables": ["entrepreneur"]}}
{"sample_id": 2303, "db_id": "perpetrator", "final": {"question": "What are the names of perpetrators whose country is not \"China\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2310, "db_id": "perpetrator", "final": {"question": "What are the countries that have at least two perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "source_tables": ["perpetrator"]}}
{"sample_id": 2315, "db_id": "perpetrator", "final": {"question": "Show the date of the tallest perpetrator.", "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2306, "db_id": "perpetrator", "final": {"question": "What are the names of perpetrators in country \"China\" or \"Japan\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2307, "db_id": "perpetrator", "final": {"question": "What are the heights of perpetrators in descending order of the number of people they injured?", "sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2299, "db_id": "perpetrator", "final": {"question": "What is the average number of people injured by all perpetrators?", "sql": "SELECT avg(Injured) FROM perpetrator", "source_tables": ["perpetrator"]}}
{"sample_id": 2314, "db_id": "perpetrator", "final": {"question": "How many distinct locations of perpetrators are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "source_tables": ["perpetrator"]}}
{"sample_id": 2296, "db_id": "perpetrator", "final": {"question": "How many perpetrators are there?", "sql": "SELECT count(*) FROM perpetrator", "source_tables": ["perpetrator"]}}
{"sample_id": 2316, "db_id": "perpetrator", "final": {"question": "In which year did the most recent crime happen?", "sql": "SELECT max(YEAR) FROM perpetrator;", "source_tables": ["perpetrator"]}}
{"sample_id": 2311, "db_id": "perpetrator", "final": {"question": "List the names of perpetrators in descending order of the year.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2301, "db_id": "perpetrator", "final": {"question": "What are the names of people in ascending order of height?", "sql": "SELECT Name FROM People ORDER BY Height ASC", "source_tables": ["people"]}}
{"sample_id": 2305, "db_id": "perpetrator", "final": {"question": "What is the total kills of the perpetrators with height more than 1.84.", "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2327, "db_id": "csu_1", "final": {"question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "source_tables": ["campuses"]}}
{"sample_id": 2380, "db_id": "csu_1", "final": {"question": "How many people graduated from San Francisco State University in 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2363, "db_id": "csu_1", "final": {"question": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2371, "db_id": "csu_1", "final": {"question": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2317, "db_id": "csu_1", "final": {"question": "Report the name of all campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "source_tables": ["campuses"]}}
{"sample_id": 2334, "db_id": "csu_1", "final": {"question": "How many universities have a campus fee higher than average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}}
{"sample_id": 2330, "db_id": "csu_1", "final": {"question": "What is the campus fee for San Jose State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2344, "db_id": "csu_1", "final": {"question": "What campus has the most faculties in 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2377, "db_id": "csu_1", "final": {"question": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2340, "db_id": "csu_1", "final": {"question": "In what year was the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}}
{"sample_id": 2341, "db_id": "csu_1", "final": {"question": "Which campus has the most degrees conferred in all times?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}}
{"sample_id": 2323, "db_id": "csu_1", "final": {"question": "Find the name of the campuses opened before 1800.", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "source_tables": ["campuses"]}}
{"sample_id": 2359, "db_id": "csu_1", "final": {"question": "List the campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "source_tables": ["campuses"]}}
{"sample_id": 2367, "db_id": "csu_1", "final": {"question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2347, "db_id": "csu_1", "final": {"question": "What is the average fee on a CSU campus in 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "source_tables": ["csu_fees"]}}
{"sample_id": 2335, "db_id": "csu_1", "final": {"question": "Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}}
{"sample_id": 2366, "db_id": "csu_1", "final": {"question": "How many faculty, in total, are there in the year 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "source_tables": ["faculty"]}}
{"sample_id": 2353, "db_id": "csu_1", "final": {"question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2345, "db_id": "csu_1", "final": {"question": "Find the average fee on a CSU campus in 1996", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "source_tables": ["csu_fees"]}}
{"sample_id": 2378, "db_id": "csu_1", "final": {"question": "How many undergraduates are there at San Jose State", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2326, "db_id": "csu_1", "final": {"question": "What campuses opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "source_tables": ["campuses"]}}
{"sample_id": 2332, "db_id": "csu_1", "final": {"question": "What is the campus fee for San Francisco State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2382, "db_id": "csu_1", "final": {"question": "In the year 2000, what is the campus fee for San Francisco State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2331, "db_id": "csu_1", "final": {"question": "What is the campus fee of \"San Francisco State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2372, "db_id": "csu_1", "final": {"question": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2369, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2373, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}}
{"sample_id": 2342, "db_id": "csu_1", "final": {"question": "What campus has the most degrees  conferrred over its entire existence?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}}
{"sample_id": 2328, "db_id": "csu_1", "final": {"question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "source_tables": ["campuses"]}}
{"sample_id": 2386, "db_id": "csu_1", "final": {"question": "What is the total number of campuses?", "sql": "SELECT count(*) FROM campuses", "source_tables": ["campuses"]}}
{"sample_id": 2362, "db_id": "csu_1", "final": {"question": "How many degrees were conferred at San Jose State University in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2336, "db_id": "csu_1", "final": {"question": "How many universities have a campus fee greater than the average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}}
{"sample_id": 2346, "db_id": "csu_1", "final": {"question": "What is the average fee for a CSU campus in the year of 1996?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "source_tables": ["csu_fees"]}}
{"sample_id": 2374, "db_id": "csu_1", "final": {"question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}}
{"sample_id": 2350, "db_id": "csu_1", "final": {"question": "how many degrees were conferred between 1998 and 2002?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2351, "db_id": "csu_1", "final": {"question": "For each Orange county campus, report the number of degrees granted after 2000.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2333, "db_id": "csu_1", "final": {"question": "Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}}
{"sample_id": 2356, "db_id": "csu_1", "final": {"question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "source_tables": ["enrollments", "campuses"]}}
{"sample_id": 2339, "db_id": "csu_1", "final": {"question": "Which year has the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}}
{"sample_id": 2370, "db_id": "csu_1", "final": {"question": "How many faculty lines are there at San Francisco State University in 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2376, "db_id": "csu_1", "final": {"question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}}
{"sample_id": 2338, "db_id": "csu_1", "final": {"question": "What campuses are located in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "source_tables": ["campuses"]}}
{"sample_id": 2410, "db_id": "candidate_poll", "final": {"question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?", "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "source_tables": ["people", "candidate"]}}
{"sample_id": 2403, "db_id": "candidate_poll", "final": {"question": "find the names of people who are taller than 200 or lower than 190.", "sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "source_tables": ["people"]}}
{"sample_id": 2421, "db_id": "candidate_poll", "final": {"question": "list all female (sex is F) candidate names in the alphabetical order.", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["people", "candidate"]}}
{"sample_id": 2391, "db_id": "candidate_poll", "final": {"question": "what are the top 3 highest support rates?", "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "source_tables": ["candidate"]}}
{"sample_id": 2405, "db_id": "candidate_poll", "final": {"question": "Find the average and minimum weight for each gender.", "sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex", "source_tables": ["people"]}}
{"sample_id": 2422, "db_id": "candidate_poll", "final": {"question": "What are the names of all female candidates in alphabetical order (sex is F)?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["people", "candidate"]}}
{"sample_id": 2420, "db_id": "candidate_poll", "final": {"question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2417, "db_id": "candidate_poll", "final": {"question": "how many people are there whose weight is higher than 85 for each gender?", "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "source_tables": ["people"]}}
{"sample_id": 2411, "db_id": "candidate_poll", "final": {"question": "which gender got the highest average uncertain ratio.", "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1", "source_tables": ["people", "candidate"]}}
{"sample_id": 2416, "db_id": "candidate_poll", "final": {"question": "What are the names of candidates who have a lower support rate than oppose rate?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "source_tables": ["people", "candidate"]}}
{"sample_id": 2401, "db_id": "candidate_poll", "final": {"question": "Find the average height and weight for all males (sex is M).", "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "source_tables": ["people"]}}
{"sample_id": 2396, "db_id": "candidate_poll", "final": {"question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?", "sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "source_tables": ["candidate"]}}
{"sample_id": 2393, "db_id": "candidate_poll", "final": {"question": "Find the id of the candidate who got the lowest oppose rate.", "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "source_tables": ["candidate"]}}
{"sample_id": 2414, "db_id": "candidate_poll", "final": {"question": "Give the names of people who did not participate in the candidate election.", "sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "source_tables": ["people", "candidate"]}}
{"sample_id": 2413, "db_id": "candidate_poll", "final": {"question": "what are the names of people who did not participate in the candidate election.", "sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "source_tables": ["people", "candidate"]}}
{"sample_id": 2389, "db_id": "candidate_poll", "final": {"question": "Which poll resource provided the most number of candidate information?", "sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "source_tables": ["candidate"]}}
{"sample_id": 2397, "db_id": "candidate_poll", "final": {"question": "which poll source does the highest oppose rate come from?", "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "source_tables": ["candidate"]}}
{"sample_id": 2412, "db_id": "candidate_poll", "final": {"question": "What is the sex of the candidate who had the highest unsure rate?", "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1", "source_tables": ["people", "candidate"]}}
{"sample_id": 2407, "db_id": "candidate_poll", "final": {"question": "Find the name and gender of the candidate who got the highest support rate.", "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "source_tables": ["people", "candidate"]}}
{"sample_id": 2424, "db_id": "candidate_poll", "final": {"question": "What are the names of people who are shorter than average?", "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "source_tables": ["people"]}}
{"sample_id": 2395, "db_id": "candidate_poll", "final": {"question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.", "sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "source_tables": ["candidate"]}}
{"sample_id": 2415, "db_id": "candidate_poll", "final": {"question": "Find the names of the candidates whose support percentage is lower than their oppose rate.", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "source_tables": ["people", "candidate"]}}
{"sample_id": 2399, "db_id": "candidate_poll", "final": {"question": "List all people names in the order of their date of birth from old to young.", "sql": "SELECT name FROM people ORDER BY date_of_birth", "source_tables": ["people"]}}
{"sample_id": 2423, "db_id": "candidate_poll", "final": {"question": "find the name of people whose height is lower than the average.", "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "source_tables": ["people"]}}
{"sample_id": 2523, "db_id": "movie_1", "final": {"question": "What are the names of movies that get 3 star and 4 star?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "source_tables": ["rating", "movie"]}}
{"sample_id": 2463, "db_id": "movie_1", "final": {"question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "source_tables": ["rating", "movie"]}}
{"sample_id": 2476, "db_id": "movie_1", "final": {"question": "What are the names of all the reviewers and movie names?", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "source_tables": ["movie", "reviewer"]}}
{"sample_id": 2453, "db_id": "movie_1", "final": {"question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2477, "db_id": "movie_1", "final": {"question": "Find the titles of all movies not reviewed by Chris Jackson.", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2427, "db_id": "movie_1", "final": {"question": "Find the titles of all movies directed by steven spielberg.", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "source_tables": ["movie"]}}
{"sample_id": 2519, "db_id": "movie_1", "final": {"question": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "source_tables": ["movie"]}}
{"sample_id": 2443, "db_id": "movie_1", "final": {"question": "What is the lowest and highest rating star?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating", "source_tables": ["rating"]}}
{"sample_id": 2470, "db_id": "movie_1", "final": {"question": "What are the names of all the different reviewers who rates Gone with the Wind?", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2466, "db_id": "movie_1", "final": {"question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2450, "db_id": "movie_1", "final": {"question": "What is the average number of stars that each reviewer awards for a movie?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2521, "db_id": "movie_1", "final": {"question": "What are the names of reviewers who had rated 3 star and 4 star?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2489, "db_id": "movie_1", "final": {"question": "Find the movies with the highest average rating. Return the movie titles and average rating.", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "source_tables": ["rating", "movie"]}}
{"sample_id": 2485, "db_id": "movie_1", "final": {"question": "What are the names of the directors who made exactly one movie excluding director NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}}
{"sample_id": 2510, "db_id": "movie_1", "final": {"question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2435, "db_id": "movie_1", "final": {"question": "How many reviewers listed?", "sql": "SELECT count(*) FROM Reviewer", "source_tables": ["reviewer"]}}
{"sample_id": 2487, "db_id": "movie_1", "final": {"question": "How many movie reviews does each director get?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "source_tables": ["rating", "movie"]}}
{"sample_id": 2512, "db_id": "movie_1", "final": {"question": "For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "source_tables": ["rating"]}}
{"sample_id": 2465, "db_id": "movie_1", "final": {"question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2448, "db_id": "movie_1", "final": {"question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "source_tables": ["rating", "movie"]}}
{"sample_id": 2507, "db_id": "movie_1", "final": {"question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2494, "db_id": "movie_1", "final": {"question": "What are the names and years released for the movies with the top 3 highest ratings?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "source_tables": ["rating", "movie"]}}
{"sample_id": 2473, "db_id": "movie_1", "final": {"question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2431, "db_id": "movie_1", "final": {"question": "How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 2452, "db_id": "movie_1", "final": {"question": "What are the titles of all movies that have not been rated?", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "source_tables": ["rating", "movie"]}}
{"sample_id": 2445, "db_id": "movie_1", "final": {"question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "source_tables": ["rating", "movie"]}}
{"sample_id": 2449, "db_id": "movie_1", "final": {"question": "What is the average rating star for each reviewer?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2483, "db_id": "movie_1", "final": {"question": "What are the names of the directors who made exactly one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}}
{"sample_id": 2502, "db_id": "movie_1", "final": {"question": "What is the name of the movie that has been reviewed the most?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["rating", "movie"]}}
{"sample_id": 2515, "db_id": "movie_1", "final": {"question": "Find the ids of reviewers who didn't only give 4 star.", "sql": "SELECT rID FROM Rating WHERE stars != 4", "source_tables": ["rating"]}}
{"sample_id": 2437, "db_id": "movie_1", "final": {"question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "source_tables": ["reviewer"]}}
{"sample_id": 2484, "db_id": "movie_1", "final": {"question": "What are the names of all directors who made one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}}
{"sample_id": 2522, "db_id": "movie_1", "final": {"question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2482, "db_id": "movie_1", "final": {"question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "source_tables": ["movie"]}}
{"sample_id": 2455, "db_id": "movie_1", "final": {"question": "What is the average rating stars and title for the oldest movie?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}}
{"sample_id": 2444, "db_id": "movie_1", "final": {"question": "What is the maximum and mininum number of stars a rating can receive?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating", "source_tables": ["rating"]}}
{"sample_id": 2500, "db_id": "movie_1", "final": {"question": "For each director, what is the title and score of their most poorly rated movie?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "source_tables": ["rating", "movie"]}}
{"sample_id": 2497, "db_id": "movie_1", "final": {"question": "Find the title and star rating of the movie that got the least rating star for each reviewer.", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "source_tables": ["rating", "movie"]}}
{"sample_id": 2457, "db_id": "movie_1", "final": {"question": "What is the name of the most recent movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["movie"]}}
{"sample_id": 2488, "db_id": "movie_1", "final": {"question": "For each director, how many reviews have they received?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "source_tables": ["rating", "movie"]}}
{"sample_id": 2454, "db_id": "movie_1", "final": {"question": "What are the different names of all reviewers whose ratings do not have a date field?", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2469, "db_id": "movie_1", "final": {"question": "Find the names of all reviewers who rated Gone with the Wind.", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2458, "db_id": "movie_1", "final": {"question": "What is the title of the newest movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["movie"]}}
{"sample_id": 2524, "db_id": "movie_1", "final": {"question": "What are the names of all movies that received 3 or 4 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "source_tables": ["rating", "movie"]}}
{"sample_id": 2474, "db_id": "movie_1", "final": {"question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2511, "db_id": "movie_1", "final": {"question": "Find the average rating star for each movie that received at least 2 ratings.", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "source_tables": ["rating"]}}
{"sample_id": 2481, "db_id": "movie_1", "final": {"question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "source_tables": ["movie"]}}
{"sample_id": 2430, "db_id": "movie_1", "final": {"question": "What are the titles of all movies that James Cameron directed after 2000?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "source_tables": ["movie"]}}
{"sample_id": 2486, "db_id": "movie_1", "final": {"question": "What are the names of all directors who have made one movie except for the director named NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}}
{"sample_id": 2505, "db_id": "movie_1", "final": {"question": "Find the names of reviewers who had given higher than 3 star ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2434, "db_id": "movie_1", "final": {"question": "Who directed Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "source_tables": ["movie"]}}
{"sample_id": 2460, "db_id": "movie_1", "final": {"question": "What is highest rating for the most recent movie and when was it released?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}}
{"sample_id": 2479, "db_id": "movie_1", "final": {"question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "source_tables": ["movie"]}}
{"sample_id": 2439, "db_id": "movie_1", "final": {"question": "What is the reviewer id of Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "source_tables": ["reviewer"]}}
{"sample_id": 2496, "db_id": "movie_1", "final": {"question": "For each director, what are the titles and ratings for all the movies they reviewed?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "source_tables": ["rating", "movie"]}}
{"sample_id": 2513, "db_id": "movie_1", "final": {"question": "find the ids of reviewers who did not give 4 star.", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "source_tables": ["rating"]}}
{"sample_id": 2467, "db_id": "movie_1", "final": {"question": "Find the names of all reviewers who have contributed three or more ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2501, "db_id": "movie_1", "final": {"question": "What is the name of the movie that is rated by most of times?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["rating", "movie"]}}
{"sample_id": 2555, "db_id": "county_public_safety", "final": {"question": "What is the location shared by most counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["county_public_safety"]}}
{"sample_id": 2543, "db_id": "county_public_safety", "final": {"question": "Show names of cities and names of counties they are in.", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2532, "db_id": "county_public_safety", "final": {"question": "Return the minimum and maximum crime rates across all counties.", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "source_tables": ["county_public_safety"]}}
{"sample_id": 2550, "db_id": "county_public_safety", "final": {"question": "How many cities are in counties that have populations of over 20000?", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2527, "db_id": "county_public_safety", "final": {"question": "List the names of counties in descending order of population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2564, "db_id": "county_public_safety", "final": {"question": "What are the case burdens of counties, ordered descending by population?", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2528, "db_id": "county_public_safety", "final": {"question": "What are the names of the counties of public safety, ordered by population descending?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2533, "db_id": "county_public_safety", "final": {"question": "Show the crime rates of counties in ascending order of number of police officers.", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2535, "db_id": "county_public_safety", "final": {"question": "What are the names of cities in ascending alphabetical order?", "sql": "SELECT Name FROM city ORDER BY Name ASC", "source_tables": ["city"]}}
{"sample_id": 2540, "db_id": "county_public_safety", "final": {"question": "What is the name of the county with the greatest population?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "source_tables": ["county_public_safety"]}}
{"sample_id": 2536, "db_id": "county_public_safety", "final": {"question": "Return the names of cities, ordered alphabetically.", "sql": "SELECT Name FROM city ORDER BY Name ASC", "source_tables": ["city"]}}
{"sample_id": 2548, "db_id": "county_public_safety", "final": {"question": "What are the names of cities that are in the county with the most police officers?", "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2549, "db_id": "county_public_safety", "final": {"question": "Show the number of cities in counties that have a population more than 20000.", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2544, "db_id": "county_public_safety", "final": {"question": "What are the names of cities, as well as the names of the counties they correspond to?", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2542, "db_id": "county_public_safety", "final": {"question": "What are the names of the five cities with the greatest proportion of white people?", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "source_tables": ["city"]}}
{"sample_id": 2537, "db_id": "county_public_safety", "final": {"question": "What are the percentage of hispanics in cities with the black percentage higher than 10?", "sql": "SELECT Hispanic FROM city WHERE Black  >  10", "source_tables": ["city"]}}
{"sample_id": 2525, "db_id": "county_public_safety", "final": {"question": "How many counties are there?", "sql": "SELECT count(*) FROM county_public_safety", "source_tables": ["county_public_safety"]}}
{"sample_id": 2558, "db_id": "county_public_safety", "final": {"question": "What are the names of counties that do not contain any cities?", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2554, "db_id": "county_public_safety", "final": {"question": "How many counties correspond to each police force?", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "source_tables": ["county_public_safety"]}}
{"sample_id": 2534, "db_id": "county_public_safety", "final": {"question": "What are the crime rates of counties sorted by number of offices ascending?", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2539, "db_id": "county_public_safety", "final": {"question": "List the name of the county with the largest population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "source_tables": ["county_public_safety"]}}
{"sample_id": 2530, "db_id": "county_public_safety", "final": {"question": "What are the different police forces of counties that are not located in the East?", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "source_tables": ["county_public_safety"]}}
{"sample_id": 2557, "db_id": "county_public_safety", "final": {"question": "List the names of counties that do not have any cities.", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2545, "db_id": "county_public_safety", "final": {"question": "Show white percentages of cities and the crime rates of counties they are in.", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2601, "db_id": "inn_1", "final": {"question": "Find the number of rooms with a king bed.", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "source_tables": ["rooms"]}}
{"sample_id": 2584, "db_id": "inn_1", "final": {"question": "What are the names and decor of rooms with a king bed? Sort them by their price", "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "source_tables": ["rooms"]}}
{"sample_id": 2624, "db_id": "inn_1", "final": {"question": "Find the number of distinct bed types available in this inn.", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;", "source_tables": ["rooms"]}}
{"sample_id": 2582, "db_id": "inn_1", "final": {"question": "Find the total number of king beds available.", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "source_tables": ["rooms"]}}
{"sample_id": 2617, "db_id": "inn_1", "final": {"question": "Find the number of rooms with price higher than 120 for different decor.", "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "source_tables": ["rooms"]}}
{"sample_id": 2576, "db_id": "inn_1", "final": {"question": "Return the name, rate, check in and check out date for the room with the highest rate.", "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2570, "db_id": "inn_1", "final": {"question": "Which room has the largest number of reservations?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2621, "db_id": "inn_1", "final": {"question": "List the name of rooms with king or queen bed.", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "source_tables": ["rooms"]}}
{"sample_id": 2626, "db_id": "inn_1", "final": {"question": "What are the name and id of the three highest priced rooms?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "source_tables": ["rooms"]}}
{"sample_id": 2631, "db_id": "inn_1", "final": {"question": "Return the name and number of reservations made for each of the rooms.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2635, "db_id": "inn_1", "final": {"question": "Find the name of rooms whose base price is between 120 and 150.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "source_tables": ["rooms"]}}
{"sample_id": 2571, "db_id": "inn_1", "final": {"question": "How many kids stay in the rooms reserved by ROY SWEAZY?", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "source_tables": ["reservations"]}}
{"sample_id": 2611, "db_id": "inn_1", "final": {"question": "Find the number of rooms with king bed for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "source_tables": ["rooms"]}}
{"sample_id": 2580, "db_id": "inn_1", "final": {"question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.", "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";", "source_tables": ["reservations"]}}
{"sample_id": 2591, "db_id": "inn_1", "final": {"question": "What is the total number of people who could stay in the modern rooms in this inn?", "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "source_tables": ["rooms"]}}
{"sample_id": 2568, "db_id": "inn_1", "final": {"question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "source_tables": ["rooms"]}}
{"sample_id": 2578, "db_id": "inn_1", "final": {"question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";", "source_tables": ["reservations"]}}
{"sample_id": 2610, "db_id": "inn_1", "final": {"question": "What are the bed type and name of all the rooms with traditional decor?", "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";", "source_tables": ["rooms"]}}
{"sample_id": 2595, "db_id": "inn_1", "final": {"question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2603, "db_id": "inn_1", "final": {"question": "Find the number of rooms for each bed type.", "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "source_tables": ["rooms"]}}
{"sample_id": 2567, "db_id": "inn_1", "final": {"question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "source_tables": ["rooms"]}}
{"sample_id": 2600, "db_id": "inn_1", "final": {"question": "What is the total number of rooms available in this inn?", "sql": "SELECT count(*) FROM Rooms;", "source_tables": ["rooms"]}}
{"sample_id": 2615, "db_id": "inn_1", "final": {"question": "List the name of all rooms sorted by their prices.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;", "source_tables": ["rooms"]}}
{"sample_id": 2614, "db_id": "inn_1", "final": {"question": "What is the average minimum and price of the rooms for each different decor.", "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "source_tables": ["rooms"]}}
{"sample_id": 2609, "db_id": "inn_1", "final": {"question": "List the type of bed and name of all traditional rooms.", "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";", "source_tables": ["rooms"]}}
{"sample_id": 2608, "db_id": "inn_1", "final": {"question": "Which room has the highest base price?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "source_tables": ["rooms"]}}
{"sample_id": 2589, "db_id": "inn_1", "final": {"question": "What is the average base price of different bed type? List bed type and average base price.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "source_tables": ["rooms"]}}
{"sample_id": 2594, "db_id": "inn_1", "final": {"question": "What is the least popular kind of decor?", "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2625, "db_id": "inn_1", "final": {"question": "Find the name and id of the top 3 expensive rooms.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "source_tables": ["rooms"]}}
{"sample_id": 2636, "db_id": "inn_1", "final": {"question": "Which rooms cost between 120 and 150? Give me the room names.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "source_tables": ["rooms"]}}
{"sample_id": 2599, "db_id": "inn_1", "final": {"question": "How many rooms are there?", "sql": "SELECT count(*) FROM Rooms;", "source_tables": ["rooms"]}}
{"sample_id": 2629, "db_id": "inn_1", "final": {"question": "Find the number of rooms that do not have any reservation.", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2618, "db_id": "inn_1", "final": {"question": "How many rooms cost more than 120, for each different decor?", "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "source_tables": ["rooms"]}}
{"sample_id": 2596, "db_id": "inn_1", "final": {"question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2569, "db_id": "inn_1", "final": {"question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2583, "db_id": "inn_1", "final": {"question": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "source_tables": ["rooms"]}}
{"sample_id": 2588, "db_id": "inn_1", "final": {"question": "Return the decor of the room named \"Recluse and defiance\".", "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";", "source_tables": ["rooms"]}}
{"sample_id": 2587, "db_id": "inn_1", "final": {"question": "What is the decor of room Recluse and defiance?", "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";", "source_tables": ["rooms"]}}
{"sample_id": 2622, "db_id": "inn_1", "final": {"question": "What are the names of rooms that have either king or queen bed?", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "source_tables": ["rooms"]}}
{"sample_id": 2579, "db_id": "inn_1", "final": {"question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";", "source_tables": ["reservations"]}}
{"sample_id": 2607, "db_id": "inn_1", "final": {"question": "Find the id and name of the most expensive base price room.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "source_tables": ["rooms"]}}
{"sample_id": 2586, "db_id": "inn_1", "final": {"question": "What are the room name and base price of the room with the lowest base price?", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "source_tables": ["rooms"]}}
{"sample_id": 2572, "db_id": "inn_1", "final": {"question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "source_tables": ["reservations"]}}
{"sample_id": 2633, "db_id": "inn_1", "final": {"question": "Find the names of rooms that have been reserved for more than 60 times.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2642, "db_id": "local_govt_mdm", "final": {"question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "sql": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id", "source_tables": ["cmi_cross_references", "benefits_overpayments"]}}
{"sample_id": 2643, "db_id": "local_govt_mdm", "final": {"question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?", "sql": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id", "source_tables": ["cmi_cross_references", "parking_fines"]}}
{"sample_id": 2644, "db_id": "local_govt_mdm", "final": {"question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'", "source_tables": ["rent_arrears", "customer_master_index", "cmi_cross_references"]}}
{"sample_id": 2651, "db_id": "local_govt_mdm", "final": {"question": "Which cmi cross reference id is not related to any parking taxes?", "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines", "source_tables": ["cmi_cross_references", "parking_fines"]}}
{"sample_id": 2641, "db_id": "local_govt_mdm", "final": {"question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n", "sql": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id", "source_tables": ["cmi_cross_references", "business_rates"]}}
{"sample_id": 2649, "db_id": "local_govt_mdm", "final": {"question": "How many council taxes are collected for renting arrears ?", "sql": "SELECT count(*) FROM rent_arrears", "source_tables": ["rent_arrears"]}}
{"sample_id": 2645, "db_id": "local_govt_mdm", "final": {"question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'", "source_tables": ["cmi_cross_references", "electoral_register"]}}
{"sample_id": 2640, "db_id": "local_govt_mdm", "final": {"question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.", "sql": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1", "source_tables": ["cmi_cross_references", "council_tax"]}}
{"sample_id": 2668, "db_id": "party_host", "final": {"question": "Which nationality has the most hosts?", "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2680, "db_id": "party_host", "final": {"question": "What are the name and the nationality of the host of the highest age?", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2655, "db_id": "party_host", "final": {"question": "List the themes of parties in ascending order of number of hosts.", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "source_tables": ["party"]}}
{"sample_id": 2674, "db_id": "party_host", "final": {"question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.", "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2658, "db_id": "party_host", "final": {"question": "Give me the theme and location of each party.", "sql": "SELECT Party_Theme ,  LOCATION FROM party", "source_tables": ["party"]}}
{"sample_id": 2682, "db_id": "party_host", "final": {"question": "What are the names of hosts who did not host any party in our record?", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "source_tables": ["host", "party_host"]}}
{"sample_id": 2659, "db_id": "party_host", "final": {"question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".", "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"", "source_tables": ["party"]}}
{"sample_id": 2669, "db_id": "party_host", "final": {"question": "Show the nations that have both hosts older than 45 and hosts younger than 35.", "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35", "source_tables": ["host"]}}
{"sample_id": 2671, "db_id": "party_host", "final": {"question": "Show the themes of parties and the names of the party hosts.", "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2653, "db_id": "party_host", "final": {"question": "How many parties are there?", "sql": "SELECT count(*) FROM party", "source_tables": ["party"]}}
{"sample_id": 2679, "db_id": "party_host", "final": {"question": "Show the name and the nationality of the oldest host.", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2663, "db_id": "party_host", "final": {"question": "What is the location of the party with the most hosts?", "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2676, "db_id": "party_host", "final": {"question": "Which parties have hosts of age above 50? Give me the party locations.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2672, "db_id": "party_host", "final": {"question": "For each party, return its theme and the name of its host.", "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2667, "db_id": "party_host", "final": {"question": "Show the most common nationality of hosts.", "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2657, "db_id": "party_host", "final": {"question": "What are the themes and locations of parties?", "sql": "SELECT Party_Theme ,  LOCATION FROM party", "source_tables": ["party"]}}
{"sample_id": 2665, "db_id": "party_host", "final": {"question": "Show different nationalities along with the number of hosts of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality", "source_tables": ["host"]}}
{"sample_id": 2654, "db_id": "party_host", "final": {"question": "Count the number of parties.", "sql": "SELECT count(*) FROM party", "source_tables": ["party"]}}
{"sample_id": 2725, "db_id": "storm_record", "final": {"question": "Find the name of the storm that affected both Afghanistan and Albania regions.", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2692, "db_id": "storm_record", "final": {"question": "Count the number of storms in which at least 1 person died.", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "source_tables": ["storm"]}}
{"sample_id": 2691, "db_id": "storm_record", "final": {"question": "How many storms had death records?", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "source_tables": ["storm"]}}
{"sample_id": 2683, "db_id": "storm_record", "final": {"question": "How many regions do we have?", "sql": "SELECT count(*) FROM region", "source_tables": ["region"]}}
{"sample_id": 2698, "db_id": "storm_record", "final": {"question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "source_tables": ["storm"]}}
{"sample_id": 2688, "db_id": "storm_record", "final": {"question": "What are the names of the regions in alphabetical order?", "sql": "SELECT region_name FROM region ORDER BY region_name", "source_tables": ["region"]}}
{"sample_id": 2697, "db_id": "storm_record", "final": {"question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "source_tables": ["storm"]}}
{"sample_id": 2726, "db_id": "storm_record", "final": {"question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2708, "db_id": "storm_record", "final": {"question": "How many regions were affected by each storm?", "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2706, "db_id": "storm_record", "final": {"question": "How many storms occured in each region?", "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2685, "db_id": "storm_record", "final": {"question": "Show all region code and region name sorted by the codes.", "sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "source_tables": ["region"]}}
{"sample_id": 2699, "db_id": "storm_record", "final": {"question": "List name and damage for all storms in a descending order of max speed.", "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "source_tables": ["storm"]}}
{"sample_id": 2723, "db_id": "storm_record", "final": {"question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2686, "db_id": "storm_record", "final": {"question": "What are the codes and names for all regions, sorted by codes?", "sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "source_tables": ["region"]}}
{"sample_id": 2687, "db_id": "storm_record", "final": {"question": "List all region names in alphabetical order.", "sql": "SELECT region_name FROM region ORDER BY region_name", "source_tables": ["region"]}}
{"sample_id": 2701, "db_id": "storm_record", "final": {"question": "How many regions are affected?", "sql": "SELECT count(DISTINCT region_id) FROM affected_region", "source_tables": ["affected_region"]}}
{"sample_id": 2684, "db_id": "storm_record", "final": {"question": "Count the number of regions.", "sql": "SELECT count(*) FROM region", "source_tables": ["region"]}}
{"sample_id": 2715, "db_id": "storm_record", "final": {"question": "Show all storm names except for those with at least two affected regions.", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2713, "db_id": "storm_record", "final": {"question": "Show storm name with at least two regions and 10 cities affected.", "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2711, "db_id": "storm_record", "final": {"question": "Show the name of storms which don't have affected region in record.", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2693, "db_id": "storm_record", "final": {"question": "List name, dates active, and number of deaths for all storms with at least 1 death.", "sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "source_tables": ["storm"]}}
{"sample_id": 2716, "db_id": "storm_record", "final": {"question": "What are the names of storms that did not affect two or more regions?", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2705, "db_id": "storm_record", "final": {"question": "Show the name for regions and the number of storms for each region.", "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2689, "db_id": "storm_record", "final": {"question": "Show names for all regions except for Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "source_tables": ["region"]}}
{"sample_id": 2709, "db_id": "storm_record", "final": {"question": "What is the storm name and max speed which affected the greatest number of regions?", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2710, "db_id": "storm_record", "final": {"question": "Return the name and max speed of the storm that affected the most regions.", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2733, "db_id": "election", "final": {"question": "Return the maximum and minimum population among all counties.", "sql": "SELECT max(Population) ,  min(Population) FROM county", "source_tables": ["county"]}}
{"sample_id": 2767, "db_id": "election", "final": {"question": "Show the name of each county along with the corresponding number of delegates from that county.", "sql": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id", "source_tables": ["election", "county"]}}
{"sample_id": 2794, "db_id": "election", "final": {"question": "Find the committees that have delegates both from from the democratic party and the liberal party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"", "source_tables": ["election", "party"]}}
{"sample_id": 2759, "db_id": "election", "final": {"question": "Show the delegates and the names of the party they belong to.", "sql": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID", "source_tables": ["election", "party"]}}
{"sample_id": 2762, "db_id": "election", "final": {"question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?", "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "source_tables": ["election", "party"]}}
{"sample_id": 2764, "db_id": "election", "final": {"question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?", "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2", "source_tables": ["election", "party"]}}
{"sample_id": 2741, "db_id": "election", "final": {"question": "Show the delegate and committee information of elections.", "sql": "SELECT Delegate ,  Committee FROM election", "source_tables": ["election"]}}
{"sample_id": 2750, "db_id": "election", "final": {"question": "Return all the information for each election record.", "sql": "SELECT * FROM election", "source_tables": ["election"]}}
{"sample_id": 2744, "db_id": "election", "final": {"question": "Count the number of distinct governors.", "sql": "SELECT count(DISTINCT Governor) FROM party", "source_tables": ["party"]}}
{"sample_id": 2791, "db_id": "election", "final": {"question": "What are the names of parties that have both delegates on \"Appropriations\" committee and", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"", "source_tables": ["election", "party"]}}
{"sample_id": 2771, "db_id": "election", "final": {"question": "Return the names of all counties sorted by population in ascending order.", "sql": "SELECT County_name FROM county ORDER BY Population ASC", "source_tables": ["county"]}}
{"sample_id": 2757, "db_id": "election", "final": {"question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"", "source_tables": ["election", "county"]}}
{"sample_id": 2792, "db_id": "election", "final": {"question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"", "source_tables": ["election", "party"]}}
{"sample_id": 2775, "db_id": "election", "final": {"question": "Show the name of the county with the biggest population.", "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "source_tables": ["county"]}}
{"sample_id": 2774, "db_id": "election", "final": {"question": "Sort the names of all counties in descending alphabetical order.", "sql": "SELECT County_name FROM county ORDER BY County_name DESC", "source_tables": ["county"]}}
{"sample_id": 2778, "db_id": "election", "final": {"question": "What are the 3 counties that have the smallest population? Give me the county names.", "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "source_tables": ["county"]}}
{"sample_id": 2732, "db_id": "election", "final": {"question": "On average how large is the population of the counties?", "sql": "SELECT avg(Population) FROM county", "source_tables": ["county"]}}
{"sample_id": 2779, "db_id": "election", "final": {"question": "Show the names of counties that have at least two delegates.", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2", "source_tables": ["election", "county"]}}
{"sample_id": 2737, "db_id": "election", "final": {"question": "Show the zip code of the county with name \"Howard\".", "sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"", "source_tables": ["county"]}}
{"sample_id": 2769, "db_id": "election", "final": {"question": "Show the name of each party and the corresponding number of delegates from that party.", "sql": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party", "source_tables": ["election", "party"]}}
{"sample_id": 2776, "db_id": "election", "final": {"question": "Which county has the largest population? Give me the name of the county.", "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "source_tables": ["county"]}}
{"sample_id": 2790, "db_id": "election", "final": {"question": "Which parties did not have any delegates in elections?", "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)", "source_tables": ["election", "party"]}}
{"sample_id": 2740, "db_id": "election", "final": {"question": "Who is the delegate of district 1 in the elections?", "sql": "SELECT Delegate FROM election WHERE District  =  1", "source_tables": ["election"]}}
{"sample_id": 2743, "db_id": "election", "final": {"question": "How many distinct governors are there?", "sql": "SELECT count(DISTINCT Governor) FROM party", "source_tables": ["party"]}}
{"sample_id": 2738, "db_id": "election", "final": {"question": "What is the zip code the county named \"Howard\" is located in?", "sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"", "source_tables": ["county"]}}
{"sample_id": 2788, "db_id": "election", "final": {"question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2754, "db_id": "election", "final": {"question": "Find the delegates who are from counties with population below 100000.", "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000", "source_tables": ["election", "county"]}}
{"sample_id": 2752, "db_id": "election", "final": {"question": "What are the delegate and name of the county they belong to, for each county?", "sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District", "source_tables": ["election", "county"]}}
{"sample_id": 2787, "db_id": "election", "final": {"question": "Show the people that have been comptroller the most times and the corresponding number of times.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2748, "db_id": "election", "final": {"question": "Find the distinct years when the governor was named \"Eliot Spitzer\".", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"", "source_tables": ["party"]}}
{"sample_id": 2772, "db_id": "election", "final": {"question": "Sort the names of all counties in ascending order of population.", "sql": "SELECT County_name FROM county ORDER BY Population ASC", "source_tables": ["county"]}}
{"sample_id": 2746, "db_id": "election", "final": {"question": "Who are the lieutenant governor and comptroller from the democratic party?", "sql": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"", "source_tables": ["party"]}}
{"sample_id": 2735, "db_id": "election", "final": {"question": "Show all the distinct districts for elections.", "sql": "SELECT DISTINCT District FROM election", "source_tables": ["election"]}}
{"sample_id": 2739, "db_id": "election", "final": {"question": "Show the delegate from district 1 in election.", "sql": "SELECT Delegate FROM election WHERE District  =  1", "source_tables": ["election"]}}
{"sample_id": 2728, "db_id": "election", "final": {"question": "Count the total number of counties.", "sql": "SELECT count(*) FROM county", "source_tables": ["county"]}}
{"sample_id": 2783, "db_id": "election", "final": {"question": "Show the name of the party that has the most delegates.", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["election", "party"]}}
{"sample_id": 2753, "db_id": "election", "final": {"question": "Which delegates are from counties with population smaller than 100000?", "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000", "source_tables": ["election", "county"]}}
{"sample_id": 2747, "db_id": "election", "final": {"question": "In which distinct years was the governor \"Eliot Spitzer\"?", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"", "source_tables": ["party"]}}
{"sample_id": 2736, "db_id": "election", "final": {"question": "What are the distinct districts for elections?", "sql": "SELECT DISTINCT District FROM election", "source_tables": ["election"]}}
{"sample_id": 2784, "db_id": "election", "final": {"question": "Which party has the largest number of delegates?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["election", "party"]}}
{"sample_id": 2805, "db_id": "news_report", "final": {"question": "Show the names of journalists and the dates of the events they reported.", "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID", "source_tables": ["journalist", "news_report", "event"]}}
{"sample_id": 2808, "db_id": "news_report", "final": {"question": "Show the names of journalists that have reported more than one event.", "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1", "source_tables": ["journalist", "news_report", "event"]}}
{"sample_id": 2797, "db_id": "news_report", "final": {"question": "What are the nationalities and ages of journalists?", "sql": "SELECT Nationality ,  Age FROM journalist", "source_tables": ["journalist"]}}
{"sample_id": 2796, "db_id": "news_report", "final": {"question": "List the names of journalists in ascending order of years working.", "sql": "SELECT Name FROM journalist ORDER BY Years_working ASC", "source_tables": ["journalist"]}}
{"sample_id": 2810, "db_id": "news_report", "final": {"question": "what are the average and maximum attendances of all events?", "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event", "source_tables": ["event"]}}
{"sample_id": 2809, "db_id": "news_report", "final": {"question": "List the names of journalists who have not reported any event.", "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)", "source_tables": ["journalist", "news_report"]}}
{"sample_id": 2812, "db_id": "news_report", "final": {"question": "List the event venues and names that have the top 2 most number of people attended.", "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2", "source_tables": ["event"]}}
{"sample_id": 2811, "db_id": "news_report", "final": {"question": "Find the average age and experience working length of journalists working on different role type.", "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type", "source_tables": ["journalist", "news_report"]}}
{"sample_id": 2795, "db_id": "news_report", "final": {"question": "How many journalists are there?", "sql": "SELECT count(*) FROM journalist", "source_tables": ["journalist"]}}
{"sample_id": 2807, "db_id": "news_report", "final": {"question": "Show the names of journalists and the number of events they reported.", "sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name", "source_tables": ["journalist", "news_report", "event"]}}
{"sample_id": 2823, "db_id": "restaurant_1", "final": {"question": "Advisor 1121 has how many students?", "sql": "SELECT count(*) FROM Student WHERE Advisor =  1121;", "source_tables": ["student"]}}
{"sample_id": 2813, "db_id": "restaurant_1", "final": {"question": "Show me all the restaurants.", "sql": "SELECT ResName FROM Restaurant;", "source_tables": ["restaurant"]}}
{"sample_id": 2830, "db_id": "restaurant_1", "final": {"question": "How long does student Linda Smith spend on the restaurant in total?", "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";", "source_tables": ["student", "visits_restaurant"]}}
{"sample_id": 2824, "db_id": "restaurant_1", "final": {"question": "Which Advisor has most of students? List advisor and the number of students.", "sql": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;", "source_tables": ["student"]}}
{"sample_id": 2821, "db_id": "restaurant_1", "final": {"question": "List all students' first names and last names who majored in 600.", "sql": "SELECT Fname , Lname FROM Student WHERE Major  =  600;", "source_tables": ["student"]}}
{"sample_id": 2833, "db_id": "restaurant_1", "final": {"question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.", "sql": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;", "source_tables": ["visits_restaurant", "restaurant"]}}
{"sample_id": 2831, "db_id": "restaurant_1", "final": {"question": "How many times has the student Linda Smith visited Subway?", "sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";", "source_tables": ["student", "visits_restaurant", "restaurant"]}}
{"sample_id": 2819, "db_id": "restaurant_1", "final": {"question": "What is the age of student Linda Smith?", "sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "source_tables": ["student"]}}
{"sample_id": 2834, "db_id": "restaurant_1", "final": {"question": "Which student visited restaurant most often? List student's first name and last name.", "sql": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["student", "visits_restaurant"]}}
{"sample_id": 2825, "db_id": "restaurant_1", "final": {"question": "Which major has least number of students? List the major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;", "source_tables": ["student"]}}
{"sample_id": 2822, "db_id": "restaurant_1", "final": {"question": "Which city does student Linda Smith live in?", "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "source_tables": ["student"]}}
{"sample_id": 2820, "db_id": "restaurant_1", "final": {"question": "What is the gender of the student Linda Smith?", "sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "source_tables": ["student"]}}
{"sample_id": 2818, "db_id": "restaurant_1", "final": {"question": "Which restaurants have highest rating? List the restaurant name and its rating.", "sql": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;", "source_tables": ["restaurant"]}}
{"sample_id": 2847, "db_id": "customer_deliveries", "final": {"question": "Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 2844, "db_id": "customer_deliveries", "final": {"question": "Find the states which do not have any employee in their record.", "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)", "source_tables": ["employees", "addresses"]}}
{"sample_id": 2837, "db_id": "customer_deliveries", "final": {"question": "Find the number of customers in total.", "sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}}
{"sample_id": 2842, "db_id": "customer_deliveries", "final": {"question": "List the names and emails of customers who payed by Visa card.", "sql": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'", "source_tables": ["customers"]}}
{"sample_id": 2846, "db_id": "customer_deliveries", "final": {"question": "Find the name of the first 5 customers.", "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5", "source_tables": ["customers"]}}
{"sample_id": 2849, "db_id": "customer_deliveries", "final": {"question": "Find the name of route that has the highest number of deliveries.", "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["delivery_routes", "delivery_route_locations"]}}
{"sample_id": 2845, "db_id": "customer_deliveries", "final": {"question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.", "sql": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer", "source_tables": ["customers"]}}
{"sample_id": 2839, "db_id": "customer_deliveries", "final": {"question": "Show the details of all trucks in the order of their license number.", "sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number", "source_tables": ["trucks"]}}
{"sample_id": 2840, "db_id": "customer_deliveries", "final": {"question": "Find the name of the most expensive product.", "sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 2877, "db_id": "icfp_1", "final": {"question": "Find all the papers published by the institution \"Google\".", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2912, "db_id": "icfp_1", "final": {"question": "Sort the first names of all the authors in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname", "source_tables": ["authors"]}}
{"sample_id": 2908, "db_id": "icfp_1", "final": {"question": "Which authors have last name \"Ueno\"? List their first names.", "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"", "source_tables": ["authors"]}}
{"sample_id": 2884, "db_id": "icfp_1", "final": {"question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2875, "db_id": "icfp_1", "final": {"question": "What are the papers published under the institution \"Indiana University\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2886, "db_id": "icfp_1", "final": {"question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2916, "db_id": "icfp_1", "final": {"question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2852, "db_id": "icfp_1", "final": {"question": "Count the number of authors.", "sql": "SELECT count(*) FROM authors", "source_tables": ["authors"]}}
{"sample_id": 2858, "db_id": "icfp_1", "final": {"question": "Find the titles of all the papers written by \"Jeremy Gibbons\"", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2906, "db_id": "icfp_1", "final": {"question": "Which paper has the most authors? Give me the paper title.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "source_tables": ["papers", "authorship"]}}
{"sample_id": 2882, "db_id": "icfp_1", "final": {"question": "How many papers are written by authors from the institution \"University of Pennsylvania\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2878, "db_id": "icfp_1", "final": {"question": "Which papers were written by authors from the institution \"Google\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2896, "db_id": "icfp_1", "final": {"question": "Which institution has the most papers? Find the name of the institution.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"]}}
{"sample_id": 2872, "db_id": "icfp_1", "final": {"question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2888, "db_id": "icfp_1", "final": {"question": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"", "source_tables": ["papers", "inst", "authorship", "authors"]}}
{"sample_id": 2901, "db_id": "icfp_1", "final": {"question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2894, "db_id": "icfp_1", "final": {"question": "Find the country that the most papers are affiliated with.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"]}}
{"sample_id": 2873, "db_id": "icfp_1", "final": {"question": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".", "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2862, "db_id": "icfp_1", "final": {"question": "How many papers are \"Atsushi Ohori\" the author of?", "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2914, "db_id": "icfp_1", "final": {"question": "Give me a list of all the last names of authors sorted in alphabetical order", "sql": "SELECT lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2913, "db_id": "icfp_1", "final": {"question": "Retrieve all the last names of authors in alphabetical order.", "sql": "SELECT lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2883, "db_id": "icfp_1", "final": {"question": "Find the papers which have \"Olin Shivers\" as an author.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2881, "db_id": "icfp_1", "final": {"question": "Find the number of papers published by the institution \"University of Pennsylvania\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2874, "db_id": "icfp_1", "final": {"question": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?", "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2851, "db_id": "icfp_1", "final": {"question": "How many authors are there?", "sql": "SELECT count(*) FROM authors", "source_tables": ["authors"]}}
{"sample_id": 2903, "db_id": "icfp_1", "final": {"question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2868, "db_id": "icfp_1", "final": {"question": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2911, "db_id": "icfp_1", "final": {"question": "Find the first names of all the authors ordered in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname", "source_tables": ["authors"]}}
{"sample_id": 2857, "db_id": "icfp_1", "final": {"question": "What are the titles of papers published by \"Jeremy Gibbons\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2904, "db_id": "icfp_1", "final": {"question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2854, "db_id": "icfp_1", "final": {"question": "Count the number of institutions.", "sql": "SELECT count(*) FROM inst", "source_tables": ["inst"]}}
{"sample_id": 2891, "db_id": "icfp_1", "final": {"question": "What is the last name of the author that has published the most papers?", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2915, "db_id": "icfp_1", "final": {"question": "Retrieve all the first and last names of authors in the alphabetical order of last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2890, "db_id": "icfp_1", "final": {"question": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"", "source_tables": ["papers", "inst", "authorship", "authors"]}}
{"sample_id": 2905, "db_id": "icfp_1", "final": {"question": "Retrieve the title of the paper that has the largest number of authors.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "source_tables": ["papers", "authorship"]}}
{"sample_id": 2871, "db_id": "icfp_1", "final": {"question": "What are the last names of the author of the paper titled \"Binders Unbound\"?", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2870, "db_id": "icfp_1", "final": {"question": "Find the first names and last names of the authors whose institution affiliation is \"Google\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2887, "db_id": "icfp_1", "final": {"question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"", "source_tables": ["papers", "inst", "authorship", "authors"]}}
{"sample_id": 2879, "db_id": "icfp_1", "final": {"question": "How many papers are published by the institution \"Tokohu University\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2925, "db_id": "sakila_1", "final": {"question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?", "sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", "source_tables": ["address"]}}
{"sample_id": 2943, "db_id": "sakila_1", "final": {"question": "Which film has the most number of actors or actresses? List the film name, film id and description.", "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["film_actor", "film"]}}
{"sample_id": 2968, "db_id": "sakila_1", "final": {"question": "Return the address of store 1.", "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1", "source_tables": ["store", "address"]}}
{"sample_id": 2992, "db_id": "sakila_1", "final": {"question": "Return the id of the store with the most customers.", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 2946, "db_id": "sakila_1", "final": {"question": "Return the full name and id of the actor or actress who starred in the greatest number of films.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}}
{"sample_id": 2977, "db_id": "sakila_1", "final": {"question": "Which movies have 'Deleted Scenes' as a substring in the special feature?", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "source_tables": ["film"]}}
{"sample_id": 2985, "db_id": "sakila_1", "final": {"question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "source_tables": ["film"]}}
{"sample_id": 2959, "db_id": "sakila_1", "final": {"question": "Which film has the most copies in the inventory? List both title and id.", "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inventory", "film"]}}
{"sample_id": 2962, "db_id": "sakila_1", "final": {"question": "Return the title and inventory id of the film that is rented most often.", "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inventory", "film", "rental"]}}
{"sample_id": 2927, "db_id": "sakila_1", "final": {"question": "Which city has the most addresses? List the city name, number of addresses, and city id.", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["city", "address"]}}
{"sample_id": 2924, "db_id": "sakila_1", "final": {"question": "Give the districts which have two or more addresses.", "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2", "source_tables": ["address"]}}
{"sample_id": 2945, "db_id": "sakila_1", "final": {"question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}}
{"sample_id": 2997, "db_id": "sakila_1", "final": {"question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "source_tables": ["customer", "rental"]}}
{"sample_id": 2929, "db_id": "sakila_1", "final": {"question": "How many addresses are in the district of California?", "sql": "SELECT count(*) FROM address WHERE district  =  'California'", "source_tables": ["address"]}}
{"sample_id": 2971, "db_id": "sakila_1", "final": {"question": "Which language does the film AIRPORT POLLOCK use? List the language name.", "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'", "source_tables": ["language", "film"]}}
{"sample_id": 2955, "db_id": "sakila_1", "final": {"question": "What is the genre name of the film HUNGER ROOF?", "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'", "source_tables": ["film", "film_category", "category"]}}
{"sample_id": 2993, "db_id": "sakila_1", "final": {"question": "What is the largest payment amount?", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2998, "db_id": "sakila_1", "final": {"question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "source_tables": ["customer", "rental"]}}
{"sample_id": 2969, "db_id": "sakila_1", "final": {"question": "Which staff handled least number of payments? List the full name and the id.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["staff", "payment"]}}
{"sample_id": 2970, "db_id": "sakila_1", "final": {"question": "Give the full name and staff id of the staff who has handled the fewest payments.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["staff", "payment"]}}
{"sample_id": 2932, "db_id": "sakila_1", "final": {"question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "source_tables": ["inventory", "film"]}}
{"sample_id": 2952, "db_id": "sakila_1", "final": {"question": "Return the sum of all payment amounts.", "sql": "SELECT sum(amount) FROM payment", "source_tables": ["payment"]}}
{"sample_id": 2951, "db_id": "sakila_1", "final": {"question": "What is the total amount of all payments?", "sql": "SELECT sum(amount) FROM payment", "source_tables": ["payment"]}}
{"sample_id": 2979, "db_id": "sakila_1", "final": {"question": "How many items in inventory does store 1 have?", "sql": "SELECT count(*) FROM inventory WHERE store_id  =  1", "source_tables": ["inventory"]}}
{"sample_id": 2963, "db_id": "sakila_1", "final": {"question": "How many languages are in these films?", "sql": "SELECT count(DISTINCT language_id) FROM film", "source_tables": ["film"]}}
{"sample_id": 2926, "db_id": "sakila_1", "final": {"question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.", "sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", "source_tables": ["address"]}}
{"sample_id": 2917, "db_id": "sakila_1", "final": {"question": "How many different last names do the actors and actresses have?", "sql": "SELECT count(DISTINCT last_name) FROM actor", "source_tables": ["actor"]}}
{"sample_id": 2987, "db_id": "sakila_1", "final": {"question": "What is the first name and the last name of the customer who made the earliest rental?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "source_tables": ["customer", "rental"]}}
{"sample_id": 2947, "db_id": "sakila_1", "final": {"question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.", "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30", "source_tables": ["film_actor", "actor"]}}
{"sample_id": 2978, "db_id": "sakila_1", "final": {"question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "source_tables": ["film"]}}
{"sample_id": 2922, "db_id": "sakila_1", "final": {"question": "Return the most common full name among all actors.", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["actor"]}}
{"sample_id": 2918, "db_id": "sakila_1", "final": {"question": "Count the number of different last names actors have.", "sql": "SELECT count(DISTINCT last_name) FROM actor", "source_tables": ["actor"]}}
{"sample_id": 2954, "db_id": "sakila_1", "final": {"question": "What is the full name and id of the customer who has the lowest total amount of payment?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1", "source_tables": ["customer", "payment"]}}
{"sample_id": 2956, "db_id": "sakila_1", "final": {"question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.", "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'", "source_tables": ["film", "film_category", "category"]}}
{"sample_id": 2944, "db_id": "sakila_1", "final": {"question": "What are the title, id, and description of the movie with the greatest number of actors?", "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["film_actor", "film"]}}
{"sample_id": 2950, "db_id": "sakila_1", "final": {"question": "What is the id of the store that has the most items in inventory?", "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inventory"]}}
{"sample_id": 2967, "db_id": "sakila_1", "final": {"question": "Where is store 1 located?", "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1", "source_tables": ["store", "address"]}}
{"sample_id": 2933, "db_id": "sakila_1", "final": {"question": "How many cities are in Australia?", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "source_tables": ["city", "country"]}}
{"sample_id": 2980, "db_id": "sakila_1", "final": {"question": "Count the number of items store 1 has in stock.", "sql": "SELECT count(*) FROM inventory WHERE store_id  =  1", "source_tables": ["inventory"]}}
{"sample_id": 2938, "db_id": "sakila_1", "final": {"question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "source_tables": ["staff", "payment"]}}
{"sample_id": 2990, "db_id": "sakila_1", "final": {"question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "source_tables": ["staff", "customer", "rental"]}}
{"sample_id": 2982, "db_id": "sakila_1", "final": {"question": "What was the date of the earliest payment?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2920, "db_id": "sakila_1", "final": {"question": "Return the most common first name among all actors.", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["actor"]}}
{"sample_id": 2991, "db_id": "sakila_1", "final": {"question": "Which store has most the customers?", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 2957, "db_id": "sakila_1", "final": {"question": "How many films are there in each category? List the genre name, genre id and the count.", "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id", "source_tables": ["film_category", "category"]}}
{"sample_id": 2928, "db_id": "sakila_1", "final": {"question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["city", "address"]}}
{"sample_id": 2975, "db_id": "sakila_1", "final": {"question": "How many kinds of different ratings are listed?", "sql": "SELECT count(DISTINCT rating) FROM film", "source_tables": ["film"]}}
{"sample_id": 2941, "db_id": "sakila_1", "final": {"question": "Which film has the highest rental rate? And what is the rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "source_tables": ["film"]}}
{"sample_id": 2935, "db_id": "sakila_1", "final": {"question": "Which countries have at least 3 cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "source_tables": ["city", "country"]}}
{"sample_id": 3027, "db_id": "loan_1", "final": {"question": "Find the total account balance of each customer from Utah or Texas.", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "source_tables": ["customer"]}}
{"sample_id": 3057, "db_id": "loan_1", "final": {"question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3064, "db_id": "loan_1", "final": {"question": "What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "source_tables": ["bank", "loan"]}}
{"sample_id": 3028, "db_id": "loan_1", "final": {"question": "What are the total account balances for each customer from Utah or Texas?", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "source_tables": ["customer"]}}
{"sample_id": 3067, "db_id": "loan_1", "final": {"question": "Find the the name of the customers who have a loan with amount more than 3000.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3053, "db_id": "loan_1", "final": {"question": "Find the total amount of loans offered by each bank branch.", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "source_tables": ["bank", "loan"]}}
{"sample_id": 3046, "db_id": "loan_1", "final": {"question": "What is the name of the customer who has greatest total loan amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "source_tables": ["customer", "loan"]}}
{"sample_id": 3055, "db_id": "loan_1", "final": {"question": "Find the name of customers who have more than one loan.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "source_tables": ["customer", "loan"]}}
{"sample_id": 3048, "db_id": "loan_1", "final": {"question": "Which state has the greatest total number of bank customers?", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "source_tables": ["bank"]}}
{"sample_id": 3069, "db_id": "loan_1", "final": {"question": "Find the city and name of bank branches that provide business loans.", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3036, "db_id": "loan_1", "final": {"question": "What are the names of customers who have taken both Mortgage and Auto loans?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "source_tables": ["customer", "loan"]}}
{"sample_id": 3002, "db_id": "loan_1", "final": {"question": "What is the total number of customers across banks?", "sql": "SELECT sum(no_of_customers) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3015, "db_id": "loan_1", "final": {"question": "List the name of all different customers who have some loan sorted by their total loan amount.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3049, "db_id": "loan_1", "final": {"question": "For each account type, find the average account balance of customers with credit score lower than 50.", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "source_tables": ["customer"]}}
{"sample_id": 3029, "db_id": "loan_1", "final": {"question": "Find the name of customers who have both saving and checking account types.", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "source_tables": ["customer"]}}
{"sample_id": 3039, "db_id": "loan_1", "final": {"question": "Find the branch name of the bank that has the most number of customers.", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "source_tables": ["bank"]}}
{"sample_id": 3045, "db_id": "loan_1", "final": {"question": "Find the name of customer who has the highest amount of loans.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "source_tables": ["customer", "loan"]}}
{"sample_id": 3020, "db_id": "loan_1", "final": {"question": "In how many different cities are banks located?", "sql": "SELECT count(DISTINCT city) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3071, "db_id": "loan_1", "final": {"question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "source_tables": ["customer", "bank", "loan"]}}
{"sample_id": 2999, "db_id": "loan_1", "final": {"question": "How many bank branches are there?", "sql": "SELECT count(*) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3076, "db_id": "loan_1", "final": {"question": "What is the average credit score for customers who have taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3051, "db_id": "loan_1", "final": {"question": "For each state, find the total account balance of customers whose credit score is above 100.", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "source_tables": ["customer"]}}
{"sample_id": 3044, "db_id": "loan_1", "final": {"question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 3032, "db_id": "loan_1", "final": {"question": "What are the names of customers who do not have saving accounts?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "source_tables": ["customer"]}}
{"sample_id": 3068, "db_id": "loan_1", "final": {"question": "What are the names of customers who have a loan of more than 3000 in amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3011, "db_id": "loan_1", "final": {"question": "Find the branch names of banks in the New York state.", "sql": "SELECT bname FROM bank WHERE state  =  'New York'", "source_tables": ["bank"]}}
{"sample_id": 3059, "db_id": "loan_1", "final": {"question": "Find the name of bank branch that provided the greatest total amount of loans.", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "source_tables": ["bank", "loan"]}}
{"sample_id": 3014, "db_id": "loan_1", "final": {"question": "What are the names of all customers, ordered by account balance?", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "source_tables": ["customer"]}}
{"sample_id": 3075, "db_id": "loan_1", "final": {"question": "Find the average credit score of the customers who have some loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3077, "db_id": "loan_1", "final": {"question": "Find the average credit score of the customers who do not have any loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3043, "db_id": "loan_1", "final": {"question": "Find the name, account type, and account balance of the customer who has the highest credit score.", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 3052, "db_id": "loan_1", "final": {"question": "What is the total account balance for customers with a credit score of above 100 for the different states?", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "source_tables": ["customer"]}}
{"sample_id": 3073, "db_id": "loan_1", "final": {"question": "Find the total amount of loans provided by bank branches in the state of New York.", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3016, "db_id": "loan_1", "final": {"question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3070, "db_id": "loan_1", "final": {"question": "What are the names and cities of bank branches that offer loans for business?", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3007, "db_id": "loan_1", "final": {"question": "Find the average number of customers cross all banks.", "sql": "SELECT avg(no_of_customers) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3078, "db_id": "loan_1", "final": {"question": "What is the average credit score for customers who have never taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3074, "db_id": "loan_1", "final": {"question": "What is the total amount of money loaned by banks in New York state?", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3035, "db_id": "loan_1", "final": {"question": "Find the name of customers who have loans of both Mortgages and Auto.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "source_tables": ["customer", "loan"]}}
{"sample_id": 3034, "db_id": "loan_1", "final": {"question": "What are the names of customers who have not taken a Mortage loan?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "source_tables": ["customer", "loan"]}}
{"sample_id": 3065, "db_id": "loan_1", "final": {"question": "Find the name and credit score of the customers who have some loans.", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "source_tables": ["customer", "loan"]}}
{"sample_id": 3022, "db_id": "loan_1", "final": {"question": "In how many different states are banks located?", "sql": "SELECT count(DISTINCT state) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3058, "db_id": "loan_1", "final": {"question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3008, "db_id": "loan_1", "final": {"question": "What is the average number of bank customers?", "sql": "SELECT avg(no_of_customers) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3010, "db_id": "loan_1", "final": {"question": "What city and state is the bank with the name morningside in?", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "source_tables": ["bank"]}}
{"sample_id": 3009, "db_id": "loan_1", "final": {"question": "Find the city and state of the bank branch named morningside.", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "source_tables": ["bank"]}}
{"sample_id": 3003, "db_id": "loan_1", "final": {"question": "Find the number of customers in the banks at New York City.", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "source_tables": ["bank"]}}
{"sample_id": 3017, "db_id": "loan_1", "final": {"question": "Find the state, account type, and credit score of the customer whose number of loan is 0.", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "source_tables": ["customer"]}}
{"sample_id": 3104, "db_id": "behavior_monitoring", "final": {"question": "What are the code and description of the least frequent detention type ?", "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["detention", "ref_detention_type"]}}
{"sample_id": 3088, "db_id": "behavior_monitoring", "final": {"question": "How many distinct students have been in detention?", "sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention", "source_tables": ["students_in_detention"]}}
{"sample_id": 3085, "db_id": "behavior_monitoring", "final": {"question": "Return all detention summaries.", "sql": "SELECT detention_summary FROM Detention", "source_tables": ["detention"]}}
{"sample_id": 3114, "db_id": "behavior_monitoring", "final": {"question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"", "source_tables": ["teachers", "addresses"]}}
{"sample_id": 3094, "db_id": "behavior_monitoring", "final": {"question": "List all cities of addresses in alphabetical order.", "sql": "SELECT city FROM Addresses ORDER BY city", "source_tables": ["addresses"]}}
{"sample_id": 3095, "db_id": "behavior_monitoring", "final": {"question": "Find the first names and last names of teachers in alphabetical order of last name.", "sql": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name", "source_tables": ["teachers"]}}
{"sample_id": 3092, "db_id": "behavior_monitoring", "final": {"question": "Find the first names of teachers whose email address contains the word \"man\".", "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "source_tables": ["teachers"]}}
{"sample_id": 3086, "db_id": "behavior_monitoring", "final": {"question": "Return the cell phone number and email address for all students.", "sql": "SELECT cell_mobile_number ,  email_address FROM STUDENTS", "source_tables": ["students"]}}
{"sample_id": 3100, "db_id": "behavior_monitoring", "final": {"question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["detention", "teachers"]}}
{"sample_id": 3115, "db_id": "behavior_monitoring", "final": {"question": "What are the email addresses of teachers whose address has zip code \"918\"?", "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"", "source_tables": ["teachers", "addresses"]}}
{"sample_id": 3111, "db_id": "behavior_monitoring", "final": {"question": "What are the monthly rentals of student addresses in Texas state?", "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"", "source_tables": ["addresses", "student_addresses"]}}
{"sample_id": 3089, "db_id": "behavior_monitoring", "final": {"question": "What is the gender of the teacher with last name \"Medhurst\"?", "sql": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"", "source_tables": ["teachers"]}}
{"sample_id": 3102, "db_id": "behavior_monitoring", "final": {"question": "Find the id and city of the student address with the highest average monthly rental.", "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "source_tables": ["addresses", "student_addresses"]}}
{"sample_id": 3093, "db_id": "behavior_monitoring", "final": {"question": "List all information about the assessment notes sorted by date in ascending order.", "sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "source_tables": ["assessment_notes"]}}
{"sample_id": 3090, "db_id": "behavior_monitoring", "final": {"question": "What is the incident type description for the incident type with code \"VIOLENCE\"?", "sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"", "source_tables": ["ref_incident_type"]}}
{"sample_id": 3117, "db_id": "behavior_monitoring", "final": {"question": "Find the last names of teachers who are not involved in any detention.", "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id", "source_tables": ["detention", "teachers"]}}
{"sample_id": 3097, "db_id": "behavior_monitoring", "final": {"question": "Find the id and first name of the student that has the most number of assessment notes?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "assessment_notes"]}}
{"sample_id": 3096, "db_id": "behavior_monitoring", "final": {"question": "Find all information about student addresses, and sort by monthly rental in descending order.", "sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "source_tables": ["student_addresses"]}}
{"sample_id": 3084, "db_id": "behavior_monitoring", "final": {"question": "What are the start and end dates for incidents with incident type code \"NOISE\"?", "sql": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"", "source_tables": ["behavior_incident"]}}
{"sample_id": 3087, "db_id": "behavior_monitoring", "final": {"question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"", "source_tables": ["students"]}}
{"sample_id": 3116, "db_id": "behavior_monitoring", "final": {"question": "How many students are not involved in any behavior incident?", "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )", "source_tables": ["behavior_incident", "students"]}}
{"sample_id": 3107, "db_id": "behavior_monitoring", "final": {"question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"", "source_tables": ["behavior_incident", "students"]}}
{"sample_id": 3080, "db_id": "behavior_monitoring", "final": {"question": "What are the dates of the assessment notes?", "sql": "SELECT date_of_notes FROM Assessment_Notes", "source_tables": ["assessment_notes"]}}
{"sample_id": 3098, "db_id": "behavior_monitoring", "final": {"question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3", "source_tables": ["teachers", "assessment_notes"]}}
{"sample_id": 3141, "db_id": "assets_maintenance", "final": {"question": "Which skill is used in fixing the most number of faults? List the skill id and description.", "sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["skills", "skills_required_to_fix"]}}
{"sample_id": 3149, "db_id": "assets_maintenance", "final": {"question": "Which assets did not incur any fault log? List the asset model.", "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)", "source_tables": ["fault_log", "assets"]}}
{"sample_id": 3126, "db_id": "assets_maintenance", "final": {"question": "List all every engineer's first name, last name, details and coresponding skill description.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "source_tables": ["engineer_skills", "skills", "maintenance_engineers"]}}
{"sample_id": 3128, "db_id": "assets_maintenance", "final": {"question": "How many assets can each parts be used in? List the part name and the number.", "sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name", "source_tables": ["parts", "asset_parts"]}}
{"sample_id": 3132, "db_id": "assets_maintenance", "final": {"question": "How many fault status codes are recorded in the fault log parts table?", "sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "source_tables": ["fault_log_parts"]}}
{"sample_id": 3140, "db_id": "assets_maintenance", "final": {"question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.", "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["fault_log", "fault_log_parts"]}}
{"sample_id": 3130, "db_id": "assets_maintenance", "final": {"question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.", "sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["fault_log", "engineer_visits"]}}
{"sample_id": 3122, "db_id": "assets_maintenance", "final": {"question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.", "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2", "source_tables": ["third_party_companies", "maintenance_contracts", "maintenance_engineers"]}}
{"sample_id": 3131, "db_id": "assets_maintenance", "final": {"question": "What are all the distinct last names of all the engineers?", "sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "source_tables": ["maintenance_engineers"]}}
{"sample_id": 3147, "db_id": "assets_maintenance", "final": {"question": "Which gender makes up the majority of the staff?", "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "source_tables": ["staff"]}}
{"sample_id": 3135, "db_id": "assets_maintenance", "final": {"question": "When was the first asset acquired?", "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "source_tables": ["assets"]}}
{"sample_id": 3123, "db_id": "assets_maintenance", "final": {"question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?", "sql": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id", "source_tables": ["staff", "fault_log", "engineer_visits"]}}
{"sample_id": 3145, "db_id": "assets_maintenance", "final": {"question": "Which company started the earliest the maintenance contract? Show the company name.", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "source_tables": ["third_party_companies", "maintenance_contracts"]}}
{"sample_id": 3124, "db_id": "assets_maintenance", "final": {"question": "Which engineer has visited the most times? Show the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["maintenance_engineers", "engineer_visits"]}}
{"sample_id": 3125, "db_id": "assets_maintenance", "final": {"question": "Which parts have more than 2 faults? Show the part name and id.", "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2", "source_tables": ["parts", "part_faults"]}}
{"sample_id": 3143, "db_id": "assets_maintenance", "final": {"question": "List the all the assets make, model, details by the disposed date ascendingly.", "sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC", "source_tables": ["assets"]}}
{"sample_id": 3129, "db_id": "assets_maintenance", "final": {"question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?", "sql": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id", "source_tables": ["fault_log", "fault_log_parts"]}}
{"sample_id": 3136, "db_id": "assets_maintenance", "final": {"question": "Which part fault requires the most number of skills to fix? List part id and name.", "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["parts", "skills_required_to_fix", "part_faults"]}}
{"sample_id": 3154, "db_id": "station_weather", "final": {"question": "Find the number and time of the train that goes from Chennai to Guruvayur.", "sql": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'", "source_tables": ["train"]}}
{"sample_id": 3165, "db_id": "station_weather", "final": {"question": "Find the origins from which more than 1 train starts.", "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1", "source_tables": ["train"]}}
{"sample_id": 3162, "db_id": "station_weather", "final": {"question": "Find the id and local authority of the station with has the highest average high temperature.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1", "source_tables": ["weekly_weather", "station"]}}
{"sample_id": 3151, "db_id": "station_weather", "final": {"question": "show all train numbers and names ordered by their time from early to late.", "sql": "SELECT train_number ,  name FROM train ORDER BY TIME", "source_tables": ["train"]}}
{"sample_id": 3163, "db_id": "station_weather", "final": {"question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50", "source_tables": ["weekly_weather", "station"]}}
{"sample_id": 3152, "db_id": "station_weather", "final": {"question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.", "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME", "source_tables": ["train"]}}
{"sample_id": 3164, "db_id": "station_weather", "final": {"question": "show the lowest low temperature and highest wind speed in miles per hour.", "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather", "source_tables": ["weekly_weather"]}}
{"sample_id": 3160, "db_id": "station_weather", "final": {"question": "Find names and times of trains that run through stations for the local authority Chiltern.", "sql": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"", "source_tables": ["route", "train", "station"]}}
{"sample_id": 3159, "db_id": "station_weather", "final": {"question": "Give me the maximum low temperature and average precipitation at the Amersham station.", "sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"", "source_tables": ["weekly_weather", "station"]}}
{"sample_id": 3170, "db_id": "college_1", "final": {"question": "What is the first and last name of the professor in biology department?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "source_tables": ["professor", "department", "employee"]}}
{"sample_id": 3202, "db_id": "college_1", "final": {"question": "What is the number of professors for different school?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "source_tables": ["professor", "department"]}}
{"sample_id": 3231, "db_id": "college_1", "final": {"question": "What are the total number of credits offered by each department?", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "source_tables": ["course", "class"]}}
{"sample_id": 3303, "db_id": "college_1", "final": {"question": "What are the first names of all teachers who have taught a course and the corresponding course codes?", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "source_tables": ["class", "employee"]}}
{"sample_id": 3270, "db_id": "college_1", "final": {"question": "What is the last name and office of the professor from the history department?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "source_tables": ["employee", "department", "professor"]}}
{"sample_id": 3247, "db_id": "college_1", "final": {"question": "What is the name of the department with the most students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["class", "course", "department", "enroll"]}}
{"sample_id": 3291, "db_id": "college_1", "final": {"question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "source_tables": ["student"]}}
{"sample_id": 3318, "db_id": "college_1", "final": {"question": "What is the last name of the student who got a grade A in the class with code 10018.", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "source_tables": ["student", "enroll"]}}
{"sample_id": 3196, "db_id": "college_1", "final": {"question": "Find the number of classes offered for all class rooms that held at least 2 classes.", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "source_tables": ["class"]}}
{"sample_id": 3245, "db_id": "college_1", "final": {"question": "How many students are enrolled in some classes that are taught by an accounting professor?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "source_tables": ["class", "course", "department", "enroll"]}}
{"sample_id": 3223, "db_id": "college_1", "final": {"question": "What are the number of different course codes?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS", "source_tables": ["class"]}}
{"sample_id": 3207, "db_id": "college_1", "final": {"question": "Which school has the fewest professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "source_tables": ["professor", "department"]}}
{"sample_id": 3301, "db_id": "college_1", "final": {"question": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "source_tables": ["employee", "department", "professor"]}}
{"sample_id": 3269, "db_id": "college_1", "final": {"question": "What are the first names of all history professors who do not teach?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "source_tables": ["class", "employee", "department", "professor"]}}
{"sample_id": 3208, "db_id": "college_1", "final": {"question": "Find the number of professors with a Ph.D. degree in each department.", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "source_tables": ["professor"]}}
{"sample_id": 3321, "db_id": "college_1", "final": {"question": "What are the first names and offices of history professors who don't have Ph.D.s?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "source_tables": ["professor", "department", "employee"]}}
{"sample_id": 3266, "db_id": "college_1", "final": {"question": "What are the first names of the professors who do not teach a class.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "source_tables": ["class", "employee"]}}
{"sample_id": 3178, "db_id": "college_1", "final": {"question": "How many credits does course CIS-220 have, and what its description?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "source_tables": ["course"]}}
{"sample_id": 3288, "db_id": "college_1", "final": {"question": "What is the average gpa of the students enrolled in the course with code ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "source_tables": ["student", "enroll", "class"]}}
{"sample_id": 3175, "db_id": "college_1", "final": {"question": "How many classes does the professor whose last name is Graztevski teach?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "source_tables": ["class", "employee"]}}
{"sample_id": 3221, "db_id": "college_1", "final": {"question": "How many unique classes are offered?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS", "source_tables": ["class"]}}
{"sample_id": 3197, "db_id": "college_1", "final": {"question": "For each classroom with at least 2 classes, how many classes are offered?", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "source_tables": ["class"]}}
{"sample_id": 3309, "db_id": "college_1", "final": {"question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "source_tables": ["class", "professor", "department", "course", "employee"]}}
{"sample_id": 3216, "db_id": "college_1", "final": {"question": "What is the name and the average gpa of department whose students have the highest average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "source_tables": ["student", "department"]}}
{"sample_id": 3182, "db_id": "college_1", "final": {"question": "How many different locations does the school with code BUS has?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "source_tables": ["department"]}}
{"sample_id": 3183, "db_id": "college_1", "final": {"question": "What are the different locations of the school with the code BUS?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "source_tables": ["department"]}}
{"sample_id": 3320, "db_id": "college_1", "final": {"question": "Find the first name and office of history professor who did not get a Ph.D. degree.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "source_tables": ["professor", "department", "employee"]}}
{"sample_id": 3214, "db_id": "college_1", "final": {"question": "Find the max, average, and minimum gpa of all students in each department.", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "source_tables": ["student"]}}
{"sample_id": 3250, "db_id": "college_1", "final": {"question": "List the codes of all courses that take place in room KLR209.", "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "source_tables": ["class"]}}
{"sample_id": 3171, "db_id": "college_1", "final": {"question": "What are the first and last name of all biology professors?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "source_tables": ["professor", "department", "employee"]}}
{"sample_id": 3188, "db_id": "college_1", "final": {"question": "Find the number of departments in each school.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "source_tables": ["department"]}}
{"sample_id": 3268, "db_id": "college_1", "final": {"question": "What is the first names of the professors from the history department who do not teach a class.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "source_tables": ["class", "employee", "department", "professor"]}}
{"sample_id": 3166, "db_id": "college_1", "final": {"question": "Find the number of professors in accounting department.", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "source_tables": ["professor", "department"]}}
{"sample_id": 3192, "db_id": "college_1", "final": {"question": "How many sections does each course has?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "source_tables": ["class"]}}
{"sample_id": 3199, "db_id": "college_1", "final": {"question": "How many classes are held in each department?", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "source_tables": ["class", "course"]}}
{"sample_id": 3189, "db_id": "college_1", "final": {"question": "How many departments are in each school?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "source_tables": ["department"]}}
{"sample_id": 3314, "db_id": "college_1", "final": {"question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "source_tables": ["class", "employee", "department", "professor"]}}
{"sample_id": 3326, "db_id": "college_1", "final": {"question": "Find the name of department that offers the class whose description has the word \"Statistics\".", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "source_tables": ["course", "department"]}}
{"sample_id": 3168, "db_id": "college_1", "final": {"question": "How many professors are teaching class with code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "source_tables": ["class"]}}
{"sample_id": 3328, "db_id": "college_1", "final": {"question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "source_tables": ["student", "enroll", "class"]}}
{"sample_id": 3252, "db_id": "college_1", "final": {"question": "List the first name of all employees with job code PROF ordered by their date of birth.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "source_tables": ["employee"]}}
{"sample_id": 3225, "db_id": "college_1", "final": {"question": "How many different departments are there?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "source_tables": ["department"]}}
{"sample_id": 3239, "db_id": "college_1", "final": {"question": "What are the first names of all students who took ACCT-211 and received a C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "source_tables": ["student", "class", "enroll"]}}
{"sample_id": 3294, "db_id": "college_1", "final": {"question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "source_tables": ["student"]}}
{"sample_id": 3172, "db_id": "college_1", "final": {"question": "What are the first names and date of birth of professors teaching course ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "source_tables": ["class", "employee"]}}
{"sample_id": 3169, "db_id": "college_1", "final": {"question": "How many professors teach a class with the code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "source_tables": ["class"]}}
{"sample_id": 3316, "db_id": "college_1", "final": {"question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "source_tables": ["class", "employee", "department", "professor"]}}
{"sample_id": 3241, "db_id": "college_1", "final": {"question": "How many employees are there all together?", "sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}}
{"sample_id": 3283, "db_id": "college_1", "final": {"question": "What is the number of professors who are in the Accounting or Biology departments?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "source_tables": ["professor", "department"]}}
{"sample_id": 3244, "db_id": "college_1", "final": {"question": "How many students are enrolled in the class taught by some professor from the accounting department?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "source_tables": ["class", "course", "department", "enroll"]}}
{"sample_id": 3276, "db_id": "college_1", "final": {"question": "What is the code of the course which the student whose last name is Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "source_tables": ["student", "class", "enroll"]}}
{"sample_id": 3187, "db_id": "college_1", "final": {"question": "What is the course description and number of credits for QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "source_tables": ["course"]}}
{"sample_id": 3194, "db_id": "college_1", "final": {"question": "What is the total credit does each department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "source_tables": ["course"]}}
{"sample_id": 3271, "db_id": "college_1", "final": {"question": "What are the last name and office of all history professors?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "source_tables": ["employee", "department", "professor"]}}
{"sample_id": 3191, "db_id": "college_1", "final": {"question": "How many different departments are there in each school that has less than 5 apartments?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "source_tables": ["department"]}}
{"sample_id": 3313, "db_id": "college_1", "final": {"question": "What are the names of all students taking a course who received an A or C?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "source_tables": ["student", "enroll"]}}
{"sample_id": 3255, "db_id": "college_1", "final": {"question": "What are the first names and office locations for all professors sorted alphabetically by first name?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "source_tables": ["professor", "employee"]}}
{"sample_id": 3180, "db_id": "college_1", "final": {"question": "what is the address of history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "source_tables": ["department"]}}
{"sample_id": 3235, "db_id": "college_1", "final": {"question": "What are the total number of students enrolled in ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "source_tables": ["class", "enroll"]}}
{"sample_id": 3312, "db_id": "college_1", "final": {"question": "Find names of all students who took some course and got A or C.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "source_tables": ["student", "enroll"]}}
{"sample_id": 3289, "db_id": "college_1", "final": {"question": "What is the average GPA of students taking ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "source_tables": ["student", "enroll", "class"]}}
{"sample_id": 3219, "db_id": "college_1", "final": {"question": "How many schools are there in the department?", "sql": "SELECT count(DISTINCT school_code) FROM department", "source_tables": ["department"]}}
{"sample_id": 3293, "db_id": "college_1", "final": {"question": "What is the name of the department with the student that has the lowest GPA?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "source_tables": ["student", "department"]}}
{"sample_id": 3277, "db_id": "college_1", "final": {"question": "What are the course codes for every class that the student with the last name Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "source_tables": ["student", "class", "enroll"]}}
{"sample_id": 3287, "db_id": "college_1", "final": {"question": "What are the first names of all students taking accoutning and Computer Information Systems classes?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "source_tables": ["class", "department", "enroll", "course", "student"]}}
{"sample_id": 3292, "db_id": "college_1", "final": {"question": "What is the department name of the students with lowest gpa belongs to?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "source_tables": ["student", "department"]}}
{"sample_id": 3258, "db_id": "college_1", "final": {"question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 3230, "db_id": "college_1", "final": {"question": "Find the total credits of all classes offered by each department.", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "source_tables": ["course", "class"]}}
{"sample_id": 3298, "db_id": "college_1", "final": {"question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["student", "department"]}}
{"sample_id": 3260, "db_id": "college_1", "final": {"question": "What is the first name of students who got grade C in any class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "source_tables": ["student", "enroll"]}}
{"sample_id": 3274, "db_id": "college_1", "final": {"question": "Find the last name and hire date of the professor who is in office DRE 102.", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "source_tables": ["employee", "professor"]}}
{"sample_id": 3279, "db_id": "college_1", "final": {"question": "How many credits is the course that the student with the last name Smithson took, and what is its description?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "source_tables": ["student", "class", "course", "enroll"]}}
{"sample_id": 3272, "db_id": "college_1", "final": {"question": "What is department name and office for the professor whose last name is Heffington?", "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "source_tables": ["employee", "department", "professor"]}}
{"sample_id": 3209, "db_id": "college_1", "final": {"question": "How many professors have a Ph.D. in each department?", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "source_tables": ["professor"]}}
{"sample_id": 3232, "db_id": "college_1", "final": {"question": "Find the name of the department that offers the largest number of credits of all classes.", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "source_tables": ["course", "class", "department"]}}
{"sample_id": 3185, "db_id": "college_1", "final": {"question": "Count different addresses of each school.", "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "source_tables": ["department"]}}
{"sample_id": 3315, "db_id": "college_1", "final": {"question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "source_tables": ["class", "employee", "department", "professor"]}}
{"sample_id": 3234, "db_id": "college_1", "final": {"question": "How many students enrolled in class ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "source_tables": ["class", "enroll"]}}
{"sample_id": 3327, "db_id": "college_1", "final": {"question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "source_tables": ["course", "department"]}}
{"sample_id": 3215, "db_id": "college_1", "final": {"question": "What is the highest, lowest, and average student GPA for every department?", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "source_tables": ["student"]}}
{"sample_id": 3273, "db_id": "college_1", "final": {"question": "What is the name of the department and office location for the professor with the last name of Heffington?", "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "source_tables": ["employee", "department", "professor"]}}
{"sample_id": 3176, "db_id": "college_1", "final": {"question": "What is the code of the school where the accounting department belongs to?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "source_tables": ["department"]}}
{"sample_id": 3322, "db_id": "college_1", "final": {"question": "Find the first names of professors who are teaching more than one class.", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "source_tables": ["class", "employee"]}}
{"sample_id": 3177, "db_id": "college_1", "final": {"question": "What is the school code of the accounting department?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "source_tables": ["department"]}}
{"sample_id": 3297, "db_id": "college_1", "final": {"question": "What is the name and address of the department with the most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "department"]}}
{"sample_id": 3213, "db_id": "college_1", "final": {"question": "How many hours do the students spend studying in each department?", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "source_tables": ["student"]}}
{"sample_id": 3227, "db_id": "college_1", "final": {"question": "How many courses does the department of Computer Information Systmes offer?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "source_tables": ["course", "department"]}}
{"sample_id": 3181, "db_id": "college_1", "final": {"question": "Where is the history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "source_tables": ["department"]}}
{"sample_id": 3220, "db_id": "college_1", "final": {"question": "How many different classes are there?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS", "source_tables": ["class"]}}
{"sample_id": 3262, "db_id": "college_1", "final": {"question": "What is the name of department where has the smallest number of professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "source_tables": ["professor", "department"]}}
{"sample_id": 3251, "db_id": "college_1", "final": {"question": "What are the codes of all the courses that are located in room KLR209?", "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "source_tables": ["class"]}}
{"sample_id": 3167, "db_id": "college_1", "final": {"question": "How many professors are in the accounting dept?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "source_tables": ["professor", "department"]}}
{"sample_id": 3173, "db_id": "college_1", "final": {"question": "What are the first names and birthdates of the professors in charge of ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "source_tables": ["class", "employee"]}}
{"sample_id": 3257, "db_id": "college_1", "final": {"question": "What are the first and last names of the employee with the earliest date of birth?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "source_tables": ["employee"]}}
{"sample_id": 3261, "db_id": "college_1", "final": {"question": "What are the first names of all students who got a grade C in a class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "source_tables": ["student", "enroll"]}}
{"sample_id": 3233, "db_id": "college_1", "final": {"question": "Which department offers the most credits all together?", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "source_tables": ["course", "class", "department"]}}
{"sample_id": 3206, "db_id": "college_1", "final": {"question": "Which school has the smallest amount of professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "source_tables": ["professor", "department"]}}
{"sample_id": 3259, "db_id": "college_1", "final": {"question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 3344, "db_id": "sports_competition", "final": {"question": "List all club names in ascending order of start year.", "sql": "SELECT name FROM club ORDER BY Start_year ASC", "source_tables": ["club"]}}
{"sample_id": 3359, "db_id": "sports_competition", "final": {"question": "What are the types of competition and number of competitions for that type?", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "source_tables": ["competition"]}}
{"sample_id": 3347, "db_id": "sports_competition", "final": {"question": "What are the names of all the clubs ordered in descending alphabetical order?", "sql": "SELECT name FROM club ORDER BY name DESC", "source_tables": ["club"]}}
{"sample_id": 3332, "db_id": "sports_competition", "final": {"question": "List the distinct region of clubs in ascending alphabetical order.", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "source_tables": ["club"]}}
{"sample_id": 3377, "db_id": "sports_competition", "final": {"question": "what is the name of the country that participated in the most tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["competition"]}}
{"sample_id": 3335, "db_id": "sports_competition", "final": {"question": "What is the average number of gold medals for a club?", "sql": "SELECT avg(Gold) FROM club_rank", "source_tables": ["club_rank"]}}
{"sample_id": 3364, "db_id": "sports_competition", "final": {"question": "List the names of clubs that do not have any players.", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "source_tables": ["player", "club"]}}
{"sample_id": 3375, "db_id": "sports_competition", "final": {"question": "What is the number of players who have points less than 30 for each position?", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3339, "db_id": "sports_competition", "final": {"question": "What are the different years for all competitions that are not of type equal to tournament?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "source_tables": ["competition"]}}
{"sample_id": 3331, "db_id": "sports_competition", "final": {"question": "What is the total number of clubs?", "sql": "SELECT count(*) FROM club", "source_tables": ["club"]}}
{"sample_id": 3333, "db_id": "sports_competition", "final": {"question": "What are the different regions of clubs in ascending alphabetical order?", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "source_tables": ["club"]}}
{"sample_id": 3351, "db_id": "sports_competition", "final": {"question": "What are the names of the clubs that have players in the position of \"Right Wing\"?", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "source_tables": ["player", "club"]}}
{"sample_id": 3352, "db_id": "sports_competition", "final": {"question": "What is the average points of players from club with name \"AIB\".", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "source_tables": ["player", "club"]}}
{"sample_id": 3355, "db_id": "sports_competition", "final": {"question": "For each position, what is the average number of points for players in that position?", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3379, "db_id": "sports_competition", "final": {"question": "What are the countries that participated in both friendly and tournament type competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "source_tables": ["competition"]}}
{"sample_id": 3349, "db_id": "sports_competition", "final": {"question": "What are the names and players of all the clubs?", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "source_tables": ["player", "club"]}}
{"sample_id": 3343, "db_id": "sports_competition", "final": {"question": "What is the total number of clubs that have less than 10 medals in total?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10", "source_tables": ["club_rank"]}}
{"sample_id": 3356, "db_id": "sports_competition", "final": {"question": "List the position of players with average number of points scored by players of that position bigger than 20.", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "source_tables": ["player"]}}
{"sample_id": 3334, "db_id": "sports_competition", "final": {"question": "What is the average number of gold medals for clubs?", "sql": "SELECT avg(Gold) FROM club_rank", "source_tables": ["club_rank"]}}
{"sample_id": 3336, "db_id": "sports_competition", "final": {"question": "What are the types and countries of competitions?", "sql": "SELECT Competition_type ,  Country FROM competition", "source_tables": ["competition"]}}
{"sample_id": 3354, "db_id": "sports_competition", "final": {"question": "List the position of players and the average number of points of players of each position.", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3362, "db_id": "sports_competition", "final": {"question": "List the types of competition that have at most five competitions of that type.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "source_tables": ["competition"]}}
{"sample_id": 3345, "db_id": "sports_competition", "final": {"question": "What are the names of all the clubs starting with the oldest?", "sql": "SELECT name FROM club ORDER BY Start_year ASC", "source_tables": ["club"]}}
{"sample_id": 3358, "db_id": "sports_competition", "final": {"question": "List the types of competition and the number of competitions of each type.", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "source_tables": ["competition"]}}
{"sample_id": 3363, "db_id": "sports_competition", "final": {"question": "What are the types of competition that have most 5 competitions for that type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "source_tables": ["competition"]}}
{"sample_id": 3369, "db_id": "sports_competition", "final": {"question": "What is the total number of points for all players?", "sql": "SELECT sum(Points) FROM player", "source_tables": ["player"]}}
{"sample_id": 3357, "db_id": "sports_competition", "final": {"question": "What are the positions of players whose average number of points scored by that position is larger than 20?", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "source_tables": ["player"]}}
{"sample_id": 3361, "db_id": "sports_competition", "final": {"question": "What is the most common competition type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["competition"]}}
{"sample_id": 3360, "db_id": "sports_competition", "final": {"question": "List the most common type of competition.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["competition"]}}
{"sample_id": 3365, "db_id": "sports_competition", "final": {"question": "What are the names of all clubs that do not have any players?", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "source_tables": ["player", "club"]}}
{"sample_id": 3341, "db_id": "sports_competition", "final": {"question": "What are the maximum and minimum number of silver medals for all the clubs?", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "source_tables": ["club_rank"]}}
{"sample_id": 3395, "db_id": "manufacturer", "final": {"question": "Give me the names and prices of furnitures which some companies are manufacturing.", "sql": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID", "source_tables": ["furniture_manufacte", "furniture"]}}
{"sample_id": 3390, "db_id": "manufacturer", "final": {"question": "List all manufacturer names and ids ordered by their opening year.", "sql": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year", "source_tables": ["manufacturer"]}}
{"sample_id": 3387, "db_id": "manufacturer", "final": {"question": "Find the names of furnitures whose prices are lower than the highest price.", "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)", "source_tables": ["furniture_manufacte", "furniture"]}}
{"sample_id": 3394, "db_id": "manufacturer", "final": {"question": "Find the number of funiture types produced by each manufacturer as well as the company names.", "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id", "source_tables": ["furniture_manufacte", "manufacturer"]}}
{"sample_id": 3386, "db_id": "manufacturer", "final": {"question": "Find the name and component amount of the least popular furniture.", "sql": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1", "source_tables": ["furniture"]}}
{"sample_id": 3383, "db_id": "manufacturer", "final": {"question": "Return the name and id of the furniture with the highest market rate.", "sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1", "source_tables": ["furniture"]}}
{"sample_id": 3391, "db_id": "manufacturer", "final": {"question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.", "sql": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10", "source_tables": ["manufacturer"]}}
{"sample_id": 3388, "db_id": "manufacturer", "final": {"question": "Which manufacturer has the most number of shops? List its name and year of opening.", "sql": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1", "source_tables": ["manufacturer"]}}
{"sample_id": 3397, "db_id": "manufacturer", "final": {"question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10", "source_tables": ["furniture_manufacte", "furniture", "manufacturer"]}}
{"sample_id": 3406, "db_id": "hr_1", "final": {"question": "Display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "source_tables": ["departments"]}}
{"sample_id": 3509, "db_id": "hr_1", "final": {"question": "What are the department ids, full names, and salaries for employees who make the most in their departments?", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3516, "db_id": "hr_1", "final": {"question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "source_tables": ["locations", "departments", "countries", "employees"]}}
{"sample_id": 3500, "db_id": "hr_1", "final": {"question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3502, "db_id": "hr_1", "final": {"question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3449, "db_id": "hr_1", "final": {"question": "Give the country id and corresponding count of cities in each country.", "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id", "source_tables": ["locations"]}}
{"sample_id": 3455, "db_id": "hr_1", "final": {"question": "What are all the employee ids and the names of the countries in which they work?", "sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "source_tables": ["locations", "departments", "countries", "employees"]}}
{"sample_id": 3492, "db_id": "hr_1", "final": {"question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "source_tables": ["employees"]}}
{"sample_id": 3466, "db_id": "hr_1", "final": {"question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "source_tables": ["employees"]}}
{"sample_id": 3458, "db_id": "hr_1", "final": {"question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "source_tables": ["job_history", "employees"]}}
{"sample_id": 3423, "db_id": "hr_1", "final": {"question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "source_tables": ["employees"]}}
{"sample_id": 3414, "db_id": "hr_1", "final": {"question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "source_tables": ["employees"]}}
{"sample_id": 3503, "db_id": "hr_1", "final": {"question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3506, "db_id": "hr_1", "final": {"question": "display all the information of those employees who did not have any job in the past.", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "source_tables": ["job_history", "employees"]}}
{"sample_id": 3471, "db_id": "hr_1", "final": {"question": "What are the employee ids of employees who report to Payam, and what are their salaries?", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "source_tables": ["employees"]}}
{"sample_id": 3495, "db_id": "hr_1", "final": {"question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "source_tables": ["employees"]}}
{"sample_id": 3412, "db_id": "hr_1", "final": {"question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3403, "db_id": "hr_1", "final": {"question": "What are the first names and department numbers for employees with last name McEwen?", "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", "source_tables": ["employees"]}}
{"sample_id": 3465, "db_id": "hr_1", "final": {"question": "What is the minimum salary in each department?", "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3515, "db_id": "hr_1", "final": {"question": "What are the department names, cities, and state provinces for each department?", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "source_tables": ["locations", "departments"]}}
{"sample_id": 3488, "db_id": "hr_1", "final": {"question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "source_tables": ["employees"]}}
{"sample_id": 3447, "db_id": "hr_1", "final": {"question": "What is the average salary of employees who have a commission percentage that is not null?", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3419, "db_id": "hr_1", "final": {"question": "Return the full names and salaries of employees with null commissions.", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "source_tables": ["employees"]}}
{"sample_id": 3517, "db_id": "hr_1", "final": {"question": "What the full names, ids of each employee and the name of the country they are in?", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "source_tables": ["locations", "departments", "countries", "employees"]}}
{"sample_id": 3468, "db_id": "hr_1", "final": {"question": "Find the employee id for all employees who earn more than the average salary.", "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)", "source_tables": ["employees"]}}
{"sample_id": 3410, "db_id": "hr_1", "final": {"question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "source_tables": ["employees"]}}
{"sample_id": 3439, "db_id": "hr_1", "final": {"question": "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "source_tables": ["employees"]}}
{"sample_id": 3504, "db_id": "hr_1", "final": {"question": "display the department id and the total salary for those departments which contains at least two employees.", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "source_tables": ["employees"]}}
{"sample_id": 3499, "db_id": "hr_1", "final": {"question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "source_tables": ["employees"]}}
{"sample_id": 3443, "db_id": "hr_1", "final": {"question": "What are the department ids for which more than 10 employees had a commission?", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "source_tables": ["employees"]}}
{"sample_id": 3461, "db_id": "hr_1", "final": {"question": "What is the average salary for each job title?", "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title", "source_tables": ["employees", "jobs"]}}
{"sample_id": 3475, "db_id": "hr_1", "final": {"question": "What is all the information regarding employees who are managers?", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "source_tables": ["departments", "employees"]}}
{"sample_id": 3501, "db_id": "hr_1", "final": {"question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3463, "db_id": "hr_1", "final": {"question": "Provide the full names of employees earning more than the employee with id 163.", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "source_tables": ["employees"]}}
{"sample_id": 3469, "db_id": "hr_1", "final": {"question": "What are the employee ids for employees who make more than the average?", "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)", "source_tables": ["employees"]}}
{"sample_id": 3510, "db_id": "hr_1", "final": {"question": "display the first and last name, department, city, and state province for each employee.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "source_tables": ["locations", "departments", "employees"]}}
{"sample_id": 3497, "db_id": "hr_1", "final": {"question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "source_tables": ["employees"]}}
{"sample_id": 3489, "db_id": "hr_1", "final": {"question": "What is all the information regarding employees with salaries above the minimum and under 2500?", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "source_tables": ["employees"]}}
{"sample_id": 3405, "db_id": "hr_1", "final": {"question": "What are all the employees without a department number?", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\"", "source_tables": ["employees"]}}
{"sample_id": 3402, "db_id": "hr_1", "final": {"question": "Display the first name, and department number for all employees whose last name is \"McEwen\".", "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", "source_tables": ["employees"]}}
{"sample_id": 3484, "db_id": "hr_1", "final": {"question": "display the employee ID and job name for all those jobs in department 80.", "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80", "source_tables": ["employees", "jobs"]}}
{"sample_id": 3408, "db_id": "hr_1", "final": {"question": "when is the hire date for those employees whose first name does not containing the letter M?", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "source_tables": ["employees"]}}
{"sample_id": 3508, "db_id": "hr_1", "final": {"question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3428, "db_id": "hr_1", "final": {"question": "display all the details from Employees table for those employees who was hired before 2002-06-21.", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "source_tables": ["employees"]}}
{"sample_id": 3440, "db_id": "hr_1", "final": {"question": "display the employee ID for each employee and the date on which he ended his previous job.", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "source_tables": ["job_history"]}}
{"sample_id": 3496, "db_id": "hr_1", "final": {"question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "source_tables": ["employees"]}}
{"sample_id": 3519, "db_id": "hr_1", "final": {"question": "What are the department names and how many employees work in each of them?", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "source_tables": ["departments", "employees"]}}
{"sample_id": 3480, "db_id": "hr_1", "final": {"question": "What are the unique ids of those departments where any manager is managing 4 or more employees.", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "source_tables": ["employees"]}}
{"sample_id": 3518, "db_id": "hr_1", "final": {"question": "display the department name and number of employees in each of the department.", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "source_tables": ["departments", "employees"]}}
{"sample_id": 3426, "db_id": "hr_1", "final": {"question": "Find the salary and manager number for those employees who is working under a manager.", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "source_tables": ["employees"]}}
{"sample_id": 3416, "db_id": "hr_1", "final": {"question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "source_tables": ["employees"]}}
{"sample_id": 3417, "db_id": "hr_1", "final": {"question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "source_tables": ["employees"]}}
{"sample_id": 3444, "db_id": "hr_1", "final": {"question": "Find the ids of the departments where any manager is managing 4 or more employees.", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "source_tables": ["employees"]}}
{"sample_id": 3494, "db_id": "hr_1", "final": {"question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "source_tables": ["employees"]}}
{"sample_id": 3398, "db_id": "hr_1", "final": {"question": "Display the first name and department name for each employee.", "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "source_tables": ["departments", "employees"]}}
{"sample_id": 3456, "db_id": "hr_1", "final": {"question": "display the department name and number of employees in each of the department.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "source_tables": ["departments", "employees"]}}
{"sample_id": 3401, "db_id": "hr_1", "final": {"question": "What are the full names and salaries for any employees earning less than 6000?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000", "source_tables": ["employees"]}}
{"sample_id": 3404, "db_id": "hr_1", "final": {"question": "Return all the information for all employees without any department number.", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\"", "source_tables": ["employees"]}}
{"sample_id": 3434, "db_id": "hr_1", "final": {"question": "display the job title of jobs which minimum salary is greater than 9000.", "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000", "source_tables": ["jobs"]}}
{"sample_id": 3477, "db_id": "hr_1", "final": {"question": "What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "source_tables": ["departments"]}}
{"sample_id": 3453, "db_id": "hr_1", "final": {"question": "What are the employee ids for employees who have held two or more jobs?", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "source_tables": ["job_history"]}}
{"sample_id": 3431, "db_id": "hr_1", "final": {"question": "What is all the information about employees with D or S in their first name, ordered by salary descending?", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "source_tables": ["employees"]}}
{"sample_id": 3513, "db_id": "hr_1", "final": {"question": "What are the full names and cities of employees who have the letter Z in their first names?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "source_tables": ["locations", "departments", "employees"]}}
{"sample_id": 3485, "db_id": "hr_1", "final": {"question": "what are the employee ids and job titles for employees in department 80?", "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80", "source_tables": ["employees", "jobs"]}}
{"sample_id": 3430, "db_id": "hr_1", "final": {"question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "source_tables": ["employees"]}}
{"sample_id": 3454, "db_id": "hr_1", "final": {"question": "Find employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "source_tables": ["locations", "departments", "countries", "employees"]}}
{"sample_id": 3473, "db_id": "hr_1", "final": {"question": "What are the names of departments that have at least one employee.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "source_tables": ["departments", "employees"]}}
{"sample_id": 3445, "db_id": "hr_1", "final": {"question": "What are department ids for departments with managers managing more than 3 employees?", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "source_tables": ["employees"]}}
{"sample_id": 3486, "db_id": "hr_1", "final": {"question": "What is the first name and job id for all employees in the Finance department?", "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'", "source_tables": ["departments", "employees"]}}
{"sample_id": 3460, "db_id": "hr_1", "final": {"question": "display job title and average salary of employees.", "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title", "source_tables": ["employees", "jobs"]}}
{"sample_id": 3498, "db_id": "hr_1", "final": {"question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "source_tables": ["employees"]}}
{"sample_id": 3441, "db_id": "hr_1", "final": {"question": "What are the employee ids for each employee and final dates of employment at their last job?", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "source_tables": ["job_history"]}}
{"sample_id": 3483, "db_id": "hr_1", "final": {"question": "What are the job ids corresponding to jobs with average salary above 8000?", "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "source_tables": ["employees"]}}
{"sample_id": 3520, "db_id": "hr_1", "final": {"question": "display the full name (first and last name), and salary of those employees who working in any department located in London.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "source_tables": ["locations", "departments", "employees"]}}
{"sample_id": 3523, "db_id": "music_1", "final": {"question": "What is the name of the song that was released most recently?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "source_tables": ["song"]}}
{"sample_id": 3621, "db_id": "music_1", "final": {"question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "source_tables": ["artist", "song"]}}
{"sample_id": 3537, "db_id": "music_1", "final": {"question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3602, "db_id": "music_1", "final": {"question": "Find the names and number of works of the three artists who have produced the most songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3582, "db_id": "music_1", "final": {"question": "What are the names of artists who are Male and are from UK?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "source_tables": ["artist"]}}
{"sample_id": 3616, "db_id": "music_1", "final": {"question": "List the duration, file size and format of songs whose genre is pop, ordered by title?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "source_tables": ["files", "song"]}}
{"sample_id": 3605, "db_id": "music_1", "final": {"question": "What country is the artist who made the fewest songs from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "source_tables": ["artist", "song"]}}
{"sample_id": 3583, "db_id": "music_1", "final": {"question": "What are the names of all male British artists?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "source_tables": ["artist"]}}
{"sample_id": 3531, "db_id": "music_1", "final": {"question": "What are the different names and countries of origins for all artists whose song ratings are above 9?", "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9", "source_tables": ["artist", "song"]}}
{"sample_id": 3597, "db_id": "music_1", "final": {"question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?", "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "source_tables": ["files", "song"]}}
{"sample_id": 3573, "db_id": "music_1", "final": {"question": "What are the names of all songs that are ordered by their resolution numbers?", "sql": "SELECT song_name FROM song ORDER BY resolution", "source_tables": ["song"]}}
{"sample_id": 3587, "db_id": "music_1", "final": {"question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "source_tables": ["files", "song"]}}
{"sample_id": 3530, "db_id": "music_1", "final": {"question": "List the name and country of origin for all singers who have produced songs with rating above 9.", "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9", "source_tables": ["artist", "song"]}}
{"sample_id": 3606, "db_id": "music_1", "final": {"question": "What are the names of the songs whose rating is below the rating of all songs in English?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "source_tables": ["song"]}}
{"sample_id": 3594, "db_id": "music_1", "final": {"question": "What are the maximum duration and resolution of songs grouped and ordered by languages?", "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "source_tables": ["files", "song"]}}
{"sample_id": 3528, "db_id": "music_1", "final": {"question": "What are the id of songs whose format is mp3.", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "source_tables": ["files"]}}
{"sample_id": 3525, "db_id": "music_1", "final": {"question": "Find the id of the song that lasts the longest.", "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "source_tables": ["files"]}}
{"sample_id": 3600, "db_id": "music_1", "final": {"question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1", "source_tables": ["artist", "song"]}}
{"sample_id": 3552, "db_id": "music_1", "final": {"question": "What is the average duration of songs that have mp3 format and resolution below 800?", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "source_tables": ["files", "song"]}}
{"sample_id": 3577, "db_id": "music_1", "final": {"question": "What are the names of all songs that are approximately 4 minutes long or are in English?", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "source_tables": ["files", "song"]}}
{"sample_id": 3559, "db_id": "music_1", "final": {"question": "What is the gender and name of the artist who sang the song with the smallest resolution?", "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1", "source_tables": ["artist", "song"]}}
{"sample_id": 3535, "db_id": "music_1", "final": {"question": "What are the names of the artists who sang the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "source_tables": ["files", "song"]}}
{"sample_id": 3571, "db_id": "music_1", "final": {"question": "What are the names of all genres in alphabetical order, combined with its ratings?", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "source_tables": ["genre"]}}
{"sample_id": 3551, "db_id": "music_1", "final": {"question": "What countries are the female artists who sung in the language Bangla from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3561, "db_id": "music_1", "final": {"question": "How many songs were released for each format?", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats", "source_tables": ["files"]}}
{"sample_id": 3539, "db_id": "music_1", "final": {"question": "What is the count of the songs that last approximately 4 minutes?", "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"", "source_tables": ["files"]}}
{"sample_id": 3569, "db_id": "music_1", "final": {"question": "What are the names and genders of all artists who released songs in the month of March?", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3546, "db_id": "music_1", "final": {"question": "Find the names of the artists who are from UK and have produced English songs.", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3556, "db_id": "music_1", "final": {"question": "What is the average rating of songs for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "source_tables": ["song"]}}
{"sample_id": 3579, "db_id": "music_1", "final": {"question": "What are the languages that are used most often in songs?", "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "source_tables": ["song"]}}
{"sample_id": 3536, "db_id": "music_1", "final": {"question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3544, "db_id": "music_1", "final": {"question": "What is the most popular file format?", "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["files"]}}
{"sample_id": 3614, "db_id": "music_1", "final": {"question": "List the id, genre and artist name of English songs ordered by rating.", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "source_tables": ["song"]}}
{"sample_id": 3554, "db_id": "music_1", "final": {"question": "What is the number of artists for each gender?", "sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender", "source_tables": ["artist"]}}
{"sample_id": 3612, "db_id": "music_1", "final": {"question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3564, "db_id": "music_1", "final": {"question": "What are the names of all songs that have a lower rating than some song of blues genre?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "source_tables": ["song"]}}
{"sample_id": 3604, "db_id": "music_1", "final": {"question": "Find the country of origin for the artist who made the least number of songs?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "source_tables": ["artist", "song"]}}
{"sample_id": 3547, "db_id": "music_1", "final": {"question": "What are the names of the artists that are from the UK and sang songs in English?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3619, "db_id": "music_1", "final": {"question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "source_tables": ["song"]}}
{"sample_id": 3578, "db_id": "music_1", "final": {"question": "What is the language used most often in the songs?", "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "source_tables": ["song"]}}
{"sample_id": 3527, "db_id": "music_1", "final": {"question": "What are the names of all songs in English?", "sql": "SELECT song_name FROM song WHERE languages  =  \"english\"", "source_tables": ["song"]}}
{"sample_id": 3592, "db_id": "music_1", "final": {"question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "source_tables": ["files", "song"]}}
{"sample_id": 3562, "db_id": "music_1", "final": {"question": "Find the distinct names of all songs that have a higher resolution than some songs in English.", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "source_tables": ["song"]}}
{"sample_id": 3541, "db_id": "music_1", "final": {"question": "How many Bangladeshi artists are listed?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "source_tables": ["artist"]}}
{"sample_id": 3596, "db_id": "music_1", "final": {"question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?", "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "source_tables": ["files", "song"]}}
{"sample_id": 3585, "db_id": "music_1", "final": {"question": "What are the names of the songs that are modern or sung in English?", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "source_tables": ["song"]}}
{"sample_id": 3586, "db_id": "music_1", "final": {"question": "Return the names of songs for which format is mp3 and resolution is below 1000.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "source_tables": ["files", "song"]}}
{"sample_id": 3560, "db_id": "music_1", "final": {"question": "For each file format, return the number of artists who released songs in that format.", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats", "source_tables": ["files"]}}
{"sample_id": 3576, "db_id": "music_1", "final": {"question": "List the names of all songs that have 4 minute duration or are in English.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "source_tables": ["files", "song"]}}
{"sample_id": 3601, "db_id": "music_1", "final": {"question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1", "source_tables": ["artist", "song"]}}
{"sample_id": 3533, "db_id": "music_1", "final": {"question": "What are the file sizes and formats for all songs with a resolution lower than 800?", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "source_tables": ["files", "song"]}}
{"sample_id": 3618, "db_id": "music_1", "final": {"question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "source_tables": ["song"]}}
{"sample_id": 3566, "db_id": "music_1", "final": {"question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3581, "db_id": "music_1", "final": {"question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?", "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "source_tables": ["song"]}}
{"sample_id": 3593, "db_id": "music_1", "final": {"question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "source_tables": ["files", "song"]}}
{"sample_id": 3610, "db_id": "music_1", "final": {"question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")", "source_tables": ["song"]}}
{"sample_id": 3608, "db_id": "music_1", "final": {"question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "source_tables": ["song"]}}
{"sample_id": 3548, "db_id": "music_1", "final": {"question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "source_tables": ["files", "song"]}}
{"sample_id": 3620, "db_id": "music_1", "final": {"question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "source_tables": ["artist", "song"]}}
{"sample_id": 3575, "db_id": "music_1", "final": {"question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "source_tables": ["files", "song"]}}
{"sample_id": 3649, "db_id": "baseball_1", "final": {"question": "Find the average height of the players who belong to the college called 'Yale University'.", "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';", "source_tables": ["player_college", "player", "college"]}}
{"sample_id": 3690, "db_id": "baseball_1", "final": {"question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "source_tables": ["team", "salary", "player"]}}
{"sample_id": 3686, "db_id": "baseball_1", "final": {"question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?", "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3641, "db_id": "baseball_1", "final": {"question": "Find the first name, last name and id for the top three players won the most player awards.", "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;", "source_tables": ["player", "player_award"]}}
{"sample_id": 3701, "db_id": "baseball_1", "final": {"question": "Find all the cities that have 2 to 4 parks.", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["park"]}}
{"sample_id": 3691, "db_id": "baseball_1", "final": {"question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "source_tables": ["team", "salary", "player"]}}
{"sample_id": 3667, "db_id": "baseball_1", "final": {"question": "How many times in total did the team Boston Red Stockings participate in postseason games?", "sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );", "source_tables": ["team", "postseason"]}}
{"sample_id": 3655, "db_id": "baseball_1", "final": {"question": "Which players won awards in both 1960 and 1961? Return their first names and last names.", "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961", "source_tables": ["player", "player_award"]}}
{"sample_id": 3633, "db_id": "baseball_1", "final": {"question": "For each year, return the year and the average number of attendance at home games.", "sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;", "source_tables": ["home_game"]}}
{"sample_id": 3639, "db_id": "baseball_1", "final": {"question": "Show me the number of parks the state of NY has.", "sql": "SELECT count(*) FROM park WHERE state  =  'NY';", "source_tables": ["park"]}}
{"sample_id": 3696, "db_id": "baseball_1", "final": {"question": "List the names of states that have more than 2 parks.", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "source_tables": ["park"]}}
{"sample_id": 3638, "db_id": "baseball_1", "final": {"question": "How many parks are there in the state of NY?", "sql": "SELECT count(*) FROM park WHERE state  =  'NY';", "source_tables": ["park"]}}
{"sample_id": 3674, "db_id": "baseball_1", "final": {"question": "List the 3 highest salaries of the players in 2001?", "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;", "source_tables": ["salary"]}}
{"sample_id": 3660, "db_id": "baseball_1", "final": {"question": "How many times did Boston Red Stockings lose in 2009 postseason?", "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;", "source_tables": ["team", "postseason"]}}
{"sample_id": 3679, "db_id": "baseball_1", "final": {"question": "Find the year in which the least people enter hall of fame.", "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["hall_of_fame"]}}
{"sample_id": 3693, "db_id": "baseball_1", "final": {"question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3637, "db_id": "baseball_1", "final": {"question": "Which manager won the most manager award? Give me the manager's first name, last name and id.", "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["manager_award", "player"]}}
{"sample_id": 3650, "db_id": "baseball_1", "final": {"question": "What is the highest salary among each team? List the team name, id and maximum salary.", "sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;", "source_tables": ["team", "salary"]}}
{"sample_id": 3702, "db_id": "baseball_1", "final": {"question": "Which park had most attendances in 2008?", "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;", "source_tables": ["park", "home_game"]}}
{"sample_id": 3700, "db_id": "baseball_1", "final": {"question": "Which cities have 2 to 4 parks?", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["park"]}}
{"sample_id": 3659, "db_id": "baseball_1", "final": {"question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?", "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';", "source_tables": ["team", "postseason"]}}
{"sample_id": 3666, "db_id": "baseball_1", "final": {"question": "What is the total number of postseason games that team Boston Red Stockings participated in?", "sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );", "source_tables": ["team", "postseason"]}}
{"sample_id": 3665, "db_id": "baseball_1", "final": {"question": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.", "sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year", "source_tables": ["team", "postseason"]}}
{"sample_id": 3654, "db_id": "baseball_1", "final": {"question": "Find the players' first name and last name who won award both in 1960 and in 1961.", "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961", "source_tables": ["player", "player_award"]}}
{"sample_id": 3648, "db_id": "baseball_1", "final": {"question": "What is the average height of the players from the college named 'Yale University'?", "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';", "source_tables": ["player_college", "player", "college"]}}
{"sample_id": 3695, "db_id": "baseball_1", "final": {"question": "Find the team that attended the least number of home games in 1980.", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3673, "db_id": "baseball_1", "final": {"question": "How many players did Boston Red Stockings have in 2000?", "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000", "source_tables": ["team", "salary"]}}
{"sample_id": 3632, "db_id": "baseball_1", "final": {"question": "What is the average number of attendance at home games for each year?", "sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;", "source_tables": ["home_game"]}}
{"sample_id": 3627, "db_id": "baseball_1", "final": {"question": "List the first and last name for players who participated in all star game in 1998.", "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998", "source_tables": ["player", "all_star"]}}
{"sample_id": 3697, "db_id": "baseball_1", "final": {"question": "Which states have more than 2 parks?", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "source_tables": ["park"]}}
{"sample_id": 3625, "db_id": "baseball_1", "final": {"question": "Compute the average salary of the players in the team called 'Boston Red Stockings'.", "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'", "source_tables": ["team", "salary"]}}
{"sample_id": 3653, "db_id": "baseball_1", "final": {"question": "Which team offers the lowest average salary? Give me the name and id of the team.", "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;", "source_tables": ["team", "salary"]}}
{"sample_id": 3635, "db_id": "baseball_1", "final": {"question": "Find the id and rank of the team that has the highest average attendance rate in 2014.", "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3699, "db_id": "baseball_1", "final": {"question": "Find the number of team franchises that are active (have 'Y' as \"active\" information).", "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';", "source_tables": ["team_franchise"]}}
{"sample_id": 3644, "db_id": "baseball_1", "final": {"question": "Find all the players' first name and last name who have empty death record.", "sql": "SELECT name_first ,  name_last FROM player WHERE death_year = '';", "source_tables": ["player"]}}
{"sample_id": 3623, "db_id": "baseball_1", "final": {"question": "Find the full name and id of the college that has the most baseball players.", "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["college", "player_college"]}}
{"sample_id": 3683, "db_id": "baseball_1", "final": {"question": "Count the number of games taken place in park \"Columbia Park\" in 1907.", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';", "source_tables": ["park", "home_game"]}}
{"sample_id": 3681, "db_id": "baseball_1", "final": {"question": "How many parks does Atlanta city have?", "sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';", "source_tables": ["park"]}}
{"sample_id": 3684, "db_id": "baseball_1", "final": {"question": "How many games were played in city Atlanta in 2000?", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';", "source_tables": ["park", "home_game"]}}
{"sample_id": 3630, "db_id": "baseball_1", "final": {"question": "How many players enter hall of fame each year?", "sql": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;", "source_tables": ["hall_of_fame"]}}
{"sample_id": 3626, "db_id": "baseball_1", "final": {"question": "What are first and last names of players participating in all star game in 1998?", "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998", "source_tables": ["player", "all_star"]}}
{"sample_id": 3680, "db_id": "baseball_1", "final": {"question": "How many parks are there in Atlanta city?", "sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';", "source_tables": ["park"]}}
{"sample_id": 3698, "db_id": "baseball_1", "final": {"question": "How many team franchises are active, with active value 'Y'?", "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';", "source_tables": ["team_franchise"]}}
{"sample_id": 3634, "db_id": "baseball_1", "final": {"question": "In 2014, what are the id and rank of the team that has the largest average number of attendance?", "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3669, "db_id": "baseball_1", "final": {"question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.", "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;", "source_tables": ["postseason"]}}
{"sample_id": 3636, "db_id": "baseball_1", "final": {"question": "What are the manager's first name, last name and id who won the most manager award?", "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["manager_award", "player"]}}
{"sample_id": 3672, "db_id": "baseball_1", "final": {"question": "How many players were in the team Boston Red Stockings in 2000?", "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000", "source_tables": ["team", "salary"]}}
{"sample_id": 3658, "db_id": "baseball_1", "final": {"question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?", "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';", "source_tables": ["team", "postseason"]}}
{"sample_id": 3646, "db_id": "baseball_1", "final": {"question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.", "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';", "source_tables": ["player"]}}
{"sample_id": 3707, "db_id": "mountain_photos", "final": {"question": "What are the maximum and average height of the mountains?", "sql": "SELECT max(height) ,  avg(height) FROM mountain", "source_tables": ["mountain"]}}
{"sample_id": 3706, "db_id": "mountain_photos", "final": {"question": "List the id, color scheme, and name for all the photos.", "sql": "SELECT id ,  color ,  name FROM photos", "source_tables": ["photos"]}}
{"sample_id": 3712, "db_id": "mountain_photos", "final": {"question": "What are the names of the cameras that have taken picture of the most mountains?", "sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["photos", "camera_lens"]}}
{"sample_id": 3705, "db_id": "mountain_photos", "final": {"question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.", "sql": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC", "source_tables": ["camera_lens"]}}
{"sample_id": 3715, "db_id": "mountain_photos", "final": {"question": "How many camera lenses are not used in taking any photos?", "sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )", "source_tables": ["photos", "camera_lens"]}}
{"sample_id": 3718, "db_id": "mountain_photos", "final": {"question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.", "sql": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'", "source_tables": ["photos", "camera_lens", "mountain"]}}
{"sample_id": 3704, "db_id": "mountain_photos", "final": {"question": "How many camera lenses have a focal length longer than 15 mm?", "sql": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15", "source_tables": ["camera_lens"]}}
{"sample_id": 3713, "db_id": "mountain_photos", "final": {"question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?", "sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'", "source_tables": ["photos", "camera_lens"]}}
{"sample_id": 3708, "db_id": "mountain_photos", "final": {"question": "What are the average prominence of the mountains in country 'Morocco'?", "sql": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'", "source_tables": ["mountain"]}}
{"sample_id": 3716, "db_id": "mountain_photos", "final": {"question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?", "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'", "source_tables": ["photos", "mountain"]}}
{"sample_id": 3736, "db_id": "program_share", "final": {"question": "What is the total share (in percent) of all the channels owned by CCTV?", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "source_tables": ["channel"]}}
{"sample_id": 3726, "db_id": "program_share", "final": {"question": "Show me the owner of the channel with the highest rating.", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "source_tables": ["channel"]}}
{"sample_id": 3725, "db_id": "program_share", "final": {"question": "What is the owner of the channel that has the highest rating ratio?", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "source_tables": ["channel"]}}
{"sample_id": 3760, "db_id": "program_share", "final": {"question": "Which program is broadcast most frequently? Give me the program name.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3721, "db_id": "program_share", "final": {"question": "Find the names of channels that are not owned by CCTV.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "source_tables": ["channel"]}}
{"sample_id": 3723, "db_id": "program_share", "final": {"question": "List all channel names ordered by their rating in percent from big to small.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "source_tables": ["channel"]}}
{"sample_id": 3729, "db_id": "program_share", "final": {"question": "list all the names of programs, ordering by launch time.", "sql": "SELECT name FROM program ORDER BY launch", "source_tables": ["program"]}}
{"sample_id": 3744, "db_id": "program_share", "final": {"question": "How many distinct programs are broadcast at \"Night\" time?", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "source_tables": ["broadcast"]}}
{"sample_id": 3749, "db_id": "program_share", "final": {"question": "List all program origins in the alphabetical order.", "sql": "SELECT origin FROM program ORDER BY origin", "source_tables": ["program"]}}
{"sample_id": 3754, "db_id": "program_share", "final": {"question": "Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "source_tables": ["program"]}}
{"sample_id": 3758, "db_id": "program_share", "final": {"question": "What is the total rating of channel for each channel owner?", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "source_tables": ["channel"]}}
{"sample_id": 3732, "db_id": "program_share", "final": {"question": "What are the name, origin and owner of each program?", "sql": "SELECT name ,  origin ,  OWNER FROM program", "source_tables": ["program"]}}
{"sample_id": 3722, "db_id": "program_share", "final": {"question": "Which channels are not owned by CCTV? Give me the channel names.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "source_tables": ["channel"]}}
{"sample_id": 3747, "db_id": "program_share", "final": {"question": "find the program owners that have some programs in both morning and night time.", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3727, "db_id": "program_share", "final": {"question": "how many programs are there?", "sql": "SELECT count(*) FROM program", "source_tables": ["program"]}}
{"sample_id": 3731, "db_id": "program_share", "final": {"question": "List the name, origin and owner of each program.", "sql": "SELECT name ,  origin ,  OWNER FROM program", "source_tables": ["program"]}}
{"sample_id": 3733, "db_id": "program_share", "final": {"question": "find the name of the program that was launched most recently.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "source_tables": ["program"]}}
{"sample_id": 3748, "db_id": "program_share", "final": {"question": "Who are the owners of the programs that broadcast both in the morning and at night?", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3735, "db_id": "program_share", "final": {"question": "find the total percentage share of all channels owned by CCTV.", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "source_tables": ["channel"]}}
{"sample_id": 3746, "db_id": "program_share", "final": {"question": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3753, "db_id": "program_share", "final": {"question": "find the names of programs whose origin is not in Beijing.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "source_tables": ["program"]}}
{"sample_id": 3734, "db_id": "program_share", "final": {"question": "Which program was launched most recently? Return the program name.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "source_tables": ["program"]}}
{"sample_id": 3738, "db_id": "program_share", "final": {"question": "Which channels are broadcast in the morning? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "source_tables": ["channel", "broadcast"]}}
{"sample_id": 3757, "db_id": "program_share", "final": {"question": "Find the total rating ratio for each channel owner.", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "source_tables": ["channel"]}}
{"sample_id": 3761, "db_id": "e_learning", "final": {"question": "How many courses are there in total?", "sql": "SELECT count(*) FROM COURSES", "source_tables": ["courses"]}}
{"sample_id": 3782, "db_id": "e_learning", "final": {"question": "Return the login names of the students whose family name is \"Ward\".", "sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"", "source_tables": ["students"]}}
{"sample_id": 3839, "db_id": "e_learning", "final": {"question": "Find the common login name of course authors and students.", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3792, "db_id": "e_learning", "final": {"question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "source_tables": ["students"]}}
{"sample_id": 3814, "db_id": "e_learning", "final": {"question": "Which course is enrolled in by the most students? Give me the course name.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3837, "db_id": "e_learning", "final": {"question": "How many students did not have any course enrollment?", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3774, "db_id": "e_learning", "final": {"question": "Find the number of distinct students enrolled in courses.", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"]}}
{"sample_id": 3823, "db_id": "e_learning", "final": {"question": "What are the completion dates of all the tests that have result \"Fail\"?", "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"", "source_tables": ["student_course_enrolment", "student_tests_taken"]}}
{"sample_id": 3832, "db_id": "e_learning", "final": {"question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3820, "db_id": "e_learning", "final": {"question": "List the name and the number of enrolled student for each course.", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3830, "db_id": "e_learning", "final": {"question": "What are the student ID and login name of the student who are enrolled in the most courses?", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3795, "db_id": "e_learning", "final": {"question": "Find the login name of the course author that teaches the course with name \"advanced database\".", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3790, "db_id": "e_learning", "final": {"question": "Sort the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3762, "db_id": "e_learning", "final": {"question": "Find the total number of courses offered.", "sql": "SELECT count(*) FROM COURSES", "source_tables": ["courses"]}}
{"sample_id": 3791, "db_id": "e_learning", "final": {"question": "List the personal names and family names of all the students in alphabetical order of family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "source_tables": ["students"]}}
{"sample_id": 3763, "db_id": "e_learning", "final": {"question": "What are the descriptions of the courses with name \"database\"?", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "source_tables": ["courses"]}}
{"sample_id": 3806, "db_id": "e_learning", "final": {"question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "source_tables": ["courses", "subjects"]}}
{"sample_id": 3767, "db_id": "e_learning", "final": {"question": "List the addresses of all the course authors or tutors.", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3776, "db_id": "e_learning", "final": {"question": "Find the number of distinct courses that have enrolled students.", "sql": "SELECT count(course_id) FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"]}}
{"sample_id": 3836, "db_id": "e_learning", "final": {"question": "Which students not enrolled in any course? Find their personal names.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3821, "db_id": "e_learning", "final": {"question": "What are the enrollment dates of all the tests that have result \"Pass\"?", "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"", "source_tables": ["student_course_enrolment", "student_tests_taken"]}}
{"sample_id": 3802, "db_id": "e_learning", "final": {"question": "Which course authors teach two or more courses? Give me their addresses and author IDs.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3765, "db_id": "e_learning", "final": {"question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3812, "db_id": "e_learning", "final": {"question": "Find the the date of enrollment of the \"Spanish\" course.", "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3807, "db_id": "e_learning", "final": {"question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id", "source_tables": ["courses", "subjects"]}}
{"sample_id": 3816, "db_id": "e_learning", "final": {"question": "Find the names of the courses that have just one student enrollment.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3780, "db_id": "e_learning", "final": {"question": "Count the number of tests with \"Fail\" result.", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "source_tables": ["student_tests_taken"]}}
{"sample_id": 3799, "db_id": "e_learning", "final": {"question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3826, "db_id": "e_learning", "final": {"question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3803, "db_id": "e_learning", "final": {"question": "Find the names of courses taught by the tutor who has personal name \"Julio\".", "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3819, "db_id": "e_learning", "final": {"question": "What is the name of each course and the corresponding number of student enrollment?", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3822, "db_id": "e_learning", "final": {"question": "Find the enrollment date for all the tests that have \"Pass\" result.", "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"", "source_tables": ["student_course_enrolment", "student_tests_taken"]}}
{"sample_id": 3815, "db_id": "e_learning", "final": {"question": "What are the names of the courses that have exactly 1 student enrollment?", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3834, "db_id": "e_learning", "final": {"question": "What are the student IDs and middle names of the students enrolled in at most two courses?", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3784, "db_id": "e_learning", "final": {"question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".", "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"", "source_tables": ["students"]}}
{"sample_id": 3805, "db_id": "e_learning", "final": {"question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "source_tables": ["courses", "subjects"]}}
{"sample_id": 3838, "db_id": "e_learning", "final": {"question": "Count the number of students who did not enroll in any course.", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3842, "db_id": "e_learning", "final": {"question": "What are the personal names used both by some course authors and some students?", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3800, "db_id": "e_learning", "final": {"question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3781, "db_id": "e_learning", "final": {"question": "What are the login names of the students with family name \"Ward\"?", "sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"", "source_tables": ["students"]}}
{"sample_id": 3813, "db_id": "e_learning", "final": {"question": "What is the name of the course that has the most student enrollment?", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3770, "db_id": "e_learning", "final": {"question": "What are the login names and family names of course author and tutors?", "sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3785, "db_id": "e_learning", "final": {"question": "How many students have personal names that contain the word \"son\"?", "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"", "source_tables": ["students"]}}
{"sample_id": 3828, "db_id": "e_learning", "final": {"question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3793, "db_id": "e_learning", "final": {"question": "List each test result and its count in descending order of count.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "source_tables": ["student_tests_taken"]}}
{"sample_id": 3831, "db_id": "e_learning", "final": {"question": "Find the student ID and personal name of the student with at least two enrollments.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3841, "db_id": "e_learning", "final": {"question": "Find the common personal name of course authors and students.", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3783, "db_id": "e_learning", "final": {"question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?", "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"", "source_tables": ["students"]}}
{"sample_id": 3777, "db_id": "e_learning", "final": {"question": "Find the dates of the tests taken with result \"Pass\".", "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"", "source_tables": ["student_tests_taken"]}}
{"sample_id": 3857, "db_id": "insurance_policies", "final": {"question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3861, "db_id": "insurance_policies", "final": {"question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3877, "db_id": "insurance_policies", "final": {"question": "What are all the distinct details of the customers?", "sql": "SELECT DISTINCT customer_details FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 3862, "db_id": "insurance_policies", "final": {"question": "Find the claim id and the number of settlements made for the claim with the most recent settlement date.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3887, "db_id": "insurance_policies", "final": {"question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3882, "db_id": "insurance_policies", "final": {"question": "Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3879, "db_id": "insurance_policies", "final": {"question": "Which kind of policy type was chosen by the most customers?", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer_policies"]}}
{"sample_id": 3867, "db_id": "insurance_policies", "final": {"question": "Who are the customers that had more than 1 policy? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "source_tables": ["customers", "customer_policies"]}}
{"sample_id": 3844, "db_id": "insurance_policies", "final": {"question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3869, "db_id": "insurance_policies", "final": {"question": "What are the claim dates and settlement dates of all the settlements?", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3873, "db_id": "insurance_policies", "final": {"question": "With which kind of payment method were the least number of payments processed?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["payments"]}}
{"sample_id": 3856, "db_id": "insurance_policies", "final": {"question": "Return the claim start date for the claims whose claimed amount is no more than the average", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "source_tables": ["claims"]}}
{"sample_id": 3881, "db_id": "insurance_policies", "final": {"question": "How many settlements are there in total?", "sql": "SELECT count(*) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3890, "db_id": "insurance_policies", "final": {"question": "What is total amount claimed summed across all the claims?", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "source_tables": ["claims"]}}
{"sample_id": 3871, "db_id": "insurance_policies", "final": {"question": "What is the most popular payment method?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["payments"]}}
{"sample_id": 3847, "db_id": "insurance_policies", "final": {"question": "List the method, date and amount of all the payments, in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "source_tables": ["payments"]}}
{"sample_id": 3852, "db_id": "insurance_policies", "final": {"question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "source_tables": ["claims"]}}
{"sample_id": 3859, "db_id": "insurance_policies", "final": {"question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3855, "db_id": "insurance_policies", "final": {"question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "source_tables": ["claims"]}}
{"sample_id": 3884, "db_id": "insurance_policies", "final": {"question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "source_tables": ["payments"]}}
{"sample_id": 3886, "db_id": "insurance_policies", "final": {"question": "Which customers do not have any policies? Find the details of these customers.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "customer_policies"]}}
{"sample_id": 3874, "db_id": "insurance_policies", "final": {"question": "What is the payment method that were used the least often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["payments"]}}
{"sample_id": 3846, "db_id": "insurance_policies", "final": {"question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "source_tables": ["customers", "claims", "customer_policies"]}}
{"sample_id": 3843, "db_id": "insurance_policies", "final": {"question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3868, "db_id": "insurance_policies", "final": {"question": "Find the the customer details and id for the customers who had more than one policy.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "source_tables": ["customers", "customer_policies"]}}
{"sample_id": 3885, "db_id": "insurance_policies", "final": {"question": "List the details of the customers who do not have any policies.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "customer_policies"]}}
{"sample_id": 3883, "db_id": "insurance_policies", "final": {"question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "source_tables": ["payments"]}}
{"sample_id": 3863, "db_id": "insurance_policies", "final": {"question": "Of all the claims, what was the earliest date when any claim was made?", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "source_tables": ["claims"]}}
{"sample_id": 3892, "db_id": "hospital_1", "final": {"question": "Find the department with the most employees.", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "source_tables": ["department"]}}
{"sample_id": 3925, "db_id": "hospital_1", "final": {"question": "Find the number of rooms located on each block floor.", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "source_tables": ["block", "room"]}}
{"sample_id": 3987, "db_id": "hospital_1", "final": {"question": "How many appointments are there?", "sql": "SELECT count(*) FROM appointment", "source_tables": ["appointment"]}}
{"sample_id": 3939, "db_id": "hospital_1", "final": {"question": "Find the name of physicians whose position title contains the word 'senior'.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "source_tables": ["physician"]}}
{"sample_id": 3936, "db_id": "hospital_1", "final": {"question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "source_tables": ["prescribes", "medication", "physician"]}}
{"sample_id": 3973, "db_id": "hospital_1", "final": {"question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3957, "db_id": "hospital_1", "final": {"question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "source_tables": ["on_call"]}}
{"sample_id": 3982, "db_id": "hospital_1", "final": {"question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "source_tables": ["physician", "affiliated_with", "department"]}}
{"sample_id": 3920, "db_id": "hospital_1", "final": {"question": "Find the name of the nurse who has the largest number of appointments.", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["nurse", "appointment"]}}
{"sample_id": 3904, "db_id": "hospital_1", "final": {"question": "What are the names of all the physicians who took appointments.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "source_tables": ["appointment", "physician"]}}
{"sample_id": 3891, "db_id": "hospital_1", "final": {"question": "Which department has the largest number of employees?", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "source_tables": ["department"]}}
{"sample_id": 3934, "db_id": "hospital_1", "final": {"question": "List the names of all the physicians who prescribe Thesisin as medication.", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "source_tables": ["prescribes", "medication", "physician"]}}
{"sample_id": 3959, "db_id": "hospital_1", "final": {"question": "What are the highest cost, lowest cost and average cost of procedures?", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "source_tables": ["procedures"]}}
{"sample_id": 3962, "db_id": "hospital_1", "final": {"question": "Sort the list of names and costs of all procedures in the descending order of cost.", "sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "source_tables": ["procedures"]}}
{"sample_id": 3928, "db_id": "hospital_1", "final": {"question": "How many rooms are located for each block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "source_tables": ["block", "room"]}}
{"sample_id": 3967, "db_id": "hospital_1", "final": {"question": "Find the physician who was trained in the most expensive procedure?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3988, "db_id": "hospital_1", "final": {"question": "Count how many appointments have been made in total.", "sql": "SELECT count(*) FROM appointment", "source_tables": ["appointment"]}}
{"sample_id": 3911, "db_id": "hospital_1", "final": {"question": "How many patients stay in room 112?", "sql": "SELECT count(patient) FROM stay WHERE room  =  112", "source_tables": ["stay"]}}
{"sample_id": 3921, "db_id": "hospital_1", "final": {"question": "How many patients do each physician take care of? List their names and number of patients they take care of.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "source_tables": ["physician", "patient"]}}
{"sample_id": 3909, "db_id": "hospital_1", "final": {"question": "What is the name of the patient who made the most recent appointment?", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "source_tables": ["appointment", "patient"]}}
{"sample_id": 3976, "db_id": "hospital_1", "final": {"question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3940, "db_id": "hospital_1", "final": {"question": "What are the names of the physicians who have 'senior' in their titles.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "source_tables": ["physician"]}}
{"sample_id": 3900, "db_id": "hospital_1", "final": {"question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "source_tables": ["appointment", "patient"]}}
{"sample_id": 3981, "db_id": "hospital_1", "final": {"question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "source_tables": ["physician", "affiliated_with", "department"]}}
{"sample_id": 3958, "db_id": "hospital_1", "final": {"question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "source_tables": ["on_call"]}}
{"sample_id": 3990, "db_id": "hospital_1", "final": {"question": "What are the distinct names of nurses on call?", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "source_tables": ["nurse", "on_call"]}}
{"sample_id": 3954, "db_id": "hospital_1", "final": {"question": "What are each physician's employee id and department id primarily affiliated.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "source_tables": ["affiliated_with"]}}
{"sample_id": 3942, "db_id": "hospital_1", "final": {"question": "Which patient is undergoing the most recent treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "source_tables": ["undergoes"]}}
{"sample_id": 3956, "db_id": "hospital_1", "final": {"question": "What are the names of departments that have primarily affiliated physicians.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "source_tables": ["affiliated_with", "department"]}}
{"sample_id": 3953, "db_id": "hospital_1", "final": {"question": "List the physicians' employee ids together with their primary affiliation departments' ids.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "source_tables": ["affiliated_with"]}}
{"sample_id": 3970, "db_id": "hospital_1", "final": {"question": "Compute the mean price of procedures physician John Wen was trained in.", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3908, "db_id": "hospital_1", "final": {"question": "What are the name and primarily affiliated department name of each physician?", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "source_tables": ["physician", "affiliated_with", "department"]}}
{"sample_id": 3910, "db_id": "hospital_1", "final": {"question": "Find the name of the patient who made the appointment with the most recent start date.", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "source_tables": ["appointment", "patient"]}}
{"sample_id": 3983, "db_id": "hospital_1", "final": {"question": "Find the names of patients who are not using the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "source_tables": ["prescribes", "medication", "patient"]}}
{"sample_id": 3895, "db_id": "hospital_1", "final": {"question": "what is the name and position of the head whose department has least number of employees?", "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "source_tables": ["physician", "department"]}}
{"sample_id": 3951, "db_id": "hospital_1", "final": {"question": "What are the names of the physician who prescribed the highest dose?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "source_tables": ["prescribes", "physician"]}}
{"sample_id": 3929, "db_id": "hospital_1", "final": {"question": "What are the unique block codes that have available rooms?", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "source_tables": ["room"]}}
{"sample_id": 3952, "db_id": "hospital_1", "final": {"question": "Find the physician who prescribed the highest dose. What is his or her name?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "source_tables": ["prescribes", "physician"]}}
{"sample_id": 3916, "db_id": "hospital_1", "final": {"question": "What is the name of the medication used for the patient staying in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "source_tables": ["prescribes", "medication", "patient", "stay"]}}
{"sample_id": 3946, "db_id": "hospital_1", "final": {"question": "What is the alphabetically ordered list of all the distinct names of nurses?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "source_tables": ["nurse"]}}
{"sample_id": 3905, "db_id": "hospital_1", "final": {"question": "List the name of physicians who never took any appointment.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "source_tables": ["appointment", "physician"]}}
{"sample_id": 3903, "db_id": "hospital_1", "final": {"question": "List the name of physicians who took some appointment.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "source_tables": ["appointment", "physician"]}}
{"sample_id": 3979, "db_id": "hospital_1", "final": {"question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "source_tables": ["physician", "affiliated_with", "department"]}}
{"sample_id": 3972, "db_id": "hospital_1", "final": {"question": "What are the names of procedures physician John Wen was trained in?", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3968, "db_id": "hospital_1", "final": {"question": "Which physician was trained in the procedure that costs the most.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3938, "db_id": "hospital_1", "final": {"question": "How many medications are prescribed for each brand?", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "source_tables": ["prescribes", "medication"]}}
{"sample_id": 3931, "db_id": "hospital_1", "final": {"question": "How many different types of rooms are there?", "sql": "SELECT count(DISTINCT roomtype) FROM room", "source_tables": ["room"]}}
{"sample_id": 3986, "db_id": "hospital_1", "final": {"question": "How many patients are not using Procrastin-X as medication?", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "source_tables": ["prescribes", "medication", "patient"]}}
{"sample_id": 3893, "db_id": "hospital_1", "final": {"question": "What is the employee id of the head whose department has the least number of employees?", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "source_tables": ["department"]}}
{"sample_id": 3930, "db_id": "hospital_1", "final": {"question": "Tell me the distinct block codes where some rooms are available.", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "source_tables": ["room"]}}
{"sample_id": 3894, "db_id": "hospital_1", "final": {"question": "Tell me the employee id of the head of the department with the least employees.", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "source_tables": ["department"]}}
{"sample_id": 3912, "db_id": "hospital_1", "final": {"question": "Count the number of patients who stayed in room 112.", "sql": "SELECT count(patient) FROM stay WHERE room  =  112", "source_tables": ["stay"]}}
{"sample_id": 3935, "db_id": "hospital_1", "final": {"question": "Find the name and position of physicians who prescribe some medication whose brand is X?", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "source_tables": ["prescribes", "medication", "physician"]}}
{"sample_id": 3961, "db_id": "hospital_1", "final": {"question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "source_tables": ["procedures"]}}
{"sample_id": 3964, "db_id": "hospital_1", "final": {"question": "What are the three most costly procedures?", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "source_tables": ["procedures"]}}
{"sample_id": 3913, "db_id": "hospital_1", "final": {"question": "How many patients' prescriptions are made by physician John Dorian?", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "source_tables": ["prescribes", "physician", "patient"]}}
{"sample_id": 3963, "db_id": "hospital_1", "final": {"question": "Find the three most expensive procedures.", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "source_tables": ["procedures"]}}
{"sample_id": 3898, "db_id": "hospital_1", "final": {"question": "List the names of patients who have made appointments.", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "source_tables": ["appointment", "patient"]}}
{"sample_id": 3901, "db_id": "hospital_1", "final": {"question": "Find the id of the appointment with the most recent start date?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "source_tables": ["appointment"]}}
{"sample_id": 3922, "db_id": "hospital_1", "final": {"question": "Return the name of each physician and the number of patients he or she treats.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "source_tables": ["physician", "patient"]}}
{"sample_id": 3994, "db_id": "ship_mission", "final": {"question": "what are the names of the ships ordered by ascending tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "source_tables": ["ship"]}}
{"sample_id": 3993, "db_id": "ship_mission", "final": {"question": "List the name of ships in ascending order of tonnage.", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "source_tables": ["ship"]}}
{"sample_id": 4013, "db_id": "ship_mission", "final": {"question": "Show names of ships involved in a mission launched after 1928.", "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928", "source_tables": ["mission", "ship"]}}
{"sample_id": 4002, "db_id": "ship_mission", "final": {"question": "What is the ship with the largest amount of tonnage called?", "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 3997, "db_id": "ship_mission", "final": {"question": "List the name of ships whose nationality is not \"United States\".", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "source_tables": ["ship"]}}
{"sample_id": 3998, "db_id": "ship_mission", "final": {"question": "What are the names of the ships that are not from the United States?", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "source_tables": ["ship"]}}
{"sample_id": 4017, "db_id": "ship_mission", "final": {"question": "List the name of ships that are not involved in any mission", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"]}}
{"sample_id": 4012, "db_id": "ship_mission", "final": {"question": "What are the mission codes, fates, and names of the ships involved?", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "source_tables": ["mission", "ship"]}}
{"sample_id": 4020, "db_id": "ship_mission", "final": {"question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "source_tables": ["ship"]}}
{"sample_id": 4011, "db_id": "ship_mission", "final": {"question": "Show codes and fates of missions, and names of ships involved.", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "source_tables": ["mission", "ship"]}}
{"sample_id": 4009, "db_id": "ship_mission", "final": {"question": "Show different types of ships and the average tonnage of ships of each type.", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "source_tables": ["ship"]}}
{"sample_id": 4006, "db_id": "ship_mission", "final": {"question": "What is the most common type of ships?", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 4015, "db_id": "ship_mission", "final": {"question": "Show the distinct fate of missions that involve ships with nationality \"United States\"", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"", "source_tables": ["mission", "ship"]}}
{"sample_id": 4000, "db_id": "ship_mission", "final": {"question": "What are the names of the ships  that are from either the US or the UK?", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "source_tables": ["ship"]}}
{"sample_id": 4003, "db_id": "ship_mission", "final": {"question": "Show different types of ships and the number of ships of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "source_tables": ["ship"]}}
{"sample_id": 4005, "db_id": "ship_mission", "final": {"question": "Please show the most common type of ships.", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 3992, "db_id": "ship_mission", "final": {"question": "What is the number of ships?", "sql": "SELECT count(*) FROM ship", "source_tables": ["ship"]}}
{"sample_id": 3996, "db_id": "ship_mission", "final": {"question": "What are the types and nationalities of every ship?", "sql": "SELECT TYPE ,  Nationality FROM ship", "source_tables": ["ship"]}}
{"sample_id": 4088, "db_id": "student_1", "final": {"question": "How many students does one classroom have?", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4029, "db_id": "student_1", "final": {"question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.", "sql": "SELECT DISTINCT classroom ,  grade FROM list", "source_tables": ["list"]}}
{"sample_id": 4056, "db_id": "student_1", "final": {"question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4084, "db_id": "student_1", "final": {"question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4040, "db_id": "student_1", "final": {"question": "what are the last names of the teachers who teach grade 5?", "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5", "source_tables": ["list", "teachers"]}}
{"sample_id": 4025, "db_id": "student_1", "final": {"question": "Find the first names of students studying in room 108.", "sql": "SELECT firstname FROM list WHERE classroom  =  108", "source_tables": ["list"]}}
{"sample_id": 4067, "db_id": "student_1", "final": {"question": "How many teachers does the student named MADLOCK RAY have?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4059, "db_id": "student_1", "final": {"question": "How many students does LORIA ONDERSMA teaches?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4060, "db_id": "student_1", "final": {"question": "Count the number of students the teacher LORIA ONDERSMA teaches.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4083, "db_id": "student_1", "final": {"question": "Report the total number of students for each fourth-grade classroom.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4062, "db_id": "student_1", "final": {"question": "Find the number of students taught by the teacher KAWA GORDON.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4074, "db_id": "student_1", "final": {"question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.", "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade", "source_tables": ["list"]}}
{"sample_id": 4027, "db_id": "student_1", "final": {"question": "What are the first names of students studying in room 107?", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "source_tables": ["list"]}}
{"sample_id": 4052, "db_id": "student_1", "final": {"question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4021, "db_id": "student_1", "final": {"question": "Find the number of students in total.", "sql": "SELECT count(*) FROM list", "source_tables": ["list"]}}
{"sample_id": 4034, "db_id": "student_1", "final": {"question": "Which grade is studying in room 105?", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105", "source_tables": ["list"]}}
{"sample_id": 4035, "db_id": "student_1", "final": {"question": "Which classrooms are used by grade 4?", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4", "source_tables": ["list"]}}
{"sample_id": 4054, "db_id": "student_1", "final": {"question": "Which are the first and last names of the students taught by MARROTTE KIRK?", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4042, "db_id": "student_1", "final": {"question": "What are the first names of the teachers who teach grade 1?", "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1", "source_tables": ["list", "teachers"]}}
{"sample_id": 4030, "db_id": "student_1", "final": {"question": "What are the grade number and classroom number of each class in the list?", "sql": "SELECT DISTINCT classroom ,  grade FROM list", "source_tables": ["list"]}}
{"sample_id": 4077, "db_id": "student_1", "final": {"question": "Which classroom has the most students?", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list"]}}
{"sample_id": 4086, "db_id": "student_1", "final": {"question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list", "teachers"]}}
{"sample_id": 4044, "db_id": "student_1", "final": {"question": "Which teachers teach in classroom 110? Give me their first names.", "sql": "SELECT firstname FROM teachers WHERE classroom  =  110", "source_tables": ["teachers"]}}
{"sample_id": 4050, "db_id": "student_1", "final": {"question": "Show each student's first name and last name.", "sql": "SELECT DISTINCT firstname ,  lastname FROM list", "source_tables": ["list"]}}
{"sample_id": 4069, "db_id": "student_1", "final": {"question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4041, "db_id": "student_1", "final": {"question": "Find the first names of the teachers that teach first grade.", "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1", "source_tables": ["list", "teachers"]}}
{"sample_id": 4073, "db_id": "student_1", "final": {"question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.", "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade", "source_tables": ["list"]}}
{"sample_id": 4072, "db_id": "student_1", "final": {"question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4080, "db_id": "student_1", "final": {"question": "For each classroom, show the classroom number and find how many students are using it.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4022, "db_id": "student_1", "final": {"question": "How many students are there?", "sql": "SELECT count(*) FROM list", "source_tables": ["list"]}}
{"sample_id": 4081, "db_id": "student_1", "final": {"question": "For each grade 0 classroom, report the total number of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4047, "db_id": "student_1", "final": {"question": "Report the first name and last name of all the teachers.", "sql": "SELECT DISTINCT firstname ,  lastname FROM teachers", "source_tables": ["teachers"]}}
{"sample_id": 4049, "db_id": "student_1", "final": {"question": "Report the first name and last name of all the students.", "sql": "SELECT DISTINCT firstname ,  lastname FROM list", "source_tables": ["list"]}}
{"sample_id": 4079, "db_id": "student_1", "final": {"question": "Report the number of students in each classroom.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4071, "db_id": "student_1", "final": {"question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4066, "db_id": "student_1", "final": {"question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4076, "db_id": "student_1", "final": {"question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4058, "db_id": "student_1", "final": {"question": "What are the last names of the teachers who teach the student called GELL TAMI?", "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4043, "db_id": "student_1", "final": {"question": "Find the first names of all the teachers that teach in classroom 110.", "sql": "SELECT firstname FROM teachers WHERE classroom  =  110", "source_tables": ["teachers"]}}
{"sample_id": 4039, "db_id": "student_1", "final": {"question": "Find the last names of the teachers that teach fifth grade.", "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5", "source_tables": ["list", "teachers"]}}
{"sample_id": 4095, "db_id": "company_employee", "final": {"question": "Show the different headquarters and number of companies at each headquarter.", "sql": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters", "source_tables": ["company"]}}
{"sample_id": 4101, "db_id": "company_employee", "final": {"question": "Show the names of employees that work for companies with sales bigger than 200.", "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200", "source_tables": ["company", "employment", "people"]}}
{"sample_id": 4089, "db_id": "company_employee", "final": {"question": "How many companies are headquartered in the US?", "sql": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'", "source_tables": ["company"]}}
{"sample_id": 4094, "db_id": "company_employee", "final": {"question": "What is the headquarter of the company with the largest sales?", "sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1", "source_tables": ["company"]}}
{"sample_id": 4091, "db_id": "company_employee", "final": {"question": "What are the headquarters and industries of all companies?", "sql": "SELECT Headquarters ,  Industry FROM company", "source_tables": ["company"]}}
{"sample_id": 4097, "db_id": "company_employee", "final": {"question": "Show the headquarters that have at least two companies.", "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2", "source_tables": ["company"]}}
{"sample_id": 4104, "db_id": "company_employee", "final": {"question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.", "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC", "source_tables": ["company"]}}
{"sample_id": 4090, "db_id": "company_employee", "final": {"question": "List the names of companies by ascending number of sales.", "sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC", "source_tables": ["company"]}}
{"sample_id": 4096, "db_id": "company_employee", "final": {"question": "Show the most common headquarter for companies.", "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["company"]}}
{"sample_id": 4115, "db_id": "film_rank", "final": {"question": "What are the maximum and minimum number of cities in all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "source_tables": ["market"]}}
{"sample_id": 4132, "db_id": "film_rank", "final": {"question": "What are the years of film market estimation for the market of Japan, ordered by year descending?", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "source_tables": ["market", "film_market_estimation"]}}
{"sample_id": 4110, "db_id": "film_rank", "final": {"question": "Return the average gross sales in dollars across all films.", "sql": "SELECT avg(Gross_in_dollar) FROM film", "source_tables": ["film"]}}
{"sample_id": 4126, "db_id": "film_rank", "final": {"question": "Who are the different directors of films which had market estimation in 1995?", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4112, "db_id": "film_rank", "final": {"question": "Return the low and high estimates for all film markets.", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "source_tables": ["film_market_estimation"]}}
{"sample_id": 4120, "db_id": "film_rank", "final": {"question": "What are the countries for each market, ordered alphabetically?", "sql": "SELECT Country FROM market ORDER BY Country ASC", "source_tables": ["market"]}}
{"sample_id": 4109, "db_id": "film_rank", "final": {"question": "What is the average ticket sales gross in dollars of films?", "sql": "SELECT avg(Gross_in_dollar) FROM film", "source_tables": ["film"]}}
{"sample_id": 4119, "db_id": "film_rank", "final": {"question": "List all countries of markets in ascending alphabetical order.", "sql": "SELECT Country FROM market ORDER BY Country ASC", "source_tables": ["market"]}}
{"sample_id": 4146, "db_id": "film_rank", "final": {"question": "Which studios have never worked with the director Walter Hill?", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "source_tables": ["film"]}}
{"sample_id": 4130, "db_id": "film_rank", "final": {"question": "What are the countries of markets and their corresponding years of market estimation?", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "source_tables": ["market", "film_market_estimation"]}}
{"sample_id": 4116, "db_id": "film_rank", "final": {"question": "Return the maximum and minimum number of cities across all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "source_tables": ["market"]}}
{"sample_id": 4123, "db_id": "film_rank", "final": {"question": "Please show the titles of films and the types of market estimations.", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4141, "db_id": "film_rank", "final": {"question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "source_tables": ["film"]}}
{"sample_id": 4150, "db_id": "film_rank", "final": {"question": "Return the title of the film with the highest high estimate?", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4128, "db_id": "film_rank", "final": {"question": "Give the average number of cities within markets that had a low market estimation larger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "source_tables": ["market", "film_market_estimation"]}}
{"sample_id": 4106, "db_id": "film_rank", "final": {"question": "Count the number of films.", "sql": "SELECT count(*) FROM film", "source_tables": ["film"]}}
{"sample_id": 4143, "db_id": "film_rank", "final": {"question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "source_tables": ["film"]}}
{"sample_id": 4108, "db_id": "film_rank", "final": {"question": "What are the different film Directors?", "sql": "SELECT DISTINCT Director FROM film", "source_tables": ["film"]}}
{"sample_id": 4127, "db_id": "film_rank", "final": {"question": "What is the average number of cities of markets with low film market estimate bigger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "source_tables": ["market", "film_market_estimation"]}}
{"sample_id": 4135, "db_id": "film_rank", "final": {"question": "List the name of film studio that have the most number of films.", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["film"]}}
{"sample_id": 4142, "db_id": "film_rank", "final": {"question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "source_tables": ["film"]}}
{"sample_id": 4149, "db_id": "film_rank", "final": {"question": "What is the title of the film that has the highest high market estimation.", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4122, "db_id": "film_rank", "final": {"question": "What are the countries for each market ordered by decreasing number of cities?", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "source_tables": ["market"]}}
{"sample_id": 4145, "db_id": "film_rank", "final": {"question": "Show the studios that have not produced films with director \"Walter Hill\".", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "source_tables": ["film"]}}
{"sample_id": 4118, "db_id": "film_rank", "final": {"question": "Count the number of markets that have a number of cities lower than 300.", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "source_tables": ["market"]}}
{"sample_id": 4139, "db_id": "film_rank", "final": {"question": "List the title of films that do not have any market estimation.", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4121, "db_id": "film_rank", "final": {"question": "List all countries of markets in descending order of number of cities.", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "source_tables": ["market"]}}
{"sample_id": 4147, "db_id": "film_rank", "final": {"question": "List the studios which average gross is above 4500000.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "source_tables": ["film"]}}
{"sample_id": 4237, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who have destroyed a document.", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4154, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Count the number of all the calendar items.", "sql": "SELECT count(*) FROM Ref_calendar", "source_tables": ["ref_calendar"]}}
{"sample_id": 4238, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the ids of all the employees who have destroyed documents?", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4202, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the roles with three or more employees? Give me the role codes.", "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3", "source_tables": ["employees"]}}
{"sample_id": 4185, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the name and description for role code \"MG\"?", "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"", "source_tables": ["roles"]}}
{"sample_id": 4177, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the name and description for location code x?", "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"", "source_tables": ["ref_locations"]}}
{"sample_id": 4204, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the role with the smallest number of employees? Find the role codes.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["employees"]}}
{"sample_id": 4240, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees do not destroy any document? Find their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4232, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the id of each employee and the number of document destroyed by that employee?", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4216, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are each document's location code, and starting date and ending data in that location?", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "source_tables": ["document_locations"]}}
{"sample_id": 4235, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who have authorized destruction.", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4169, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the day Number and date of all the documents?", "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date", "source_tables": ["ref_calendar", "all_documents"]}}
{"sample_id": 4182, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Count the total number of roles listed.", "sql": "SELECT count(*) FROM ROLES", "source_tables": ["roles"]}}
{"sample_id": 4166, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "How many documents have document type code CV or BK?", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "source_tables": ["all_documents"]}}
{"sample_id": 4184, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are all the role codes, role names, and role descriptions?", "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES", "source_tables": ["roles"]}}
{"sample_id": 4239, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who don't destroy any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4168, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "When was the document named \"Marry CV\" stored? Give me the date.", "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"", "source_tables": ["all_documents"]}}
{"sample_id": 4197, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show all role codes and the number of employees in each role.", "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code", "source_tables": ["employees"]}}
{"sample_id": 4170, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Return the day Number and stored date for all the documents.", "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date", "source_tables": ["ref_calendar", "all_documents"]}}
{"sample_id": 4165, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the number of documents with document type code CV or BK.", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "source_tables": ["all_documents"]}}
{"sample_id": 4191, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the name, role code, and date of birth for the employee with name 'Armani'.", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "source_tables": ["employees"]}}
{"sample_id": 4161, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the name and description for document type code RV?", "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"", "source_tables": ["ref_document_types"]}}
{"sample_id": 4200, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the code of the role that have the most employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employees"]}}
{"sample_id": 4217, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "source_tables": ["document_locations", "all_documents"]}}
{"sample_id": 4190, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the number of employees we have.", "sql": "SELECT count(*) FROM Employees", "source_tables": ["employees"]}}
{"sample_id": 4215, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location code, the starting date and ending data in that location for all the documents.", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "source_tables": ["document_locations"]}}
{"sample_id": 4164, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the code of the document type \"Paper\".", "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"", "source_tables": ["ref_document_types"]}}
{"sample_id": 4196, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees have the role with code \"HR\"? Find their names.", "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"", "source_tables": ["employees"]}}
{"sample_id": 4211, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the different location codes for documents?", "sql": "SELECT DISTINCT location_code FROM Document_locations", "source_tables": ["document_locations"]}}
{"sample_id": 4174, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "How many locations are listed in the database?", "sql": "SELECT count(*) FROM Ref_locations", "source_tables": ["ref_locations"]}}
{"sample_id": 4219, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location codes and the number of documents in each location.", "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code", "source_tables": ["document_locations"]}}
{"sample_id": 4195, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the names of all the employees with role \"HR\".", "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"", "source_tables": ["employees"]}}
{"sample_id": 4172, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the document type name of the document named \"How to read a book\".", "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"", "source_tables": ["ref_document_types", "all_documents"]}}
{"sample_id": 4225, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location name and code with the least documents.", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["document_locations", "ref_locations"]}}
{"sample_id": 4159, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "List all document type codes and document type names.", "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types", "source_tables": ["ref_document_types"]}}
{"sample_id": 4162, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Give me the name and description of the document type code RV.", "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"", "source_tables": ["ref_document_types"]}}
{"sample_id": 4158, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "How many document types are there?", "sql": "SELECT count(*) FROM Ref_document_types", "source_tables": ["ref_document_types"]}}
{"sample_id": 4183, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "List all role codes, role names, and role descriptions.", "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES", "source_tables": ["roles"]}}
{"sample_id": 4226, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the name and code of the location with the smallest number of documents?", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["document_locations", "ref_locations"]}}
{"sample_id": 4241, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4229, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the id of each employee and the number of document destruction authorised by that employee.", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4201, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show all role codes with at least 3 employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3", "source_tables": ["employees"]}}
{"sample_id": 4207, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the names of employees with role name Editor.", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "source_tables": ["roles", "employees"]}}
{"sample_id": 4213, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location name for document \"Robin CV\".", "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"", "source_tables": ["document_locations", "ref_locations", "all_documents"]}}
{"sample_id": 4194, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the id of the employee named Ebba.", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "source_tables": ["employees"]}}
{"sample_id": 4206, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the name and description of the role played by the employee named Ebba.", "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"", "source_tables": ["roles", "employees"]}}
{"sample_id": 4205, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the role name and role description for employee called Ebba?", "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"", "source_tables": ["roles", "employees"]}}
{"sample_id": 4181, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "How many roles are there?", "sql": "SELECT count(*) FROM ROLES", "source_tables": ["roles"]}}
{"sample_id": 4186, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the name and description of the role with code \"MG\".", "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"", "source_tables": ["roles"]}}
{"sample_id": 4188, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the description of the role named \"Proof Reader\"?", "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"", "source_tables": ["roles"]}}
{"sample_id": 4227, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4214, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the location name of the document \"Robin CV\"?", "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"", "source_tables": ["document_locations", "ref_locations", "all_documents"]}}
{"sample_id": 4176, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are all the location codes and location names?", "sql": "SELECT location_code ,  location_name FROM Ref_locations", "source_tables": ["ref_locations"]}}
{"sample_id": 4230, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the id of each employee and the number of document destruction authorised by that employee?", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4250, "db_id": "club_1", "final": {"question": "Find each student's first name.", "sql": "SELECT DISTINCT fname FROM student", "source_tables": ["student"]}}
{"sample_id": 4247, "db_id": "club_1", "final": {"question": "How many students are there?", "sql": "SELECT count(*) FROM student", "source_tables": ["student"]}}
{"sample_id": 4296, "db_id": "club_1", "final": {"question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4249, "db_id": "club_1", "final": {"question": "What are the first names of all the students?", "sql": "SELECT DISTINCT fname FROM student", "source_tables": ["student"]}}
{"sample_id": 4302, "db_id": "club_1", "final": {"question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4299, "db_id": "club_1", "final": {"question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4275, "db_id": "club_1", "final": {"question": "Find the description of the club \"Pen and Paper Gaming\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "source_tables": ["club"]}}
{"sample_id": 4269, "db_id": "club_1", "final": {"question": "Which club has the most members majoring in \"600\"?", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4261, "db_id": "club_1", "final": {"question": "Find the number of clubs where \"Tracy Kim\" is a member.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4268, "db_id": "club_1", "final": {"question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4260, "db_id": "club_1", "final": {"question": "How many clubs does \"Linda Smith\" have membership for?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4285, "db_id": "club_1", "final": {"question": "How many clubs are located at \"HHH\"?", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "source_tables": ["club"]}}
{"sample_id": 4256, "db_id": "club_1", "final": {"question": "Count the members of the club \"Tennis Club\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4297, "db_id": "club_1", "final": {"question": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4300, "db_id": "club_1", "final": {"question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4288, "db_id": "club_1", "final": {"question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4277, "db_id": "club_1", "final": {"question": "What is the location of the club named \"Tennis Club\"?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "source_tables": ["club"]}}
{"sample_id": 4287, "db_id": "club_1", "final": {"question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4311, "db_id": "club_1", "final": {"question": "Retrieve the average age of members of the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4281, "db_id": "club_1", "final": {"question": "Where is the club \"Hopkins Student Enterprises\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "source_tables": ["club"]}}
{"sample_id": 4258, "db_id": "club_1", "final": {"question": "How many people have membership in the club \"Pen and Paper Gaming\"?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4254, "db_id": "club_1", "final": {"question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4310, "db_id": "club_1", "final": {"question": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4307, "db_id": "club_1", "final": {"question": "What is the average age of the members of the club \"Bootup Baltimore\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4245, "db_id": "club_1", "final": {"question": "What are the names of all clubs?", "sql": "SELECT clubname FROM club", "source_tables": ["club"]}}
{"sample_id": 4292, "db_id": "club_1", "final": {"question": "Count the number of different positions in the club \"Bootup Baltimore\".", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "source_tables": ["member_of_club", "club"]}}
{"sample_id": 4270, "db_id": "club_1", "final": {"question": "Find the club which has the largest number of members majoring in \"600\".", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4262, "db_id": "club_1", "final": {"question": "For how many clubs is \"Tracy Kim\" a member?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4272, "db_id": "club_1", "final": {"question": "Which club has the most female students as their members? Give me the name of the club.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4291, "db_id": "club_1", "final": {"question": "How many different roles are there in the club \"Bootup Baltimore\"?", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "source_tables": ["member_of_club", "club"]}}
{"sample_id": 4255, "db_id": "club_1", "final": {"question": "How many members does the club \"Tennis Club\" has?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4306, "db_id": "club_1", "final": {"question": "Which clubs have one or more members whose advisor is \"1121\"?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4271, "db_id": "club_1", "final": {"question": "Find the name of the club that has the most female students.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4286, "db_id": "club_1", "final": {"question": "Count the number of clubs located at \"HHH\".", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "source_tables": ["club"]}}
{"sample_id": 4265, "db_id": "club_1", "final": {"question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4295, "db_id": "club_1", "final": {"question": "How many members of club \"Bootup Baltimore\" are younger than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4248, "db_id": "club_1", "final": {"question": "Count the total number of students.", "sql": "SELECT count(*) FROM student", "source_tables": ["student"]}}
{"sample_id": 4308, "db_id": "club_1", "final": {"question": "Find the average age of the members in the club \"Bootup Baltimore\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4257, "db_id": "club_1", "final": {"question": "Find the number of members of club \"Pen and Paper Gaming\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4282, "db_id": "club_1", "final": {"question": "Tell me the location of the club \"Hopkins Student Enterprises\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "source_tables": ["club"]}}
{"sample_id": 4244, "db_id": "club_1", "final": {"question": "Count the total number of clubs.", "sql": "SELECT count(*) FROM club", "source_tables": ["club"]}}
{"sample_id": 4266, "db_id": "club_1", "final": {"question": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4353, "db_id": "tracking_grants_for_research", "final": {"question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.", "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["research_staff", "organisations"]}}
{"sample_id": 4366, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?", "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", "source_tables": ["organisations", "organisation_types"]}}
{"sample_id": 4388, "db_id": "tracking_grants_for_research", "final": {"question": "List the description of the outcomes for all projects.", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "source_tables": ["research_outcomes", "project_outcomes"]}}
{"sample_id": 4347, "db_id": "tracking_grants_for_research", "final": {"question": "When did the first staff for the projects started working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4370, "db_id": "tracking_grants_for_research", "final": {"question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "source_tables": ["project_staff"]}}
{"sample_id": 4358, "db_id": "tracking_grants_for_research", "final": {"question": "What is the type of the document whose description starts with the word 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "source_tables": ["document_types"]}}
{"sample_id": 4333, "db_id": "tracking_grants_for_research", "final": {"question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?", "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2", "source_tables": ["projects", "tasks", "project_outcomes"]}}
{"sample_id": 4350, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details and id of the project with the most outcomes?", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4372, "db_id": "tracking_grants_for_research", "final": {"question": "What is the last date that a staff member left a project?", "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4338, "db_id": "tracking_grants_for_research", "final": {"question": "How many different roles are there on the project staff?", "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff", "source_tables": ["project_staff"]}}
{"sample_id": 4385, "db_id": "tracking_grants_for_research", "final": {"question": "What are the staff roles of the staff who", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "source_tables": ["project_staff"]}}
{"sample_id": 4346, "db_id": "tracking_grants_for_research", "final": {"question": "What is the complete description of the job of a researcher?", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "source_tables": ["staff_roles"]}}
{"sample_id": 4380, "db_id": "tracking_grants_for_research", "final": {"question": "What details are there on the research staff? List the result in ascending alphabetical order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"]}}
{"sample_id": 4342, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details for the project whose research has been published?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "source_tables": ["projects", "research_outcomes", "project_outcomes"]}}
{"sample_id": 4368, "db_id": "tracking_grants_for_research", "final": {"question": "How many patents outcomes were listed for all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "source_tables": ["project_outcomes"]}}
{"sample_id": 4360, "db_id": "tracking_grants_for_research", "final": {"question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "source_tables": ["grants", "document_types", "documents"]}}
{"sample_id": 4327, "db_id": "tracking_grants_for_research", "final": {"question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "source_tables": ["organisations", "grants", "organisation_types", "documents"]}}
{"sample_id": 4365, "db_id": "tracking_grants_for_research", "final": {"question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.", "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", "source_tables": ["organisations", "organisation_types"]}}
{"sample_id": 4348, "db_id": "tracking_grants_for_research", "final": {"question": "When did the first staff member start working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4367, "db_id": "tracking_grants_for_research", "final": {"question": "How many Patent outcomes are generated from all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "source_tables": ["project_outcomes"]}}
{"sample_id": 4321, "db_id": "tracking_grants_for_research", "final": {"question": "Find the organisation ids and details of the organisations which are involved in", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "source_tables": ["organisations", "grants"]}}
{"sample_id": 4354, "db_id": "tracking_grants_for_research", "final": {"question": "What are the ids, types, and details of the organization with the most research staff?", "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["research_staff", "organisations"]}}
{"sample_id": 4373, "db_id": "tracking_grants_for_research", "final": {"question": "What are the result description of the project whose detail is 'sint'?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", "source_tables": ["projects", "research_outcomes", "project_outcomes"]}}
{"sample_id": 4344, "db_id": "tracking_grants_for_research", "final": {"question": "For each project id, how many staff does it have? List them in increasing order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "source_tables": ["projects", "project_staff"]}}
{"sample_id": 4336, "db_id": "tracking_grants_for_research", "final": {"question": "When did researchers start and stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "source_tables": ["project_staff"]}}
{"sample_id": 4364, "db_id": "tracking_grants_for_research", "final": {"question": "What is the type description of the organization whose detail is listed as 'quo'?", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "source_tables": ["organisations", "organisation_types"]}}
{"sample_id": 4369, "db_id": "tracking_grants_for_research", "final": {"question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "source_tables": ["project_staff"]}}
{"sample_id": 4359, "db_id": "tracking_grants_for_research", "final": {"question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "source_tables": ["grants", "document_types", "documents"]}}
{"sample_id": 4340, "db_id": "tracking_grants_for_research", "final": {"question": "What is the total amount of grant money given to each organization and what is its id?", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "source_tables": ["grants"]}}
{"sample_id": 4378, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details for the projects which were launched by the organization with the most projects?", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "source_tables": ["projects"]}}
{"sample_id": 4362, "db_id": "tracking_grants_for_research", "final": {"question": "For each grant id, how many documents does it have, and which one has the most?", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4313, "db_id": "tracking_grants_for_research", "final": {"question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "source_tables": ["grants", "documents"]}}
{"sample_id": 4383, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks does each project have? List the task count and the project detail.", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "source_tables": ["projects", "tasks"]}}
{"sample_id": 4329, "db_id": "tracking_grants_for_research", "final": {"question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "source_tables": ["grants", "document_types", "documents"]}}
{"sample_id": 4351, "db_id": "tracking_grants_for_research", "final": {"question": "Which projects have no outcome? List the project details.", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4382, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks are there?", "sql": "SELECT count(*) FROM Tasks", "source_tables": ["tasks"]}}
{"sample_id": 4317, "db_id": "tracking_grants_for_research", "final": {"question": "What is the total grant amount of the organisations described as research?", "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", "source_tables": ["organisations", "grants", "organisation_types"]}}
{"sample_id": 4323, "db_id": "tracking_grants_for_research", "final": {"question": "What is the organisation type and id of the organisation which has the most number of research staff?", "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["research_staff", "organisations"]}}
{"sample_id": 4379, "db_id": "tracking_grants_for_research", "final": {"question": "List the research staff details, and order in ascending order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"]}}
{"sample_id": 4345, "db_id": "tracking_grants_for_research", "final": {"question": "What is the complete description of the researcher role.", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "source_tables": ["staff_roles"]}}
{"sample_id": 4386, "db_id": "tracking_grants_for_research", "final": {"question": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "source_tables": ["project_staff"]}}
{"sample_id": 4357, "db_id": "tracking_grants_for_research", "final": {"question": "Which document type is described with the prefix 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "source_tables": ["document_types"]}}
{"sample_id": 4330, "db_id": "tracking_grants_for_research", "final": {"question": "What is the response received date for the document described as Regular that was granted more than 100 dollars?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "source_tables": ["grants", "document_types", "documents"]}}
{"sample_id": 4384, "db_id": "tracking_grants_for_research", "final": {"question": "For each project id, how many tasks are there?", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "source_tables": ["projects", "tasks"]}}
{"sample_id": 4375, "db_id": "tracking_grants_for_research", "final": {"question": "List the organisation id with the maximum outcome count, and the count.", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4315, "db_id": "tracking_grants_for_research", "final": {"question": "List the project details of the project both producing patent and paper as outcomes.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4395, "db_id": "network_2", "final": {"question": "What is the average age for all person?", "sql": "SELECT avg(age) FROM Person", "source_tables": ["person"]}}
{"sample_id": 4408, "db_id": "network_2", "final": {"question": "What is the age of the doctor named Zach?", "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'", "source_tables": ["person"]}}
{"sample_id": 4463, "db_id": "network_2", "final": {"question": "What is the age of the friend of Zach with longest year relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4426, "db_id": "network_2", "final": {"question": "How many people are older than every engineer?", "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", "source_tables": ["person"]}}
{"sample_id": 4432, "db_id": "network_2", "final": {"question": "What is the name and age of every male? Order the results by age.", "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age", "source_tables": ["person"]}}
{"sample_id": 4476, "db_id": "network_2", "final": {"question": "What are the names of all of Alice's friends of friends?", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4411, "db_id": "network_2", "final": {"question": "How many people whose age is greater 30 and job is engineer?", "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'", "source_tables": ["person"]}}
{"sample_id": 4397, "db_id": "network_2", "final": {"question": "How many different cities are they from?", "sql": "SELECT count(DISTINCT city) FROM Person", "source_tables": ["person"]}}
{"sample_id": 4468, "db_id": "network_2", "final": {"question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4401, "db_id": "network_2", "final": {"question": "Who is the oldest person?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "source_tables": ["person"]}}
{"sample_id": 4413, "db_id": "network_2", "final": {"question": "What is the average age for each gender?", "sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender", "source_tables": ["person"]}}
{"sample_id": 4402, "db_id": "network_2", "final": {"question": "What is the name of the person who is the oldest?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "source_tables": ["person"]}}
{"sample_id": 4403, "db_id": "network_2", "final": {"question": "Who is the oldest person whose job is student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "source_tables": ["person"]}}
{"sample_id": 4423, "db_id": "network_2", "final": {"question": "Find the name of people whose age is greater than any engineer sorted by their age.", "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age", "source_tables": ["person"]}}
{"sample_id": 4404, "db_id": "network_2", "final": {"question": "What is the name of the oldest student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "source_tables": ["person"]}}
{"sample_id": 4475, "db_id": "network_2", "final": {"question": "Find Alice's friends of friends.", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4449, "db_id": "network_2", "final": {"question": "Find the names of females who are friends with Zach", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4441, "db_id": "network_2", "final": {"question": "Find the name of the person who has no student friends.", "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4427, "db_id": "network_2", "final": {"question": "list the name, job title of all people ordered by their names.", "sql": "SELECT name ,  job FROM Person ORDER BY name", "source_tables": ["person"]}}
{"sample_id": 4457, "db_id": "network_2", "final": {"question": "Who has friends that are younger than the average age?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4422, "db_id": "network_2", "final": {"question": "How many people are under 40 for each gender?", "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender", "source_tables": ["person"]}}
{"sample_id": 4444, "db_id": "network_2", "final": {"question": "What are the names of everybody who has exactly one friend?", "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1", "source_tables": ["personfriend"]}}
{"sample_id": 4443, "db_id": "network_2", "final": {"question": "Find the person who has exactly one friend.", "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1", "source_tables": ["personfriend"]}}
{"sample_id": 4445, "db_id": "network_2", "final": {"question": "Who are the friends of Bob?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4430, "db_id": "network_2", "final": {"question": "What are the names of everybody sorted by age in descending order?", "sql": "SELECT name FROM Person ORDER BY age DESC", "source_tables": ["person"]}}
{"sample_id": 4394, "db_id": "network_2", "final": {"question": "How many females are in the network?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'", "source_tables": ["person"]}}
{"sample_id": 4421, "db_id": "network_2", "final": {"question": "Find the number of people who is under 40 for each gender.", "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender", "source_tables": ["person"]}}
{"sample_id": 4436, "db_id": "network_2", "final": {"question": "What are the different names and ages of every friend of either Dan or alice?", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4451, "db_id": "network_2", "final": {"question": "Find the female friends of Alice.", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4391, "db_id": "network_2", "final": {"question": "How many friends does Dan have?", "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4399, "db_id": "network_2", "final": {"question": "How many type of jobs do they have?", "sql": "SELECT count(DISTINCT job) FROM Person", "source_tables": ["person"]}}
{"sample_id": 4465, "db_id": "network_2", "final": {"question": "Find the name of persons who are friends with Alice for the shortest years.", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend"]}}
{"sample_id": 4440, "db_id": "network_2", "final": {"question": "What are the names of the people who are older 40 but no friends under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4405, "db_id": "network_2", "final": {"question": "Who is the youngest male?", "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )", "source_tables": ["person"]}}
{"sample_id": 4466, "db_id": "network_2", "final": {"question": "What are the names of all people who are friends with Alice for the shortest amount of time?", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend"]}}
{"sample_id": 4467, "db_id": "network_2", "final": {"question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4446, "db_id": "network_2", "final": {"question": "Who are Bob's friends?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4454, "db_id": "network_2", "final": {"question": "Who are the friends of Alice that are doctors?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4420, "db_id": "network_2", "final": {"question": "How old is the youngest person for each job?", "sql": "SELECT min(age) ,  job FROM Person GROUP BY job", "source_tables": ["person"]}}
{"sample_id": 4450, "db_id": "network_2", "final": {"question": "What are the names of all females who are friends with Zach?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4462, "db_id": "network_2", "final": {"question": "Which friend of Zach has the longest-lasting friendship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend"]}}
{"sample_id": 4435, "db_id": "network_2", "final": {"question": "Find the name and age of the person who is a friend of Dan or Alice.", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4409, "db_id": "network_2", "final": {"question": "Who is the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30", "source_tables": ["person"]}}
{"sample_id": 4434, "db_id": "network_2", "final": {"question": "What are the names and ages of every person who is a friend of both Dan and Alice?", "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4438, "db_id": "network_2", "final": {"question": "What are the names of every person who has a friend over 40 and under 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4460, "db_id": "network_2", "final": {"question": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4442, "db_id": "network_2", "final": {"question": "What are the names of the people who have no friends who are students?", "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4410, "db_id": "network_2", "final": {"question": "What is the name of the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30", "source_tables": ["person"]}}
{"sample_id": 4473, "db_id": "network_2", "final": {"question": "What is the total number of people who has no friend living in the city of Austin.", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4437, "db_id": "network_2", "final": {"question": "Find the name of the person who has friends with age above 40 and under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4470, "db_id": "network_2", "final": {"question": "What are the names of all people who do not have friends?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4481, "db_id": "decoration_competition", "final": {"question": "Show the different countries and the number of members from each.", "sql": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country", "source_tables": ["member"]}}
{"sample_id": 4490, "db_id": "decoration_competition", "final": {"question": "Show the names of members in ascending order of their rank in rounds.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC", "source_tables": ["round", "member"]}}
{"sample_id": 4491, "db_id": "decoration_competition", "final": {"question": "List the names of members who did not participate in any round.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)", "source_tables": ["round", "member"]}}
{"sample_id": 4488, "db_id": "decoration_competition", "final": {"question": "Show the names of members and the decoration themes they have.", "sql": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID", "source_tables": ["round", "member"]}}
{"sample_id": 4483, "db_id": "decoration_competition", "final": {"question": "Which countries have more than two members?", "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2", "source_tables": ["member"]}}
{"sample_id": 4479, "db_id": "decoration_competition", "final": {"question": "What are the names and countries of members?", "sql": "SELECT Name ,  Country FROM member", "source_tables": ["member"]}}
{"sample_id": 4484, "db_id": "decoration_competition", "final": {"question": "Show the leader names and locations of colleges.", "sql": "SELECT Leader_Name ,  College_Location FROM college", "source_tables": ["college"]}}
{"sample_id": 4478, "db_id": "decoration_competition", "final": {"question": "List the names of members in ascending alphabetical order.", "sql": "SELECT Name FROM member ORDER BY Name ASC", "source_tables": ["member"]}}
{"sample_id": 4477, "db_id": "decoration_competition", "final": {"question": "How many members are there?", "sql": "SELECT count(*) FROM member", "source_tables": ["member"]}}
{"sample_id": 4530, "db_id": "document_management", "final": {"question": "List all the image name and URLs in the order of their names.", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "source_tables": ["images"]}}
{"sample_id": 4527, "db_id": "document_management", "final": {"question": "What is the description of the most popular role among users that have logged in?", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["roles", "users"]}}
{"sample_id": 4526, "db_id": "document_management", "final": {"question": "Find the description of the most popular role among the users that have logged in.", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["roles", "users"]}}
{"sample_id": 4532, "db_id": "document_management", "final": {"question": "Find the number of users in each role.", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "source_tables": ["users"]}}
{"sample_id": 4515, "db_id": "document_management", "final": {"question": "What are the usernames and passwords of users that have the most common role?", "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["users"]}}
{"sample_id": 4497, "db_id": "document_management", "final": {"question": "What are the codes of types of documents of which there are for or more?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4", "source_tables": ["documents"]}}
{"sample_id": 4531, "db_id": "document_management", "final": {"question": "What are the names and urls of images, sorted alphabetically?", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "source_tables": ["images"]}}
{"sample_id": 4503, "db_id": "document_management", "final": {"question": "Return the structure description of the document that has been accessed the fewest number of times.", "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["document_structures", "documents"]}}
{"sample_id": 4521, "db_id": "document_management", "final": {"question": "Return the name of the document that has the most sections.", "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["document_sections", "documents"]}}
{"sample_id": 4513, "db_id": "document_management", "final": {"question": "What are the names of documents that do not have any sections?", "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)", "source_tables": ["document_sections", "documents"]}}
{"sample_id": 4529, "db_id": "document_management", "final": {"question": "What is the average access count of documents that have the least common structure?", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4501, "db_id": "document_management", "final": {"question": "Find the average access count across all documents?", "sql": "SELECT avg(access_count) FROM documents", "source_tables": ["documents"]}}
{"sample_id": 4494, "db_id": "document_management", "final": {"question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4509, "db_id": "document_management", "final": {"question": "Return the codes of the document types that do not have a total access count of over 10000.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "source_tables": ["documents"]}}
{"sample_id": 4523, "db_id": "document_management", "final": {"question": "What are the names of documents that contain the substring \"CV\"?", "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"", "source_tables": ["documents"]}}
{"sample_id": 4535, "db_id": "document_management", "final": {"question": "Give the codes of document types that have more than 2 corresponding documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "source_tables": ["documents"]}}
{"sample_id": 4522, "db_id": "document_management", "final": {"question": "List all the document names which contains \"CV\".", "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"", "source_tables": ["documents"]}}
{"sample_id": 4493, "db_id": "document_management", "final": {"question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "source_tables": ["documents"]}}
{"sample_id": 4507, "db_id": "document_management", "final": {"question": "What are the names of documents that have both one of the three most common types and one of three most common structures?", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["documents"]}}
{"sample_id": 4502, "db_id": "document_management", "final": {"question": "What is the structure of the document with the least number of accesses?", "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["document_structures", "documents"]}}
{"sample_id": 4496, "db_id": "document_management", "final": {"question": "Find the types of documents with more than 4 documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4", "source_tables": ["documents"]}}
{"sample_id": 4505, "db_id": "document_management", "final": {"question": "Return the type code of the document named \"David CV\".", "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"", "source_tables": ["documents"]}}
{"sample_id": 4492, "db_id": "document_management", "final": {"question": "Find the name and access counts of all documents, in alphabetic order of the document name.", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "source_tables": ["documents"]}}
{"sample_id": 4528, "db_id": "document_management", "final": {"question": "Find the average access count of documents with the least popular structure.", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4524, "db_id": "document_management", "final": {"question": "How many users are logged in?", "sql": "SELECT count(*) FROM users WHERE user_login  =  1", "source_tables": ["users"]}}
{"sample_id": 4533, "db_id": "document_management", "final": {"question": "What are the different role codes for users, and how many users have each?", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "source_tables": ["users"]}}
{"sample_id": 4551, "db_id": "company_office", "final": {"question": "What are the names of buildings sorted in descending order of building height?", "sql": "SELECT name FROM buildings ORDER BY Height DESC", "source_tables": ["buildings"]}}
{"sample_id": 4563, "db_id": "company_office", "final": {"question": "Whah are the name of each industry and the number of companies in that industry?", "sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry", "source_tables": ["companies"]}}
{"sample_id": 4558, "db_id": "company_office", "final": {"question": "Show the name of the building that has the most company offices.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["office_locations", "companies", "buildings"]}}
{"sample_id": 4549, "db_id": "company_office", "final": {"question": "Count the number of distinct company industries.", "sql": "SELECT count(DISTINCT Industry) FROM Companies", "source_tables": ["companies"]}}
{"sample_id": 4561, "db_id": "company_office", "final": {"question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "source_tables": ["buildings"]}}
{"sample_id": 4573, "db_id": "company_office", "final": {"question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"", "source_tables": ["companies"]}}
{"sample_id": 4574, "db_id": "company_office", "final": {"question": "Show the headquarters shared by more than two companies.", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "source_tables": ["companies"]}}
{"sample_id": 4571, "db_id": "company_office", "final": {"question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"", "source_tables": ["companies"]}}
{"sample_id": 4567, "db_id": "company_office", "final": {"question": "Which industry has the most companies?", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["companies"]}}
{"sample_id": 4575, "db_id": "company_office", "final": {"question": "Which headquarter locations are used by more than 2 companies?", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "source_tables": ["companies"]}}
{"sample_id": 4550, "db_id": "company_office", "final": {"question": "List the names of buildings in descending order of building height.", "sql": "SELECT name FROM buildings ORDER BY Height DESC", "source_tables": ["buildings"]}}
{"sample_id": 4559, "db_id": "company_office", "final": {"question": "Which building has the largest number of company offices? Give me the building name.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["office_locations", "companies", "buildings"]}}
{"sample_id": 4554, "db_id": "company_office", "final": {"question": "List the name of a building along with the name of a company whose office is in the building.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "source_tables": ["office_locations", "companies", "buildings"]}}
{"sample_id": 4547, "db_id": "company_office", "final": {"question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "source_tables": ["companies"]}}
{"sample_id": 4555, "db_id": "company_office", "final": {"question": "For each company, return the company name and the name of the building its office is located in.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "source_tables": ["office_locations", "companies", "buildings"]}}
{"sample_id": 4539, "db_id": "company_office", "final": {"question": "Sort the company names in descending order of the company's market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "source_tables": ["companies"]}}
{"sample_id": 4570, "db_id": "company_office", "final": {"question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"", "source_tables": ["companies"]}}
{"sample_id": 4566, "db_id": "company_office", "final": {"question": "List the industry shared by the most companies.", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["companies"]}}
{"sample_id": 4565, "db_id": "company_office", "final": {"question": "Sort all the industries in descending order of the count of companies in each industry", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "source_tables": ["companies"]}}
{"sample_id": 4537, "db_id": "company_office", "final": {"question": "Count the number of companies.", "sql": "SELECT count(*) FROM Companies", "source_tables": ["companies"]}}
{"sample_id": 4556, "db_id": "company_office", "final": {"question": "Show the names of the buildings that have more than one company offices.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1", "source_tables": ["office_locations", "companies", "buildings"]}}
{"sample_id": 4553, "db_id": "company_office", "final": {"question": "What is the stories of highest building?", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "source_tables": ["buildings"]}}
{"sample_id": 4568, "db_id": "company_office", "final": {"question": "List the names of buildings that have no company office.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "source_tables": ["office_locations", "buildings"]}}
{"sample_id": 4540, "db_id": "company_office", "final": {"question": "What are the names of companies whose headquarters are not \"USA\"?", "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'", "source_tables": ["companies"]}}
{"sample_id": 4589, "db_id": "solvency_ii", "final": {"question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name", "source_tables": ["products_in_events", "products"]}}
{"sample_id": 4580, "db_id": "solvency_ii", "final": {"question": "What is the average price for products?", "sql": "SELECT avg(Product_Price) FROM Products", "source_tables": ["products"]}}
{"sample_id": 4585, "db_id": "solvency_ii", "final": {"question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.", "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000", "source_tables": ["products"]}}
{"sample_id": 4584, "db_id": "solvency_ii", "final": {"question": "Show the product type codes that have at least two products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2", "source_tables": ["products"]}}
{"sample_id": 4577, "db_id": "solvency_ii", "final": {"question": "List the name of products in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "source_tables": ["products"]}}
{"sample_id": 4587, "db_id": "solvency_ii", "final": {"question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "source_tables": ["products_in_events", "products"]}}
{"sample_id": 4578, "db_id": "solvency_ii", "final": {"question": "What are the names and type codes of products?", "sql": "SELECT Product_Name ,  Product_Type_Code FROM Products", "source_tables": ["products"]}}
{"sample_id": 4590, "db_id": "solvency_ii", "final": {"question": "List the names of products that are not in any event.", "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "source_tables": ["products_in_events", "products"]}}
{"sample_id": 4576, "db_id": "solvency_ii", "final": {"question": "How many products are there?", "sql": "SELECT count(*) FROM Products", "source_tables": ["products"]}}
{"sample_id": 4612, "db_id": "entertainment_awards", "final": {"question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "source_tables": ["festival_detail"]}}
{"sample_id": 4604, "db_id": "entertainment_awards", "final": {"question": "Show the ids and names of festivals that have at least two nominations for artworks.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2", "source_tables": ["artwork", "festival_detail", "nomination"]}}
{"sample_id": 4599, "db_id": "entertainment_awards", "final": {"question": "Show the names of the three most recent festivals.", "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3", "source_tables": ["festival_detail"]}}
{"sample_id": 4603, "db_id": "entertainment_awards", "final": {"question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"", "source_tables": ["artwork", "festival_detail", "nomination"]}}
{"sample_id": 4598, "db_id": "entertainment_awards", "final": {"question": "What is the average number of audience for festivals?", "sql": "SELECT avg(Num_of_Audience) FROM festival_detail", "source_tables": ["festival_detail"]}}
{"sample_id": 4591, "db_id": "entertainment_awards", "final": {"question": "How many artworks are there?", "sql": "SELECT count(*) FROM artwork", "source_tables": ["artwork"]}}
{"sample_id": 4605, "db_id": "entertainment_awards", "final": {"question": "Show the id, name of each festival and the number of artworks it has nominated.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID", "source_tables": ["artwork", "festival_detail", "nomination"]}}
{"sample_id": 4601, "db_id": "entertainment_awards", "final": {"question": "Show distinct types of artworks that are nominated in festivals in 2007.", "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007", "source_tables": ["artwork", "festival_detail", "nomination"]}}
{"sample_id": 4608, "db_id": "entertainment_awards", "final": {"question": "List the year in which there are more than one festivals.", "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "source_tables": ["festival_detail"]}}
{"sample_id": 4610, "db_id": "entertainment_awards", "final": {"question": "Show the number of audience in year 2008 or 2010.", "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010", "source_tables": ["festival_detail"]}}
{"sample_id": 4594, "db_id": "entertainment_awards", "final": {"question": "What are the names and locations of festivals?", "sql": "SELECT Festival_Name ,  LOCATION FROM festival_detail", "source_tables": ["festival_detail"]}}
{"sample_id": 4593, "db_id": "entertainment_awards", "final": {"question": "List the name of artworks whose type is not \"Program Talent Show\".", "sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"", "source_tables": ["artwork"]}}
{"sample_id": 4597, "db_id": "entertainment_awards", "final": {"question": "What are the names of festivals held in year 2007?", "sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007", "source_tables": ["festival_detail"]}}
{"sample_id": 4625, "db_id": "customers_campaigns_ecommerce", "final": {"question": "What are the distinct address type codes for all customer addresses?", "sql": "SELECT DISTINCT address_type_code FROM customer_addresses", "source_tables": ["customer_addresses"]}}
{"sample_id": 4615, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Find the types and details for all premises and order by the premise type.", "sql": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type", "source_tables": ["premises"]}}
{"sample_id": 4614, "db_id": "customers_campaigns_ecommerce", "final": {"question": "What are all the distinct premise types?", "sql": "SELECT DISTINCT premises_type FROM premises", "source_tables": ["premises"]}}
{"sample_id": 4623, "db_id": "customers_campaigns_ecommerce", "final": {"question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.", "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'", "source_tables": ["mailshot_customers", "customers"]}}
{"sample_id": 4626, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.", "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'", "source_tables": ["customer_orders"]}}
{"sample_id": 4618, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the name and phone of the customer without any mailshot.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)", "source_tables": ["customers", "mailshot_customers"]}}
{"sample_id": 4624, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the premise type and address type code for all customer addresses.", "sql": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id", "source_tables": ["customer_addresses", "premises"]}}
{"sample_id": 4613, "db_id": "customers_campaigns_ecommerce", "final": {"question": "How many premises are there?", "sql": "SELECT count(*) FROM premises", "source_tables": ["premises"]}}
{"sample_id": 4620, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.", "sql": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code", "source_tables": ["mailshot_customers"]}}
{"sample_id": 4690, "db_id": "college_3", "final": {"question": "Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "source_tables": ["member_of", "faculty", "department"]}}
{"sample_id": 4663, "db_id": "college_3", "final": {"question": "What are the first names for all faculty professors, ordered by first name?", "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "source_tables": ["faculty"]}}
{"sample_id": 4672, "db_id": "college_3", "final": {"question": "What are the first and last names of the instructors who teach the top 3 number of courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "source_tables": ["course", "faculty"]}}
{"sample_id": 4675, "db_id": "college_3", "final": {"question": "Give the building that the instructor who teaches the greatest number of courses lives in.", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "source_tables": ["course", "faculty"]}}
{"sample_id": 4647, "db_id": "college_3", "final": {"question": "What are the full names of faculties with sex M and who live in building NEB?", "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "source_tables": ["faculty"]}}
{"sample_id": 4686, "db_id": "college_3", "final": {"question": "Find the full names of faculties who are members of department with department number 520.", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "source_tables": ["member_of", "faculty"]}}
{"sample_id": 4628, "db_id": "college_3", "final": {"question": "How many courses are there in total?", "sql": "SELECT count(*) FROM COURSE", "source_tables": ["course"]}}
{"sample_id": 4684, "db_id": "college_3", "final": {"question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4689, "db_id": "college_3", "final": {"question": "What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "source_tables": ["student", "minor_in"]}}
{"sample_id": 4651, "db_id": "college_3", "final": {"question": "What is the name of the department in the Building Mergenthaler?", "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "source_tables": ["department"]}}
{"sample_id": 4635, "db_id": "college_3", "final": {"question": "What are the course names for courses taught on MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "source_tables": ["course"]}}
{"sample_id": 4665, "db_id": "college_3", "final": {"question": "What is the name of the department with the most students minoring in it?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "source_tables": ["minor_in", "department"]}}
{"sample_id": 4683, "db_id": "college_3", "final": {"question": "What are the full names and gradepoints for all enrollments?", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4694, "db_id": "college_3", "final": {"question": "What is the maximum and minimum grade point of students who live in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4652, "db_id": "college_3", "final": {"question": "List all information about courses sorted by credits in the ascending order.", "sql": "SELECT * FROM COURSE ORDER BY Credits", "source_tables": ["course"]}}
{"sample_id": 4695, "db_id": "college_3", "final": {"question": "Give the maximum and minimum gradepoints for students living in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4634, "db_id": "college_3", "final": {"question": "Which courses are taught on days MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "source_tables": ["course"]}}
{"sample_id": 4655, "db_id": "college_3", "final": {"question": "What are the course names, ordered by credits?", "sql": "SELECT CName FROM COURSE ORDER BY Credits", "source_tables": ["course"]}}
{"sample_id": 4658, "db_id": "college_3", "final": {"question": "Find the last name of female (sex is F) students in the descending order of age.", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "source_tables": ["student"]}}
{"sample_id": 4654, "db_id": "college_3", "final": {"question": "List the course name of courses sorted by credits.", "sql": "SELECT CName FROM COURSE ORDER BY Credits", "source_tables": ["course"]}}
{"sample_id": 4680, "db_id": "college_3", "final": {"question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "source_tables": ["course", "department"]}}
{"sample_id": 4692, "db_id": "college_3", "final": {"question": "Find the average grade point of student whose last name is Smith.", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4631, "db_id": "college_3", "final": {"question": "Count the number of courses with more than 2 credits.", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "source_tables": ["course"]}}
{"sample_id": 4679, "db_id": "college_3", "final": {"question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "source_tables": ["course", "faculty"]}}
{"sample_id": 4642, "db_id": "college_3", "final": {"question": "Find the max and min grade point for all letter grade.", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "source_tables": ["gradeconversion"]}}
{"sample_id": 4678, "db_id": "college_3", "final": {"question": "Find the first name and last name of the instructor of course that has course name", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "source_tables": ["course", "faculty"]}}
{"sample_id": 4653, "db_id": "college_3", "final": {"question": "What is all the information about courses, ordered by credits ascending?", "sql": "SELECT * FROM COURSE ORDER BY Credits", "source_tables": ["course"]}}
{"sample_id": 4641, "db_id": "college_3", "final": {"question": "How many students have had at least one \"B\" grade?", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "source_tables": ["enrolled_in"]}}
{"sample_id": 4646, "db_id": "college_3", "final": {"question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.", "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "source_tables": ["faculty"]}}
{"sample_id": 4637, "db_id": "college_3", "final": {"question": "How many departments are in the division AS?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "source_tables": ["department"]}}
{"sample_id": 4638, "db_id": "college_3", "final": {"question": "What are the phones of departments in Room 268?", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "source_tables": ["department"]}}
{"sample_id": 4661, "db_id": "college_3", "final": {"question": "What are the last names of faculty in building Barton, sorted by last name?", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "source_tables": ["faculty"]}}
{"sample_id": 4671, "db_id": "college_3", "final": {"question": "What is the least common faculty rank?", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "source_tables": ["faculty"]}}
{"sample_id": 4670, "db_id": "college_3", "final": {"question": "Find the rank of the faculty that the fewest faculties belong to.", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "source_tables": ["faculty"]}}
{"sample_id": 4660, "db_id": "college_3", "final": {"question": "Find the last names of faculties in building Barton in alphabetic order.", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "source_tables": ["faculty"]}}
{"sample_id": 4691, "db_id": "college_3", "final": {"question": "What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "source_tables": ["member_of", "faculty", "department"]}}
{"sample_id": 4682, "db_id": "college_3", "final": {"question": "Find the student first and last names and grade points of all enrollments.", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4645, "db_id": "college_3", "final": {"question": "What are the first names for students who have an \"a\" in their first name?", "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "source_tables": ["student"]}}
{"sample_id": 4696, "db_id": "college_3", "final": {"question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "source_tables": ["course"]}}
{"sample_id": 4677, "db_id": "college_3", "final": {"question": "Give the names of the courses with at least five enrollments.", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "source_tables": ["course", "enrolled_in"]}}
{"sample_id": 4629, "db_id": "college_3", "final": {"question": "Count the number of courses.", "sql": "SELECT count(*) FROM COURSE", "source_tables": ["course"]}}
{"sample_id": 4648, "db_id": "college_3", "final": {"question": "Find the rooms of faculties with rank professor who live in building NEB.", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "source_tables": ["faculty"]}}
{"sample_id": 4667, "db_id": "college_3", "final": {"question": "What is the name of the department htat has no students minoring in it?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "source_tables": ["minor_in", "department"]}}
{"sample_id": 4687, "db_id": "college_3", "final": {"question": "What are the full names of faculty members who are a part of department 520?", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "source_tables": ["member_of", "faculty"]}}
{"sample_id": 4728, "db_id": "department_store", "final": {"question": "Find the name and address of the customers who have both New and Pending orders.", "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4771, "db_id": "department_store", "final": {"question": "What are the distinct names of customers who have purchased a keyboard?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"", "source_tables": ["customers", "customer_orders", "order_items", "products"]}}
{"sample_id": 4739, "db_id": "department_store", "final": {"question": "What are the maximum and minimum product prices for each product type?", "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4711, "db_id": "department_store", "final": {"question": "Return the staff ids and genders for any staff with the title Department Manager.", "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4734, "db_id": "department_store", "final": {"question": "What are the ids of the two department store chains with the largest number of department stores?", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "source_tables": ["department_stores"]}}
{"sample_id": 4706, "db_id": "department_store", "final": {"question": "Find the number of different product types.", "sql": "SELECT count(DISTINCT product_type_code) FROM products", "source_tables": ["products"]}}
{"sample_id": 4731, "db_id": "department_store", "final": {"question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "source_tables": ["product_suppliers", "products"]}}
{"sample_id": 4789, "db_id": "department_store", "final": {"question": "What is the name of the hardware product with the greatest price?", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4732, "db_id": "department_store", "final": {"question": "What is the id and name of the department store that has both marketing and managing department?", "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"", "source_tables": ["departments", "department_stores"]}}
{"sample_id": 4752, "db_id": "department_store", "final": {"question": "Return the name and gender of the staff who was assigned in 2016.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4725, "db_id": "department_store", "final": {"question": "Return the product type, name, and price for products supplied by supplier 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "source_tables": ["product_suppliers", "products"]}}
{"sample_id": 4746, "db_id": "department_store", "final": {"question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.", "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")", "source_tables": ["customer_orders"]}}
{"sample_id": 4747, "db_id": "department_store", "final": {"question": "What are the distinct ids of customers who made an order after any order that was Cancelled?", "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")", "source_tables": ["customer_orders"]}}
{"sample_id": 4760, "db_id": "department_store", "final": {"question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "source_tables": ["order_items", "product_suppliers"]}}
{"sample_id": 4721, "db_id": "department_store", "final": {"question": "Count the number of stores the chain South has.", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "source_tables": ["department_store_chain", "department_stores"]}}
{"sample_id": 4785, "db_id": "department_store", "final": {"question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"", "source_tables": ["customers"]}}
{"sample_id": 4705, "db_id": "department_store", "final": {"question": "Give the id and product type of the product with the lowest price.", "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4724, "db_id": "department_store", "final": {"question": "Give me the product type, name and price for all the products supplied by supplier id 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "source_tables": ["product_suppliers", "products"]}}
{"sample_id": 4782, "db_id": "department_store", "final": {"question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4713, "db_id": "department_store", "final": {"question": "How many customers use each payment method?", "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code", "source_tables": ["customers"]}}
{"sample_id": 4707, "db_id": "department_store", "final": {"question": "Count the number of distinct product types.", "sql": "SELECT count(DISTINCT product_type_code) FROM products", "source_tables": ["products"]}}
{"sample_id": 4753, "db_id": "department_store", "final": {"question": "What are the names and genders of staff who were assigned in 2016?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4788, "db_id": "department_store", "final": {"question": "Find the name of the most expensive hardware product.", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4736, "db_id": "department_store", "final": {"question": "What is the id of the department with the least number of staff?", "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1", "source_tables": ["staff_department_assignments"]}}
{"sample_id": 4743, "db_id": "department_store", "final": {"question": "What is the id and name of the staff who has been assigned for the least amount of time?", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4737, "db_id": "department_store", "final": {"question": "Return the id of the department with the fewest staff assignments.", "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1", "source_tables": ["staff_department_assignments"]}}
{"sample_id": 4719, "db_id": "department_store", "final": {"question": "Return the average price for each product type.", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4709, "db_id": "department_store", "final": {"question": "What is the address for the customer with id 10?", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "source_tables": ["addresses", "customer_addresses"]}}
{"sample_id": 4779, "db_id": "department_store", "final": {"question": "What are the distinct names of products purchased by at least two different customers?", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "source_tables": ["customer_orders", "order_items", "products"]}}
{"sample_id": 4764, "db_id": "department_store", "final": {"question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "source_tables": ["product_suppliers"]}}
{"sample_id": 4722, "db_id": "department_store", "final": {"question": "What is the name and job title of the staff who was assigned the latest?", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4712, "db_id": "department_store", "final": {"question": "For each payment method, return how many customers use it.", "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code", "source_tables": ["customers"]}}
{"sample_id": 4757, "db_id": "department_store", "final": {"question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "source_tables": ["addresses", "suppliers", "supplier_addresses"]}}
{"sample_id": 4756, "db_id": "department_store", "final": {"question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "source_tables": ["addresses", "suppliers", "supplier_addresses"]}}
{"sample_id": 4703, "db_id": "department_store", "final": {"question": "Give the ids of the three products purchased in the largest amounts.", "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "source_tables": ["product_suppliers"]}}
{"sample_id": 4738, "db_id": "department_store", "final": {"question": "For each product type, return the maximum and minimum price.", "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4720, "db_id": "department_store", "final": {"question": "How many department stores does the store chain South have?", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "source_tables": ["department_store_chain", "department_stores"]}}
{"sample_id": 4745, "db_id": "department_store", "final": {"question": "What are the names and ids of products costing between 600 and 700?", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "source_tables": ["products"]}}
{"sample_id": 4715, "db_id": "department_store", "final": {"question": "Give the product id for the product that was ordered most frequently.", "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items"]}}
{"sample_id": 4767, "db_id": "department_store", "final": {"question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product_suppliers"]}}
{"sample_id": 4742, "db_id": "department_store", "final": {"question": "Find the id and name of the staff who has been assigned for the shortest period.", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4761, "db_id": "department_store", "final": {"question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "source_tables": ["order_items", "product_suppliers"]}}
{"sample_id": 4723, "db_id": "department_store", "final": {"question": "Return the name and job title of the staff with the latest date assigned.", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4755, "db_id": "department_store", "final": {"question": "What are the names of staff who have been assigned multiple jobs?", "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4776, "db_id": "department_store", "final": {"question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date", "source_tables": ["customer_orders"]}}
{"sample_id": 4710, "db_id": "department_store", "final": {"question": "What are the staff ids and genders of all staffs whose job title is Department Manager?", "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4729, "db_id": "department_store", "final": {"question": "What are the names and addressed of customers who have both New and Pending orders?", "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4758, "db_id": "department_store", "final": {"question": "What are the phone numbers of all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "source_tables": ["customers", "suppliers"]}}
{"sample_id": 4717, "db_id": "department_store", "final": {"question": "Return the name, phone number and email address for the customer with the most orders.", "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4769, "db_id": "department_store", "final": {"question": "Return the maximum and minimum customer codes.", "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 4733, "db_id": "department_store", "final": {"question": "What are the ids and names of department stores with both marketing and managing departments?", "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"", "source_tables": ["departments", "department_stores"]}}
{"sample_id": 4787, "db_id": "department_store", "final": {"question": "What is the average price of clothes?", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "source_tables": ["products"]}}
{"sample_id": 4815, "db_id": "aircraft", "final": {"question": "What is the location and name of the winning aircraft?", "sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4826, "db_id": "aircraft", "final": {"question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4833, "db_id": "aircraft", "final": {"question": "How old is the youngest winning pilot and what is their name?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4799, "db_id": "aircraft", "final": {"question": "What are the total number of domestic passengers at all London airports?", "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"", "source_tables": ["airport"]}}
{"sample_id": 4828, "db_id": "aircraft", "final": {"question": "Show all information on the airport that has the largest number of international passengers.", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "source_tables": ["airport"]}}
{"sample_id": 4790, "db_id": "aircraft", "final": {"question": "How many aircrafts are there?", "sql": "SELECT count(*) FROM aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 4822, "db_id": "aircraft", "final": {"question": "List the names of aircrafts and that won matches at least twice.", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4810, "db_id": "aircraft", "final": {"question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.", "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4795, "db_id": "aircraft", "final": {"question": "What is the average number of international passengers for an airport?", "sql": "SELECT avg(International_Passengers) FROM airport", "source_tables": ["airport"]}}
{"sample_id": 4812, "db_id": "aircraft", "final": {"question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?", "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4835, "db_id": "aircraft", "final": {"question": "What are the names of the pilots that have not won any matches in Australia?", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "source_tables": ["pilot", "match"]}}
{"sample_id": 4830, "db_id": "aircraft", "final": {"question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4809, "db_id": "aircraft", "final": {"question": "What are the names of all the aircrafts associated with London Gatwick airport?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4801, "db_id": "aircraft", "final": {"question": "What is the maximum and mininum number of transit passengers for all airports?", "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport", "source_tables": ["airport"]}}
{"sample_id": 4807, "db_id": "aircraft", "final": {"question": "What are the names of all pilots 30 years old or young in descending alphabetical order?", "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC", "source_tables": ["pilot"]}}
{"sample_id": 4811, "db_id": "aircraft", "final": {"question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?", "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4834, "db_id": "aircraft", "final": {"question": "find the name of pilots who did not win the matches held in the country of Australia.", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "source_tables": ["pilot", "match"]}}
{"sample_id": 4806, "db_id": "aircraft", "final": {"question": "List names of all pilot aged 30 or younger in descending alphabetical order.", "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC", "source_tables": ["pilot"]}}
{"sample_id": 4796, "db_id": "aircraft", "final": {"question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "source_tables": ["airport"]}}
{"sample_id": 4802, "db_id": "aircraft", "final": {"question": "What are the name of pilots aged 25 or older?", "sql": "SELECT Name FROM pilot WHERE Age  >=  25", "source_tables": ["pilot"]}}
{"sample_id": 4827, "db_id": "aircraft", "final": {"question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4794, "db_id": "aircraft", "final": {"question": "What is the average number of international passengers of all airports?", "sql": "SELECT avg(International_Passengers) FROM airport", "source_tables": ["airport"]}}
{"sample_id": 4824, "db_id": "aircraft", "final": {"question": "List the names of aircrafts and that did not win any match.", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4797, "db_id": "aircraft", "final": {"question": "How many international and domestic passengers are there in the airport London Heathrow?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "source_tables": ["airport"]}}
{"sample_id": 4831, "db_id": "aircraft", "final": {"question": "What is the name and age of the pilot younger than 30 who has won the most number of times?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4814, "db_id": "aircraft", "final": {"question": "Please list the location and the winning aircraft name.", "sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4805, "db_id": "aircraft", "final": {"question": "What are the names of the pilots in alphabetical order?", "sql": "SELECT Name FROM pilot ORDER BY Name ASC", "source_tables": ["pilot"]}}
{"sample_id": 4846, "db_id": "local_govt_and_lot", "final": {"question": "How many different status codes of things are there?", "sql": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things", "source_tables": ["timed_status_of_things"]}}
{"sample_id": 4839, "db_id": "local_govt_and_lot", "final": {"question": "What is the maximum number that a certain service is provided? List the service id, details and number.", "sql": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["services", "residents_services"]}}
{"sample_id": 4837, "db_id": "local_govt_and_lot", "final": {"question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?", "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'", "source_tables": ["services", "organizations"]}}
{"sample_id": 4842, "db_id": "local_govt_and_lot", "final": {"question": "What is each customer's move in date, and the corresponding customer id and details?", "sql": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "customer_events"]}}
{"sample_id": 4850, "db_id": "local_govt_and_lot", "final": {"question": "List the customer event id and the corresponding move in date and property id.", "sql": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events", "source_tables": ["customer_events"]}}
{"sample_id": 4836, "db_id": "local_govt_and_lot", "final": {"question": "How many residents does each property have? List property id and resident count.", "sql": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id", "source_tables": ["residents", "properties"]}}
{"sample_id": 4838, "db_id": "local_govt_and_lot", "final": {"question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.", "sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC", "source_tables": ["residents_services", "residents"]}}
{"sample_id": 4844, "db_id": "local_govt_and_lot", "final": {"question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'", "source_tables": ["timed_status_of_things", "things"]}}
{"sample_id": 4843, "db_id": "local_govt_and_lot", "final": {"question": "Which events have the number of notes between one and three? List the event id and the property id.", "sql": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3", "source_tables": ["customer_event_notes", "customer_events"]}}
{"sample_id": 4849, "db_id": "local_govt_and_lot", "final": {"question": "What are the resident details containing the substring 'Miss'?", "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "source_tables": ["residents"]}}
{"sample_id": 4872, "db_id": "school_player", "final": {"question": "What are the team and the location of school each player belongs to?", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "source_tables": ["player", "school"]}}
{"sample_id": 4861, "db_id": "school_player", "final": {"question": "What is the average enrollment of schools?", "sql": "SELECT avg(Enrollment) FROM school", "source_tables": ["school"]}}
{"sample_id": 4881, "db_id": "school_player", "final": {"question": "Please show different denominations and the corresponding number of schools in descending order.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "source_tables": ["school"]}}
{"sample_id": 4884, "db_id": "school_player", "final": {"question": "What is the school color of the school with the largest enrollment?", "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "source_tables": ["school"]}}
{"sample_id": 4892, "db_id": "school_player", "final": {"question": "What are the denomination more than one school have?", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "source_tables": ["school"]}}
{"sample_id": 4877, "db_id": "school_player", "final": {"question": "Show locations and nicknames of schools.", "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID", "source_tables": ["school_details", "school"]}}
{"sample_id": 4860, "db_id": "school_player", "final": {"question": "List the enrollment for each school that does not have \"Catholic\" as denomination.", "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"", "source_tables": ["school"]}}
{"sample_id": 4879, "db_id": "school_player", "final": {"question": "Please show different denominations and the corresponding number of schools.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination", "source_tables": ["school"]}}
{"sample_id": 4857, "db_id": "school_player", "final": {"question": "List the locations of schools in descending order of founded year.", "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC", "source_tables": ["school"]}}
{"sample_id": 4887, "db_id": "school_player", "final": {"question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "source_tables": ["school"]}}
{"sample_id": 4890, "db_id": "school_player", "final": {"question": "What are the nicknames of schools whose division is not 1?", "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"", "source_tables": ["school_details"]}}
{"sample_id": 4873, "db_id": "school_player", "final": {"question": "Show the locations of schools that have more than 1 player.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "source_tables": ["player", "school"]}}
{"sample_id": 4859, "db_id": "school_player", "final": {"question": "What are the enrollments of schools whose denomination is not \"Catholic\"?", "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"", "source_tables": ["school"]}}
{"sample_id": 4856, "db_id": "school_player", "final": {"question": "What is the list of school locations sorted in ascending order of school enrollment?", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "source_tables": ["school"]}}
{"sample_id": 4889, "db_id": "school_player", "final": {"question": "Show the nicknames of schools that are not in division 1.", "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"", "source_tables": ["school_details"]}}
{"sample_id": 4880, "db_id": "school_player", "final": {"question": "For each denomination, return the denomination and the count of schools with that denomination.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination", "source_tables": ["school"]}}
{"sample_id": 4866, "db_id": "school_player", "final": {"question": "Count the number of distinct player positions.", "sql": "SELECT count(DISTINCT POSITION) FROM player", "source_tables": ["player"]}}
{"sample_id": 4865, "db_id": "school_player", "final": {"question": "How many different positions of players are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "source_tables": ["player"]}}
{"sample_id": 4853, "db_id": "school_player", "final": {"question": "How many schools are there?", "sql": "SELECT count(*) FROM school", "source_tables": ["school"]}}
{"sample_id": 4874, "db_id": "school_player", "final": {"question": "Which schools have more than 1 player? Give me the school locations.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "source_tables": ["player", "school"]}}
{"sample_id": 4876, "db_id": "school_player", "final": {"question": "What is the denomination of the school the most players belong to?", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["player", "school"]}}
{"sample_id": 4855, "db_id": "school_player", "final": {"question": "List the locations of schools in ascending order of enrollment.", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "source_tables": ["school"]}}
{"sample_id": 4888, "db_id": "school_player", "final": {"question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "source_tables": ["school"]}}
{"sample_id": 4858, "db_id": "school_player", "final": {"question": "What is the list of school locations sorted in descending order of school foundation year?", "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC", "source_tables": ["school"]}}
{"sample_id": 4909, "db_id": "store_product", "final": {"question": "Find the names of all stores in Khanewal District.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4936, "db_id": "store_product", "final": {"question": "What are the names of the districts that have both mall and village store style shops?", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4902, "db_id": "store_product", "final": {"question": "What is the name of the district with the most residents?", "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "source_tables": ["district"]}}
{"sample_id": 4918, "db_id": "store_product", "final": {"question": "What is the city with the most number of flagship stores?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4927, "db_id": "store_product", "final": {"question": "Find all the product whose name contains the word \"Scanner\".", "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"", "source_tables": ["product"]}}
{"sample_id": 4930, "db_id": "store_product", "final": {"question": "What is the most common maximum page size?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product"]}}
{"sample_id": 4901, "db_id": "store_product", "final": {"question": "Which district has the largest population?", "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "source_tables": ["district"]}}
{"sample_id": 4935, "db_id": "store_product", "final": {"question": "Find the names of districts where have both city mall and village store type stores.", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4895, "db_id": "store_product", "final": {"question": "Find the list of page size which have more than 3 product listed", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3", "source_tables": ["product"]}}
{"sample_id": 4896, "db_id": "store_product", "final": {"question": "What is the maximum page size for everything that has more than 3 products listed?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3", "source_tables": ["product"]}}
{"sample_id": 4926, "db_id": "store_product", "final": {"question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "source_tables": ["product"]}}
{"sample_id": 4912, "db_id": "store_product", "final": {"question": "What are the names of all the stores in the largest district by population?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4911, "db_id": "store_product", "final": {"question": "Find all the stores in the district with the most population.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4932, "db_id": "store_product", "final": {"question": "What are the names of all products that are not the most frequently-used maximum page size?", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product"]}}
{"sample_id": 4903, "db_id": "store_product", "final": {"question": "Which district has the least area?", "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "source_tables": ["district"]}}
{"sample_id": 4928, "db_id": "store_product", "final": {"question": "What are all of the products whose name includes the substring \"Scanner\"?", "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"", "source_tables": ["product"]}}
{"sample_id": 4894, "db_id": "store_product", "final": {"question": "What are the different district names in order of descending city area?", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "source_tables": ["district"]}}
{"sample_id": 4921, "db_id": "store_product", "final": {"question": "What products are available at store named \"Miramichi\"?", "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"", "source_tables": ["store_product", "store", "product"]}}
{"sample_id": 4919, "db_id": "store_product", "final": {"question": "What is the average pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product", "source_tables": ["product"]}}
{"sample_id": 4905, "db_id": "store_product", "final": {"question": "Find the total population of the top 3 districts with the largest area.", "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "source_tables": ["district"]}}
{"sample_id": 4915, "db_id": "store_product", "final": {"question": "Find the number of stores in each city.", "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4899, "db_id": "store_product", "final": {"question": "Find the name all districts with city area greater than 10 or population larger than 100000", "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000", "source_tables": ["district"]}}
{"sample_id": 4933, "db_id": "store_product", "final": {"question": "Find the total population of the districts where the area is bigger than the average city area.", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "source_tables": ["district"]}}
{"sample_id": 4922, "db_id": "store_product", "final": {"question": "What products are sold at the store named Miramichi?", "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"", "source_tables": ["store_product", "store", "product"]}}
{"sample_id": 4923, "db_id": "store_product", "final": {"question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5", "source_tables": ["product"]}}
{"sample_id": 4917, "db_id": "store_product", "final": {"question": "Find the city with the most number of stores.", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4949, "db_id": "soccer_2", "final": {"question": "Find the name and training hours of players whose hours are below 1500.", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "source_tables": ["player"]}}
{"sample_id": 4972, "db_id": "soccer_2", "final": {"question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "source_tables": ["college"]}}
{"sample_id": 4945, "db_id": "soccer_2", "final": {"question": "How many colleges has more than 15000 students?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "source_tables": ["college"]}}
{"sample_id": 5034, "db_id": "soccer_2", "final": {"question": "What are the names of the colleges that are larger than at least one college in Florida?", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 4977, "db_id": "soccer_2", "final": {"question": "Which position is most popular among players in the tryout?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "source_tables": ["tryout"]}}
{"sample_id": 4938, "db_id": "soccer_2", "final": {"question": "How many students are enrolled in college?", "sql": "SELECT sum(enr) FROM College", "source_tables": ["college"]}}
{"sample_id": 4989, "db_id": "soccer_2", "final": {"question": "Find the states where have some college students in tryout and their decisions are yes.", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5024, "db_id": "soccer_2", "final": {"question": "How many schools have students playing in goalie and mid-field positions?", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "source_tables": ["tryout"]}}
{"sample_id": 4982, "db_id": "soccer_2", "final": {"question": "For each position, what is the minimum time students spent practicing?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "source_tables": ["player", "tryout"]}}
{"sample_id": 4969, "db_id": "soccer_2", "final": {"question": "List all information about college sorted by enrollment number in the ascending order.", "sql": "SELECT * FROM College ORDER BY enr", "source_tables": ["college"]}}
{"sample_id": 4942, "db_id": "soccer_2", "final": {"question": "How many different colleges are there?", "sql": "SELECT count(*) FROM College", "source_tables": ["college"]}}
{"sample_id": 5037, "db_id": "soccer_2", "final": {"question": "What is the total number of enrollment of schools that do not have any goalie player?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "source_tables": ["college", "tryout"]}}
{"sample_id": 5026, "db_id": "soccer_2", "final": {"question": "What are the names of the schools with some players in the mid position but no goalies?", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 4975, "db_id": "soccer_2", "final": {"question": "Find the name of different colleges involved in the tryout in alphabetical order.", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "source_tables": ["tryout"]}}
{"sample_id": 5009, "db_id": "soccer_2", "final": {"question": "Which colleges do the tryout players whose name starts with letter D go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4970, "db_id": "soccer_2", "final": {"question": "What information do you have on colleges sorted by increasing enrollment numbers?", "sql": "SELECT * FROM College ORDER BY enr", "source_tables": ["college"]}}
{"sample_id": 4992, "db_id": "soccer_2", "final": {"question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4952, "db_id": "soccer_2", "final": {"question": "How many different colleges were represented at tryouts?", "sql": "SELECT count(DISTINCT cName) FROM tryout", "source_tables": ["tryout"]}}
{"sample_id": 5003, "db_id": "soccer_2", "final": {"question": "Find the average and maximum hours for the students whose tryout decision is yes.", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4993, "db_id": "soccer_2", "final": {"question": "Find the name of all students who were in the tryout sorted in alphabetic order.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "source_tables": ["player", "tryout"]}}
{"sample_id": 4962, "db_id": "soccer_2", "final": {"question": "What is average number of students enrolled in Florida colleges?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "source_tables": ["college"]}}
{"sample_id": 4976, "db_id": "soccer_2", "final": {"question": "What are the different names of the colleges involved in the tryout in alphabetical order?", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "source_tables": ["tryout"]}}
{"sample_id": 4998, "db_id": "soccer_2", "final": {"question": "What are the states of the colleges where students who tried out for the striker position attend?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "source_tables": ["college", "tryout"]}}
{"sample_id": 4953, "db_id": "soccer_2", "final": {"question": "What are the unique types of player positions in the tryout?", "sql": "SELECT count(DISTINCT pPos) FROM tryout", "source_tables": ["tryout"]}}
{"sample_id": 5032, "db_id": "soccer_2", "final": {"question": "What are the states with colleges that have enrollments less than the some other college?", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 4981, "db_id": "soccer_2", "final": {"question": "What is minimum hours of the students playing in different position?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "source_tables": ["player", "tryout"]}}
{"sample_id": 5012, "db_id": "soccer_2", "final": {"question": "What college has a student who successfully made the team in the role of a goalie?", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 4973, "db_id": "soccer_2", "final": {"question": "Find the name of players whose card is yes in the descending order of training hours.", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "source_tables": ["player"]}}
{"sample_id": 4996, "db_id": "soccer_2", "final": {"question": "What are the names and hours spent practicing of every student who received a yes at tryouts?", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4944, "db_id": "soccer_2", "final": {"question": "How many different players trained for more than 1000 hours?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "source_tables": ["player"]}}
{"sample_id": 4951, "db_id": "soccer_2", "final": {"question": "How many different colleges do attend the tryout test?", "sql": "SELECT count(DISTINCT cName) FROM tryout", "source_tables": ["tryout"]}}
{"sample_id": 5035, "db_id": "soccer_2", "final": {"question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 5025, "db_id": "soccer_2", "final": {"question": "Find the names of schools that have some players in the mid position but not in the goalie position.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 4943, "db_id": "soccer_2", "final": {"question": "How many players have more than 1000 hours of training?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "source_tables": ["player"]}}
{"sample_id": 4937, "db_id": "soccer_2", "final": {"question": "What is the total enrollment number of all colleges?", "sql": "SELECT sum(enr) FROM College", "source_tables": ["college"]}}
{"sample_id": 5031, "db_id": "soccer_2", "final": {"question": "Find the states where have the colleges whose enrollments are less than the largest size.", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 4958, "db_id": "soccer_2", "final": {"question": "What is the number of students playing as a goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 5020, "db_id": "soccer_2", "final": {"question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "source_tables": ["tryout"]}}
{"sample_id": 4988, "db_id": "soccer_2", "final": {"question": "What are the different states that have students trying out?", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "source_tables": ["college", "tryout"]}}
{"sample_id": 4980, "db_id": "soccer_2", "final": {"question": "How many students participated in tryouts for each college by descennding count?", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "source_tables": ["tryout"]}}
{"sample_id": 5001, "db_id": "soccer_2", "final": {"question": "Find the state of the college which player Charles is attending.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "source_tables": ["college", "player", "tryout"]}}
{"sample_id": 5038, "db_id": "soccer_2", "final": {"question": "What is the total number of students enrolled in schools without any goalies?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "source_tables": ["college", "tryout"]}}
{"sample_id": 5006, "db_id": "soccer_2", "final": {"question": "What is the average number of hours spent practicing for students who got rejected?", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4959, "db_id": "soccer_2", "final": {"question": "Find the max, average and min training hours of all players.", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "source_tables": ["player"]}}
{"sample_id": 4983, "db_id": "soccer_2", "final": {"question": "What are the names of schools with the top 3 largest size?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "source_tables": ["college"]}}
{"sample_id": 4963, "db_id": "soccer_2", "final": {"question": "What are the names of players whose training hours is between 500 and 1500?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "source_tables": ["player"]}}
{"sample_id": 4954, "db_id": "soccer_2", "final": {"question": "What are the different types of player positions?", "sql": "SELECT count(DISTINCT pPos) FROM tryout", "source_tables": ["tryout"]}}
{"sample_id": 5000, "db_id": "soccer_2", "final": {"question": "What are the names of all students who successfully tried out for the position of striker?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "source_tables": ["player", "tryout"]}}
{"sample_id": 5028, "db_id": "soccer_2", "final": {"question": "What are the names of all the states with college students playing in the mid position but no goalies?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5017, "db_id": "soccer_2", "final": {"question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "source_tables": ["college"]}}
{"sample_id": 4950, "db_id": "soccer_2", "final": {"question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "source_tables": ["player"]}}
{"sample_id": 5008, "db_id": "soccer_2", "final": {"question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "source_tables": ["player", "tryout"]}}
{"sample_id": 5033, "db_id": "soccer_2", "final": {"question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 5007, "db_id": "soccer_2", "final": {"question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "source_tables": ["player", "tryout"]}}
{"sample_id": 4978, "db_id": "soccer_2", "final": {"question": "What was the most popular position at tryouts?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "source_tables": ["tryout"]}}
{"sample_id": 5029, "db_id": "soccer_2", "final": {"question": "How many states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "source_tables": ["college", "tryout"]}}
{"sample_id": 5039, "db_id": "soccer_2", "final": {"question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 4940, "db_id": "soccer_2", "final": {"question": "How many students, on average, does each college have enrolled?", "sql": "SELECT avg(enr) FROM College", "source_tables": ["college"]}}
{"sample_id": 4986, "db_id": "soccer_2", "final": {"question": "What is the name of the school with smallest enrollment size per state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "source_tables": ["college"]}}
{"sample_id": 4948, "db_id": "soccer_2", "final": {"question": "How many hours do the players train on average?", "sql": "SELECT avg(HS) FROM Player", "source_tables": ["player"]}}
{"sample_id": 5040, "db_id": "soccer_2", "final": {"question": "How many states have a college with more students than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 4987, "db_id": "soccer_2", "final": {"question": "Find the states where have some college students in tryout.", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "source_tables": ["college", "tryout"]}}
{"sample_id": 4941, "db_id": "soccer_2", "final": {"question": "How many colleges in total?", "sql": "SELECT count(*) FROM College", "source_tables": ["college"]}}
{"sample_id": 5067, "db_id": "device", "final": {"question": "Show the name of the shop that have the largest quantity of devices in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "source_tables": ["stock", "shop"]}}
{"sample_id": 5061, "db_id": "device", "final": {"question": "Show names of shops and the carriers of devices they have in stock.", "sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID", "source_tables": ["stock", "device", "shop"]}}
{"sample_id": 5052, "db_id": "device", "final": {"question": "Give the average quantity of stocks.", "sql": "SELECT avg(Quantity) FROM stock", "source_tables": ["stock"]}}
{"sample_id": 5054, "db_id": "device", "final": {"question": "Return the names and locations of shops, ordered by name in alphabetical order.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "source_tables": ["shop"]}}
{"sample_id": 5048, "db_id": "device", "final": {"question": "Return the device carriers that do not have Android as their software platform.", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "source_tables": ["device"]}}
{"sample_id": 5043, "db_id": "device", "final": {"question": "How many devices are there?", "sql": "SELECT count(*) FROM device", "source_tables": ["device"]}}
{"sample_id": 5081, "db_id": "device", "final": {"question": "Show the carriers of devices in stock at more than one shop.", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "source_tables": ["stock", "device"]}}
{"sample_id": 5060, "db_id": "device", "final": {"question": "What is the shop name corresponding to the shop that opened in the most recent year?", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "source_tables": ["shop"]}}
{"sample_id": 5046, "db_id": "device", "final": {"question": "What are the different carriers for devices, listed in alphabetical order?", "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC", "source_tables": ["device"]}}
{"sample_id": 5070, "db_id": "device", "final": {"question": "What are the different software platforms for devices, and how many devices have each?", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "source_tables": ["device"]}}
{"sample_id": 5045, "db_id": "device", "final": {"question": "List the carriers of devices in ascending alphabetical order.", "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC", "source_tables": ["device"]}}
{"sample_id": 5051, "db_id": "device", "final": {"question": "What is the average quantity of stocks?", "sql": "SELECT avg(Quantity) FROM stock", "source_tables": ["stock"]}}
{"sample_id": 5072, "db_id": "device", "final": {"question": "What are the different software platforms for devices, ordered by frequency descending?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "source_tables": ["device"]}}
{"sample_id": 5063, "db_id": "device", "final": {"question": "Show names of shops that have more than one kind of device in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "source_tables": ["stock", "shop"]}}
{"sample_id": 5047, "db_id": "device", "final": {"question": "What are the carriers of devices whose software platforms are not \"Android\"?", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "source_tables": ["device"]}}
{"sample_id": 5076, "db_id": "device", "final": {"question": "What are the names of shops that do not have any devices in stock?", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "source_tables": ["stock", "shop"]}}
{"sample_id": 5073, "db_id": "device", "final": {"question": "List the software platform shared by the greatest number of devices.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["device"]}}
{"sample_id": 5057, "db_id": "device", "final": {"question": "List the open date of open year of the shop named \"Apple\".", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "source_tables": ["shop"]}}
{"sample_id": 5055, "db_id": "device", "final": {"question": "How many different software platforms are there for devices?", "sql": "SELECT count(DISTINCT Software_Platform) FROM device", "source_tables": ["device"]}}
{"sample_id": 5066, "db_id": "device", "final": {"question": "What is the name of the shop that has the most different kinds of devices in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["stock", "shop"]}}
{"sample_id": 5049, "db_id": "device", "final": {"question": "What are the names of shops in ascending order of open year?", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "source_tables": ["shop"]}}
{"sample_id": 5082, "db_id": "device", "final": {"question": "What are the carriers of devices that are in stock in more than a single shop?", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "source_tables": ["stock", "device"]}}
{"sample_id": 5056, "db_id": "device", "final": {"question": "Count the number of different software platforms.", "sql": "SELECT count(DISTINCT Software_Platform) FROM device", "source_tables": ["device"]}}
{"sample_id": 5058, "db_id": "device", "final": {"question": "What are the open dates and years for the shop named Apple?", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "source_tables": ["shop"]}}
{"sample_id": 5156, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"", "source_tables": ["drama_workshop_groups", "bookings"]}}
{"sample_id": 5159, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"", "source_tables": ["invoices"]}}
{"sample_id": 5109, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all payment method codes and the number of orders for each code.", "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code", "source_tables": ["invoices"]}}
{"sample_id": 5160, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"", "source_tables": ["invoices"]}}
{"sample_id": 5103, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the name of the most expensive product?", "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5123, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the description and code of the type of service that is performed the most often?", "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5136, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the order detail for the products with price above 2000.", "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000", "source_tables": ["order_items", "products"]}}
{"sample_id": 5120, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Give me the descriptions of the service types that cost more than 100.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5091, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the phone and email for customer Harold?", "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"", "source_tables": ["customers"]}}
{"sample_id": 5130, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "For each distinct product name, show its average product price.", "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "source_tables": ["products"]}}
{"sample_id": 5145, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the email addresses of the drama workshop groups with address in Alaska state?", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5158, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of the clients who do not have any booking?", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "source_tables": ["clients", "bookings"]}}
{"sample_id": 5083, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "How many bookings do we have?", "sql": "SELECT count(*) FROM BOOKINGS", "source_tables": ["bookings"]}}
{"sample_id": 5089, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "How many customers do we have?", "sql": "SELECT count(*) FROM CUSTOMERS", "source_tables": ["customers"]}}
{"sample_id": 5143, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of the drama workshop groups with address in Feliciaberg city?", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5151, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all cities where at least one customer lives in but no performer lives in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "source_tables": ["customers", "performers", "addresses"]}}
{"sample_id": 5098, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show me the distinct payment method codes from the invoice record.", "sql": "SELECT DISTINCT payment_method_code FROM INVOICES", "source_tables": ["invoices"]}}
{"sample_id": 5162, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the id of the product ordered the most often on invoices.", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["invoices"]}}
{"sample_id": 5142, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the number of distinct currency codes used in drama workshop groups.", "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5107, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the phone number of the performer Ashley?", "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"", "source_tables": ["performers"]}}
{"sample_id": 5161, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the product ID of the most frequently ordered item on invoices?", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["invoices"]}}
{"sample_id": 5149, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the marketing region code that has the most drama workshop groups?", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5088, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the planned delivery date and actual delivery date for each booking?", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "source_tables": ["bookings"]}}
{"sample_id": 5087, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all the planned delivery dates and actual delivery dates of bookings.", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "source_tables": ["bookings"]}}
{"sample_id": 5096, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "source_tables": ["invoices"]}}
{"sample_id": 5133, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the total order quantities of photo products?", "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"", "source_tables": ["order_items", "products"]}}
{"sample_id": 5129, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the different product names? What is the average product price for each of them?", "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "source_tables": ["products"]}}
{"sample_id": 5084, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Count the total number of bookings made.", "sql": "SELECT count(*) FROM BOOKINGS", "source_tables": ["bookings"]}}
{"sample_id": 5127, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of workshop groups in which services with product name \"film\" are performed?", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"", "source_tables": ["services", "drama_workshop_groups"]}}
{"sample_id": 5163, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the description of the service type which offers both the photo product and the film product?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5115, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?", "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"", "source_tables": ["stores", "addresses"]}}
{"sample_id": 5117, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the name of the marketing region that the store Rob Dinning belongs to?", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "source_tables": ["marketing_regions", "stores"]}}
{"sample_id": 5106, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Sort the names of products in ascending order of their price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "source_tables": ["products"]}}
{"sample_id": 5100, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the marketing region description of China?", "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"", "source_tables": ["marketing_regions"]}}
{"sample_id": 5113, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which city is the address of the store named \"FJA Filming\" located in?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "source_tables": ["stores", "addresses"]}}
{"sample_id": 5086, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the order date of each booking?", "sql": "SELECT Order_Date FROM BOOKINGS", "source_tables": ["bookings"]}}
{"sample_id": 5104, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Tell me the name of the most pricy product.", "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5108, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the phone number of performer \"Ashley\".", "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"", "source_tables": ["performers"]}}
{"sample_id": 5141, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "How many distinct currency codes are there for all drama workshop groups?", "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5125, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the phones and emails of workshop groups in which services are performed?", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "source_tables": ["services", "drama_workshop_groups"]}}
{"sample_id": 5147, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all cities along with the number of drama workshop groups in each city.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5095, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show the minimum, average, maximum order quantity of all invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "source_tables": ["invoices"]}}
{"sample_id": 5118, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Return the name of the marketing region the store Rob Dinning is located in.", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "source_tables": ["marketing_regions", "stores"]}}
{"sample_id": 5110, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "List the distinct payment method codes with the number of orders made", "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code", "source_tables": ["invoices"]}}
{"sample_id": 5121, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the description, code and the corresponding count of each service type?", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5148, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "How many drama workshop groups are there in each city? Return both the city and the count.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5112, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the payment method that is used the most often in all the invoices. Give me its code.", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["invoices"]}}
{"sample_id": 5157, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show the names of all the clients with no booking.", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "source_tables": ["clients", "bookings"]}}
{"sample_id": 5138, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "List the actual delivery date for all the orders with quantity 1", "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 5199, "db_id": "music_2", "final": {"question": "What is the most used instrument?", "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1", "source_tables": ["instruments"]}}
{"sample_id": 5193, "db_id": "music_2", "final": {"question": "Find all the songs whose name contains the word \"the\".", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "source_tables": ["songs"]}}
{"sample_id": 5197, "db_id": "music_2", "final": {"question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "source_tables": ["songs", "instruments", "performance", "band"]}}
{"sample_id": 5187, "db_id": "music_2", "final": {"question": "What is the label that has the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "source_tables": ["albums"]}}
{"sample_id": 5214, "db_id": "music_2", "final": {"question": "What is the type of vocables that appears most frequently?", "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals"]}}
{"sample_id": 5210, "db_id": "music_2", "final": {"question": "What are all the instruments used by the musician with the last name \"Heilo\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "source_tables": ["instruments", "band"]}}
{"sample_id": 5216, "db_id": "music_2", "final": {"question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "band"]}}
{"sample_id": 5175, "db_id": "music_2", "final": {"question": "Find all the songs performed by artist with last name \"Heilo\"", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5249, "db_id": "music_2", "final": {"question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"", "source_tables": ["vocals", "songs", "band"]}}
{"sample_id": 5220, "db_id": "music_2", "final": {"question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5206, "db_id": "music_2", "final": {"question": "How many different instruments are used in the song \"Le Pop\"?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["songs", "instruments"]}}
{"sample_id": 5231, "db_id": "music_2", "final": {"question": "Who performed the song named \"Le Pop\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5165, "db_id": "music_2", "final": {"question": "How many bands are there?", "sql": "SELECT count(*) FROM Band", "source_tables": ["band"]}}
{"sample_id": 5166, "db_id": "music_2", "final": {"question": "Find the number of bands.", "sql": "SELECT count(*) FROM Band", "source_tables": ["band"]}}
{"sample_id": 5247, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "band"]}}
{"sample_id": 5257, "db_id": "music_2", "final": {"question": "Find the name of songs that does not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5236, "db_id": "music_2", "final": {"question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "source_tables": ["songs", "instruments", "performance", "band"]}}
{"sample_id": 5230, "db_id": "music_2", "final": {"question": "What information is there on albums from 2010?", "sql": "SELECT * FROM Albums WHERE YEAR  =  2010", "source_tables": ["albums"]}}
{"sample_id": 5217, "db_id": "music_2", "final": {"question": "What are the vocal types used in song \"Le Pop\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5171, "db_id": "music_2", "final": {"question": "Find all the stage positions of the musicians with first name \"Solveig\"", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "source_tables": ["performance", "band"]}}
{"sample_id": 5188, "db_id": "music_2", "final": {"question": "What is the label with the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "source_tables": ["albums"]}}
{"sample_id": 5185, "db_id": "music_2", "final": {"question": "How many unique labels are there for albums?", "sql": "SELECT count(DISTINCT label) FROM albums", "source_tables": ["albums"]}}
{"sample_id": 5250, "db_id": "music_2", "final": {"question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"", "source_tables": ["vocals", "songs", "band"]}}
{"sample_id": 5248, "db_id": "music_2", "final": {"question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "band"]}}
{"sample_id": 5169, "db_id": "music_2", "final": {"question": "Find all the albums in 2012.", "sql": "SELECT * FROM Albums WHERE YEAR  =  2012", "source_tables": ["albums"]}}
{"sample_id": 5256, "db_id": "music_2", "final": {"question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5176, "db_id": "music_2", "final": {"question": "What are the names of the songs by the artist whose last name is \"Heilo\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5191, "db_id": "music_2", "final": {"question": "What is the last name of the musician that has been at the back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["performance", "band"]}}
{"sample_id": 5218, "db_id": "music_2", "final": {"question": "What are the types of vocals used in the song \"Le Pop\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5174, "db_id": "music_2", "final": {"question": "Count the number of songs.", "sql": "SELECT count(*) FROM Songs", "source_tables": ["songs"]}}
{"sample_id": 5205, "db_id": "music_2", "final": {"question": "How many instruments does the song \"Le Pop\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["songs", "instruments"]}}
{"sample_id": 5225, "db_id": "music_2", "final": {"question": "Find all the songs that do not have a lead vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5234, "db_id": "music_2", "final": {"question": "What is the last name of the artist who sang the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5239, "db_id": "music_2", "final": {"question": "What are the vocal types used in song \"Badlands\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5200, "db_id": "music_2", "final": {"question": "What instrument is used the most?", "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1", "source_tables": ["instruments"]}}
{"sample_id": 5215, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with last name \"Heilo\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "band"]}}
{"sample_id": 5252, "db_id": "music_2", "final": {"question": "What is the first name of the band mate who perfomed in the most songs?", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5186, "db_id": "music_2", "final": {"question": "What are the unique labels for the albums?", "sql": "SELECT count(DISTINCT label) FROM albums", "source_tables": ["albums"]}}
{"sample_id": 5238, "db_id": "music_2", "final": {"question": "How many different instruments are used in the song \"Badlands\"?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "source_tables": ["songs", "instruments"]}}
{"sample_id": 5198, "db_id": "music_2", "final": {"question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "source_tables": ["songs", "instruments", "performance", "band"]}}
{"sample_id": 5207, "db_id": "music_2", "final": {"question": "How many instrument does the musician with last name \"Heilo\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "source_tables": ["instruments", "band"]}}
{"sample_id": 5228, "db_id": "music_2", "final": {"question": "What are the different types of vocals?", "sql": "SELECT DISTINCT TYPE FROM vocals", "source_tables": ["vocals"]}}
{"sample_id": 5167, "db_id": "music_2", "final": {"question": "What are all the labels?", "sql": "SELECT DISTINCT label FROM Albums", "source_tables": ["albums"]}}
{"sample_id": 5194, "db_id": "music_2", "final": {"question": "What are the names of the songs whose title has the word \"the\"?", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "source_tables": ["songs"]}}
{"sample_id": 5192, "db_id": "music_2", "final": {"question": "What is the last name of the musicians who has played back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["performance", "band"]}}
{"sample_id": 5211, "db_id": "music_2", "final": {"question": "Which song has the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5242, "db_id": "music_2", "final": {"question": "How many vocal types are used in the song \"Le Pop\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5251, "db_id": "music_2", "final": {"question": "Find the first name of the band mate that has performed in most songs.", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5222, "db_id": "music_2", "final": {"question": "How many songs have vocals of type lead?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5189, "db_id": "music_2", "final": {"question": "What is the last name of the musician that have produced the most number of songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5172, "db_id": "music_2", "final": {"question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "source_tables": ["performance", "band"]}}
{"sample_id": 5233, "db_id": "music_2", "final": {"question": "What is the last name of the musician that have produced the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5168, "db_id": "music_2", "final": {"question": "What are the different album labels listed?", "sql": "SELECT DISTINCT label FROM Albums", "source_tables": ["albums"]}}
{"sample_id": 5195, "db_id": "music_2", "final": {"question": "What are all the instruments used?", "sql": "SELECT DISTINCT instrument FROM Instruments", "source_tables": ["instruments"]}}
{"sample_id": 5178, "db_id": "music_2", "final": {"question": "How many musicians play in the song \"Flash\"?", "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5190, "db_id": "music_2", "final": {"question": "What is the last name of the musician who was in the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5221, "db_id": "music_2", "final": {"question": "How many songs have a lead vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5229, "db_id": "music_2", "final": {"question": "What are the albums produced in year 2010?", "sql": "SELECT * FROM Albums WHERE YEAR  =  2010", "source_tables": ["albums"]}}
{"sample_id": 5183, "db_id": "music_2", "final": {"question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5170, "db_id": "music_2", "final": {"question": "return all columns of the albums created in the year of 2012.", "sql": "SELECT * FROM Albums WHERE YEAR  =  2012", "source_tables": ["albums"]}}
{"sample_id": 5301, "db_id": "manufactory_1", "final": {"question": "Find the name and revenue of the company that earns the highest revenue in each city.", "sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter", "source_tables": ["manufacturers"]}}
{"sample_id": 5329, "db_id": "manufactory_1", "final": {"question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "source_tables": ["products"]}}
{"sample_id": 5289, "db_id": "manufactory_1", "final": {"question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.", "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "source_tables": ["manufacturers"]}}
{"sample_id": 5268, "db_id": "manufactory_1", "final": {"question": "What is the headquarter of the company whose founder is James?", "sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'", "source_tables": ["manufacturers"]}}
{"sample_id": 5335, "db_id": "manufactory_1", "final": {"question": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5286, "db_id": "manufactory_1", "final": {"question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'", "source_tables": ["manufacturers"]}}
{"sample_id": 5293, "db_id": "manufactory_1", "final": {"question": "Find the name of companies whose revenue is greater than the average revenue of all companies.", "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)", "source_tables": ["manufacturers"]}}
{"sample_id": 5288, "db_id": "manufactory_1", "final": {"question": "What are the names of products produced by both Creative Labs and Sony?", "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5337, "db_id": "manufactory_1", "final": {"question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5282, "db_id": "manufactory_1", "final": {"question": "Who is the founders of companies whose first letter is S?", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "source_tables": ["manufacturers"]}}
{"sample_id": 5305, "db_id": "manufactory_1", "final": {"question": "Find the average prices of all products from each manufacture, and list each company's name.", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5267, "db_id": "manufactory_1", "final": {"question": "Where is the headquarter of the company founded by James?", "sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'", "source_tables": ["manufacturers"]}}
{"sample_id": 5269, "db_id": "manufactory_1", "final": {"question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "source_tables": ["manufacturers"]}}
{"sample_id": 5321, "db_id": "manufactory_1", "final": {"question": "Find all information of all the products with a price between $60 and $120.", "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "source_tables": ["products"]}}
{"sample_id": 5333, "db_id": "manufactory_1", "final": {"question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "source_tables": ["products"]}}
{"sample_id": 5284, "db_id": "manufactory_1", "final": {"question": "What are the names of companies with revenue between 100 and 150?", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "source_tables": ["manufacturers"]}}
{"sample_id": 5270, "db_id": "manufactory_1", "final": {"question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "source_tables": ["manufacturers"]}}
{"sample_id": 5290, "db_id": "manufactory_1", "final": {"question": "What are the names, headquarters and founders of the company with the highest revenue?", "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "source_tables": ["manufacturers"]}}
{"sample_id": 5342, "db_id": "manufactory_1", "final": {"question": "For each manufacturer name, what are the names and prices of their most expensive product?", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5322, "db_id": "manufactory_1", "final": {"question": "What is all the information of all the products that have a price between 60 and 120?", "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "source_tables": ["products"]}}
{"sample_id": 5324, "db_id": "manufactory_1", "final": {"question": "What is the average price across all products?", "sql": "SELECT avg(price) FROM products", "source_tables": ["products"]}}
{"sample_id": 5271, "db_id": "manufactory_1", "final": {"question": "What are the average, maximum and total revenues of all companies?", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "source_tables": ["manufacturers"]}}
{"sample_id": 5313, "db_id": "manufactory_1", "final": {"question": "Find the number of products for each manufacturer, showing the name of each company.", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5320, "db_id": "manufactory_1", "final": {"question": "What are the names of products with price at most 200?", "sql": "SELECT name FROM products WHERE price  <=  200", "source_tables": ["products"]}}
{"sample_id": 5315, "db_id": "manufactory_1", "final": {"question": "Select the names of all the products in the store.", "sql": "SELECT Name FROM Products", "source_tables": ["products"]}}
{"sample_id": 5302, "db_id": "manufactory_1", "final": {"question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?", "sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter", "source_tables": ["manufacturers"]}}
{"sample_id": 5306, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products for each manufacturer?", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5314, "db_id": "manufactory_1", "final": {"question": "How many products are there for each manufacturer?", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5300, "db_id": "manufactory_1", "final": {"question": "What is the total revenue of companies started by founder?", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "source_tables": ["manufacturers"]}}
{"sample_id": 5311, "db_id": "manufactory_1", "final": {"question": "Find the name of companies that do not make DVD drive.", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5291, "db_id": "manufactory_1", "final": {"question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.", "sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC", "source_tables": ["manufacturers"]}}
{"sample_id": 5328, "db_id": "manufactory_1", "final": {"question": "How many products have prices of at least 180?", "sql": "SELECT count(*) FROM products WHERE price >= 180", "source_tables": ["products"]}}
{"sample_id": 5341, "db_id": "manufactory_1", "final": {"question": "Select the name of each manufacturer along with the name and price of its most expensive product.", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5278, "db_id": "manufactory_1", "final": {"question": "Give the distinct headquarters of manufacturers.", "sql": "SELECT DISTINCT headquarter FROM manufacturers", "source_tables": ["manufacturers"]}}
{"sample_id": 5343, "db_id": "manufactory_1", "final": {"question": "Select the code of the product that is cheapest in each product category.", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "source_tables": ["products"]}}
{"sample_id": 5276, "db_id": "manufactory_1", "final": {"question": "What is the sum of revenue from companies with headquarters in Austin?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'", "source_tables": ["manufacturers"]}}
{"sample_id": 5318, "db_id": "manufactory_1", "final": {"question": "What are the names and prices of all products in the store?", "sql": "SELECT name ,  price FROM products", "source_tables": ["products"]}}
{"sample_id": 5296, "db_id": "manufactory_1", "final": {"question": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?", "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "source_tables": ["manufacturers"]}}
{"sample_id": 5309, "db_id": "manufactory_1", "final": {"question": "Find number of products which Sony does not make.", "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5334, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products, grouped by manufacturer code?", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "source_tables": ["products"]}}
{"sample_id": 5298, "db_id": "manufactory_1", "final": {"question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "source_tables": ["manufacturers"]}}
{"sample_id": 5275, "db_id": "manufactory_1", "final": {"question": "Find the total revenue created by the companies whose headquarter is located at Austin.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'", "source_tables": ["manufacturers"]}}
{"sample_id": 5299, "db_id": "manufactory_1", "final": {"question": "Find the total revenue of companies of each founder.", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "source_tables": ["manufacturers"]}}
{"sample_id": 5265, "db_id": "manufactory_1", "final": {"question": "Who is the founder of Sony?", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "source_tables": ["manufacturers"]}}
{"sample_id": 5317, "db_id": "manufactory_1", "final": {"question": "Select the names and the prices of all the products in the store.", "sql": "SELECT name ,  price FROM products", "source_tables": ["products"]}}
{"sample_id": 5297, "db_id": "manufactory_1", "final": {"question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "source_tables": ["manufacturers"]}}
{"sample_id": 5326, "db_id": "manufactory_1", "final": {"question": "What is the average price of products with manufacturer codes equal to 2?", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "source_tables": ["products"]}}
{"sample_id": 5344, "db_id": "manufactory_1", "final": {"question": "What are the codes and names of the cheapest products in each category?", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "source_tables": ["products"]}}
{"sample_id": 5373, "db_id": "tracking_software_problems", "final": {"question": "List the names of all the distinct product names in alphabetical order?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "source_tables": ["product"]}}
{"sample_id": 5355, "db_id": "tracking_software_problems", "final": {"question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "source_tables": ["staff", "problem_log"]}}
{"sample_id": 5349, "db_id": "tracking_software_problems", "final": {"question": "Find all the ids and dates of the logs for the problem whose id is 10.", "sql": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10", "source_tables": ["problem_log"]}}
{"sample_id": 5351, "db_id": "tracking_software_problems", "final": {"question": "List all the log ids and their descriptions from the problem logs.", "sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log", "source_tables": ["problem_log"]}}
{"sample_id": 5371, "db_id": "tracking_software_problems", "final": {"question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "source_tables": ["problems", "product"]}}
{"sample_id": 5369, "db_id": "tracking_software_problems", "final": {"question": "For each product which has problems, what are the number of problems and the product id?", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "source_tables": ["problems", "product"]}}
{"sample_id": 5368, "db_id": "tracking_software_problems", "final": {"question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "source_tables": ["problems"]}}
{"sample_id": 5376, "db_id": "tracking_software_problems", "final": {"question": "What is the list of distinct product names sorted by product id?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "source_tables": ["product"]}}
{"sample_id": 5386, "db_id": "tracking_software_problems", "final": {"question": "What are the three products that have the most problems?s", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["problems", "product"]}}
{"sample_id": 5389, "db_id": "tracking_software_problems", "final": {"question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "source_tables": ["staff", "problems", "product"]}}
{"sample_id": 5391, "db_id": "tracking_software_problems", "final": {"question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"", "source_tables": ["staff", "problems", "product"]}}
{"sample_id": 5377, "db_id": "tracking_software_problems", "final": {"question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5374, "db_id": "tracking_software_problems", "final": {"question": "Sort all the distinct product names in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "source_tables": ["product"]}}
{"sample_id": 5356, "db_id": "tracking_software_problems", "final": {"question": "Which problem id and log id are assigned to the staff named Rylan Homenick?", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "source_tables": ["staff", "problem_log"]}}
{"sample_id": 5359, "db_id": "tracking_software_problems", "final": {"question": "How many problems does the product with the most problems have? List the number of the problems and product name.", "sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["problems", "product"]}}
{"sample_id": 5365, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems which are reported after 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "source_tables": ["problems"]}}
{"sample_id": 5379, "db_id": "tracking_software_problems", "final": {"question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5360, "db_id": "tracking_software_problems", "final": {"question": "Which product has the most problems? Give me the number of problems and the product name.", "sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["problems", "product"]}}
{"sample_id": 5362, "db_id": "tracking_software_problems", "final": {"question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5354, "db_id": "tracking_software_problems", "final": {"question": "Which staff members are assigned to the problem with id 1? Give me their first and last names.", "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "source_tables": ["staff", "problem_log"]}}
{"sample_id": 5345, "db_id": "tracking_software_problems", "final": {"question": "What is the id of the problem log that is created most recently?", "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "source_tables": ["problem_log"]}}
{"sample_id": 5352, "db_id": "tracking_software_problems", "final": {"question": "What are the log id and entry description of each problem?", "sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log", "source_tables": ["problem_log"]}}
{"sample_id": 5375, "db_id": "tracking_software_problems", "final": {"question": "List all the distinct product names ordered by product id?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "source_tables": ["product"]}}
{"sample_id": 5347, "db_id": "tracking_software_problems", "final": {"question": "What is the oldest log id and its corresponding problem id?", "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "source_tables": ["problem_log"]}}
{"sample_id": 5385, "db_id": "tracking_software_problems", "final": {"question": "Find the top 3 products which have the largest number of problems?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["problems", "product"]}}
{"sample_id": 5358, "db_id": "tracking_software_problems", "final": {"question": "How many problems did the product called \"voluptatem\" have in record?", "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"", "source_tables": ["problems", "product"]}}
{"sample_id": 5367, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems which are reported before 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "source_tables": ["problems"]}}
{"sample_id": 5380, "db_id": "tracking_software_problems", "final": {"question": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5429, "db_id": "shop_membership", "final": {"question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "source_tables": ["branch", "purchase"]}}
{"sample_id": 5428, "db_id": "shop_membership", "final": {"question": "What are the cities that do not have any branches with more than 100 members?", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "source_tables": ["branch"]}}
{"sample_id": 5405, "db_id": "shop_membership", "final": {"question": "Show the city and the number of branches opened before 2010 for each city.", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "source_tables": ["branch"]}}
{"sample_id": 5403, "db_id": "shop_membership", "final": {"question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.", "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", "source_tables": ["branch"]}}
{"sample_id": 5415, "db_id": "shop_membership", "final": {"question": "Show all branch names with the number of members in each branch registered after 2015.", "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id", "source_tables": ["membership_register_branch", "branch"]}}
{"sample_id": 5400, "db_id": "shop_membership", "final": {"question": "What are the different cities that have more than 100 memberships?", "sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100", "source_tables": ["branch"]}}
{"sample_id": 5420, "db_id": "shop_membership", "final": {"question": "What are the names and cities of the branches that do not have any registered members?", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "source_tables": ["membership_register_branch", "branch"]}}
{"sample_id": 5406, "db_id": "shop_membership", "final": {"question": "For each city, how many branches opened before 2010?", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "source_tables": ["branch"]}}
{"sample_id": 5425, "db_id": "shop_membership", "final": {"question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "source_tables": ["branch"]}}
{"sample_id": 5423, "db_id": "shop_membership", "final": {"question": "Show the member name and hometown who registered a branch in 2016.", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "source_tables": ["membership_register_branch", "member"]}}
{"sample_id": 5430, "db_id": "shop_membership", "final": {"question": "How many total pounds were purchased in the year 2018 at all London branches?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "source_tables": ["branch", "purchase"]}}
{"sample_id": 5435, "db_id": "shop_membership", "final": {"question": "list the card number of all members whose hometown address includes word \"Kentucky\".", "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"", "source_tables": ["member"]}}
{"sample_id": 5398, "db_id": "shop_membership", "final": {"question": "What are the names for the 3 branches that have the most memberships?", "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "source_tables": ["branch"]}}
{"sample_id": 5393, "db_id": "shop_membership", "final": {"question": "How many branches where have more than average number of memberships are there?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "source_tables": ["branch"]}}
{"sample_id": 5421, "db_id": "shop_membership", "final": {"question": "What is the name and open year for the branch with most number of memberships registered in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["membership_register_branch", "branch"]}}
{"sample_id": 5399, "db_id": "shop_membership", "final": {"question": "Show all distinct city where branches with at least 100 memberships are located.", "sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100", "source_tables": ["branch"]}}
{"sample_id": 5396, "db_id": "shop_membership", "final": {"question": "What are the names, address roads, and cities of the branches ordered by opening year?", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "source_tables": ["branch"]}}
{"sample_id": 5414, "db_id": "shop_membership", "final": {"question": "What are the names of the members and branches at which they are registered sorted by year of registration?", "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year", "source_tables": ["membership_register_branch", "branch", "member"]}}
{"sample_id": 5410, "db_id": "shop_membership", "final": {"question": "What are the card numbers, names, and hometowns of every member ordered by descending level?", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "source_tables": ["member"]}}
{"sample_id": 5394, "db_id": "shop_membership", "final": {"question": "What is the number of branches that have more than the average number of memberships?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "source_tables": ["branch"]}}
{"sample_id": 5422, "db_id": "shop_membership", "final": {"question": "What is the name and opening year for the branch that registered the most members in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["membership_register_branch", "branch"]}}
{"sample_id": 5436, "db_id": "shop_membership", "final": {"question": "What are the card numbers of members from Kentucky?", "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"", "source_tables": ["member"]}}
{"sample_id": 5413, "db_id": "shop_membership", "final": {"question": "Show all member names and registered branch names sorted by register year.", "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year", "source_tables": ["membership_register_branch", "branch", "member"]}}
{"sample_id": 5432, "db_id": "shop_membership", "final": {"question": "What are the total purchases for members rated at level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "source_tables": ["member", "purchase"]}}
{"sample_id": 5404, "db_id": "shop_membership", "final": {"question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?", "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", "source_tables": ["branch"]}}
{"sample_id": 5424, "db_id": "shop_membership", "final": {"question": "What are the member names and hometowns of those who registered at a branch in 2016?", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "source_tables": ["membership_register_branch", "member"]}}
{"sample_id": 5468, "db_id": "voter_2", "final": {"question": "What are the distinct first names of the students who have class president votes?", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5499, "db_id": "voter_2", "final": {"question": "For each election cycle, report the number of voting records.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}}
{"sample_id": 5494, "db_id": "voter_2", "final": {"question": "How many students does each advisor have?", "sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "source_tables": ["student"]}}
{"sample_id": 5497, "db_id": "voter_2", "final": {"question": "Report all majors that have less than 3 students.", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}}
{"sample_id": 5490, "db_id": "voter_2", "final": {"question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5472, "db_id": "voter_2", "final": {"question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?", "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5450, "db_id": "voter_2", "final": {"question": "List the major of each male student.", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"", "source_tables": ["student"]}}
{"sample_id": 5506, "db_id": "voter_2", "final": {"question": "Return the code of the city that has the most students.", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5453, "db_id": "voter_2", "final": {"question": "What are the maximum and minimum age of students with major 600?", "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600", "source_tables": ["student"]}}
{"sample_id": 5460, "db_id": "voter_2", "final": {"question": "Show all the distinct president votes made on 08/30/2015.", "sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"", "source_tables": ["voting_record"]}}
{"sample_id": 5442, "db_id": "voter_2", "final": {"question": "How many distinct president votes are recorded?", "sql": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5487, "db_id": "voter_2", "final": {"question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5467, "db_id": "voter_2", "final": {"question": "Find the distinct first names of the students who have class senator votes.", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5452, "db_id": "voter_2", "final": {"question": "Find the average age of female students.", "sql": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"", "source_tables": ["student"]}}
{"sample_id": 5455, "db_id": "voter_2", "final": {"question": "Who are the advisors for students that live in a city with city code \"BAL\"?", "sql": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"", "source_tables": ["student"]}}
{"sample_id": 5491, "db_id": "voter_2", "final": {"question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5477, "db_id": "voter_2", "final": {"question": "Find the first and last name of all the students of age 18 who have vice president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5480, "db_id": "voter_2", "final": {"question": "Count the number of male students who had class senator votes in the fall election cycle.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5479, "db_id": "voter_2", "final": {"question": "How many male (sex is M) students have class senator votes in the fall election cycle?", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5470, "db_id": "voter_2", "final": {"question": "What are the distinct ages of students who have secretary votes in the fall election cycle?", "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5456, "db_id": "voter_2", "final": {"question": "Show the advisors of the students whose city of residence has city code \"BAL\".", "sql": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"", "source_tables": ["student"]}}
{"sample_id": 5475, "db_id": "voter_2", "final": {"question": "Find the first and last names of all the female (sex is F) students who have president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5507, "db_id": "voter_2", "final": {"question": "Report the distinct advisors who have more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5496, "db_id": "voter_2", "final": {"question": "Which advisors have more than two students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5443, "db_id": "voter_2", "final": {"question": "Find the maximum age of all the students.", "sql": "SELECT max(Age) FROM STUDENT", "source_tables": ["student"]}}
{"sample_id": 5489, "db_id": "voter_2", "final": {"question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5469, "db_id": "voter_2", "final": {"question": "Find the distinct ages of students who have secretary votes in the fall election cycle.", "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5493, "db_id": "voter_2", "final": {"question": "For each advisor, report the total number of students advised by him or her.", "sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "source_tables": ["student"]}}
{"sample_id": 5478, "db_id": "voter_2", "final": {"question": "What are the first names and last names of the students who are 18 years old and have vice president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5484, "db_id": "voter_2", "final": {"question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5498, "db_id": "voter_2", "final": {"question": "What are the majors only less than three students are studying?", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}}
{"sample_id": 5449, "db_id": "voter_2", "final": {"question": "What are the majors of male (sex is M) students?", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"", "source_tables": ["student"]}}
{"sample_id": 5462, "db_id": "voter_2", "final": {"question": "What are the distinct registration dates and the election cycles?", "sql": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5448, "db_id": "voter_2", "final": {"question": "What are the first names of all the students aged above 22?", "sql": "SELECT Fname FROM STUDENT WHERE Age  >  22", "source_tables": ["student"]}}
{"sample_id": 5495, "db_id": "voter_2", "final": {"question": "Report all advisors that advise more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5501, "db_id": "voter_2", "final": {"question": "Which major has the most students?", "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5466, "db_id": "voter_2", "final": {"question": "What are the distinct last names of the students who have class president votes?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5437, "db_id": "voter_2", "final": {"question": "Find the number of students in total.", "sql": "SELECT count(*) FROM STUDENT", "source_tables": ["student"]}}
{"sample_id": 5438, "db_id": "voter_2", "final": {"question": "How many students are there in total?", "sql": "SELECT count(*) FROM STUDENT", "source_tables": ["student"]}}
{"sample_id": 5445, "db_id": "voter_2", "final": {"question": "Find the last names of students with major 50.", "sql": "SELECT LName FROM STUDENT WHERE Major  =  50", "source_tables": ["student"]}}
{"sample_id": 5505, "db_id": "voter_2", "final": {"question": "What is the city_code of the city that the most students live in?", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5465, "db_id": "voter_2", "final": {"question": "Find the distinct last names of the students who have class president votes.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5508, "db_id": "voter_2", "final": {"question": "Which advisors are advising more than 2 students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5590, "db_id": "products_gen_characteristics", "final": {"question": "Give the names, details, and data types of characteristics that are not found in any product.", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "source_tables": ["product_characteristics", "characteristics"]}}
{"sample_id": 5577, "db_id": "products_gen_characteristics", "final": {"question": "What is the unit of measurement of product named \"cumin\"?", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5571, "db_id": "products_gen_characteristics", "final": {"question": "What is the unit of measuerment of the product category code \"Herbs\"?", "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "source_tables": ["ref_product_categories"]}}
{"sample_id": 5517, "db_id": "products_gen_characteristics", "final": {"question": "List the description of all the colors.", "sql": "SELECT color_description FROM ref_colors", "source_tables": ["ref_colors"]}}
{"sample_id": 5537, "db_id": "products_gen_characteristics", "final": {"question": "What is the color description of the product with name \"catnip\"?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5541, "db_id": "products_gen_characteristics", "final": {"question": "Find the id and color description of the products with at least 2 characteristics.", "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "source_tables": ["ref_colors", "product_characteristics", "products"]}}
{"sample_id": 5545, "db_id": "products_gen_characteristics", "final": {"question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5538, "db_id": "products_gen_characteristics", "final": {"question": "Give the color description for the product 'catnip'.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5570, "db_id": "products_gen_characteristics", "final": {"question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"", "source_tables": ["ref_colors", "characteristics", "product_characteristics", "products"]}}
{"sample_id": 5536, "db_id": "products_gen_characteristics", "final": {"question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?", "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5510, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of products.", "sql": "SELECT count(*) FROM products", "source_tables": ["products"]}}
{"sample_id": 5518, "db_id": "products_gen_characteristics", "final": {"question": "What are the descriptions for each color?", "sql": "SELECT color_description FROM ref_colors", "source_tables": ["ref_colors"]}}
{"sample_id": 5565, "db_id": "products_gen_characteristics", "final": {"question": "List the all the distinct names of the products with the characteristic name 'warm'.", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5547, "db_id": "products_gen_characteristics", "final": {"question": "How many characteristics does the product named \"sesame\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "source_tables": ["product_characteristics", "products"]}}
{"sample_id": 5582, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "source_tables": ["ref_colors", "ref_product_categories", "products"]}}
{"sample_id": 5520, "db_id": "products_gen_characteristics", "final": {"question": "What are the different names of the product characteristics?", "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "source_tables": ["characteristics"]}}
{"sample_id": 5530, "db_id": "products_gen_characteristics", "final": {"question": "Return the category code and typical price of 'cumin'.", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "source_tables": ["products"]}}
{"sample_id": 5516, "db_id": "products_gen_characteristics", "final": {"question": "Return the names and typical buying prices for all products.", "sql": "SELECT product_name ,  typical_buying_price FROM products", "source_tables": ["products"]}}
{"sample_id": 5579, "db_id": "products_gen_characteristics", "final": {"question": "Find the unit of measurement and product category code of product named \"chervil\".", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5529, "db_id": "products_gen_characteristics", "final": {"question": "What is the category and typical buying price  of the product with name \"cumin\"?", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "source_tables": ["products"]}}
{"sample_id": 5587, "db_id": "products_gen_characteristics", "final": {"question": "What is the characteristic name used by most number of the products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5524, "db_id": "products_gen_characteristics", "final": {"question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5573, "db_id": "products_gen_characteristics", "final": {"question": "Find the product category description of the product category with code \"Spices\".", "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"", "source_tables": ["ref_product_categories"]}}
{"sample_id": 5556, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5583, "db_id": "products_gen_characteristics", "final": {"question": "What is the description of the color for most products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5567, "db_id": "products_gen_characteristics", "final": {"question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"", "source_tables": ["ref_colors", "characteristics", "product_characteristics", "products"]}}
{"sample_id": 5559, "db_id": "products_gen_characteristics", "final": {"question": "Find the number of characteristics that the product \"flax\" has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5511, "db_id": "products_gen_characteristics", "final": {"question": "How many colors are there?", "sql": "SELECT count(*) FROM ref_colors", "source_tables": ["ref_colors"]}}
{"sample_id": 5509, "db_id": "products_gen_characteristics", "final": {"question": "How many products are there?", "sql": "SELECT count(*) FROM products", "source_tables": ["products"]}}
{"sample_id": 5560, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of characteristics of the 'flax' product.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5519, "db_id": "products_gen_characteristics", "final": {"question": "Find the names of all the product characteristics.", "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "source_tables": ["characteristics"]}}
{"sample_id": 5554, "db_id": "products_gen_characteristics", "final": {"question": "What are the names and data types of the characteristics of the 'cumin' product?", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5549, "db_id": "products_gen_characteristics", "final": {"question": "How many distinct characteristic names does the product \"cumin\" have?", "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5532, "db_id": "products_gen_characteristics", "final": {"question": "What is the code of the category that the product with the name 'flax' belongs to?", "sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"", "source_tables": ["products"]}}
{"sample_id": 5540, "db_id": "products_gen_characteristics", "final": {"question": "Return the color code and description for the product with the name 'chervil'.", "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5548, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of characteristics the product 'sesame' has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "source_tables": ["product_characteristics", "products"]}}
{"sample_id": 5544, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of products with 'white' as their color description?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5564, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of products with the 'hot' charactersitic.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5551, "db_id": "products_gen_characteristics", "final": {"question": "What are all the characteristic names of product \"sesame\"?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5550, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of different characteristic names the product 'cumin' has.", "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5561, "db_id": "products_gen_characteristics", "final": {"question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".", "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"", "source_tables": ["ref_colors", "characteristics", "product_characteristics", "products"]}}
{"sample_id": 5576, "db_id": "products_gen_characteristics", "final": {"question": "Return the description and unit of measurement for products in the 'Herbs' category.", "sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "source_tables": ["ref_product_categories"]}}
{"sample_id": 5527, "db_id": "products_gen_characteristics", "final": {"question": "Find the number of products with category \"Spices\" and typically sold above 1000.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "source_tables": ["products"]}}
{"sample_id": 5581, "db_id": "products_gen_characteristics", "final": {"question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "source_tables": ["ref_colors", "ref_product_categories", "products"]}}
{"sample_id": 5552, "db_id": "products_gen_characteristics", "final": {"question": "Return the characteristic names of the 'sesame' product.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5515, "db_id": "products_gen_characteristics", "final": {"question": "What are the names and buying prices of all the products?", "sql": "SELECT product_name ,  typical_buying_price FROM products", "source_tables": ["products"]}}
{"sample_id": 5578, "db_id": "products_gen_characteristics", "final": {"question": "Give the unit of measure for the product with the name 'cumin'.", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5572, "db_id": "products_gen_characteristics", "final": {"question": "Return the unit of measure for 'Herb' products.", "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "source_tables": ["ref_product_categories"]}}
{"sample_id": 5584, "db_id": "products_gen_characteristics", "final": {"question": "Return the color description that is most common across all products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5591, "db_id": "products_gen_characteristics", "final": {"question": "What are characteristic names used at least twice across all products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5512, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of colors.", "sql": "SELECT count(*) FROM ref_colors", "source_tables": ["ref_colors"]}}
{"sample_id": 5598, "db_id": "swimming", "final": {"question": "How many stadiums are there?", "sql": "SELECT count(*) FROM stadium", "source_tables": ["stadium"]}}
{"sample_id": 5616, "db_id": "swimming", "final": {"question": "Find the name of the swimmer who has the most records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5595, "db_id": "swimming", "final": {"question": "How many events are there?", "sql": "SELECT count(*) FROM event", "source_tables": ["event"]}}
{"sample_id": 5615, "db_id": "swimming", "final": {"question": "Find the names of stadiums which have never had any event.", "sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)", "source_tables": ["event", "stadium"]}}
{"sample_id": 5603, "db_id": "swimming", "final": {"question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "source_tables": ["stadium"]}}
{"sample_id": 5609, "db_id": "swimming", "final": {"question": "How many different countries are all the swimmers from?", "sql": "SELECT count(DISTINCT nationality) FROM swimmer", "source_tables": ["swimmer"]}}
{"sample_id": 5624, "db_id": "swimming", "final": {"question": "What is the average capacity of the stadiums that were opened in year 2005?", "sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005", "source_tables": ["stadium"]}}
{"sample_id": 5614, "db_id": "swimming", "final": {"question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'", "source_tables": ["event", "stadium"]}}
{"sample_id": 5617, "db_id": "swimming", "final": {"question": "Find the name of the swimmer who has at least 2 records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5608, "db_id": "swimming", "final": {"question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "sql": "SELECT name FROM swimmer ORDER BY meter_100", "source_tables": ["swimmer"]}}
{"sample_id": 5605, "db_id": "swimming", "final": {"question": "How many stadiums does each country have?", "sql": "SELECT country ,  count(*) FROM stadium GROUP BY country", "source_tables": ["stadium"]}}
{"sample_id": 5596, "db_id": "swimming", "final": {"question": "List all the event names by year from the most recent to the oldest.", "sql": "SELECT name FROM event ORDER BY YEAR DESC", "source_tables": ["event"]}}
{"sample_id": 5621, "db_id": "swimming", "final": {"question": "Find the names of stadiums that some Australian swimmers have been to.", "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "source_tables": ["stadium", "swimmer", "record", "event"]}}
{"sample_id": 5619, "db_id": "swimming", "final": {"question": "Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5607, "db_id": "swimming", "final": {"question": "How many stadiums are not in country \"Russia\"?", "sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'", "source_tables": ["stadium"]}}
{"sample_id": 5611, "db_id": "swimming", "final": {"question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "sql": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'", "source_tables": ["swimmer"]}}
{"sample_id": 5599, "db_id": "swimming", "final": {"question": "Find the name of the stadium that has the maximum capacity.", "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "source_tables": ["stadium"]}}
{"sample_id": 5620, "db_id": "swimming", "final": {"question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5638, "db_id": "railway", "final": {"question": "Show the most common builder of railways.", "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["railway"]}}
{"sample_id": 5637, "db_id": "railway", "final": {"question": "Show different builders of railways, along with the corresponding number of railways using each builder.", "sql": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder", "source_tables": ["railway"]}}
{"sample_id": 5635, "db_id": "railway", "final": {"question": "Show id and location of railways that are associated with more than one train.", "sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1", "source_tables": ["train", "railway"]}}
{"sample_id": 5636, "db_id": "railway", "final": {"question": "Show the id and builder of the railway that are associated with the most trains.", "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["train", "railway"]}}
{"sample_id": 5625, "db_id": "railway", "final": {"question": "How many railways are there?", "sql": "SELECT count(*) FROM railway", "source_tables": ["railway"]}}
{"sample_id": 5631, "db_id": "railway", "final": {"question": "What are the names and arrival times of trains?", "sql": "SELECT Name ,  Arrival FROM train", "source_tables": ["train"]}}
{"sample_id": 5643, "db_id": "railway", "final": {"question": "Show the distinct countries of managers.", "sql": "SELECT DISTINCT Country FROM manager", "source_tables": ["manager"]}}
{"sample_id": 5626, "db_id": "railway", "final": {"question": "List the builders of railways in ascending alphabetical order.", "sql": "SELECT Builder FROM railway ORDER BY Builder ASC", "source_tables": ["railway"]}}
{"sample_id": 5627, "db_id": "railway", "final": {"question": "List the wheels and locations of the railways.", "sql": "SELECT Wheels ,  LOCATION FROM railway", "source_tables": ["railway"]}}
{"sample_id": 5641, "db_id": "railway", "final": {"question": "List the object number of railways that do not have any trains.", "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "source_tables": ["train", "railway"]}}
{"sample_id": 5645, "db_id": "railway", "final": {"question": "Show the countries that have managers of age above 50 or below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46", "source_tables": ["manager"]}}
{"sample_id": 5628, "db_id": "railway", "final": {"question": "What is the maximum level of managers in countries that are not \"Australia\"?", "sql": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"", "source_tables": ["manager"]}}
{"sample_id": 5657, "db_id": "customers_and_products_contacts", "final": {"question": "Show the customer name, customer address city, date from, and date to for each customer address history.", "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id", "source_tables": ["customer_address_history", "customers", "addresses"]}}
{"sample_id": 5652, "db_id": "customers_and_products_contacts", "final": {"question": "Show the names of customers who have both an order in completed status and an order in part status.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 5655, "db_id": "customers_and_products_contacts", "final": {"question": "Show the minimum, maximum, average price for all products.", "sql": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products", "source_tables": ["products"]}}
{"sample_id": 5647, "db_id": "customers_and_products_contacts", "final": {"question": "Show all distinct cities in the address record.", "sql": "SELECT DISTINCT city FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 5649, "db_id": "customers_and_products_contacts", "final": {"question": "Show names and phones of customers who do not have address information.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)", "source_tables": ["customers", "customer_address_history"]}}
{"sample_id": 5660, "db_id": "customers_and_products_contacts", "final": {"question": "Show the product type and name for the products with price higher than 1000 or lower than 500.", "sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500", "source_tables": ["products"]}}
{"sample_id": 5659, "db_id": "customers_and_products_contacts", "final": {"question": "What are the name and phone of the customer with the most ordered product quantity?", "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 5658, "db_id": "customers_and_products_contacts", "final": {"question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 5656, "db_id": "customers_and_products_contacts", "final": {"question": "How many products have a price higher than the average?", "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)", "source_tables": ["products"]}}
{"sample_id": 5693, "db_id": "dorm_1", "final": {"question": "Find the numbers of different majors and cities.", "sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "source_tables": ["student"]}}
{"sample_id": 5732, "db_id": "dorm_1", "final": {"question": "For each dorm, how many amenities does it have?", "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "source_tables": ["dorm", "has_amenity"]}}
{"sample_id": 5661, "db_id": "dorm_1", "final": {"question": "Find the name of dorms only for female (F gender).", "sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "source_tables": ["dorm"]}}
{"sample_id": 5716, "db_id": "dorm_1", "final": {"question": "What is the average and oldest age for each gender of student?", "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "source_tables": ["student"]}}
{"sample_id": 5758, "db_id": "dorm_1", "final": {"question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "dorm_amenity", "lives_in"]}}
{"sample_id": 5710, "db_id": "dorm_1", "final": {"question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "source_tables": ["student"]}}
{"sample_id": 5679, "db_id": "dorm_1", "final": {"question": "Find the average age of all students living in the each city.", "sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 5760, "db_id": "dorm_1", "final": {"question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "source_tables": ["lives_in", "dorm_amenity", "dorm", "has_amenity", "student"]}}
{"sample_id": 5741, "db_id": "dorm_1", "final": {"question": "Find the number of female students (with F sex) living in Smith Hall", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5721, "db_id": "dorm_1", "final": {"question": "Find the average age and number of male students (with sex M) from each city.", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 5680, "db_id": "dorm_1", "final": {"question": "What is the average age for each city and what are those cities?", "sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 5691, "db_id": "dorm_1", "final": {"question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "source_tables": ["dorm"]}}
{"sample_id": 5694, "db_id": "dorm_1", "final": {"question": "How many different majors are there and how many different city codes are there for each student?", "sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "source_tables": ["student"]}}
{"sample_id": 5689, "db_id": "dorm_1", "final": {"question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "source_tables": ["dorm"]}}
{"sample_id": 5759, "db_id": "dorm_1", "final": {"question": "Find the name of amenities of the dorm where the student with last name Smith is living in.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "source_tables": ["lives_in", "dorm_amenity", "dorm", "has_amenity", "student"]}}
{"sample_id": 5722, "db_id": "dorm_1", "final": {"question": "What is the average age and how many male students are there in each city?", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 5684, "db_id": "dorm_1", "final": {"question": "How many dorms have amenities?", "sql": "SELECT count(DISTINCT dormid) FROM has_amenity", "source_tables": ["has_amenity"]}}
{"sample_id": 5697, "db_id": "dorm_1", "final": {"question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5706, "db_id": "dorm_1", "final": {"question": "What is the code of the city with the most students?", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5735, "db_id": "dorm_1", "final": {"question": "Find the first name of students who are living in the Smith Hall.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5754, "db_id": "dorm_1", "final": {"question": "What are the names of the dorm that does not have a TV Lounge?", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5745, "db_id": "dorm_1", "final": {"question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5751, "db_id": "dorm_1", "final": {"question": "Find the name and capacity of the dorm with least number of amenities.", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5692, "db_id": "dorm_1", "final": {"question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "source_tables": ["dorm"]}}
{"sample_id": 5698, "db_id": "dorm_1", "final": {"question": "What is the name of each dorm that has a TV Lounge but no study rooms?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5740, "db_id": "dorm_1", "final": {"question": "What are the total number of students who are living in a male dorm?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5682, "db_id": "dorm_1", "final": {"question": "What is the average and total capacity for all dorms who are of gender X?", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "source_tables": ["dorm"]}}
{"sample_id": 5749, "db_id": "dorm_1", "final": {"question": "Find the first name of students who are living in the dorm that has most number of amenities.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["dorm_amenity", "lives_in", "dorm", "has_amenity", "student"]}}
{"sample_id": 5712, "db_id": "dorm_1", "final": {"question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "source_tables": ["has_amenity", "dorm", "dorm_amenity"]}}
{"sample_id": 5717, "db_id": "dorm_1", "final": {"question": "Find the number of students in each major.", "sql": "SELECT count(*) ,  major FROM student GROUP BY major", "source_tables": ["student"]}}
{"sample_id": 5715, "db_id": "dorm_1", "final": {"question": "Find the average and oldest age for students with different sex.", "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "source_tables": ["student"]}}
{"sample_id": 5665, "db_id": "dorm_1", "final": {"question": "How many female students (sex is F) whose age is below 25?", "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "source_tables": ["student"]}}
{"sample_id": 5700, "db_id": "dorm_1", "final": {"question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "source_tables": ["student"]}}
{"sample_id": 5752, "db_id": "dorm_1", "final": {"question": "What is the name and capacity of the dorm with the fewest amount of amenities?", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5696, "db_id": "dorm_1", "final": {"question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5677, "db_id": "dorm_1", "final": {"question": "How many students are there?", "sql": "SELECT count(*) FROM student", "source_tables": ["student"]}}
{"sample_id": 5723, "db_id": "dorm_1", "final": {"question": "Find the number of students for the cities where have more than one student.", "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "source_tables": ["student"]}}
{"sample_id": 5755, "db_id": "dorm_1", "final": {"question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "dorm_amenity", "lives_in"]}}
{"sample_id": 5731, "db_id": "dorm_1", "final": {"question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.", "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "source_tables": ["dorm", "has_amenity"]}}
{"sample_id": 5668, "db_id": "dorm_1", "final": {"question": "What are the first names of all students who are older than 20?", "sql": "SELECT fname FROM student WHERE age  >  20", "source_tables": ["student"]}}
{"sample_id": 5675, "db_id": "dorm_1", "final": {"question": "Find the total capacity of all dorms.", "sql": "SELECT sum(student_capacity) FROM dorm", "source_tables": ["dorm"]}}
{"sample_id": 5726, "db_id": "dorm_1", "final": {"question": "What is the first and last name of the students who are not in the largest major?", "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["student"]}}
{"sample_id": 5687, "db_id": "dorm_1", "final": {"question": "Find the number of distinct gender for dorms.", "sql": "SELECT count(DISTINCT gender) FROM dorm", "source_tables": ["dorm"]}}
{"sample_id": 5739, "db_id": "dorm_1", "final": {"question": "Find the total number of students living in the male dorm (with gender M).", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5728, "db_id": "dorm_1", "final": {"question": "How many students are older than average for each gender?", "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "source_tables": ["student"]}}
{"sample_id": 5699, "db_id": "dorm_1", "final": {"question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "source_tables": ["student"]}}
{"sample_id": 5664, "db_id": "dorm_1", "final": {"question": "What are the names of all the dorms that can accomdate more than 300 students?", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "source_tables": ["dorm"]}}
{"sample_id": 5673, "db_id": "dorm_1", "final": {"question": "Find the number of distinct amenities.", "sql": "SELECT count(*) FROM dorm_amenity", "source_tables": ["dorm_amenity"]}}
{"sample_id": 5672, "db_id": "dorm_1", "final": {"question": "How many dorms are in the database?", "sql": "SELECT count(*) FROM dorm", "source_tables": ["dorm"]}}
{"sample_id": 5727, "db_id": "dorm_1", "final": {"question": "Find the number of students whose age is older than the average age for each gender.", "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "source_tables": ["student"]}}
{"sample_id": 5756, "db_id": "dorm_1", "final": {"question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "dorm_amenity", "lives_in"]}}
{"sample_id": 5757, "db_id": "dorm_1", "final": {"question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "dorm_amenity", "lives_in"]}}
{"sample_id": 5746, "db_id": "dorm_1", "final": {"question": "What amenities does Smith Hall have in alphabetical order?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5703, "db_id": "dorm_1", "final": {"question": "List in alphabetic order all different amenities.", "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "source_tables": ["dorm_amenity"]}}
{"sample_id": 5704, "db_id": "dorm_1", "final": {"question": "What are the different dorm amenity names in alphabetical order?", "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "source_tables": ["dorm_amenity"]}}
{"sample_id": 5666, "db_id": "dorm_1", "final": {"question": "How many girl students who are younger than 25?", "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "source_tables": ["student"]}}
{"sample_id": 5725, "db_id": "dorm_1", "final": {"question": "Find the first and last name of students who are not in the largest major.", "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["student"]}}
{"sample_id": 5686, "db_id": "dorm_1", "final": {"question": "What are the names of all the dorms that don't have any amenities?", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "source_tables": ["dorm", "has_amenity"]}}
{"sample_id": 5719, "db_id": "dorm_1", "final": {"question": "Find the number and average age of students living in each city.", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 5713, "db_id": "dorm_1", "final": {"question": "Find the number of dorms and total capacity for each gender.", "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "source_tables": ["dorm"]}}
{"sample_id": 5763, "db_id": "customer_complaints", "final": {"question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.", "sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "source_tables": ["customers"]}}
{"sample_id": 5761, "db_id": "customer_complaints", "final": {"question": "How many customers are there?", "sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}}
{"sample_id": 5770, "db_id": "customer_complaints", "final": {"question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["customers", "complaints"]}}
{"sample_id": 5768, "db_id": "customer_complaints", "final": {"question": "What are all the different product names, and how many complains has each received?", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "source_tables": ["complaints", "products"]}}
{"sample_id": 5777, "db_id": "customer_complaints", "final": {"question": "Find the phone number of all the customers and staff.", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 5771, "db_id": "customer_complaints", "final": {"question": "Which products has been complained by the customer who has filed least amount of complaints?", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["customers", "complaints", "products"]}}
{"sample_id": 5795, "db_id": "customer_complaints", "final": {"question": "What is the last name of the staff who has handled the first ever complaint?", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "source_tables": ["staff", "complaints"]}}
{"sample_id": 5781, "db_id": "customer_complaints", "final": {"question": "Find the name and category of the most expensive product.", "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5772, "db_id": "customer_complaints", "final": {"question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["customers", "complaints", "products"]}}
{"sample_id": 5785, "db_id": "customer_complaints", "final": {"question": "What is the average price of the products for each category?", "sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "source_tables": ["products"]}}
{"sample_id": 5801, "db_id": "customer_complaints", "final": {"question": "Find the number of complaints with Product Failure type for each complaint status.", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "source_tables": ["complaints"]}}
{"sample_id": 5800, "db_id": "customer_complaints", "final": {"question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "source_tables": ["customers"]}}
{"sample_id": 5774, "db_id": "customer_complaints", "final": {"question": "Return the phone number of the customer who filed the complaint that was raised most recently.", "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "source_tables": ["customers", "complaints"]}}
{"sample_id": 5805, "db_id": "customer_complaints", "final": {"question": "Which state has the most customers?", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5787, "db_id": "customer_complaints", "final": {"question": "Find the last name of the staff member who processed the complaint of the cheapest product.", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "source_tables": ["staff", "complaints", "products"]}}
{"sample_id": 5802, "db_id": "customer_complaints", "final": {"question": "Of complaints with the type code \"Product Failure\", how many had each different status code?", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "source_tables": ["complaints"]}}
{"sample_id": 5786, "db_id": "customer_complaints", "final": {"question": "Return the average price of products that have each category code.", "sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "source_tables": ["products"]}}
{"sample_id": 5799, "db_id": "customer_complaints", "final": {"question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "source_tables": ["customers"]}}
{"sample_id": 5788, "db_id": "customer_complaints", "final": {"question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "source_tables": ["staff", "complaints", "products"]}}
{"sample_id": 5793, "db_id": "customer_complaints", "final": {"question": "How many customers are there in the customer type with the most customers?", "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5791, "db_id": "customer_complaints", "final": {"question": "Find the last name of the staff whose email address contains \"wrau\".", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "source_tables": ["staff"]}}
{"sample_id": 5766, "db_id": "customer_complaints", "final": {"question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5784, "db_id": "customer_complaints", "final": {"question": "What are the prices of products that have never gotten a complaint?", "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "source_tables": ["complaints", "products"]}}
{"sample_id": 5797, "db_id": "customer_complaints", "final": {"question": "How many distinct complaint type codes are there in the database?", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}}
{"sample_id": 5767, "db_id": "customer_complaints", "final": {"question": "List the name of all products along with the number of complaints that they have received.", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "source_tables": ["complaints", "products"]}}
{"sample_id": 5769, "db_id": "customer_complaints", "final": {"question": "Find the emails of customers who has filed a complaints of the product with the most complaints.", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["customers", "complaints"]}}
{"sample_id": 5803, "db_id": "customer_complaints", "final": {"question": "What is first names of the top 5 staff who have handled the greatest number of complaints?", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "source_tables": ["staff", "complaints"]}}
{"sample_id": 5812, "db_id": "workshop_paper", "final": {"question": "For each submission, show the author and their affiliated college.", "sql": "SELECT Author ,  College FROM submission", "source_tables": ["submission"]}}
{"sample_id": 5835, "db_id": "workshop_paper", "final": {"question": "List the authors who do not have submission to any workshop.", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5823, "db_id": "workshop_paper", "final": {"question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.", "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "source_tables": ["submission"]}}
{"sample_id": 5828, "db_id": "workshop_paper", "final": {"question": "Which submission received the highest score in acceptance result. Show me the result.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5832, "db_id": "workshop_paper", "final": {"question": "Which authors have submitted to more than one workshop?", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5822, "db_id": "workshop_paper", "final": {"question": "Which college has the most authors with submissions?", "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["submission"]}}
{"sample_id": 5819, "db_id": "workshop_paper", "final": {"question": "Show different colleges along with the number of authors of submission from each college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "source_tables": ["submission"]}}
{"sample_id": 5829, "db_id": "workshop_paper", "final": {"question": "Show each author and the number of workshops they submitted to.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5820, "db_id": "workshop_paper", "final": {"question": "For each college, return the college name and the count of authors with submissions from that college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "source_tables": ["submission"]}}
{"sample_id": 5821, "db_id": "workshop_paper", "final": {"question": "Show the most common college of authors of submissions.", "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["submission"]}}
{"sample_id": 5817, "db_id": "workshop_paper", "final": {"question": "What is the author of the submission with the highest score?", "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "source_tables": ["submission"]}}
{"sample_id": 5811, "db_id": "workshop_paper", "final": {"question": "What are the authors of submissions and their colleges?", "sql": "SELECT Author ,  College FROM submission", "source_tables": ["submission"]}}
{"sample_id": 5833, "db_id": "workshop_paper", "final": {"question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}}
{"sample_id": 5807, "db_id": "workshop_paper", "final": {"question": "How many submissions are there?", "sql": "SELECT count(*) FROM submission", "source_tables": ["submission"]}}
{"sample_id": 5814, "db_id": "workshop_paper", "final": {"question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "source_tables": ["submission"]}}
{"sample_id": 5818, "db_id": "workshop_paper", "final": {"question": "Find the author who achieved the highest score in a submission.", "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "source_tables": ["submission"]}}
{"sample_id": 5824, "db_id": "workshop_paper", "final": {"question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?", "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "source_tables": ["submission"]}}
{"sample_id": 5826, "db_id": "workshop_paper", "final": {"question": "For each submission, find its author and acceptance result.", "sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5851, "db_id": "tracking_share_transactions", "final": {"question": "Show details of all investors if they make any transaction with share count greater than 100.", "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100", "source_tables": ["transactions", "investors"]}}
{"sample_id": 5841, "db_id": "tracking_share_transactions", "final": {"question": "Show all date and share count of transactions.", "sql": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS", "source_tables": ["transactions"]}}
{"sample_id": 5845, "db_id": "tracking_share_transactions", "final": {"question": "Show the average amount of transactions with type code \"SALE\".", "sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"", "source_tables": ["transactions"]}}
{"sample_id": 5866, "db_id": "tracking_share_transactions", "final": {"question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id", "source_tables": ["transactions"]}}
{"sample_id": 5871, "db_id": "tracking_share_transactions", "final": {"question": "Show the id and details of the investor that has the largest number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions", "investors"]}}
{"sample_id": 5862, "db_id": "tracking_share_transactions", "final": {"question": "Show the average share count of transactions each each investor, ordered by average share count.", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)", "source_tables": ["transactions"]}}
{"sample_id": 5850, "db_id": "tracking_share_transactions", "final": {"question": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10", "source_tables": ["ref_transaction_types", "transactions"]}}
{"sample_id": 5858, "db_id": "tracking_share_transactions", "final": {"question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"", "source_tables": ["transactions", "lots", "transactions_lots"]}}
{"sample_id": 5852, "db_id": "tracking_share_transactions", "final": {"question": "How many distinct transaction types are used in the transactions?", "sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS", "source_tables": ["transactions"]}}
{"sample_id": 5865, "db_id": "tracking_share_transactions", "final": {"question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)", "source_tables": ["transactions", "transactions_lots"]}}
{"sample_id": 5842, "db_id": "tracking_share_transactions", "final": {"question": "What is the total share of transactions?", "sql": "SELECT sum(share_count) FROM TRANSACTIONS", "source_tables": ["transactions"]}}
{"sample_id": 5870, "db_id": "tracking_share_transactions", "final": {"question": "Show the description of the transaction type that occurs most frequently.", "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ref_transaction_types", "transactions"]}}
{"sample_id": 5863, "db_id": "tracking_share_transactions", "final": {"question": "Show the average amount of transactions for different investors.", "sql": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id", "source_tables": ["transactions"]}}
{"sample_id": 5874, "db_id": "tracking_share_transactions", "final": {"question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "source_tables": ["transactions", "investors"]}}
{"sample_id": 5875, "db_id": "tracking_share_transactions", "final": {"question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100", "source_tables": ["transactions"]}}
{"sample_id": 5861, "db_id": "tracking_share_transactions", "final": {"question": "Show the average share count of transactions for different investors.", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id", "source_tables": ["transactions"]}}
{"sample_id": 5839, "db_id": "tracking_share_transactions", "final": {"question": "Show all distinct lot details.", "sql": "SELECT DISTINCT lot_details FROM LOTS", "source_tables": ["lots"]}}
{"sample_id": 5849, "db_id": "tracking_share_transactions", "final": {"question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000", "source_tables": ["transactions"]}}
{"sample_id": 5856, "db_id": "tracking_share_transactions", "final": {"question": "What are the sale details and dates of transactions with amount smaller than 3000?", "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000", "source_tables": ["sales", "transactions"]}}
{"sample_id": 5859, "db_id": "tracking_share_transactions", "final": {"question": "Show the average transaction amount for different transaction types.", "sql": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code", "source_tables": ["transactions"]}}
{"sample_id": 5854, "db_id": "tracking_share_transactions", "final": {"question": "Return the lot details of lots that belong to investors with details \"l\"?", "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"", "source_tables": ["lots", "investors"]}}
{"sample_id": 5844, "db_id": "tracking_share_transactions", "final": {"question": "Show all dates of transactions whose type code is \"SALE\".", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"", "source_tables": ["transactions"]}}
{"sample_id": 5873, "db_id": "tracking_share_transactions", "final": {"question": "Show the ids of the investors who have at least two transactions.", "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "source_tables": ["transactions", "investors"]}}
{"sample_id": 5855, "db_id": "tracking_share_transactions", "final": {"question": "What are the purchase details of transactions with amount bigger than 10000?", "sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000", "source_tables": ["purchases", "transactions"]}}
{"sample_id": 5929, "db_id": "cre_Theme_park", "final": {"question": "What is the average price range of hotels for each each star rating code?", "sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "source_tables": ["hotels"]}}
{"sample_id": 5956, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions Vincent and Marcelle visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "source_tables": ["tourist_attractions", "visits", "visitors"]}}
{"sample_id": 5902, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions that can be accessed by bus?", "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5912, "db_id": "cre_Theme_park", "final": {"question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "source_tables": ["photos", "tourist_attractions"]}}
{"sample_id": 5894, "db_id": "cre_Theme_park", "final": {"question": "What is the detail of the location UK Gallery?", "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "source_tables": ["locations"]}}
{"sample_id": 5927, "db_id": "cre_Theme_park", "final": {"question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "source_tables": ["tourist_attractions", "visits", "visitors"]}}
{"sample_id": 5896, "db_id": "cre_Theme_park", "final": {"question": "Which location names contain the word \"film\"?", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "source_tables": ["locations"]}}
{"sample_id": 5886, "db_id": "cre_Theme_park", "final": {"question": "Show details of all visitors.", "sql": "SELECT Tourist_Details FROM VISITORS", "source_tables": ["visitors"]}}
{"sample_id": 5884, "db_id": "cre_Theme_park", "final": {"question": "Show the names and details of all the staff members.", "sql": "SELECT Name ,  Other_Details FROM Staff", "source_tables": ["staff"]}}
{"sample_id": 5920, "db_id": "cre_Theme_park", "final": {"question": "What are the details of the markets that can be accessed by walk or bus?", "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"", "source_tables": ["street_markets", "tourist_attractions"]}}
{"sample_id": 5885, "db_id": "cre_Theme_park", "final": {"question": "What is the name and detail of each staff member?", "sql": "SELECT Name ,  Other_Details FROM Staff", "source_tables": ["staff"]}}
{"sample_id": 5955, "db_id": "cre_Theme_park", "final": {"question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5940, "db_id": "cre_Theme_park", "final": {"question": "Show the description and code of the attraction type most tourist attractions belong to.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ref_attraction_types", "tourist_attractions"]}}
{"sample_id": 5882, "db_id": "cre_Theme_park", "final": {"question": "Show all distinct location names.", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "source_tables": ["locations"]}}
{"sample_id": 5933, "db_id": "cre_Theme_park", "final": {"question": "Find the id and star rating of each hotel and sort them in increasing order of price.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "source_tables": ["hotels"]}}
{"sample_id": 5888, "db_id": "cre_Theme_park", "final": {"question": "Show the price ranges of hotels with 5 star ratings.", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "source_tables": ["hotels"]}}
{"sample_id": 5900, "db_id": "cre_Theme_park", "final": {"question": "What are the distinct visit dates?", "sql": "SELECT DISTINCT Visit_Date FROM VISITS", "source_tables": ["visits"]}}
{"sample_id": 5880, "db_id": "cre_Theme_park", "final": {"question": "What are the price ranges of hotels?", "sql": "SELECT price_range FROM HOTELS", "source_tables": ["hotels"]}}
{"sample_id": 5910, "db_id": "cre_Theme_park", "final": {"question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?", "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"", "source_tables": ["photos", "tourist_attractions"]}}
{"sample_id": 5922, "db_id": "cre_Theme_park", "final": {"question": "What are the visit date and details of the visitor whose detail is 'Vincent'?", "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"", "source_tables": ["visits", "visitors"]}}
{"sample_id": 5923, "db_id": "cre_Theme_park", "final": {"question": "Find the visit date and details of the tourist whose detail is 'Vincent'", "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"", "source_tables": ["visits", "visitors"]}}
{"sample_id": 5903, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5952, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["features", "tourist_attraction_features", "tourist_attractions"]}}
{"sample_id": 5938, "db_id": "cre_Theme_park", "final": {"question": "Show the transportation method most people choose to get to tourist attractions.", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5915, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["royal_family", "tourist_attractions"]}}
{"sample_id": 5907, "db_id": "cre_Theme_park", "final": {"question": "Give me the star rating descriptions of the hotels that cost more than 10000.", "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "source_tables": ["ref_hotel_star_ratings", "hotels"]}}
{"sample_id": 5893, "db_id": "cre_Theme_park", "final": {"question": "Find the address of the location named \"UK Gallery\".", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "source_tables": ["locations"]}}
{"sample_id": 5945, "db_id": "cre_Theme_park", "final": {"question": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5936, "db_id": "cre_Theme_park", "final": {"question": "Show the details and star ratings of the 3 least expensive hotels.", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "source_tables": ["hotels"]}}
{"sample_id": 5948, "db_id": "cre_Theme_park", "final": {"question": "Show the names and ids of tourist attractions that are visited at most once.", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5890, "db_id": "cre_Theme_park", "final": {"question": "Show the average price range of hotels that have 5 star ratings and allow pets.", "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1", "source_tables": ["hotels"]}}
{"sample_id": 5881, "db_id": "cre_Theme_park", "final": {"question": "Tell me the price ranges for all the hotels.", "sql": "SELECT price_range FROM HOTELS", "source_tables": ["hotels"]}}
{"sample_id": 5883, "db_id": "cre_Theme_park", "final": {"question": "What are the distinct location names?", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "source_tables": ["locations"]}}
{"sample_id": 5953, "db_id": "cre_Theme_park", "final": {"question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["features", "tourist_attraction_features", "tourist_attractions"]}}
{"sample_id": 5926, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "source_tables": ["tourist_attractions", "visits", "visitors"]}}
{"sample_id": 5949, "db_id": "cre_Theme_park", "final": {"question": "What are the names and ids of the tourist attractions that are visited at most once?", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5950, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5921, "db_id": "cre_Theme_park", "final": {"question": "Find the details of all the markets that are accessible by walk or bus.", "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"", "source_tables": ["street_markets", "tourist_attractions"]}}
{"sample_id": 5895, "db_id": "cre_Theme_park", "final": {"question": "Return the detail of the location named \"UK Gallery\".", "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "source_tables": ["locations"]}}
{"sample_id": 5947, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions are visited at least twice? Give me their names and ids.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5930, "db_id": "cre_Theme_park", "final": {"question": "Show the average price of hotels for different pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "source_tables": ["hotels"]}}
{"sample_id": 5944, "db_id": "cre_Theme_park", "final": {"question": "Show different tourist attractions' names, ids, and the corresponding number of visits.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5898, "db_id": "cre_Theme_park", "final": {"question": "How many distinct names are associated with all the photos?", "sql": "SELECT count(DISTINCT Name) FROM PHOTOS", "source_tables": ["photos"]}}
{"sample_id": 5935, "db_id": "cre_Theme_park", "final": {"question": "What are the details of the three most expensive hotels?", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "source_tables": ["hotels"]}}
{"sample_id": 5941, "db_id": "cre_Theme_park", "final": {"question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ref_attraction_types", "tourist_attractions"]}}
{"sample_id": 5942, "db_id": "cre_Theme_park", "final": {"question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5905, "db_id": "cre_Theme_park", "final": {"question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5957, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "source_tables": ["tourist_attractions", "visits", "visitors"]}}
{"sample_id": 5946, "db_id": "cre_Theme_park", "final": {"question": "Show the names and ids of tourist attractions that are visited at least two times.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5892, "db_id": "cre_Theme_park", "final": {"question": "What is the address of the location \"UK Gallery\"?", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "source_tables": ["locations"]}}
{"sample_id": 5995, "db_id": "game_1", "final": {"question": "How many different students are involved in sports?", "sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo", "source_tables": ["sportsinfo"]}}
{"sample_id": 6039, "db_id": "game_1", "final": {"question": "What are the names of all the games that have been played for at least 1000 hours?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6031, "db_id": "game_1", "final": {"question": "What are the ids of all students who played video games and sports?", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["sportsinfo", "plays_games"]}}
{"sample_id": 5994, "db_id": "game_1", "final": {"question": "How many students play sports?", "sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo", "source_tables": ["sportsinfo"]}}
{"sample_id": 5971, "db_id": "game_1", "final": {"question": "What are the names of all video games that are collectible cards?", "sql": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"", "source_tables": ["video_games"]}}
{"sample_id": 6009, "db_id": "game_1", "final": {"question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?", "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10", "source_tables": ["sportsinfo"]}}
{"sample_id": 6008, "db_id": "game_1", "final": {"question": "Show all student IDs with more than total 10 hours per week on all sports played.", "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10", "source_tables": ["sportsinfo"]}}
{"sample_id": 5989, "db_id": "game_1", "final": {"question": "What are the average, minimum, and max ages for each of the different majors?", "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major", "source_tables": ["student"]}}
{"sample_id": 5982, "db_id": "game_1", "final": {"question": "Show ids for all students who live in CHI.", "sql": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\"", "source_tables": ["student"]}}
{"sample_id": 5979, "db_id": "game_1", "final": {"question": "What type has the most games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["video_games"]}}
{"sample_id": 6034, "db_id": "game_1", "final": {"question": "Show all student ids and the number of hours played.", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}}
{"sample_id": 6047, "db_id": "game_1", "final": {"question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")", "source_tables": ["student", "video_games", "plays_games"]}}
{"sample_id": 6042, "db_id": "game_1", "final": {"question": "Find the last and first name of students who are playing Football or Lacrosse.", "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 5991, "db_id": "game_1", "final": {"question": "What are the advisors", "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2", "source_tables": ["student"]}}
{"sample_id": 6010, "db_id": "game_1", "final": {"question": "What is the first name and last name of the student who have most number of sports?", "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 5965, "db_id": "game_1", "final": {"question": "What is the count of different game types?", "sql": "SELECT count(DISTINCT gtype) FROM Video_games", "source_tables": ["video_games"]}}
{"sample_id": 5968, "db_id": "game_1", "final": {"question": "Show all video games and their types in the order of their names.", "sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname", "source_tables": ["video_games"]}}
{"sample_id": 6024, "db_id": "game_1", "final": {"question": "Show total hours per week and number of games played for students under 20.", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6027, "db_id": "game_1", "final": {"question": "How many different students play games?", "sql": "SELECT count(DISTINCT StuID) FROM Plays_games", "source_tables": ["plays_games"]}}
{"sample_id": 6020, "db_id": "game_1", "final": {"question": "Show all male student ids who don't play football.", "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 6019, "db_id": "game_1", "final": {"question": "What are the ids of all female students who play football?", "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 5973, "db_id": "game_1", "final": {"question": "What type of game is Call of Destiny?", "sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"", "source_tables": ["video_games"]}}
{"sample_id": 6016, "db_id": "game_1", "final": {"question": "Show student ids who are on scholarship and have major 600.", "sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 6014, "db_id": "game_1", "final": {"question": "Show student ids who don't have any sports.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 5998, "db_id": "game_1", "final": {"question": "Show last names for all student who are on scholarship.", "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6017, "db_id": "game_1", "final": {"question": "What are the student ids for those on scholarship in major number 600?", "sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 5980, "db_id": "game_1", "final": {"question": "Which game type has least number of games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1", "source_tables": ["video_games"]}}
{"sample_id": 6028, "db_id": "game_1", "final": {"question": "Show ids of students who don't play video game.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "source_tables": ["student", "plays_games"]}}
{"sample_id": 6013, "db_id": "game_1", "final": {"question": "What is the sport with the most scholarship students?", "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo"]}}
{"sample_id": 6046, "db_id": "game_1", "final": {"question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")", "source_tables": ["student", "video_games", "plays_games"]}}
{"sample_id": 5999, "db_id": "game_1", "final": {"question": "What are the last names for all scholarship students?", "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6003, "db_id": "game_1", "final": {"question": "What is the total number of all football games played by scholarship students?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}}
{"sample_id": 6018, "db_id": "game_1", "final": {"question": "Show student ids who are female and play football.", "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 6045, "db_id": "game_1", "final": {"question": "What are the first names and ages of all students who are playing both Football and Lacrosse?", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 5997, "db_id": "game_1", "final": {"question": "What are the ids for all sporty students who are on scholarship?", "sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}}
{"sample_id": 6012, "db_id": "game_1", "final": {"question": "Which sport has most number of students on scholarship?", "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo"]}}
{"sample_id": 5964, "db_id": "game_1", "final": {"question": "How many video game types exist?", "sql": "SELECT count(DISTINCT gtype) FROM Video_games", "source_tables": ["video_games"]}}
{"sample_id": 6011, "db_id": "game_1", "final": {"question": "What is the first and last name of the student who played the most sports?", "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6026, "db_id": "game_1", "final": {"question": "How many students play video games?", "sql": "SELECT count(DISTINCT StuID) FROM Plays_games", "source_tables": ["plays_games"]}}
{"sample_id": 5977, "db_id": "game_1", "final": {"question": "What are the types of video games and how many are in each type?", "sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype", "source_tables": ["video_games"]}}
{"sample_id": 5987, "db_id": "game_1", "final": {"question": "What are the first names for all students who are from the major numbered 600?", "sql": "SELECT Fname FROM Student WHERE Major  =  600", "source_tables": ["student"]}}
{"sample_id": 6030, "db_id": "game_1", "final": {"question": "Show ids of students who play video game and play sports.", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["sportsinfo", "plays_games"]}}
{"sample_id": 6044, "db_id": "game_1", "final": {"question": "Find the first name and age of the students who are playing both Football and Lacrosse.", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 5985, "db_id": "game_1", "final": {"question": "What are the ids of all students who have advisor number 1121?", "sql": "SELECT StuID FROM Student WHERE Advisor  =  1121", "source_tables": ["student"]}}
{"sample_id": 6000, "db_id": "game_1", "final": {"question": "How many games are played for all students?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo", "source_tables": ["sportsinfo"]}}
{"sample_id": 5972, "db_id": "game_1", "final": {"question": "What is the type of video game Call of Destiny.", "sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"", "source_tables": ["video_games"]}}
{"sample_id": 6029, "db_id": "game_1", "final": {"question": "What are the ids of all students who are not video game players?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "source_tables": ["student", "plays_games"]}}
{"sample_id": 5984, "db_id": "game_1", "final": {"question": "Show ids for all students who have advisor 1121.", "sql": "SELECT StuID FROM Student WHERE Advisor  =  1121", "source_tables": ["student"]}}
{"sample_id": 6037, "db_id": "game_1", "final": {"question": "What is the name of the game that has been played the most?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 5981, "db_id": "game_1", "final": {"question": "What is the type with the fewest games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1", "source_tables": ["video_games"]}}
{"sample_id": 5962, "db_id": "game_1", "final": {"question": "How many video games exist?", "sql": "SELECT count(*) FROM Video_games", "source_tables": ["video_games"]}}
{"sample_id": 6121, "db_id": "customers_and_addresses", "final": {"question": "Find the name of the customer who made an order most recently.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6091, "db_id": "customers_and_addresses", "final": {"question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "source_tables": ["customers", "customer_contact_channels"]}}
{"sample_id": 6081, "db_id": "customers_and_addresses", "final": {"question": "List all the distinct cities", "sql": "SELECT DISTINCT city FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 6088, "db_id": "customers_and_addresses", "final": {"question": "List all the contact channel codes that were used less than 5 times.", "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "source_tables": ["customer_contact_channels"]}}
{"sample_id": 6052, "db_id": "customers_and_addresses", "final": {"question": "What is the average amount of items ordered in each order?", "sql": "SELECT avg(order_quantity) FROM order_items", "source_tables": ["order_items"]}}
{"sample_id": 6057, "db_id": "customers_and_addresses", "final": {"question": "What are the dates when customers with ids between 10 and 20 became customers?", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "source_tables": ["customers"]}}
{"sample_id": 6049, "db_id": "customers_and_addresses", "final": {"question": "What are the names of all the customers?", "sql": "SELECT customer_name FROM customers", "source_tables": ["customers"]}}
{"sample_id": 6112, "db_id": "customers_and_addresses", "final": {"question": "How many orders have detail \"Second time\"?", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "source_tables": ["customer_orders"]}}
{"sample_id": 6125, "db_id": "customers_and_addresses", "final": {"question": "What are the name and ID of the product bought the most.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6077, "db_id": "customers_and_addresses", "final": {"question": "What are the cities no customers live in?", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6101, "db_id": "customers_and_addresses", "final": {"question": "Find the name of the customer who made the order of the largest amount of goods.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6126, "db_id": "customers_and_addresses", "final": {"question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"", "source_tables": ["addresses"]}}
{"sample_id": 6064, "db_id": "customers_and_addresses", "final": {"question": "What are the details of all products?", "sql": "SELECT DISTINCT product_details FROM products", "source_tables": ["products"]}}
{"sample_id": 6068, "db_id": "customers_and_addresses", "final": {"question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "source_tables": ["products"]}}
{"sample_id": 6114, "db_id": "customers_and_addresses", "final": {"question": "Find the customer name and date of the orders that have the status \"Delivered\".", "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6092, "db_id": "customers_and_addresses", "final": {"question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "source_tables": ["customers", "customer_contact_channels"]}}
{"sample_id": 6050, "db_id": "customers_and_addresses", "final": {"question": "How many customers are there?", "sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}}
{"sample_id": 6117, "db_id": "customers_and_addresses", "final": {"question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 6061, "db_id": "customers_and_addresses", "final": {"question": "Find the name of the customers who use the most frequently used payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers"]}}
{"sample_id": 6106, "db_id": "customers_and_addresses", "final": {"question": "How many types of products have Rodrick Heaney bought in total?", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6104, "db_id": "customers_and_addresses", "final": {"question": "What is the payment method of the customer that has purchased the least quantity of items?", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6113, "db_id": "customers_and_addresses", "final": {"question": "Tell me the number of orders with \"Second time\" as order detail.", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "source_tables": ["customer_orders"]}}
{"sample_id": 6078, "db_id": "customers_and_addresses", "final": {"question": "Which city has the most customers living in?", "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6062, "db_id": "customers_and_addresses", "final": {"question": "What are all the payment methods?", "sql": "SELECT DISTINCT payment_method FROM customers", "source_tables": ["customers"]}}
{"sample_id": 6080, "db_id": "customers_and_addresses", "final": {"question": "Retrieve the list of all cities.", "sql": "SELECT DISTINCT city FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 6065, "db_id": "customers_and_addresses", "final": {"question": "Return the the details of all products.", "sql": "SELECT DISTINCT product_details FROM products", "source_tables": ["products"]}}
{"sample_id": 6076, "db_id": "customers_and_addresses", "final": {"question": "Find the list of cities that no customer is living in.", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6107, "db_id": "customers_and_addresses", "final": {"question": "Find the number of distinct products Rodrick Heaney has bought so far.", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6131, "db_id": "customers_and_addresses", "final": {"question": "What are names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "source_tables": ["customers", "customer_orders", "order_items", "products"]}}
{"sample_id": 6127, "db_id": "customers_and_addresses", "final": {"question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"", "source_tables": ["addresses"]}}
{"sample_id": 6069, "db_id": "customers_and_addresses", "final": {"question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "source_tables": ["products"]}}
{"sample_id": 6105, "db_id": "customers_and_addresses", "final": {"question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6083, "db_id": "customers_and_addresses", "final": {"question": "Which city is post code 255 located in?", "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255", "source_tables": ["addresses"]}}
{"sample_id": 6123, "db_id": "customers_and_addresses", "final": {"question": "What is the most frequently ordered product? Tell me the detail of the product", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6079, "db_id": "customers_and_addresses", "final": {"question": "Find the city where the most customers live.", "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6097, "db_id": "customers_and_addresses", "final": {"question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "source_tables": ["customer_contact_channels"]}}
{"sample_id": 6095, "db_id": "customers_and_addresses", "final": {"question": "Compute the average active time span of contact channels.", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "source_tables": ["customer_contact_channels"]}}
{"sample_id": 6100, "db_id": "customers_and_addresses", "final": {"question": "What is the name of the customer that made the order with the largest quantity?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6060, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers using the most popular payment method?", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers"]}}
{"sample_id": 6063, "db_id": "customers_and_addresses", "final": {"question": "Return all the distinct payment methods used by customers.", "sql": "SELECT DISTINCT payment_method FROM customers", "source_tables": ["customers"]}}
{"sample_id": 6071, "db_id": "customers_and_addresses", "final": {"question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".", "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6084, "db_id": "customers_and_addresses", "final": {"question": "Find the state and country of all cities with post code starting with 4.", "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"", "source_tables": ["addresses"]}}
{"sample_id": 6110, "db_id": "customers_and_addresses", "final": {"question": "How many customers have at least one order with status \"Cancelled\"?", "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"", "source_tables": ["customer_orders"]}}
{"sample_id": 6108, "db_id": "customers_and_addresses", "final": {"question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?", "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6134, "db_id": "customers_and_addresses", "final": {"question": "Find the names of customers who ordered both products Latte and Americano.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "source_tables": ["customers", "customer_orders", "order_items", "products"]}}
{"sample_id": 6122, "db_id": "customers_and_addresses", "final": {"question": "Which product has been ordered most number of times?", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6072, "db_id": "customers_and_addresses", "final": {"question": "How many customers are living in city \"Lake Geovannyton\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6051, "db_id": "customers_and_addresses", "final": {"question": "Return the total number of distinct customers.", "sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}}
{"sample_id": 6129, "db_id": "customers_and_addresses", "final": {"question": "What is the name of customers who do not use Cash as payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "source_tables": ["customers"]}}
{"sample_id": 6116, "db_id": "customers_and_addresses", "final": {"question": "What is the total number of products that are in orders with status \"Cancelled\"?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 6054, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers who use payment method \"Cash\"?", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"", "source_tables": ["customers"]}}
{"sample_id": 6094, "db_id": "customers_and_addresses", "final": {"question": "What is the average time span of contact channels in the database?", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "source_tables": ["customer_contact_channels"]}}
{"sample_id": 6156, "db_id": "music_4", "final": {"question": "How many distinct artists do the volumes associate to?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6191, "db_id": "music_4", "final": {"question": "Count the number of artists who have had volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6163, "db_id": "music_4", "final": {"question": "Return the issue dates of volumes that are by the artist named Gorgoroth.", "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"", "source_tables": ["volume", "artist"]}}
{"sample_id": 6147, "db_id": "music_4", "final": {"question": "What are the dates of ceremony and results for each music festival?", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "source_tables": ["music_festival"]}}
{"sample_id": 6195, "db_id": "music_4", "final": {"question": "Return the issue dates of volumes by artists who are at most 23 years old?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "source_tables": ["volume", "artist"]}}
{"sample_id": 6148, "db_id": "music_4", "final": {"question": "What are the category of music festivals with result \"Awarded\"?", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "source_tables": ["music_festival"]}}
{"sample_id": 6137, "db_id": "music_4", "final": {"question": "Count the number of artists.", "sql": "SELECT count(*) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6180, "db_id": "music_4", "final": {"question": "What is the song in the volume with the maximum weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6141, "db_id": "music_4", "final": {"question": "Return the average age across all artists.", "sql": "SELECT avg(Age) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6175, "db_id": "music_4", "final": {"question": "Return the number of music festivals of each category.", "sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "source_tables": ["music_festival"]}}
{"sample_id": 6179, "db_id": "music_4", "final": {"question": "What are the categories of music festivals for which there have been more than 1 music festival?", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "source_tables": ["music_festival"]}}
{"sample_id": 6189, "db_id": "music_4", "final": {"question": "Return the issue date of the volume that has spent the fewest weeks on top.", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6183, "db_id": "music_4", "final": {"question": "What are the famous titles of artists who do not have any volumes?", "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "source_tables": ["volume", "artist"]}}
{"sample_id": 6170, "db_id": "music_4", "final": {"question": "Please list the age and famous title of artists in descending order of age.", "sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "source_tables": ["artist"]}}
{"sample_id": 6171, "db_id": "music_4", "final": {"question": "What are the famous titles and ages of each artist, listed in descending order by age?", "sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "source_tables": ["artist"]}}
{"sample_id": 6140, "db_id": "music_4", "final": {"question": "What is the average age of all artists?", "sql": "SELECT avg(Age) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6181, "db_id": "music_4", "final": {"question": "Return the song in the volume that has spent the most weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6150, "db_id": "music_4", "final": {"question": "What are the maximum and minimum week on top of all volumes?", "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6166, "db_id": "music_4", "final": {"question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?", "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "source_tables": ["volume", "artist"]}}
{"sample_id": 6151, "db_id": "music_4", "final": {"question": "Give the maximum and minimum weeks on top across all volumes.", "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6192, "db_id": "music_4", "final": {"question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "source_tables": ["music_festival"]}}
{"sample_id": 6149, "db_id": "music_4", "final": {"question": "Return the categories of music festivals that have the result \"Awarded\".", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "source_tables": ["music_festival"]}}
{"sample_id": 6146, "db_id": "music_4", "final": {"question": "Return the dates of ceremony and the results of all music festivals", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "source_tables": ["music_festival"]}}
{"sample_id": 6155, "db_id": "music_4", "final": {"question": "What are the the songs in volumes, listed in ascending order?", "sql": "SELECT Song FROM volume ORDER BY Song", "source_tables": ["volume"]}}
{"sample_id": 6187, "db_id": "music_4", "final": {"question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"", "source_tables": ["music_festival"]}}
{"sample_id": 6172, "db_id": "music_4", "final": {"question": "What is the famous release date of the artist with the oldest age?", "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "source_tables": ["artist"]}}
{"sample_id": 6154, "db_id": "music_4", "final": {"question": "Please list all songs in volumes in ascending alphabetical order.", "sql": "SELECT Song FROM volume ORDER BY Song", "source_tables": ["volume"]}}
{"sample_id": 6159, "db_id": "music_4", "final": {"question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?", "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["volume", "music_festival"]}}
{"sample_id": 6167, "db_id": "music_4", "final": {"question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.", "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "source_tables": ["volume", "artist"]}}
{"sample_id": 6143, "db_id": "music_4", "final": {"question": "Return the famous titles of the artist called \"Triumfall\".", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "source_tables": ["artist"]}}
{"sample_id": 6138, "db_id": "music_4", "final": {"question": "List the age of all music artists.", "sql": "SELECT Age FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6164, "db_id": "music_4", "final": {"question": "What are the songs in volumes associated with the artist aged 32 or older?", "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "source_tables": ["volume", "artist"]}}
{"sample_id": 6144, "db_id": "music_4", "final": {"question": "What are the distinct Famous release dates?", "sql": "SELECT distinct(Famous_Release_date) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6165, "db_id": "music_4", "final": {"question": "Return names of songs in volumes that are by artists that are at least 32 years old.", "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "source_tables": ["volume", "artist"]}}
{"sample_id": 6182, "db_id": "music_4", "final": {"question": "Find the famous titles of artists that do not have any volume.", "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "source_tables": ["volume", "artist"]}}
{"sample_id": 6178, "db_id": "music_4", "final": {"question": "Please show the categories of the music festivals with count more than 1.", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "source_tables": ["music_festival"]}}
{"sample_id": 6210, "db_id": "roller_coaster", "final": {"question": "Show the names of countries and the average speed of roller coasters from each country.", "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name", "source_tables": ["roller_coaster", "country"]}}
{"sample_id": 6203, "db_id": "roller_coaster", "final": {"question": "Show the different statuses and the numbers of roller coasters for each status.", "sql": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status", "source_tables": ["roller_coaster"]}}
{"sample_id": 6207, "db_id": "roller_coaster", "final": {"question": "Show the names of roller coasters and names of country they are in.", "sql": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID", "source_tables": ["roller_coaster", "country"]}}
{"sample_id": 6197, "db_id": "roller_coaster", "final": {"question": "List the names of roller coasters by ascending order of length.", "sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC", "source_tables": ["roller_coaster"]}}
{"sample_id": 6200, "db_id": "roller_coaster", "final": {"question": "Show the statuses of roller coasters longer than 3300 or higher than 100.", "sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100", "source_tables": ["roller_coaster"]}}
{"sample_id": 6198, "db_id": "roller_coaster", "final": {"question": "What are the lengths and heights of roller coasters?", "sql": "SELECT LENGTH ,  Height FROM roller_coaster", "source_tables": ["roller_coaster"]}}
{"sample_id": 6204, "db_id": "roller_coaster", "final": {"question": "Please show the most common status of roller coasters.", "sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["roller_coaster"]}}
{"sample_id": 6199, "db_id": "roller_coaster", "final": {"question": "List the names of countries whose language is not \"German\".", "sql": "SELECT Name FROM country WHERE Languages != \"German\"", "source_tables": ["country"]}}
{"sample_id": 6206, "db_id": "roller_coaster", "final": {"question": "Show the park of the roller coaster with the highest speed.", "sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1", "source_tables": ["roller_coaster"]}}
{"sample_id": 6201, "db_id": "roller_coaster", "final": {"question": "What are the speeds of the longest roller coaster?", "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1", "source_tables": ["roller_coaster"]}}
{"sample_id": 6220, "db_id": "ship_1", "final": {"question": "What are the names of captains, sorted by age descending?", "sql": "SELECT name FROM captain ORDER BY age DESC", "source_tables": ["captain"]}}
{"sample_id": 6243, "db_id": "ship_1", "final": {"question": "Which flag is most widely used among all ships?", "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 6237, "db_id": "ship_1", "final": {"question": "how many ships are there?", "sql": "SELECT count(*) FROM ship", "source_tables": ["ship"]}}
{"sample_id": 6250, "db_id": "ship_1", "final": {"question": "What is the year in which most ships were built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 6236, "db_id": "ship_1", "final": {"question": "Return the name of the youngest captain.", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "source_tables": ["captain"]}}
{"sample_id": 6231, "db_id": "ship_1", "final": {"question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.", "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "source_tables": ["captain"]}}
{"sample_id": 6226, "db_id": "ship_1", "final": {"question": "Give the classes that have more than two captains.", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "source_tables": ["captain"]}}
{"sample_id": 6252, "db_id": "ship_1", "final": {"question": "What are the names of ships that have more than one captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["ship", "captain"]}}
{"sample_id": 6229, "db_id": "ship_1", "final": {"question": "What are the average and minimum age of captains in different class?", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "source_tables": ["captain"]}}
{"sample_id": 6244, "db_id": "ship_1", "final": {"question": "Return the flag that is most common among all ships.", "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 6225, "db_id": "ship_1", "final": {"question": "Which classes have more than two captains?", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "source_tables": ["captain"]}}
{"sample_id": 6216, "db_id": "ship_1", "final": {"question": "Count the number of captains that have each rank.", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "source_tables": ["captain"]}}
{"sample_id": 6228, "db_id": "ship_1", "final": {"question": "What are the names of captains that have either the rank Midshipman or Lieutenant?", "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "source_tables": ["captain"]}}
{"sample_id": 6256, "db_id": "ship_1", "final": {"question": "What is the name of the ship that is commanded by the youngest captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "source_tables": ["ship", "captain"]}}
{"sample_id": 6246, "db_id": "ship_1", "final": {"question": "What are the names of ships, ordered by year they were built and their class?", "sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "source_tables": ["ship"]}}
{"sample_id": 6235, "db_id": "ship_1", "final": {"question": "What is the name of the youngest captain?", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "source_tables": ["captain"]}}
{"sample_id": 6247, "db_id": "ship_1", "final": {"question": "Find the ship type that are used by both ships with Panama and Malta flags.", "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "source_tables": ["ship"]}}
{"sample_id": 6213, "db_id": "ship_1", "final": {"question": "How many different captain ranks are there?", "sql": "SELECT count(DISTINCT rank) FROM captain", "source_tables": ["captain"]}}
{"sample_id": 6217, "db_id": "ship_1", "final": {"question": "How many captains with younger than 50 are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "source_tables": ["captain"]}}
{"sample_id": 6218, "db_id": "ship_1", "final": {"question": "Count the number of captains younger than 50 of each rank.", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "source_tables": ["captain"]}}
{"sample_id": 6240, "db_id": "ship_1", "final": {"question": "What is the name, type, and flag of the ship that was built in the most recent year?", "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 6238, "db_id": "ship_1", "final": {"question": "Count the number of ships.", "sql": "SELECT count(*) FROM ship", "source_tables": ["ship"]}}
{"sample_id": 6223, "db_id": "ship_1", "final": {"question": "Which rank is the most common among captains?", "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "source_tables": ["captain"]}}
{"sample_id": 6253, "db_id": "ship_1", "final": {"question": "what are the names and classes of the ships that do not have any captain yet?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["ship", "captain"]}}
{"sample_id": 6215, "db_id": "ship_1", "final": {"question": "How many captains are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "source_tables": ["captain"]}}
{"sample_id": 6230, "db_id": "ship_1", "final": {"question": "Return the average and minimum age of captains in each class.", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "source_tables": ["captain"]}}
{"sample_id": 6234, "db_id": "ship_1", "final": {"question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "source_tables": ["captain"]}}
{"sample_id": 6248, "db_id": "ship_1", "final": {"question": "What types of ships have both ships that have Panama Flags and Malta flags?", "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "source_tables": ["ship"]}}
{"sample_id": 6261, "db_id": "city_record", "final": {"question": "What is id of the city that hosted events in the most recent year?", "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "source_tables": ["hosting_city"]}}
{"sample_id": 6262, "db_id": "city_record", "final": {"question": "Find the city that hosted some events in the most recent year. What is the id of this city?", "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "source_tables": ["hosting_city"]}}
{"sample_id": 6290, "db_id": "city_record", "final": {"question": "Which cities have regional population above 10000000?", "sql": "SELECT city FROM city WHERE regional_population  >  10000000", "source_tables": ["city"]}}
{"sample_id": 6264, "db_id": "city_record", "final": {"question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?", "sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"", "source_tables": ["match"]}}
{"sample_id": 6289, "db_id": "city_record", "final": {"question": "Please give me a list of cities whose regional population is over 10000000.", "sql": "SELECT city FROM city WHERE regional_population  >  10000000", "source_tables": ["city"]}}
{"sample_id": 6278, "db_id": "city_record", "final": {"question": "What is the city with the smallest GDP? Return the city and its GDP.", "sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 6268, "db_id": "city_record", "final": {"question": "Find the city that hosted the most events.", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6284, "db_id": "city_record", "final": {"question": "Which cities have lower temperature in March than in July and have been once host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["city", "hosting_city", "temperature"]}}
{"sample_id": 6272, "db_id": "city_record", "final": {"question": "What is the temperature of \"Shanghai\" city in January?", "sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"", "source_tables": ["city", "temperature"]}}
{"sample_id": 6266, "db_id": "city_record", "final": {"question": "Which cities served as a host city after 2010?", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6298, "db_id": "city_record", "final": {"question": "Find the GDP of the city with the largest regional population.", "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 6280, "db_id": "city_record", "final": {"question": "In February, which city marks the highest temperature?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1", "source_tables": ["city", "temperature"]}}
{"sample_id": 6296, "db_id": "city_record", "final": {"question": "What are the venues of all the matches? Sort them in the descending order of match date.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}}
{"sample_id": 6263, "db_id": "city_record", "final": {"question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?", "sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"", "source_tables": ["match"]}}
{"sample_id": 6271, "db_id": "city_record", "final": {"question": "Give me the temperature of Shanghai in January.", "sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"", "source_tables": ["city", "temperature"]}}
{"sample_id": 6287, "db_id": "city_record", "final": {"question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["city", "hosting_city", "temperature"]}}
{"sample_id": 6294, "db_id": "city_record", "final": {"question": "For each competition, count the number of matches.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}}
{"sample_id": 6275, "db_id": "city_record", "final": {"question": "Which three cities have the largest regional population?", "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3", "source_tables": ["city"]}}
{"sample_id": 6267, "db_id": "city_record", "final": {"question": "Which city has hosted the most events?", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6293, "db_id": "city_record", "final": {"question": "Find the number of matches in different competitions.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}}
{"sample_id": 6299, "db_id": "city_record", "final": {"question": "What are the GDP and population of the city that already served as a host more than once?", "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6270, "db_id": "city_record", "final": {"question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".", "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"", "source_tables": ["city", "hosting_city", "match"]}}
{"sample_id": 6300, "db_id": "city_record", "final": {"question": "Which cities have served as host cities more than once? Return me their GDP and population.", "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6297, "db_id": "city_record", "final": {"question": "what is the GDP of the city with the largest population.", "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 6318, "db_id": "e_government", "final": {"question": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "source_tables": ["individuals", "organizations", "organization_contact_individuals"]}}
{"sample_id": 6332, "db_id": "e_government", "final": {"question": "Count the number of different payment method codes used by parties.", "sql": "SELECT count(DISTINCT payment_method_code) FROM parties", "source_tables": ["parties"]}}
{"sample_id": 6327, "db_id": "e_government", "final": {"question": "Find the payment method code used by more than 3 parties.", "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3", "source_tables": ["parties"]}}
{"sample_id": 6322, "db_id": "e_government", "final": {"question": "What are the names of the services that have never been used?", "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id", "source_tables": ["services", "party_services"]}}
{"sample_id": 6326, "db_id": "e_government", "final": {"question": "Count the number of cities in the state of Colorado.", "sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"", "source_tables": ["addresses"]}}
{"sample_id": 6329, "db_id": "e_government", "final": {"question": "Find the name of organizations whose names contain \"Party\".", "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"", "source_tables": ["organizations"]}}
{"sample_id": 6339, "db_id": "e_government", "final": {"question": "Find the last name of the individuals that have been contact individuals of an organization.", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "source_tables": ["individuals", "organization_contact_individuals"]}}
{"sample_id": 6340, "db_id": "e_government", "final": {"question": "What are the last names of individuals who have been contact individuals for an organization?", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "source_tables": ["individuals", "organization_contact_individuals"]}}
{"sample_id": 6319, "db_id": "e_government", "final": {"question": "How many services are there?", "sql": "SELECT count(*) FROM services", "source_tables": ["services"]}}
{"sample_id": 6335, "db_id": "e_government", "final": {"question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"", "source_tables": ["addresses"]}}
{"sample_id": 6331, "db_id": "e_government", "final": {"question": "How many distinct payment methods are used by parties?", "sql": "SELECT count(DISTINCT payment_method_code) FROM parties", "source_tables": ["parties"]}}
{"sample_id": 6336, "db_id": "e_government", "final": {"question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"", "source_tables": ["addresses"]}}
{"sample_id": 6311, "db_id": "e_government", "final": {"question": "List all the name of organizations in order of the date formed.", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "source_tables": ["organizations"]}}
{"sample_id": 6310, "db_id": "e_government", "final": {"question": "What are the party emails associated with parties that used the party form that is the most common?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["parties", "party_forms"]}}
{"sample_id": 6301, "db_id": "e_government", "final": {"question": "List every individual's first name, middle name and last name in alphabetical order by last name.", "sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name", "source_tables": ["individuals"]}}
{"sample_id": 6312, "db_id": "e_government", "final": {"question": "What are the names of organizations, ordered by the date they were formed, ascending?", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "source_tables": ["organizations"]}}
{"sample_id": 6305, "db_id": "e_government", "final": {"question": "Find the name of the most popular party form.", "sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["forms", "party_forms"]}}
{"sample_id": 6317, "db_id": "e_government", "final": {"question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "source_tables": ["individuals", "organizations", "organization_contact_individuals"]}}
{"sample_id": 6330, "db_id": "e_government", "final": {"question": "What are the names of organizations that contain the word \"Party\"?", "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"", "source_tables": ["organizations"]}}
{"sample_id": 6302, "db_id": "e_government", "final": {"question": "What are the first, middle, and last names of all individuals, ordered by last name?", "sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name", "source_tables": ["individuals"]}}
{"sample_id": 6306, "db_id": "e_government", "final": {"question": "What is the name of the party form that is most common?", "sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["forms", "party_forms"]}}
{"sample_id": 6324, "db_id": "e_government", "final": {"question": "What are the names of all cities and states?", "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 6315, "db_id": "e_government", "final": {"question": "Find the last name of the latest contact individual of the organization \"Labour Party\".", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1", "source_tables": ["individuals", "organizations", "organization_contact_individuals"]}}
{"sample_id": 6307, "db_id": "e_government", "final": {"question": "Find the payment method and phone of the party with email \"enrico09@example.com\".", "sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"", "source_tables": ["parties"]}}
{"sample_id": 6353, "db_id": "school_bus", "final": {"question": "What is the maximum, minimum and average years spent working on a school bus?", "sql": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus", "source_tables": ["school_bus"]}}
{"sample_id": 6341, "db_id": "school_bus", "final": {"question": "How many drivers are there?", "sql": "SELECT count(*) FROM driver", "source_tables": ["driver"]}}
{"sample_id": 6355, "db_id": "school_bus", "final": {"question": "Show the type of school and the number of buses for each type.", "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "source_tables": ["school_bus", "school"]}}
{"sample_id": 6348, "db_id": "school_bus", "final": {"question": "Show home city where at least two drivers older than 40 are from.", "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2", "source_tables": ["driver"]}}
{"sample_id": 6343, "db_id": "school_bus", "final": {"question": "Show the party and the number of drivers in each party.", "sql": "SELECT party ,  count(*) FROM driver GROUP BY party", "source_tables": ["driver"]}}
{"sample_id": 6350, "db_id": "school_bus", "final": {"question": "Show the names of the drivers without a school bus.", "sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)", "source_tables": ["driver", "school_bus"]}}
{"sample_id": 6352, "db_id": "school_bus", "final": {"question": "Show the school name and driver name for all school buses.", "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id", "source_tables": ["driver", "school_bus", "school"]}}
{"sample_id": 6342, "db_id": "school_bus", "final": {"question": "Show the name, home city, and age for all drivers.", "sql": "SELECT name ,  home_city ,  age FROM driver", "source_tables": ["driver"]}}
{"sample_id": 6357, "db_id": "school_bus", "final": {"question": "List names for drivers from Hartford city and younger than 40.", "sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40", "source_tables": ["driver"]}}
{"sample_id": 6345, "db_id": "school_bus", "final": {"question": "Show all different home cities.", "sql": "SELECT DISTINCT home_city FROM driver", "source_tables": ["driver"]}}
{"sample_id": 6374, "db_id": "flight_company", "final": {"question": "How many companies operates airlines in each airport?", "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id", "source_tables": ["airport", "operate_company", "flight"]}}
{"sample_id": 6369, "db_id": "flight_company", "final": {"question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", "source_tables": ["airport", "flight"]}}
{"sample_id": 6372, "db_id": "flight_company", "final": {"question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.", "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'", "source_tables": ["operate_company", "flight"]}}
{"sample_id": 6371, "db_id": "flight_company", "final": {"question": "How many airports haven't the pilot 'Thompson' driven an aircraft?", "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );", "source_tables": ["airport", "flight"]}}
{"sample_id": 6363, "db_id": "flight_company", "final": {"question": "What is the velocity of the pilot named 'Thompson'?", "sql": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'", "source_tables": ["flight"]}}
{"sample_id": 6365, "db_id": "flight_company", "final": {"question": "What are the names of the airports which are not in the country 'Iceland'?", "sql": "SELECT name FROM airport WHERE country != 'Iceland'", "source_tables": ["airport"]}}
{"sample_id": 6364, "db_id": "flight_company", "final": {"question": "What are the names and types of the companies that have ever operated a flight?", "sql": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id", "source_tables": ["operate_company", "flight"]}}
{"sample_id": 6368, "db_id": "flight_company", "final": {"question": "What is the id, name and IATA code of the airport that had most number of flights?", "sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airport", "flight"]}}
{"sample_id": 6361, "db_id": "flight_company", "final": {"question": "List the id, country, city and name of the airports ordered alphabetically by the name.", "sql": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name", "source_tables": ["airport"]}}
{"sample_id": 6360, "db_id": "flight_company", "final": {"question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.", "sql": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC", "source_tables": ["flight"]}}
{"sample_id": 6375, "db_id": "flight_company", "final": {"question": "how many airports are there in each country?", "sql": "SELECT count(*) ,  country FROM airport GROUP BY country", "source_tables": ["airport"]}}
{"sample_id": 6419, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the codes, names, and descriptions of the different document types?", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "source_tables": ["ref_document_types"]}}
{"sample_id": 6381, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids and details of all accounts?", "sql": "SELECT account_id ,  account_details FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 6394, "db_id": "cre_Docs_and_Epenses", "final": {"question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "source_tables": ["documents"]}}
{"sample_id": 6409, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are project ids of projects that have 2 or more corresponding documents?", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "source_tables": ["documents"]}}
{"sample_id": 6387, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the statement ids, statement details, and account details, for all accounts?", "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "source_tables": ["accounts", "statements"]}}
{"sample_id": 6447, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the different budget type codes, and how many documents are there for each?", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6434, "db_id": "cre_Docs_and_Epenses", "final": {"question": "List all budget type codes and descriptions.", "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}}
{"sample_id": 6380, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show all account ids and account details.", "sql": "SELECT account_id ,  account_details FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 6408, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the ids for projects with at least 2 documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "source_tables": ["documents"]}}
{"sample_id": 6379, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of accounts.", "sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 6401, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of documents with the type code BK that correspond to each product id.", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "source_tables": ["documents"]}}
{"sample_id": 6461, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the account details with the greatest value, as well as those that include the character 5.", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "source_tables": ["accounts"]}}
{"sample_id": 6384, "db_id": "cre_Docs_and_Epenses", "final": {"question": "List all statement ids and statement details.", "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "source_tables": ["statements"]}}
{"sample_id": 6427, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids and details for each project?", "sql": "SELECT project_id ,  project_details FROM Projects", "source_tables": ["projects"]}}
{"sample_id": 6382, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many statements do we have?", "sql": "SELECT count(*) FROM Statements", "source_tables": ["statements"]}}
{"sample_id": 6404, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show project ids and the number of documents in each project.", "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "source_tables": ["documents"]}}
{"sample_id": 6392, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the number of documents.", "sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 6435, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the type codes and descriptions of each budget type?", "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}}
{"sample_id": 6407, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the id of the project that has the fewest corresponding documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 6418, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show all document type codes, document type names, document type descriptions.", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "source_tables": ["ref_document_types"]}}
{"sample_id": 6423, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the type name, type description, and date of creation for each document.", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "source_tables": ["ref_document_types", "documents"]}}
{"sample_id": 6388, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show all statement id and the number of accounts for each statement.", "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "source_tables": ["accounts"]}}
{"sample_id": 6406, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the id of the project with least number of documents?", "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 6429, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the ids and details corresponding to projects for which there are more than two documents.", "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "source_tables": ["projects", "documents"]}}
{"sample_id": 6445, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the ids for documents that have the budget description 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"", "source_tables": ["documents_with_expenses", "ref_budget_codes"]}}
{"sample_id": 6383, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of statements.", "sql": "SELECT count(*) FROM Statements", "source_tables": ["statements"]}}
{"sample_id": 6378, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many accounts do we have?", "sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 6386, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show statement id, statement detail, account detail for accounts.", "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "source_tables": ["accounts", "statements"]}}
{"sample_id": 6402, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "source_tables": ["projects", "documents"]}}
{"sample_id": 6449, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the budget type code that is most common among documents with expenses.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6413, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the code of the document type that is most common.", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 6425, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many projects are there?", "sql": "SELECT count(*) FROM Projects", "source_tables": ["projects"]}}
{"sample_id": 6398, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Find names and ids of all documents with document type code BK.", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "source_tables": ["documents"]}}
{"sample_id": 6416, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.", "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "source_tables": ["documents", "statements"]}}
{"sample_id": 6385, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids and details of all statements?", "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "source_tables": ["statements"]}}
{"sample_id": 6446, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show budget type codes and the number of documents in each budget type.", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6458, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6444, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show ids for all documents with budget types described as 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"", "source_tables": ["documents_with_expenses", "ref_budget_codes"]}}
{"sample_id": 6454, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents with letter 's' in the name with any expense budgets.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6439, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of documents with expenses.", "sql": "SELECT count(*) FROM Documents_with_expenses", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6390, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the statement id and the statement detail for the statement with most number of accounts.", "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts", "statements"]}}
{"sample_id": 6415, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the codes corresponding to document types for which there are less than 3 documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "source_tables": ["documents"]}}
{"sample_id": 6393, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 6417, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?", "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "source_tables": ["documents", "statements"]}}
{"sample_id": 6455, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the ids of documents that have expenses and contain the letter s in their names.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6411, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many documents are there of each type?", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "source_tables": ["documents"]}}
{"sample_id": 6450, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents which don't have expense budgets?", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6448, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the budget type code with most number of documents.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6414, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the document type code with fewer than 3 documents.", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "source_tables": ["documents"]}}
{"sample_id": 6426, "db_id": "cre_Docs_and_Epenses", "final": {"question": "List ids and details for all projects.", "sql": "SELECT project_id ,  project_details FROM Projects", "source_tables": ["projects"]}}
{"sample_id": 6490, "db_id": "scientist_1", "final": {"question": "Find the number of scientists involved for the projects that require more than 300 hours.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6499, "db_id": "scientist_1", "final": {"question": "What are the names of projects that have not been assigned?", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6471, "db_id": "scientist_1", "final": {"question": "What is the average hours across all projects?", "sql": "SELECT avg(hours) FROM projects", "source_tables": ["projects"]}}
{"sample_id": 6466, "db_id": "scientist_1", "final": {"question": "How many different scientists are assigned to any project?", "sql": "SELECT count(DISTINCT scientist) FROM assignedto", "source_tables": ["assignedto"]}}
{"sample_id": 6468, "db_id": "scientist_1", "final": {"question": "Find the number of distinct projects.", "sql": "SELECT count(DISTINCT name) FROM projects", "source_tables": ["projects"]}}
{"sample_id": 6483, "db_id": "scientist_1", "final": {"question": "What are the names of projects that require between 100 and 300 hours?", "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "source_tables": ["projects"]}}
{"sample_id": 6473, "db_id": "scientist_1", "final": {"question": "What is the name of the project with the most hours?", "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "source_tables": ["projects"]}}
{"sample_id": 6485, "db_id": "scientist_1", "final": {"question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6503, "db_id": "scientist_1", "final": {"question": "How many scientists do not have any projects assigned to them?", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6476, "db_id": "scientist_1", "final": {"question": "Find the name and hours of project that has the most number of scientists.", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6465, "db_id": "scientist_1", "final": {"question": "What is the total number of hours for all projects?", "sql": "SELECT sum(hours) FROM projects", "source_tables": ["projects"]}}
{"sample_id": 6477, "db_id": "scientist_1", "final": {"question": "What is the name and hours for the project which has the most scientists assigned to it?", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6498, "db_id": "scientist_1", "final": {"question": "Select the project names which are not assigned yet.", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6496, "db_id": "scientist_1", "final": {"question": "Find the name of scientists who are assigned to some project.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6480, "db_id": "scientist_1", "final": {"question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.", "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6462, "db_id": "scientist_1", "final": {"question": "Find the total number of scientists.", "sql": "SELECT count(*) FROM scientists", "source_tables": ["scientists"]}}
{"sample_id": 6491, "db_id": "scientist_1", "final": {"question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6464, "db_id": "scientist_1", "final": {"question": "Find the total hours of all projects.", "sql": "SELECT sum(hours) FROM projects", "source_tables": ["projects"]}}
{"sample_id": 6469, "db_id": "scientist_1", "final": {"question": "How many different projects are there?", "sql": "SELECT count(DISTINCT name) FROM projects", "source_tables": ["projects"]}}
{"sample_id": 6494, "db_id": "scientist_1", "final": {"question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.", "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6475, "db_id": "scientist_1", "final": {"question": "What are the names of projects that have taken longer than the average number of hours for all projects?", "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "source_tables": ["projects"]}}
{"sample_id": 6506, "db_id": "scientist_1", "final": {"question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6500, "db_id": "scientist_1", "final": {"question": "Find the name of scientists who are not assigned to any project.", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6504, "db_id": "scientist_1", "final": {"question": "Find the names of scientists who are not working on the project with the highest hours.", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6495, "db_id": "scientist_1", "final": {"question": "What are the SSN and names of scientists working on the project with the most hours?", "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6493, "db_id": "scientist_1", "final": {"question": "What are the names of the scientists, and how many projects are each of them working on?", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6472, "db_id": "scientist_1", "final": {"question": "Find the name of project that continues for the longest time.", "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "source_tables": ["projects"]}}
{"sample_id": 6507, "db_id": "scientist_1", "final": {"question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6531, "db_id": "wine_1", "final": {"question": "Count the number of wines produced at Robert Biale winery.", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "source_tables": ["wine"]}}
{"sample_id": 6576, "db_id": "wine_1", "final": {"question": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "source_tables": ["wine"]}}
{"sample_id": 6546, "db_id": "wine_1", "final": {"question": "What are the numbers of wines for different grapes?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "source_tables": ["wine"]}}
{"sample_id": 6585, "db_id": "wine_1", "final": {"question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "source_tables": ["wine"]}}
{"sample_id": 6516, "db_id": "wine_1", "final": {"question": "List the grapes and appelations of all wines.", "sql": "SELECT Grape ,  Appelation FROM WINE", "source_tables": ["wine"]}}
{"sample_id": 6578, "db_id": "wine_1", "final": {"question": "What are the names of wines that are more expensive then all wines made in the year 2006?", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}}
{"sample_id": 6545, "db_id": "wine_1", "final": {"question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6584, "db_id": "wine_1", "final": {"question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "source_tables": ["wine"]}}
{"sample_id": 6589, "db_id": "wine_1", "final": {"question": "What is the average price for wines not produced in Sonoma county?", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6573, "db_id": "wine_1", "final": {"question": "Which wineries produce at least four wines?", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "source_tables": ["wine"]}}
{"sample_id": 6558, "db_id": "wine_1", "final": {"question": "What is the color of the grape whose wine products has the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6521, "db_id": "wine_1", "final": {"question": "What are the areas and counties for all appelations?", "sql": "SELECT Area ,  County FROM APPELLATIONS", "source_tables": ["appellations"]}}
{"sample_id": 6580, "db_id": "wine_1", "final": {"question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6556, "db_id": "wine_1", "final": {"question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6586, "db_id": "wine_1", "final": {"question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6542, "db_id": "wine_1", "final": {"question": "What are the wines that have prices higher than 50 and made of Red color grapes?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6537, "db_id": "wine_1", "final": {"question": "Give the names and scores of wines made from white grapes.", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6547, "db_id": "wine_1", "final": {"question": "How many wines are there for each grape?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "source_tables": ["wine"]}}
{"sample_id": 6588, "db_id": "wine_1", "final": {"question": "Find the average price of wines that are not produced from Sonoma county.", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6520, "db_id": "wine_1", "final": {"question": "List the area and county of all appelations.", "sql": "SELECT Area ,  County FROM APPELLATIONS", "source_tables": ["appellations"]}}
{"sample_id": 6575, "db_id": "wine_1", "final": {"question": "What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6536, "db_id": "wine_1", "final": {"question": "What are the names and scores of wines that are made of white color grapes?", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6523, "db_id": "wine_1", "final": {"question": "Return the prices of wines produced before 2010.", "sql": "SELECT Price FROM WINE WHERE YEAR  <  2010", "source_tables": ["wine"]}}
{"sample_id": 6570, "db_id": "wine_1", "final": {"question": "What are the average price and score of wines grouped by appelation?", "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "source_tables": ["wine"]}}
{"sample_id": 6512, "db_id": "wine_1", "final": {"question": "Which winery is the wine that has the highest score from?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "source_tables": ["wine"]}}
{"sample_id": 6517, "db_id": "wine_1", "final": {"question": "What are the grapes and appelations of each wine?", "sql": "SELECT Grape ,  Appelation FROM WINE", "source_tables": ["wine"]}}
{"sample_id": 6555, "db_id": "wine_1", "final": {"question": "What are the names of wines, sorted by price ascending?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "source_tables": ["wine"]}}
{"sample_id": 6568, "db_id": "wine_1", "final": {"question": "What are the maximum price and score of wines in each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6541, "db_id": "wine_1", "final": {"question": "Find the white grape used to produce wines with scores above 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6569, "db_id": "wine_1", "final": {"question": "What are the maximum price and score of wines for each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6553, "db_id": "wine_1", "final": {"question": "What are the names of wines, sorted in alphabetical order?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "source_tables": ["wine"]}}
{"sample_id": 6522, "db_id": "wine_1", "final": {"question": "What are the prices of wines produced before the year of 2010?", "sql": "SELECT Price FROM WINE WHERE YEAR  <  2010", "source_tables": ["wine"]}}
{"sample_id": 6538, "db_id": "wine_1", "final": {"question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6511, "db_id": "wine_1", "final": {"question": "Give the name of the wine with the highest score.", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "source_tables": ["wine"]}}
{"sample_id": 6565, "db_id": "wine_1", "final": {"question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "source_tables": ["wine"]}}
{"sample_id": 6550, "db_id": "wine_1", "final": {"question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "source_tables": ["wine"]}}
{"sample_id": 6529, "db_id": "wine_1", "final": {"question": "What are the distinct names of wines that have appellations in the North Coast area?", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6572, "db_id": "wine_1", "final": {"question": "Find the wineries that have at least four wines.", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "source_tables": ["wine"]}}
{"sample_id": 6514, "db_id": "wine_1", "final": {"question": "Find the names of all wines produced in 2008.", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "source_tables": ["wine"]}}
{"sample_id": 6544, "db_id": "wine_1", "final": {"question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6560, "db_id": "wine_1", "final": {"question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "source_tables": ["wine"]}}
{"sample_id": 6587, "db_id": "wine_1", "final": {"question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6526, "db_id": "wine_1", "final": {"question": "List the names of all distinct wines that are made of red color grape.", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6559, "db_id": "wine_1", "final": {"question": "Give the color of the grape whose wine products have the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6535, "db_id": "wine_1", "final": {"question": "What is the average price of wines produced in appelations in Sonoma County?", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6574, "db_id": "wine_1", "final": {"question": "Find the country of all appelations who have at most three wines.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6577, "db_id": "wine_1", "final": {"question": "What are the names of wines produced before any wine from the Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "source_tables": ["wine"]}}
{"sample_id": 6562, "db_id": "wine_1", "final": {"question": "Find the distinct winery of wines having price between 50 and 100.", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "source_tables": ["wine"]}}
{"sample_id": 6549, "db_id": "wine_1", "final": {"question": "What is the average prices of wines for each each?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6606, "db_id": "train_station", "final": {"question": "show the train name and station name for each train.", "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id", "source_tables": ["train", "train_station", "station"]}}
{"sample_id": 6595, "db_id": "train_station", "final": {"question": "Show the names and total passengers for all train stations not in London.", "sql": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'", "source_tables": ["station"]}}
{"sample_id": 6611, "db_id": "train_station", "final": {"question": "Show station names without any trains.", "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "source_tables": ["train_station", "station"]}}
{"sample_id": 6599, "db_id": "train_station", "final": {"question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.", "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25", "source_tables": ["station"]}}
{"sample_id": 6608, "db_id": "train_station", "final": {"question": "Show the station name with greatest number of trains.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["train_station", "station"]}}
{"sample_id": 6613, "db_id": "train_station", "final": {"question": "Find the names of the trains that do not pass any station located in London.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")", "source_tables": ["train", "train_station", "station"]}}
{"sample_id": 6594, "db_id": "train_station", "final": {"question": "What are all locations of train stations?", "sql": "SELECT DISTINCT LOCATION FROM station", "source_tables": ["station"]}}
{"sample_id": 6597, "db_id": "train_station", "final": {"question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?", "sql": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", "source_tables": ["station"]}}
{"sample_id": 6602, "db_id": "train_station", "final": {"question": "Show the name, time, and service for all trains.", "sql": "SELECT name ,  TIME ,  service FROM train", "source_tables": ["train"]}}
{"sample_id": 6607, "db_id": "train_station", "final": {"question": "Show all train names and times in stations in London in descending order by train time.", "sql": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC", "source_tables": ["train", "train_station", "station"]}}
{"sample_id": 6601, "db_id": "train_station", "final": {"question": "Show the location with most number of train stations.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["station"]}}
{"sample_id": 6600, "db_id": "train_station", "final": {"question": "Show all locations which don't have a train station with at least 15 platforms.", "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15", "source_tables": ["station"]}}
{"sample_id": 6593, "db_id": "train_station", "final": {"question": "Show the name, location, and number of platforms for all stations.", "sql": "SELECT name ,  LOCATION ,  number_of_platforms FROM station", "source_tables": ["station"]}}
{"sample_id": 6651, "db_id": "driving_school", "final": {"question": "List the first name and last name of all customers.", "sql": "SELECT first_name ,  last_name FROM Customers;", "source_tables": ["customers"]}}
{"sample_id": 6702, "db_id": "driving_school", "final": {"question": "How many lessons did the customer with the first name Ray take?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6693, "db_id": "driving_school", "final": {"question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6658, "db_id": "driving_school", "final": {"question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?", "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"", "source_tables": ["customers"]}}
{"sample_id": 6633, "db_id": "driving_school", "final": {"question": "How many staff in total?", "sql": "SELECT count(*) FROM Staff;", "source_tables": ["staff"]}}
{"sample_id": 6680, "db_id": "driving_school", "final": {"question": "What is the zip code of the customer Carole Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6696, "db_id": "driving_school", "final": {"question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6616, "db_id": "driving_school", "final": {"question": "What are the ids of all vehicles?", "sql": "SELECT vehicle_id FROM Vehicles;", "source_tables": ["vehicles"]}}
{"sample_id": 6703, "db_id": "driving_school", "final": {"question": "Which last names are both used by customers and by staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 6619, "db_id": "driving_school", "final": {"question": "Show the detail of vehicle with id 1.", "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "source_tables": ["vehicles"]}}
{"sample_id": 6679, "db_id": "driving_school", "final": {"question": "What is zip code of customer with first name as Carole and last name as Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6672, "db_id": "driving_school", "final": {"question": "What is the maximum, minimum, and average amount of money outsanding for all customers?", "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "source_tables": ["customers"]}}
{"sample_id": 6667, "db_id": "driving_school", "final": {"question": "Which customer status code has least number of customers?", "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["customers"]}}
{"sample_id": 6688, "db_id": "driving_school", "final": {"question": "What are the first and last names of all customers with more than 2 payments?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "source_tables": ["customers", "customer_payments"]}}
{"sample_id": 6668, "db_id": "driving_school", "final": {"question": "What is the status code with the least number of customers?", "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["customers"]}}
{"sample_id": 6626, "db_id": "driving_school", "final": {"question": "When did the staff member named Janessa Sawayn join the company?", "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6685, "db_id": "driving_school", "final": {"question": "List the number of customers that did not have any payment history.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "source_tables": ["customers", "customer_payments"]}}
{"sample_id": 6671, "db_id": "driving_school", "final": {"question": "What is maximum, minimum and average amount of outstanding of customer?", "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "source_tables": ["customers"]}}
{"sample_id": 6687, "db_id": "driving_school", "final": {"question": "List first name and last name of customers that have more than 2 payments.", "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "source_tables": ["customers", "customer_payments"]}}
{"sample_id": 6647, "db_id": "driving_school", "final": {"question": "Which city lives most of staffs? List the city name and number of staffs.", "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6694, "db_id": "driving_school", "final": {"question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6654, "db_id": "driving_school", "final": {"question": "What are the email addresses and date of births for all customers who have a first name of Carole?", "sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"", "source_tables": ["customers"]}}
{"sample_id": 6627, "db_id": "driving_school", "final": {"question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?", "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6662, "db_id": "driving_school", "final": {"question": "When did Carole Bernhard first become a customer?", "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";", "source_tables": ["customers"]}}
{"sample_id": 6657, "db_id": "driving_school", "final": {"question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?", "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"", "source_tables": ["customers"]}}
{"sample_id": 6661, "db_id": "driving_school", "final": {"question": "When did customer with first name as Carole and last name as Bernhard became a customer?", "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";", "source_tables": ["customers"]}}
{"sample_id": 6618, "db_id": "driving_school", "final": {"question": "How many vehicles exist?", "sql": "SELECT count(*) FROM Vehicles;", "source_tables": ["vehicles"]}}
{"sample_id": 6705, "db_id": "driving_school", "final": {"question": "What is the first name of the staff who did not give any lesson?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6666, "db_id": "driving_school", "final": {"question": "For each customer status code, how many customers are classified that way?", "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "source_tables": ["customers"]}}
{"sample_id": 6655, "db_id": "driving_school", "final": {"question": "List phone number and email address of customer with more than 2000 outstanding balance.", "sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "source_tables": ["customers"]}}
{"sample_id": 6645, "db_id": "driving_school", "final": {"question": "Find out the first name and last name of staff lived in city Damianfort.", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6670, "db_id": "driving_school", "final": {"question": "How many lessons did the customer Ryan Goodwin complete?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6615, "db_id": "driving_school", "final": {"question": "List all vehicle id", "sql": "SELECT vehicle_id FROM Vehicles;", "source_tables": ["vehicles"]}}
{"sample_id": 6623, "db_id": "driving_school", "final": {"question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6681, "db_id": "driving_school", "final": {"question": "Which city does has most number of customers?", "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6636, "db_id": "driving_school", "final": {"question": "In what city does Janessa Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6646, "db_id": "driving_school", "final": {"question": "What is the first and last name of all employees who live in the city Damianfort?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6634, "db_id": "driving_school", "final": {"question": "How many employees are there?", "sql": "SELECT count(*) FROM Staff;", "source_tables": ["staff"]}}
{"sample_id": 6622, "db_id": "driving_school", "final": {"question": "What are the first, middle, and last names of all staff?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "source_tables": ["staff"]}}
{"sample_id": 6689, "db_id": "driving_school", "final": {"question": "List all payment methods and number of payments using each payment methods.", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}}
{"sample_id": 6653, "db_id": "driving_school", "final": {"question": "List email address and birthday of customer whose first name as Carole.", "sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"", "source_tables": ["customers"]}}
{"sample_id": 6635, "db_id": "driving_school", "final": {"question": "Which city does staff with first name as Janessa and last name as Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6664, "db_id": "driving_school", "final": {"question": "How many customers are there?", "sql": "SELECT count(*) FROM Customers;", "source_tables": ["customers"]}}
{"sample_id": 6692, "db_id": "driving_school", "final": {"question": "How many lessons have been cancelled?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";", "source_tables": ["lessons"]}}
{"sample_id": 6652, "db_id": "driving_school", "final": {"question": "What are the first and last names for all customers?", "sql": "SELECT first_name ,  last_name FROM Customers;", "source_tables": ["customers"]}}
{"sample_id": 6686, "db_id": "driving_school", "final": {"question": "How many customers have no payment histories?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "source_tables": ["customers", "customer_payments"]}}
{"sample_id": 6617, "db_id": "driving_school", "final": {"question": "How many vehicle in total?", "sql": "SELECT count(*) FROM Vehicles;", "source_tables": ["vehicles"]}}
{"sample_id": 6642, "db_id": "driving_school", "final": {"question": "What is the zip code of the hosue of the employee named Janessa Sawayn?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6706, "db_id": "driving_school", "final": {"question": "What is the first name of all employees who do not give any lessons?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6640, "db_id": "driving_school", "final": {"question": "How long is the total lesson time took by the customer named Rylan Goodwin?", "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6625, "db_id": "driving_school", "final": {"question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?", "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6701, "db_id": "driving_school", "final": {"question": "How many lesson does customer with first name Ray took?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6660, "db_id": "driving_school", "final": {"question": "What is the date of birth of every customer whose status code is 'Good Customer'?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "source_tables": ["customers"]}}
{"sample_id": 6684, "db_id": "driving_school", "final": {"question": "What is the total amount of moeny paid by the customer Carole Bernhard?", "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"", "source_tables": ["customers", "customer_payments"]}}
{"sample_id": 6699, "db_id": "driving_school", "final": {"question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6742, "db_id": "activity_1", "final": {"question": "What are the first name and last name of Linda Smith's advisor?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "source_tables": ["student", "faculty"]}}
{"sample_id": 6761, "db_id": "activity_1", "final": {"question": "Find the number of activities available.", "sql": "SELECT count(*) FROM Activity", "source_tables": ["activity"]}}
{"sample_id": 6735, "db_id": "activity_1", "final": {"question": "How many faculty members do we have for each faculty rank?", "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "source_tables": ["faculty"]}}
{"sample_id": 6746, "db_id": "activity_1", "final": {"question": "Show first name and last name for all the students advised by Michael Goodrich.", "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"", "source_tables": ["student", "faculty"]}}
{"sample_id": 6719, "db_id": "activity_1", "final": {"question": "What are the faculty ids of all the male faculty members?", "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "source_tables": ["faculty"]}}
{"sample_id": 6733, "db_id": "activity_1", "final": {"question": "In which buildings are there at least ten professors?", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "source_tables": ["faculty"]}}
{"sample_id": 6750, "db_id": "activity_1", "final": {"question": "Show all the faculty ranks and the number of students advised by each rank.", "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "source_tables": ["student", "faculty"]}}
{"sample_id": 6717, "db_id": "activity_1", "final": {"question": "What are the first name, last name, and phone number of all the female faculty members?", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "source_tables": ["faculty"]}}
{"sample_id": 6726, "db_id": "activity_1", "final": {"question": "Show the first name and last name for all the instructors.", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "source_tables": ["faculty"]}}
{"sample_id": 6716, "db_id": "activity_1", "final": {"question": "Show the first name, last name, and phone number for all female faculty members.", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "source_tables": ["faculty"]}}
{"sample_id": 6758, "db_id": "activity_1", "final": {"question": "What activities do we have?", "sql": "SELECT activity_name FROM Activity", "source_tables": ["activity"]}}
{"sample_id": 6760, "db_id": "activity_1", "final": {"question": "How many activities do we have?", "sql": "SELECT count(*) FROM Activity", "source_tables": ["activity"]}}
{"sample_id": 6713, "db_id": "activity_1", "final": {"question": "What buildings have faculty offices?", "sql": "SELECT DISTINCT building FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6782, "db_id": "activity_1", "final": {"question": "Show the ids for all the students who participate in an activity and are under 20.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6752, "db_id": "activity_1", "final": {"question": "What are the first and last name of the faculty who has the most students?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "faculty"]}}
{"sample_id": 6772, "db_id": "activity_1", "final": {"question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.", "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6711, "db_id": "activity_1", "final": {"question": "Find the list of distinct ranks for faculty.", "sql": "SELECT DISTINCT rank FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6744, "db_id": "activity_1", "final": {"question": "Show the ids of students whose advisors are professors.", "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"", "source_tables": ["student", "faculty"]}}
{"sample_id": 6786, "db_id": "activity_1", "final": {"question": "What is the name of the activity with the most students?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "participates_in"]}}
{"sample_id": 6787, "db_id": "activity_1", "final": {"question": "Find the name of the activity that has the largest number of student participants.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "participates_in"]}}
{"sample_id": 6718, "db_id": "activity_1", "final": {"question": "Show ids for all the male faculty.", "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "source_tables": ["faculty"]}}
{"sample_id": 6776, "db_id": "activity_1", "final": {"question": "What is the first and last name of the faculty participating in the most activities?", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6753, "db_id": "activity_1", "final": {"question": "Give me the the first and last name of the faculty who advises the most students.", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "faculty"]}}
{"sample_id": 6723, "db_id": "activity_1", "final": {"question": "What are the phone, room, and building of the faculty member called Jerry Prince?", "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"", "source_tables": ["faculty"]}}
{"sample_id": 6793, "db_id": "activity_1", "final": {"question": "What are the first names of the faculty members playing both Canoeing and Kayaking?", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6774, "db_id": "activity_1", "final": {"question": "Show all the activity names and the number of faculty involved in each activity.", "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "source_tables": ["activity", "faculty_participates_in"]}}
{"sample_id": 6729, "db_id": "activity_1", "final": {"question": "How many faculty members does each building have? List the result with the name of the building.", "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "source_tables": ["faculty"]}}
{"sample_id": 6740, "db_id": "activity_1", "final": {"question": "Show the number of male and female assistant professors.", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "source_tables": ["faculty"]}}
{"sample_id": 6765, "db_id": "activity_1", "final": {"question": "Which faculty do not participate in any activity? Find their faculty ids.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6728, "db_id": "activity_1", "final": {"question": "Show all the buildings along with the number of faculty members the buildings have.", "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "source_tables": ["faculty"]}}
{"sample_id": 6727, "db_id": "activity_1", "final": {"question": "What are the first name and last name of all the instructors?", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "source_tables": ["faculty"]}}
{"sample_id": 6780, "db_id": "activity_1", "final": {"question": "Show the ids of the students who don't participate in any activity.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6764, "db_id": "activity_1", "final": {"question": "Show the ids of the faculty who don't participate in any activity.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6749, "db_id": "activity_1", "final": {"question": "What are the faculty id and the number of students each faculty has?", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "source_tables": ["student", "faculty"]}}
{"sample_id": 6767, "db_id": "activity_1", "final": {"question": "What are ids of the faculty members who not only participate in an activity but also advise a student.", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "source_tables": ["student", "faculty_participates_in"]}}
{"sample_id": 6784, "db_id": "activity_1", "final": {"question": "What is the first and last name of the student participating in the most activities?", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6709, "db_id": "activity_1", "final": {"question": "What is the total number of faculty members?", "sql": "SELECT count(*) FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6779, "db_id": "activity_1", "final": {"question": "Which activity has the most faculty members participating in? Find the activity name.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"]}}
{"sample_id": 6775, "db_id": "activity_1", "final": {"question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.", "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "source_tables": ["activity", "faculty_participates_in"]}}
{"sample_id": 6762, "db_id": "activity_1", "final": {"question": "How many faculty members participate in an activity?", "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "source_tables": ["faculty_participates_in"]}}
{"sample_id": 6745, "db_id": "activity_1", "final": {"question": "Which students have professors as their advisors? Find their student ids.", "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"", "source_tables": ["student", "faculty"]}}
{"sample_id": 6732, "db_id": "activity_1", "final": {"question": "Show all the buildings that have at least 10 professors.", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "source_tables": ["faculty"]}}
{"sample_id": 6785, "db_id": "activity_1", "final": {"question": "Tell me the first and last name of the student who has the most activities.", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6792, "db_id": "activity_1", "final": {"question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6714, "db_id": "activity_1", "final": {"question": "Show the rank, first name, and last name for all the faculty.", "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6725, "db_id": "activity_1", "final": {"question": "Count the number of Professors who have office in building NEB.", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "source_tables": ["faculty"]}}
{"sample_id": 6763, "db_id": "activity_1", "final": {"question": "Give me the number of faculty members who participate in an activity", "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "source_tables": ["faculty_participates_in"]}}
{"sample_id": 6736, "db_id": "activity_1", "final": {"question": "Show all the ranks and the number of male and female faculty for each rank.", "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "source_tables": ["faculty"]}}
{"sample_id": 6795, "db_id": "activity_1", "final": {"question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "source_tables": ["activity", "participates_in"]}}
{"sample_id": 6751, "db_id": "activity_1", "final": {"question": "How many students are advised by each rank of faculty? List the rank and the number of students.", "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "source_tables": ["student", "faculty"]}}
{"sample_id": 6778, "db_id": "activity_1", "final": {"question": "What is the name of the activity that has the most faculty members involved in?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"]}}
{"sample_id": 6773, "db_id": "activity_1", "final": {"question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.", "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6869, "db_id": "flight_4", "final": {"question": "How many routes go from the United States to Canada?", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6821, "db_id": "flight_4", "final": {"question": "How many routes end in a Canadian airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6800, "db_id": "flight_4", "final": {"question": "How many airlines are there?", "sql": "SELECT count(*) FROM airlines", "source_tables": ["airlines"]}}
{"sample_id": 6797, "db_id": "flight_4", "final": {"question": "What are the names of the airports in the city of Goroka?", "sql": "SELECT name FROM airports WHERE city  =  'Goroka'", "source_tables": ["airports"]}}
{"sample_id": 6820, "db_id": "flight_4", "final": {"question": "Find the number of routes whose destination airports are in Canada.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6841, "db_id": "flight_4", "final": {"question": "What is the number of airports per country, ordered from most to least?", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airports"]}}
{"sample_id": 6858, "db_id": "flight_4", "final": {"question": "Find the cities which have exactly two airports.", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "source_tables": ["airports"]}}
{"sample_id": 6853, "db_id": "flight_4", "final": {"question": "For each airport name, how many routes start at that airport?", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "source_tables": ["routes", "airports"]}}
{"sample_id": 6875, "db_id": "flight_4", "final": {"question": "What is the name of the airport with the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6816, "db_id": "flight_4", "final": {"question": "How many different cities do have some airport in the country of Greenland?", "sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "source_tables": ["airports"]}}
{"sample_id": 6856, "db_id": "flight_4", "final": {"question": "Find the average elevation of all airports for each country.", "sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "source_tables": ["airports"]}}
{"sample_id": 6876, "db_id": "flight_4", "final": {"question": "Find the busiest destination airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6840, "db_id": "flight_4", "final": {"question": "How many airports are there per country? Order the countries by decreasing number of airports.", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airports"]}}
{"sample_id": 6807, "db_id": "flight_4", "final": {"question": "What are the names of all airports in Cuba or Argentina?", "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "source_tables": ["airports"]}}
{"sample_id": 6835, "db_id": "flight_4", "final": {"question": "What is the name of the country with the most number of home airlines?", "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}}
{"sample_id": 6814, "db_id": "flight_4", "final": {"question": "Find the number of airports whose name contain the word 'International'.", "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "source_tables": ["airports"]}}
{"sample_id": 6874, "db_id": "flight_4", "final": {"question": "Find the busiest source airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6868, "db_id": "flight_4", "final": {"question": "Find the number of routes from the United States to Canada.", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6806, "db_id": "flight_4", "final": {"question": "Find the name of the airports located in Cuba or Argentina.", "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "source_tables": ["airports"]}}
{"sample_id": 6826, "db_id": "flight_4", "final": {"question": "Find the name and city of the airport which is the destination of the most number of routes.", "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6815, "db_id": "flight_4", "final": {"question": "How many airports' names have the word Interanation in them?", "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "source_tables": ["airports"]}}
{"sample_id": 6873, "db_id": "flight_4", "final": {"question": "What is the name of the airline with the most routes?", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6809, "db_id": "flight_4", "final": {"question": "What are the countries of all airlines whose names start with Orbit?", "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "source_tables": ["airlines"]}}
{"sample_id": 6830, "db_id": "flight_4", "final": {"question": "Find the name and city of the airport which is the source for the most number of flight routes.", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6864, "db_id": "flight_4", "final": {"question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["routes", "airlines", "airports"]}}
{"sample_id": 6872, "db_id": "flight_4", "final": {"question": "Find the name of airline which runs the most number of routes.", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6851, "db_id": "flight_4", "final": {"question": "What are the cities that have more than 2 airports sorted by number of airports?", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "source_tables": ["airports"]}}
{"sample_id": 6803, "db_id": "flight_4", "final": {"question": "What is the number of airlines based in Russia?", "sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "source_tables": ["airlines"]}}
{"sample_id": 6857, "db_id": "flight_4", "final": {"question": "For each country, what is the average elevation of that country's airports?", "sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "source_tables": ["airports"]}}
{"sample_id": 6805, "db_id": "flight_4", "final": {"question": "What is the highest elevation of an airport in the country of Iceland?", "sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "source_tables": ["airports"]}}
{"sample_id": 6839, "db_id": "flight_4", "final": {"question": "How many airlines operate out of each country in descending order?", "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airlines"]}}
{"sample_id": 6847, "db_id": "flight_4", "final": {"question": "What is the count of cities with more than 3 airports?", "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "source_tables": ["airports"]}}
{"sample_id": 6802, "db_id": "flight_4", "final": {"question": "How many airlines does Russia has?", "sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "source_tables": ["airlines"]}}
{"sample_id": 6798, "db_id": "flight_4", "final": {"question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "source_tables": ["airports"]}}
{"sample_id": 6862, "db_id": "flight_4", "final": {"question": "Find the number of routes with destination airports in Italy.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6849, "db_id": "flight_4", "final": {"question": "What are the names of all cities with more than one airport and how many airports do they have?", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "source_tables": ["airports"]}}
{"sample_id": 6825, "db_id": "flight_4", "final": {"question": "What is the name, city, and country of the airport with the highest elevation?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}}
{"sample_id": 6848, "db_id": "flight_4", "final": {"question": "List the cities which have more than one airport and number of airports.", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "source_tables": ["airports"]}}
{"sample_id": 6842, "db_id": "flight_4", "final": {"question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "source_tables": ["airports"]}}
{"sample_id": 6810, "db_id": "flight_4", "final": {"question": "Find the name of airports whose altitude is between -50 and 50.", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "source_tables": ["airports"]}}
{"sample_id": 6812, "db_id": "flight_4", "final": {"question": "Which country is the airport that has the highest altitude located in?", "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}}
{"sample_id": 6846, "db_id": "flight_4", "final": {"question": "How many cities are there that have more than 3 airports?", "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "source_tables": ["airports"]}}
{"sample_id": 6834, "db_id": "flight_4", "final": {"question": "Which countries has the most number of airlines?", "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}}
{"sample_id": 6865, "db_id": "flight_4", "final": {"question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["routes", "airlines", "airports"]}}
{"sample_id": 6832, "db_id": "flight_4", "final": {"question": "Find the number of different airports which are the destinations of the American Airlines.", "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6843, "db_id": "flight_4", "final": {"question": "How many airports are there per city in the US ordered from most to least?", "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "source_tables": ["airports"]}}
{"sample_id": 6867, "db_id": "flight_4", "final": {"question": "What is the number of routes that end at John F Kennedy International Airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6808, "db_id": "flight_4", "final": {"question": "Find the country of the airlines whose name starts with 'Orbit'.", "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "source_tables": ["airlines"]}}
{"sample_id": 6844, "db_id": "flight_4", "final": {"question": "Return the cities with more than 3 airports in the United States.", "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "source_tables": ["airports"]}}
{"sample_id": 6935, "db_id": "tracking_orders", "final": {"question": "What are the names of the customers who bought product \"food\" at least once?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "products", "orders"]}}
{"sample_id": 6887, "db_id": "tracking_orders", "final": {"question": "Which customers have orders with status \"Packing\"? Give me the customer names.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6890, "db_id": "tracking_orders", "final": {"question": "What is the name of the customer who has the most orders?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 6914, "db_id": "tracking_orders", "final": {"question": "Find the ids of orders which are shipped after 2000-01-01.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "source_tables": ["shipments"]}}
{"sample_id": 6886, "db_id": "tracking_orders", "final": {"question": "List the name of all the distinct customers who have orders with status \"Packing\".", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6905, "db_id": "tracking_orders", "final": {"question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6903, "db_id": "tracking_orders", "final": {"question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6881, "db_id": "tracking_orders", "final": {"question": "Find the order id and customer id associated with the oldest order.", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "source_tables": ["orders"]}}
{"sample_id": 6915, "db_id": "tracking_orders", "final": {"question": "Which orders have shipment after 2000-01-01? Give me the order ids.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "source_tables": ["shipments"]}}
{"sample_id": 6885, "db_id": "tracking_orders", "final": {"question": "Find all the order items whose product id is 11. What are the order item ids?", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "source_tables": ["order_items"]}}
{"sample_id": 6910, "db_id": "tracking_orders", "final": {"question": "List the count and id of each product in all the orders.", "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["order_items", "products", "orders"]}}
{"sample_id": 6893, "db_id": "tracking_orders", "final": {"question": "Find the id of the customer who made the most orders.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 6904, "db_id": "tracking_orders", "final": {"question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6922, "db_id": "tracking_orders", "final": {"question": "What is the id of the order which has the most items?", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "orders"]}}
{"sample_id": 6925, "db_id": "tracking_orders", "final": {"question": "Find the name of the customer who made the most orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 6927, "db_id": "tracking_orders", "final": {"question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "source_tables": ["invoices"]}}
{"sample_id": 6924, "db_id": "tracking_orders", "final": {"question": "What is the name of the customer who has the largest number of orders?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 6919, "db_id": "tracking_orders", "final": {"question": "Sort all the distinct products in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "source_tables": ["products"]}}
{"sample_id": 6882, "db_id": "tracking_orders", "final": {"question": "Find the id of the order whose shipment tracking number is \"3452\".", "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"", "source_tables": ["shipments"]}}
{"sample_id": 6883, "db_id": "tracking_orders", "final": {"question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.", "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"", "source_tables": ["shipments"]}}
{"sample_id": 6898, "db_id": "tracking_orders", "final": {"question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6936, "db_id": "tracking_orders", "final": {"question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "products", "orders"]}}
{"sample_id": 6923, "db_id": "tracking_orders", "final": {"question": "Which order deals with the most items? Return the order id.", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "orders"]}}
{"sample_id": 6918, "db_id": "tracking_orders", "final": {"question": "List the names of all distinct products in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "source_tables": ["products"]}}
{"sample_id": 6909, "db_id": "tracking_orders", "final": {"question": "On what day was the order with invoice number 10 placed?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "source_tables": ["shipments", "orders"]}}
{"sample_id": 6879, "db_id": "tracking_orders", "final": {"question": "Find the id of the order made most recently.", "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "source_tables": ["orders"]}}
{"sample_id": 6889, "db_id": "tracking_orders", "final": {"question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6932, "db_id": "tracking_orders", "final": {"question": "Find the name of the customers who have at most two orders.", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6934, "db_id": "tracking_orders", "final": {"question": "List the names of the customers who have once bought product \"food\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "products", "orders"]}}
{"sample_id": 6913, "db_id": "tracking_orders", "final": {"question": "For each product, show its name and the number of times it was ordered.", "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["order_items", "products", "orders"]}}
{"sample_id": 6937, "db_id": "tracking_orders", "final": {"question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "products", "orders"]}}
{"sample_id": 6880, "db_id": "tracking_orders", "final": {"question": "what are the order id and customer id of the oldest order?", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "source_tables": ["orders"]}}
{"sample_id": 6928, "db_id": "tracking_orders", "final": {"question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "source_tables": ["invoices"]}}
{"sample_id": 6892, "db_id": "tracking_orders", "final": {"question": "What is the customer id of the customer who has the most orders?", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 6946, "db_id": "architecture", "final": {"question": "What are the ids and names of the architects who built at least 3 bridges ?", "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3", "source_tables": ["architect", "bridge"]}}
{"sample_id": 6943, "db_id": "architecture", "final": {"question": "What are the distinct names and nationalities of the architects who have ever built a mill?", "sql": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id", "source_tables": ["mill", "architect"]}}
{"sample_id": 6948, "db_id": "architecture", "final": {"question": "What are the ids, names and genders of the architects who built two bridges or one mill?", "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1", "source_tables": ["mill", "architect", "bridge"]}}
{"sample_id": 6938, "db_id": "architecture", "final": {"question": "How many architects are female?", "sql": "SELECT count(*) FROM architect WHERE gender  =  'female'", "source_tables": ["architect"]}}
{"sample_id": 6952, "db_id": "architecture", "final": {"question": "What is the most common mill type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["mill"]}}
{"sample_id": 6947, "db_id": "architecture", "final": {"question": "What is the id, name and nationality of the architect who built most mills?", "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["mill", "architect"]}}
{"sample_id": 6945, "db_id": "architecture", "final": {"question": "What are the distinct types of mills that are built by American or Canadian architects?", "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'", "source_tables": ["mill", "architect"]}}
{"sample_id": 6950, "db_id": "architecture", "final": {"question": "Which of the mill names contains the french word 'Moulin'?", "sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "source_tables": ["mill"]}}
{"sample_id": 6940, "db_id": "architecture", "final": {"question": "What is the maximum length in meters for the bridges and what are the architects' names?", "sql": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id", "source_tables": ["architect", "bridge"]}}
{"sample_id": 6951, "db_id": "architecture", "final": {"question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "source_tables": ["mill", "architect", "bridge"]}}
{"sample_id": 6971, "db_id": "culture_company", "final": {"question": "Show publishers with a book published in 1989 and a book in 1990.", "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "source_tables": ["book_club"]}}
{"sample_id": 6979, "db_id": "culture_company", "final": {"question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "source_tables": ["movie"]}}
{"sample_id": 6957, "db_id": "culture_company", "final": {"question": "show the titles, and authors or editors for all books made after the year 1989.", "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "source_tables": ["book_club"]}}
{"sample_id": 6962, "db_id": "culture_company", "final": {"question": "What are the years, titles, and publishers for all books, ordered by year descending?", "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "source_tables": ["book_club"]}}
{"sample_id": 6964, "db_id": "culture_company", "final": {"question": "How many books are there for each publisher?", "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "source_tables": ["book_club"]}}
{"sample_id": 6972, "db_id": "culture_company", "final": {"question": "What are the publishers who have published a book in both 1989 and 1990?", "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "source_tables": ["book_club"]}}
{"sample_id": 6980, "db_id": "culture_company", "final": {"question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "source_tables": ["movie"]}}
{"sample_id": 6969, "db_id": "culture_company", "final": {"question": "List categories that have at least two books after year 1989.", "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "source_tables": ["book_club"]}}
{"sample_id": 6956, "db_id": "culture_company", "final": {"question": "Count the number of book clubs.", "sql": "SELECT count(*) FROM book_club", "source_tables": ["book_club"]}}
{"sample_id": 6959, "db_id": "culture_company", "final": {"question": "Show all distinct publishers for books.", "sql": "SELECT DISTINCT publisher FROM book_club", "source_tables": ["book_club"]}}
{"sample_id": 6963, "db_id": "culture_company", "final": {"question": "Show all publishers and the number of books for each publisher.", "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "source_tables": ["book_club"]}}
{"sample_id": 6965, "db_id": "culture_company", "final": {"question": "What is the publisher with most number of books?", "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["book_club"]}}
{"sample_id": 6989, "db_id": "culture_company", "final": {"question": "Show the movie titles and book titles for all companies in China.", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "source_tables": ["book_club", "movie", "culture_company"]}}
{"sample_id": 6984, "db_id": "culture_company", "final": {"question": "Which directors had a movie in either 1999 or 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "source_tables": ["movie"]}}
{"sample_id": 6958, "db_id": "culture_company", "final": {"question": "What are the titles and authors or editors that correspond to books made after 1989?", "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "source_tables": ["book_club"]}}
{"sample_id": 6983, "db_id": "culture_company", "final": {"question": "Show all director names who have a movie in the year 1999 or 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "source_tables": ["movie"]}}
{"sample_id": 6986, "db_id": "culture_company", "final": {"question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 6966, "db_id": "culture_company", "final": {"question": "Return the publisher that has published the most books.", "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["book_club"]}}
{"sample_id": 6985, "db_id": "culture_company", "final": {"question": "What is the average, maximum, and minimum budget for all movies before 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 6961, "db_id": "culture_company", "final": {"question": "Show the years, book titles, and publishers for all books, in descending order by year.", "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "source_tables": ["book_club"]}}
{"sample_id": 6978, "db_id": "culture_company", "final": {"question": "Count the number of different directors.", "sql": "SELECT COUNT (DISTINCT director) FROM movie", "source_tables": ["movie"]}}
{"sample_id": 7029, "db_id": "concert_singer", "final": {"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer_in_concert", "singer"]}}
{"sample_id": 7028, "db_id": "concert_singer", "final": {"question": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer_in_concert", "singer"]}}
{"sample_id": 7027, "db_id": "concert_singer", "final": {"question": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "source_tables": ["singer_in_concert", "concert"]}}
{"sample_id": 7008, "db_id": "concert_singer", "final": {"question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "source_tables": ["stadium"]}}
{"sample_id": 6997, "db_id": "concert_singer", "final": {"question": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "source_tables": ["singer"]}}
{"sample_id": 7005, "db_id": "concert_singer", "final": {"question": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "source_tables": ["singer"]}}
{"sample_id": 7016, "db_id": "concert_singer", "final": {"question": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7018, "db_id": "concert_singer", "final": {"question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7014, "db_id": "concert_singer", "final": {"question": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "source_tables": ["concert"]}}
{"sample_id": 7017, "db_id": "concert_singer", "final": {"question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7032, "db_id": "concert_singer", "final": {"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 7003, "db_id": "concert_singer", "final": {"question": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "source_tables": ["singer"]}}
{"sample_id": 7001, "db_id": "concert_singer", "final": {"question": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "source_tables": ["singer"]}}
{"sample_id": 7000, "db_id": "concert_singer", "final": {"question": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 7004, "db_id": "concert_singer", "final": {"question": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "source_tables": ["singer"]}}
{"sample_id": 7030, "db_id": "concert_singer", "final": {"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer_in_concert", "singer", "concert"]}}
{"sample_id": 7022, "db_id": "concert_singer", "final": {"question": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7007, "db_id": "concert_singer", "final": {"question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "source_tables": ["stadium"]}}
{"sample_id": 7011, "db_id": "concert_singer", "final": {"question": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "source_tables": ["stadium"]}}
{"sample_id": 7019, "db_id": "concert_singer", "final": {"question": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert"]}}
{"sample_id": 7033, "db_id": "concert_singer", "final": {"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 7009, "db_id": "concert_singer", "final": {"question": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "source_tables": ["stadium"]}}
{"sample_id": 7013, "db_id": "concert_singer", "final": {"question": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "source_tables": ["concert"]}}
{"sample_id": 6996, "db_id": "concert_singer", "final": {"question": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "source_tables": ["singer"]}}
{"sample_id": 6994, "db_id": "concert_singer", "final": {"question": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 7020, "db_id": "concert_singer", "final": {"question": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert"]}}
{"sample_id": 7002, "db_id": "concert_singer", "final": {"question": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "source_tables": ["singer"]}}
{"sample_id": 7049, "db_id": "pets_1", "final": {"question": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "source_tables": ["pets"]}}
{"sample_id": 7044, "db_id": "pets_1", "final": {"question": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7057, "db_id": "pets_1", "final": {"question": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7040, "db_id": "pets_1", "final": {"question": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 7079, "db_id": "pets_1", "final": {"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7056, "db_id": "pets_1", "final": {"question": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7043, "db_id": "pets_1", "final": {"question": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "source_tables": ["pets"]}}
{"sample_id": 7078, "db_id": "pets_1", "final": {"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7052, "db_id": "pets_1", "final": {"question": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7051, "db_id": "pets_1", "final": {"question": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7069, "db_id": "pets_1", "final": {"question": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7066, "db_id": "pets_1", "final": {"question": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 7060, "db_id": "pets_1", "final": {"question": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 7067, "db_id": "pets_1", "final": {"question": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 7038, "db_id": "pets_1", "final": {"question": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "source_tables": ["pets"]}}
{"sample_id": 7050, "db_id": "pets_1", "final": {"question": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7075, "db_id": "pets_1", "final": {"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7076, "db_id": "pets_1", "final": {"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7045, "db_id": "pets_1", "final": {"question": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7053, "db_id": "pets_1", "final": {"question": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7055, "db_id": "pets_1", "final": {"question": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7058, "db_id": "pets_1", "final": {"question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7064, "db_id": "pets_1", "final": {"question": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 7071, "db_id": "pets_1", "final": {"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7041, "db_id": "pets_1", "final": {"question": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 7154, "db_id": "car_1", "final": {"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7139, "db_id": "car_1", "final": {"question": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 7169, "db_id": "car_1", "final": {"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_names", "model_list", "car_makers"]}}
{"sample_id": 7166, "db_id": "car_1", "final": {"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7110, "db_id": "car_1", "final": {"question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "source_tables": ["cars_data"]}}
{"sample_id": 7151, "db_id": "car_1", "final": {"question": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7123, "db_id": "car_1", "final": {"question": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "source_tables": ["countries", "continents", "car_makers"]}}
{"sample_id": 7165, "db_id": "car_1", "final": {"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["car_names", "car_makers", "model_list", "cars_data"]}}
{"sample_id": 7109, "db_id": "car_1", "final": {"question": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "source_tables": ["countries", "model_list", "car_makers"]}}
{"sample_id": 7084, "db_id": "car_1", "final": {"question": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "source_tables": ["countries"]}}
{"sample_id": 7130, "db_id": "car_1", "final": {"question": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7097, "db_id": "car_1", "final": {"question": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "source_tables": ["car_names", "model_list", "cars_data"]}}
{"sample_id": 7102, "db_id": "car_1", "final": {"question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7149, "db_id": "car_1", "final": {"question": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "source_tables": ["cars_data"]}}
{"sample_id": 7101, "db_id": "car_1", "final": {"question": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7124, "db_id": "car_1", "final": {"question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7111, "db_id": "car_1", "final": {"question": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "source_tables": ["cars_data"]}}
{"sample_id": 7153, "db_id": "car_1", "final": {"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}}
{"sample_id": 7100, "db_id": "car_1", "final": {"question": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7152, "db_id": "car_1", "final": {"question": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}}
{"sample_id": 7091, "db_id": "car_1", "final": {"question": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7113, "db_id": "car_1", "final": {"question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "source_tables": ["cars_data"]}}
{"sample_id": 7081, "db_id": "car_1", "final": {"question": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "source_tables": ["continents"]}}
{"sample_id": 7090, "db_id": "car_1", "final": {"question": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7083, "db_id": "car_1", "final": {"question": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "source_tables": ["countries", "continents"]}}
{"sample_id": 7122, "db_id": "car_1", "final": {"question": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "source_tables": ["countries", "continents", "car_makers"]}}
{"sample_id": 7147, "db_id": "car_1", "final": {"question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "source_tables": ["cars_data"]}}
{"sample_id": 7119, "db_id": "car_1", "final": {"question": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "source_tables": ["cars_data"]}}
{"sample_id": 7092, "db_id": "car_1", "final": {"question": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "source_tables": ["car_names", "model_list", "cars_data", "car_makers"]}}
{"sample_id": 7129, "db_id": "car_1", "final": {"question": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 7143, "db_id": "car_1", "final": {"question": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7141, "db_id": "car_1", "final": {"question": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7117, "db_id": "car_1", "final": {"question": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7116, "db_id": "car_1", "final": {"question": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7155, "db_id": "car_1", "final": {"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7144, "db_id": "car_1", "final": {"question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "source_tables": ["car_names", "model_list", "cars_data", "car_makers"]}}
{"sample_id": 7093, "db_id": "car_1", "final": {"question": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "source_tables": ["car_names", "model_list", "cars_data", "car_makers"]}}
{"sample_id": 7137, "db_id": "car_1", "final": {"question": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "source_tables": ["cars_data"]}}
{"sample_id": 7120, "db_id": "car_1", "final": {"question": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "source_tables": ["cars_data"]}}
{"sample_id": 7171, "db_id": "car_1", "final": {"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "source_tables": ["countries", "model_list", "car_makers"]}}
{"sample_id": 7170, "db_id": "car_1", "final": {"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "source_tables": ["countries", "model_list", "car_makers"]}}
{"sample_id": 7085, "db_id": "car_1", "final": {"question": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "source_tables": ["countries"]}}
{"sample_id": 7107, "db_id": "car_1", "final": {"question": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7118, "db_id": "car_1", "final": {"question": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "source_tables": ["cars_data"]}}
{"sample_id": 7108, "db_id": "car_1", "final": {"question": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "source_tables": ["countries", "model_list", "car_makers"]}}
{"sample_id": 7148, "db_id": "car_1", "final": {"question": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "source_tables": ["cars_data"]}}
{"sample_id": 7127, "db_id": "car_1", "final": {"question": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7138, "db_id": "car_1", "final": {"question": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 7089, "db_id": "car_1", "final": {"question": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7104, "db_id": "car_1", "final": {"question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7146, "db_id": "car_1", "final": {"question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "source_tables": ["cars_data"]}}
{"sample_id": 7080, "db_id": "car_1", "final": {"question": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "source_tables": ["continents"]}}
{"sample_id": 7103, "db_id": "car_1", "final": {"question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7095, "db_id": "car_1", "final": {"question": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7140, "db_id": "car_1", "final": {"question": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7175, "db_id": "flight_2", "final": {"question": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "source_tables": ["airlines"]}}
{"sample_id": 7184, "db_id": "flight_2", "final": {"question": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "source_tables": ["flights"]}}
{"sample_id": 7210, "db_id": "flight_2", "final": {"question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7209, "db_id": "flight_2", "final": {"question": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7221, "db_id": "flight_2", "final": {"question": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7240, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "source_tables": ["flights"]}}
{"sample_id": 7218, "db_id": "flight_2", "final": {"question": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7206, "db_id": "flight_2", "final": {"question": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7172, "db_id": "flight_2", "final": {"question": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "source_tables": ["airlines"]}}
{"sample_id": 7228, "db_id": "flight_2", "final": {"question": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7233, "db_id": "flight_2", "final": {"question": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7236, "db_id": "flight_2", "final": {"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7249, "db_id": "flight_2", "final": {"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7238, "db_id": "flight_2", "final": {"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7202, "db_id": "flight_2", "final": {"question": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7195, "db_id": "flight_2", "final": {"question": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "source_tables": ["airports"]}}
{"sample_id": 7232, "db_id": "flight_2", "final": {"question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7234, "db_id": "flight_2", "final": {"question": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7244, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7185, "db_id": "flight_2", "final": {"question": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "source_tables": ["flights"]}}
{"sample_id": 7239, "db_id": "flight_2", "final": {"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7181, "db_id": "flight_2", "final": {"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "source_tables": ["airlines"]}}
{"sample_id": 7199, "db_id": "flight_2", "final": {"question": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "source_tables": ["flights"]}}
{"sample_id": 7231, "db_id": "flight_2", "final": {"question": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7213, "db_id": "flight_2", "final": {"question": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "source_tables": ["airlines", "airports", "flights"]}}
{"sample_id": 7196, "db_id": "flight_2", "final": {"question": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "source_tables": ["flights"]}}
{"sample_id": 7204, "db_id": "flight_2", "final": {"question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7179, "db_id": "flight_2", "final": {"question": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "source_tables": ["airports"]}}
{"sample_id": 7192, "db_id": "flight_2", "final": {"question": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "source_tables": ["airports"]}}
{"sample_id": 7197, "db_id": "flight_2", "final": {"question": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "source_tables": ["flights"]}}
{"sample_id": 7188, "db_id": "flight_2", "final": {"question": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "source_tables": ["airlines"]}}
{"sample_id": 7220, "db_id": "flight_2", "final": {"question": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7200, "db_id": "flight_2", "final": {"question": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7229, "db_id": "flight_2", "final": {"question": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7212, "db_id": "flight_2", "final": {"question": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "source_tables": ["airlines", "airports", "flights"]}}
{"sample_id": 7180, "db_id": "flight_2", "final": {"question": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "source_tables": ["airlines"]}}
{"sample_id": 7216, "db_id": "flight_2", "final": {"question": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7251, "db_id": "flight_2", "final": {"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["airports", "flights"]}}
{"sample_id": 7246, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7245, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7186, "db_id": "flight_2", "final": {"question": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "source_tables": ["airlines"]}}
{"sample_id": 7182, "db_id": "flight_2", "final": {"question": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "source_tables": ["airports"]}}
{"sample_id": 7176, "db_id": "flight_2", "final": {"question": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "source_tables": ["airlines"]}}
{"sample_id": 7227, "db_id": "flight_2", "final": {"question": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7208, "db_id": "flight_2", "final": {"question": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7214, "db_id": "flight_2", "final": {"question": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7198, "db_id": "flight_2", "final": {"question": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "source_tables": ["flights"]}}
{"sample_id": 7248, "db_id": "flight_2", "final": {"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7252, "db_id": "employee_hire_evaluation", "final": {"question": "How many employees are there?", "sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}}
{"sample_id": 7254, "db_id": "employee_hire_evaluation", "final": {"question": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "source_tables": ["employee"]}}
{"sample_id": 7276, "db_id": "employee_hire_evaluation", "final": {"question": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hiring", "shop"]}}
{"sample_id": 7258, "db_id": "employee_hire_evaluation", "final": {"question": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "source_tables": ["employee"]}}
{"sample_id": 7289, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 7271, "db_id": "employee_hire_evaluation", "final": {"question": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["evaluation", "employee"]}}
{"sample_id": 7274, "db_id": "employee_hire_evaluation", "final": {"question": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "source_tables": ["evaluation", "employee"]}}
{"sample_id": 7267, "db_id": "employee_hire_evaluation", "final": {"question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "source_tables": ["shop"]}}
{"sample_id": 7279, "db_id": "employee_hire_evaluation", "final": {"question": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "source_tables": ["hiring", "shop"]}}
{"sample_id": 7284, "db_id": "employee_hire_evaluation", "final": {"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 7265, "db_id": "employee_hire_evaluation", "final": {"question": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 7266, "db_id": "employee_hire_evaluation", "final": {"question": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "source_tables": ["shop"]}}
{"sample_id": 7278, "db_id": "employee_hire_evaluation", "final": {"question": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "source_tables": ["hiring", "shop"]}}
{"sample_id": 7288, "db_id": "employee_hire_evaluation", "final": {"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 7283, "db_id": "employee_hire_evaluation", "final": {"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 7287, "db_id": "employee_hire_evaluation", "final": {"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}}
{"sample_id": 7286, "db_id": "employee_hire_evaluation", "final": {"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}}
{"sample_id": 7275, "db_id": "employee_hire_evaluation", "final": {"question": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "source_tables": ["evaluation", "employee"]}}
{"sample_id": 7277, "db_id": "employee_hire_evaluation", "final": {"question": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hiring", "shop"]}}
{"sample_id": 7260, "db_id": "employee_hire_evaluation", "final": {"question": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "source_tables": ["shop"]}}
{"sample_id": 7280, "db_id": "employee_hire_evaluation", "final": {"question": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "source_tables": ["hiring", "shop"]}}
{"sample_id": 7262, "db_id": "employee_hire_evaluation", "final": {"question": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "source_tables": ["shop"]}}
{"sample_id": 7344, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "source_tables": ["ref_template_types"]}}
{"sample_id": 7348, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "source_tables": ["ref_template_types", "templates"]}}
{"sample_id": 7361, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 7368, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}}
{"sample_id": 7326, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "source_tables": ["templates"]}}
{"sample_id": 7336, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 7305, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 7330, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "source_tables": ["templates", "documents"]}}
{"sample_id": 7325, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates"]}}
{"sample_id": 7302, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "source_tables": ["documents"]}}
{"sample_id": 7358, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7332, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "source_tables": ["templates", "documents"]}}
{"sample_id": 7329, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7341, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "source_tables": ["ref_template_types"]}}
{"sample_id": 7293, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 7356, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7335, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "source_tables": ["templates", "documents"]}}
{"sample_id": 7372, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}}
{"sample_id": 7360, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 7303, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "source_tables": ["documents"]}}
{"sample_id": 7311, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7319, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "source_tables": ["templates"]}}
{"sample_id": 7308, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "source_tables": ["templates", "documents"]}}
{"sample_id": 7292, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 7370, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}}
{"sample_id": 7324, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates"]}}
{"sample_id": 7294, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "source_tables": ["documents"]}}
{"sample_id": 7367, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7304, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 7342, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "source_tables": ["ref_template_types"]}}
{"sample_id": 7291, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 7347, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "source_tables": ["ref_template_types", "templates", "documents"]}}
{"sample_id": 7343, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "source_tables": ["ref_template_types"]}}
{"sample_id": 7369, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}}
{"sample_id": 7320, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "source_tables": ["templates"]}}
{"sample_id": 7318, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "source_tables": ["templates"]}}
{"sample_id": 7349, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "source_tables": ["ref_template_types", "templates"]}}
{"sample_id": 7323, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "source_tables": ["templates"]}}
{"sample_id": 7312, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7300, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "source_tables": ["templates", "documents"]}}
{"sample_id": 7314, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7366, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7334, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "source_tables": ["templates", "documents"]}}
{"sample_id": 7354, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "source_tables": ["paragraphs"]}}
{"sample_id": 7338, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "source_tables": ["templates", "documents"]}}
{"sample_id": 7353, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7316, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "source_tables": ["templates"]}}
{"sample_id": 7331, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "source_tables": ["templates", "documents"]}}
{"sample_id": 7337, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 7301, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "source_tables": ["templates", "documents"]}}
{"sample_id": 7400, "db_id": "course_teach", "final": {"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7390, "db_id": "course_teach", "final": {"question": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "source_tables": ["teacher"]}}
{"sample_id": 7382, "db_id": "course_teach", "final": {"question": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "source_tables": ["teacher"]}}
{"sample_id": 7388, "db_id": "course_teach", "final": {"question": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 7377, "db_id": "course_teach", "final": {"question": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "source_tables": ["teacher"]}}
{"sample_id": 7380, "db_id": "course_teach", "final": {"question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\"", "source_tables": ["teacher"]}}
{"sample_id": 7394, "db_id": "course_teach", "final": {"question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "source_tables": ["teacher", "course", "course_arrange"]}}
{"sample_id": 7384, "db_id": "course_teach", "final": {"question": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 7393, "db_id": "course_teach", "final": {"question": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "source_tables": ["teacher", "course", "course_arrange"]}}
{"sample_id": 7401, "db_id": "course_teach", "final": {"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7398, "db_id": "course_teach", "final": {"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7376, "db_id": "course_teach", "final": {"question": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "source_tables": ["teacher"]}}
{"sample_id": 7386, "db_id": "course_teach", "final": {"question": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "source_tables": ["teacher"]}}
{"sample_id": 7379, "db_id": "course_teach", "final": {"question": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 7387, "db_id": "course_teach", "final": {"question": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "source_tables": ["teacher"]}}
{"sample_id": 7383, "db_id": "course_teach", "final": {"question": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "source_tables": ["teacher"]}}
{"sample_id": 7402, "db_id": "course_teach", "final": {"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7397, "db_id": "course_teach", "final": {"question": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "source_tables": ["teacher", "course", "course_arrange"]}}
{"sample_id": 7420, "db_id": "museum_visit", "final": {"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "source_tables": ["visitor", "museum", "visit"]}}
{"sample_id": 7417, "db_id": "museum_visit", "final": {"question": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "source_tables": ["visit"]}}
{"sample_id": 7406, "db_id": "museum_visit", "final": {"question": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "source_tables": ["visitor"]}}
{"sample_id": 7404, "db_id": "museum_visit", "final": {"question": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "source_tables": ["visitor"]}}
{"sample_id": 7412, "db_id": "museum_visit", "final": {"question": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "source_tables": ["visitor", "visit"]}}
{"sample_id": 7418, "db_id": "museum_visit", "final": {"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "source_tables": ["visitor", "visit"]}}
{"sample_id": 7414, "db_id": "museum_visit", "final": {"question": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["museum", "visit"]}}
{"sample_id": 7407, "db_id": "museum_visit", "final": {"question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "source_tables": ["visitor"]}}
{"sample_id": 7411, "db_id": "museum_visit", "final": {"question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "source_tables": ["museum"]}}
{"sample_id": 7413, "db_id": "museum_visit", "final": {"question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "source_tables": ["visitor", "visit"]}}
{"sample_id": 7460, "db_id": "wta_1", "final": {"question": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7468, "db_id": "wta_1", "final": {"question": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 7466, "db_id": "wta_1", "final": {"question": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "source_tables": ["players"]}}
{"sample_id": 7438, "db_id": "wta_1", "final": {"question": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "source_tables": ["matches"]}}
{"sample_id": 7443, "db_id": "wta_1", "final": {"question": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 7423, "db_id": "wta_1", "final": {"question": "How many players are there?", "sql": "SELECT count(*) FROM players", "source_tables": ["players"]}}
{"sample_id": 7451, "db_id": "wta_1", "final": {"question": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 7424, "db_id": "wta_1", "final": {"question": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7446, "db_id": "wta_1", "final": {"question": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 7435, "db_id": "wta_1", "final": {"question": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "source_tables": ["players"]}}
{"sample_id": 7459, "db_id": "wta_1", "final": {"question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7472, "db_id": "wta_1", "final": {"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 7440, "db_id": "wta_1", "final": {"question": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 7439, "db_id": "wta_1", "final": {"question": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "source_tables": ["matches"]}}
{"sample_id": 7430, "db_id": "wta_1", "final": {"question": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7441, "db_id": "wta_1", "final": {"question": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 7477, "db_id": "wta_1", "final": {"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 7445, "db_id": "wta_1", "final": {"question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "source_tables": ["players", "matches"]}}
{"sample_id": 7482, "db_id": "wta_1", "final": {"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}}
{"sample_id": 7475, "db_id": "wta_1", "final": {"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 7433, "db_id": "wta_1", "final": {"question": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7480, "db_id": "wta_1", "final": {"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["players", "matches"]}}
{"sample_id": 7455, "db_id": "wta_1", "final": {"question": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7469, "db_id": "wta_1", "final": {"question": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 7452, "db_id": "wta_1", "final": {"question": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "source_tables": ["players", "rankings"]}}
{"sample_id": 7470, "db_id": "wta_1", "final": {"question": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}}
{"sample_id": 7437, "db_id": "wta_1", "final": {"question": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7454, "db_id": "wta_1", "final": {"question": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7465, "db_id": "wta_1", "final": {"question": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["players", "rankings"]}}
{"sample_id": 7478, "db_id": "wta_1", "final": {"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}}
{"sample_id": 7429, "db_id": "wta_1", "final": {"question": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7476, "db_id": "wta_1", "final": {"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 7448, "db_id": "wta_1", "final": {"question": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 7464, "db_id": "wta_1", "final": {"question": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["players", "rankings"]}}
{"sample_id": 7450, "db_id": "wta_1", "final": {"question": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 7444, "db_id": "wta_1", "final": {"question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "source_tables": ["players", "matches"]}}
{"sample_id": 7458, "db_id": "wta_1", "final": {"question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7499, "db_id": "battle_death", "final": {"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "source_tables": ["death"]}}
{"sample_id": 7485, "db_id": "battle_death", "final": {"question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "source_tables": ["ship"]}}
{"sample_id": 7486, "db_id": "battle_death", "final": {"question": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "source_tables": ["battle"]}}
{"sample_id": 7495, "db_id": "battle_death", "final": {"question": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "source_tables": ["battle"]}}
{"sample_id": 7492, "db_id": "battle_death", "final": {"question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "source_tables": ["death", "ship", "battle"]}}
{"sample_id": 7491, "db_id": "battle_death", "final": {"question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "source_tables": ["ship", "battle"]}}
{"sample_id": 7490, "db_id": "battle_death", "final": {"question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "source_tables": ["battle"]}}
{"sample_id": 7484, "db_id": "battle_death", "final": {"question": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "source_tables": ["ship"]}}
{"sample_id": 7488, "db_id": "battle_death", "final": {"question": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "source_tables": ["death"]}}
{"sample_id": 7557, "db_id": "student_transcripts_tracking", "final": {"question": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 7512, "db_id": "student_transcripts_tracking", "final": {"question": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 7558, "db_id": "student_transcripts_tracking", "final": {"question": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7562, "db_id": "student_transcripts_tracking", "final": {"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7519, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "source_tables": ["courses", "sections"]}}
{"sample_id": 7565, "db_id": "student_transcripts_tracking", "final": {"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 7505, "db_id": "student_transcripts_tracking", "final": {"question": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "source_tables": ["courses"]}}
{"sample_id": 7559, "db_id": "student_transcripts_tracking", "final": {"question": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7571, "db_id": "student_transcripts_tracking", "final": {"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}}
{"sample_id": 7546, "db_id": "student_transcripts_tracking", "final": {"question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "source_tables": ["students"]}}
{"sample_id": 7570, "db_id": "student_transcripts_tracking", "final": {"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}}
{"sample_id": 7543, "db_id": "student_transcripts_tracking", "final": {"question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "source_tables": ["students", "student_enrolment", "addresses"]}}
{"sample_id": 7549, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 7518, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "source_tables": ["courses", "sections"]}}
{"sample_id": 7545, "db_id": "student_transcripts_tracking", "final": {"question": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 7556, "db_id": "student_transcripts_tracking", "final": {"question": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 7510, "db_id": "student_transcripts_tracking", "final": {"question": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 7548, "db_id": "student_transcripts_tracking", "final": {"question": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 7539, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 7520, "db_id": "student_transcripts_tracking", "final": {"question": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "source_tables": ["sections"]}}
{"sample_id": 7547, "db_id": "student_transcripts_tracking", "final": {"question": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "source_tables": ["students"]}}
{"sample_id": 7507, "db_id": "student_transcripts_tracking", "final": {"question": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "source_tables": ["addresses"]}}
{"sample_id": 7529, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "source_tables": ["students", "student_enrolment", "degree_programs"]}}
{"sample_id": 7501, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 7532, "db_id": "student_transcripts_tracking", "final": {"question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7506, "db_id": "student_transcripts_tracking", "final": {"question": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "source_tables": ["addresses"]}}
{"sample_id": 7530, "db_id": "student_transcripts_tracking", "final": {"question": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7561, "db_id": "student_transcripts_tracking", "final": {"question": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 7564, "db_id": "student_transcripts_tracking", "final": {"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 7563, "db_id": "student_transcripts_tracking", "final": {"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7551, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 7521, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "source_tables": ["sections"]}}
{"sample_id": 7522, "db_id": "student_transcripts_tracking", "final": {"question": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 7575, "db_id": "student_transcripts_tracking", "final": {"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}}
{"sample_id": 7523, "db_id": "student_transcripts_tracking", "final": {"question": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 7526, "db_id": "student_transcripts_tracking", "final": {"question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "source_tables": ["students", "student_enrolment"]}}
{"sample_id": 7516, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "source_tables": ["sections"]}}
{"sample_id": 7525, "db_id": "student_transcripts_tracking", "final": {"question": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "source_tables": ["departments"]}}
{"sample_id": 7531, "db_id": "student_transcripts_tracking", "final": {"question": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7538, "db_id": "student_transcripts_tracking", "final": {"question": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 7500, "db_id": "student_transcripts_tracking", "final": {"question": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 7555, "db_id": "student_transcripts_tracking", "final": {"question": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "addresses"]}}
{"sample_id": 7573, "db_id": "student_transcripts_tracking", "final": {"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}}
{"sample_id": 7569, "db_id": "student_transcripts_tracking", "final": {"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7515, "db_id": "student_transcripts_tracking", "final": {"question": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 7541, "db_id": "student_transcripts_tracking", "final": {"question": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 7588, "db_id": "tvshow", "final": {"question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 7612, "db_id": "tvshow", "final": {"question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "source_tables": ["tv_series"]}}
{"sample_id": 7639, "db_id": "tvshow", "final": {"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7603, "db_id": "tvshow", "final": {"question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7628, "db_id": "tvshow", "final": {"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7601, "db_id": "tvshow", "final": {"question": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "source_tables": ["tv_channel"]}}
{"sample_id": 7578, "db_id": "tvshow", "final": {"question": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "source_tables": ["cartoon"]}}
{"sample_id": 7585, "db_id": "tvshow", "final": {"question": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "source_tables": ["cartoon"]}}
{"sample_id": 7618, "db_id": "tvshow", "final": {"question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 7580, "db_id": "tvshow", "final": {"question": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "source_tables": ["cartoon"]}}
{"sample_id": 7583, "db_id": "tvshow", "final": {"question": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "source_tables": ["cartoon"]}}
{"sample_id": 7617, "db_id": "tvshow", "final": {"question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 7611, "db_id": "tvshow", "final": {"question": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "source_tables": ["tv_series"]}}
{"sample_id": 7636, "db_id": "tvshow", "final": {"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7604, "db_id": "tvshow", "final": {"question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7622, "db_id": "tvshow", "final": {"question": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "source_tables": ["cartoon"]}}
{"sample_id": 7613, "db_id": "tvshow", "final": {"question": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "source_tables": ["tv_series"]}}
{"sample_id": 7586, "db_id": "tvshow", "final": {"question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "source_tables": ["cartoon"]}}
{"sample_id": 7609, "db_id": "tvshow", "final": {"question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"]}}
{"sample_id": 7587, "db_id": "tvshow", "final": {"question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "source_tables": ["cartoon"]}}
{"sample_id": 7582, "db_id": "tvshow", "final": {"question": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "source_tables": ["cartoon"]}}
{"sample_id": 7623, "db_id": "tvshow", "final": {"question": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "source_tables": ["cartoon"]}}
{"sample_id": 7579, "db_id": "tvshow", "final": {"question": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "source_tables": ["cartoon"]}}
{"sample_id": 7630, "db_id": "tvshow", "final": {"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7619, "db_id": "tvshow", "final": {"question": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 7606, "db_id": "tvshow", "final": {"question": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "source_tables": ["tv_series"]}}
{"sample_id": 7602, "db_id": "tvshow", "final": {"question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7584, "db_id": "tvshow", "final": {"question": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "source_tables": ["cartoon"]}}
{"sample_id": 7633, "db_id": "tvshow", "final": {"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 7615, "db_id": "tvshow", "final": {"question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "source_tables": ["tv_series"]}}
{"sample_id": 7616, "db_id": "tvshow", "final": {"question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 7610, "db_id": "tvshow", "final": {"question": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "source_tables": ["tv_series"]}}
{"sample_id": 7625, "db_id": "tvshow", "final": {"question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "source_tables": ["tv_channel"]}}
{"sample_id": 7591, "db_id": "tvshow", "final": {"question": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "source_tables": ["tv_channel"]}}
{"sample_id": 7595, "db_id": "tvshow", "final": {"question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "source_tables": ["tv_channel"]}}
{"sample_id": 7607, "db_id": "tvshow", "final": {"question": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "source_tables": ["tv_series"]}}
{"sample_id": 7596, "db_id": "tvshow", "final": {"question": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "source_tables": ["tv_channel"]}}
{"sample_id": 7665, "db_id": "poker_player", "final": {"question": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7671, "db_id": "poker_player", "final": {"question": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "source_tables": ["people"]}}
{"sample_id": 7664, "db_id": "poker_player", "final": {"question": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7678, "db_id": "poker_player", "final": {"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}}
{"sample_id": 7659, "db_id": "poker_player", "final": {"question": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7673, "db_id": "poker_player", "final": {"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 7667, "db_id": "poker_player", "final": {"question": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "source_tables": ["people"]}}
{"sample_id": 7654, "db_id": "poker_player", "final": {"question": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7679, "db_id": "poker_player", "final": {"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}}
{"sample_id": 7661, "db_id": "poker_player", "final": {"question": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7642, "db_id": "poker_player", "final": {"question": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "source_tables": ["poker_player"]}}
{"sample_id": 7677, "db_id": "poker_player", "final": {"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7657, "db_id": "poker_player", "final": {"question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7641, "db_id": "poker_player", "final": {"question": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 7666, "db_id": "poker_player", "final": {"question": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "source_tables": ["people"]}}
{"sample_id": 7647, "db_id": "poker_player", "final": {"question": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 7675, "db_id": "poker_player", "final": {"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "source_tables": ["people"]}}
{"sample_id": 7662, "db_id": "poker_player", "final": {"question": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7674, "db_id": "poker_player", "final": {"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "source_tables": ["people"]}}
{"sample_id": 7655, "db_id": "poker_player", "final": {"question": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7646, "db_id": "poker_player", "final": {"question": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 7668, "db_id": "poker_player", "final": {"question": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 7645, "db_id": "poker_player", "final": {"question": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 7649, "db_id": "poker_player", "final": {"question": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "source_tables": ["poker_player"]}}
{"sample_id": 7680, "db_id": "voter_1", "final": {"question": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state", "source_tables": ["area_code_state"]}}
{"sample_id": 7691, "db_id": "voter_1", "final": {"question": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["area_code_state", "votes"]}}
{"sample_id": 7694, "db_id": "voter_1", "final": {"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like \"%al%\"", "source_tables": ["contestants"]}}
{"sample_id": 7687, "db_id": "voter_1", "final": {"question": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "source_tables": ["votes", "contestants"]}}
{"sample_id": 7690, "db_id": "voter_1", "final": {"question": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "source_tables": ["votes", "contestants"]}}
{"sample_id": 7681, "db_id": "voter_1", "final": {"question": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "source_tables": ["contestants"]}}
{"sample_id": 7684, "db_id": "voter_1", "final": {"question": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "source_tables": ["votes"]}}
{"sample_id": 7693, "db_id": "voter_1", "final": {"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "source_tables": ["votes", "area_code_state", "contestants"]}}
{"sample_id": 7689, "db_id": "voter_1", "final": {"question": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "source_tables": ["votes"]}}
{"sample_id": 7793, "db_id": "world_1", "final": {"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 7758, "db_id": "world_1", "final": {"question": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7738, "db_id": "world_1", "final": {"question": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7740, "db_id": "world_1", "final": {"question": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7705, "db_id": "world_1", "final": {"question": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7752, "db_id": "world_1", "final": {"question": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7803, "db_id": "world_1", "final": {"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "source_tables": ["country"]}}
{"sample_id": 7743, "db_id": "world_1", "final": {"question": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7749, "db_id": "world_1", "final": {"question": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7759, "db_id": "world_1", "final": {"question": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7707, "db_id": "world_1", "final": {"question": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "source_tables": ["country"]}}
{"sample_id": 7731, "db_id": "world_1", "final": {"question": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7732, "db_id": "world_1", "final": {"question": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7710, "db_id": "world_1", "final": {"question": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "source_tables": ["country"]}}
{"sample_id": 7744, "db_id": "world_1", "final": {"question": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7813, "db_id": "world_1", "final": {"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7699, "db_id": "world_1", "final": {"question": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "source_tables": ["country"]}}
{"sample_id": 7720, "db_id": "world_1", "final": {"question": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "source_tables": ["country"]}}
{"sample_id": 7697, "db_id": "world_1", "final": {"question": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "source_tables": ["country"]}}
{"sample_id": 7746, "db_id": "world_1", "final": {"question": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7727, "db_id": "world_1", "final": {"question": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "source_tables": ["country"]}}
{"sample_id": 7810, "db_id": "world_1", "final": {"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7750, "db_id": "world_1", "final": {"question": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7798, "db_id": "world_1", "final": {"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7700, "db_id": "world_1", "final": {"question": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "source_tables": ["country"]}}
{"sample_id": 7728, "db_id": "world_1", "final": {"question": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "source_tables": ["country"]}}
{"sample_id": 7778, "db_id": "world_1", "final": {"question": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "source_tables": ["city", "countrylanguage", "country"]}}
{"sample_id": 7802, "db_id": "world_1", "final": {"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "source_tables": ["country"]}}
{"sample_id": 7792, "db_id": "world_1", "final": {"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 7805, "db_id": "world_1", "final": {"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "source_tables": ["city"]}}
{"sample_id": 7725, "db_id": "world_1", "final": {"question": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "source_tables": ["countrylanguage"]}}
{"sample_id": 7735, "db_id": "world_1", "final": {"question": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7702, "db_id": "world_1", "final": {"question": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "source_tables": ["country"]}}
{"sample_id": 7808, "db_id": "world_1", "final": {"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}}
{"sample_id": 7772, "db_id": "world_1", "final": {"question": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "source_tables": ["countrylanguage"]}}
{"sample_id": 7780, "db_id": "world_1", "final": {"question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "source_tables": ["city", "countrylanguage", "country"]}}
{"sample_id": 7766, "db_id": "world_1", "final": {"question": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "source_tables": ["country"]}}
{"sample_id": 7747, "db_id": "world_1", "final": {"question": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7737, "db_id": "world_1", "final": {"question": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7784, "db_id": "world_1", "final": {"question": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7748, "db_id": "world_1", "final": {"question": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7782, "db_id": "world_1", "final": {"question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7755, "db_id": "world_1", "final": {"question": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7704, "db_id": "world_1", "final": {"question": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "source_tables": ["city", "country"]}}
{"sample_id": 7742, "db_id": "world_1", "final": {"question": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7769, "db_id": "world_1", "final": {"question": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "source_tables": ["country"]}}
{"sample_id": 7715, "db_id": "world_1", "final": {"question": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "source_tables": ["country"]}}
{"sample_id": 7791, "db_id": "world_1", "final": {"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 7797, "db_id": "world_1", "final": {"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7774, "db_id": "world_1", "final": {"question": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "source_tables": ["countrylanguage"]}}
{"sample_id": 7779, "db_id": "world_1", "final": {"question": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "source_tables": ["city", "countrylanguage", "country"]}}
{"sample_id": 7789, "db_id": "world_1", "final": {"question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "source_tables": ["country"]}}
{"sample_id": 7794, "db_id": "world_1", "final": {"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 7716, "db_id": "world_1", "final": {"question": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "source_tables": ["country"]}}
{"sample_id": 7729, "db_id": "world_1", "final": {"question": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7768, "db_id": "world_1", "final": {"question": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "source_tables": ["country"]}}
{"sample_id": 7722, "db_id": "world_1", "final": {"question": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "source_tables": ["city"]}}
{"sample_id": 7790, "db_id": "world_1", "final": {"question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "source_tables": ["country"]}}
{"sample_id": 7703, "db_id": "world_1", "final": {"question": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "source_tables": ["city", "country"]}}
{"sample_id": 7754, "db_id": "world_1", "final": {"question": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "countrylanguage"]}}
{"sample_id": 7726, "db_id": "world_1", "final": {"question": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "source_tables": ["countrylanguage"]}}
{"sample_id": 7709, "db_id": "world_1", "final": {"question": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "source_tables": ["country"]}}
{"sample_id": 7695, "db_id": "world_1", "final": {"question": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "source_tables": ["country"]}}
{"sample_id": 7761, "db_id": "world_1", "final": {"question": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7717, "db_id": "world_1", "final": {"question": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "source_tables": ["country"]}}
{"sample_id": 7783, "db_id": "world_1", "final": {"question": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7788, "db_id": "world_1", "final": {"question": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "source_tables": ["city"]}}
{"sample_id": 7706, "db_id": "world_1", "final": {"question": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7751, "db_id": "world_1", "final": {"question": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7799, "db_id": "world_1", "final": {"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "source_tables": ["country"]}}
{"sample_id": 7712, "db_id": "world_1", "final": {"question": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "source_tables": ["country"]}}
{"sample_id": 7785, "db_id": "world_1", "final": {"question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7850, "db_id": "orchestra", "final": {"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 7852, "db_id": "orchestra", "final": {"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "source_tables": ["orchestra"]}}
{"sample_id": 7830, "db_id": "orchestra", "final": {"question": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "source_tables": ["conductor"]}}
{"sample_id": 7835, "db_id": "orchestra", "final": {"question": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7848, "db_id": "orchestra", "final": {"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 7822, "db_id": "orchestra", "final": {"question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "source_tables": ["orchestra"]}}
{"sample_id": 7841, "db_id": "orchestra", "final": {"question": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "source_tables": ["orchestra"]}}
{"sample_id": 7837, "db_id": "orchestra", "final": {"question": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7836, "db_id": "orchestra", "final": {"question": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7827, "db_id": "orchestra", "final": {"question": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 7833, "db_id": "orchestra", "final": {"question": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7825, "db_id": "orchestra", "final": {"question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "source_tables": ["performance"]}}
{"sample_id": 7834, "db_id": "orchestra", "final": {"question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7817, "db_id": "orchestra", "final": {"question": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "source_tables": ["conductor"]}}
{"sample_id": 7823, "db_id": "orchestra", "final": {"question": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "source_tables": ["show"]}}
{"sample_id": 7828, "db_id": "orchestra", "final": {"question": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 7851, "db_id": "orchestra", "final": {"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "source_tables": ["orchestra"]}}
{"sample_id": 7854, "db_id": "orchestra", "final": {"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 7831, "db_id": "orchestra", "final": {"question": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "source_tables": ["conductor"]}}
{"sample_id": 7840, "db_id": "orchestra", "final": {"question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7853, "db_id": "orchestra", "final": {"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 7842, "db_id": "orchestra", "final": {"question": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "source_tables": ["orchestra"]}}
{"sample_id": 7816, "db_id": "orchestra", "final": {"question": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 7843, "db_id": "orchestra", "final": {"question": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "source_tables": ["orchestra"]}}
{"sample_id": 7893, "db_id": "network_1", "final": {"question": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "source_tables": ["highschooler", "friend", "likes"]}}
{"sample_id": 7865, "db_id": "network_1", "final": {"question": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "source_tables": ["highschooler"]}}
{"sample_id": 7855, "db_id": "network_1", "final": {"question": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 7905, "db_id": "network_1", "final": {"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7907, "db_id": "network_1", "final": {"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7872, "db_id": "network_1", "final": {"question": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler"]}}
{"sample_id": 7882, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7908, "db_id": "network_1", "final": {"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7879, "db_id": "network_1", "final": {"question": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7880, "db_id": "network_1", "final": {"question": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7881, "db_id": "network_1", "final": {"question": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7896, "db_id": "network_1", "final": {"question": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "source_tables": ["likes"]}}
{"sample_id": 7887, "db_id": "network_1", "final": {"question": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7903, "db_id": "network_1", "final": {"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7877, "db_id": "network_1", "final": {"question": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7870, "db_id": "network_1", "final": {"question": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "source_tables": ["highschooler"]}}
{"sample_id": 7862, "db_id": "network_1", "final": {"question": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "source_tables": ["highschooler"]}}
{"sample_id": 7895, "db_id": "network_1", "final": {"question": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "source_tables": ["likes"]}}
{"sample_id": 7899, "db_id": "network_1", "final": {"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7910, "db_id": "network_1", "final": {"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7897, "db_id": "network_1", "final": {"question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7890, "db_id": "network_1", "final": {"question": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7885, "db_id": "network_1", "final": {"question": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7875, "db_id": "network_1", "final": {"question": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "source_tables": ["friend"]}}
{"sample_id": 7884, "db_id": "network_1", "final": {"question": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7892, "db_id": "network_1", "final": {"question": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "source_tables": ["friend", "likes"]}}
{"sample_id": 7863, "db_id": "network_1", "final": {"question": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 7889, "db_id": "network_1", "final": {"question": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7859, "db_id": "network_1", "final": {"question": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 7873, "db_id": "network_1", "final": {"question": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "source_tables": ["highschooler"]}}
{"sample_id": 7906, "db_id": "network_1", "final": {"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7874, "db_id": "network_1", "final": {"question": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "source_tables": ["highschooler"]}}
{"sample_id": 7894, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "source_tables": ["highschooler", "friend", "likes"]}}
{"sample_id": 7986, "db_id": "dog_kennels", "final": {"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7934, "db_id": "dog_kennels", "final": {"question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "source_tables": ["dogs", "treatments", "owners"]}}
{"sample_id": 7928, "db_id": "dog_kennels", "final": {"question": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dogs", "breeds"]}}
{"sample_id": 7937, "db_id": "dog_kennels", "final": {"question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7956, "db_id": "dog_kennels", "final": {"question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "source_tables": ["professionals"]}}
{"sample_id": 7919, "db_id": "dog_kennels", "final": {"question": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "source_tables": ["professionals", "dogs", "owners"]}}
{"sample_id": 7988, "db_id": "dog_kennels", "final": {"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}}
{"sample_id": 7959, "db_id": "dog_kennels", "final": {"question": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 7939, "db_id": "dog_kennels", "final": {"question": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7981, "db_id": "dog_kennels", "final": {"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7990, "db_id": "dog_kennels", "final": {"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}}
{"sample_id": 7931, "db_id": "dog_kennels", "final": {"question": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "source_tables": ["treatment_types", "treatments"]}}
{"sample_id": 7929, "db_id": "dog_kennels", "final": {"question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dogs", "treatments", "owners"]}}
{"sample_id": 7914, "db_id": "dog_kennels", "final": {"question": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7911, "db_id": "dog_kennels", "final": {"question": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "source_tables": ["professionals", "owners"]}}
{"sample_id": 7960, "db_id": "dog_kennels", "final": {"question": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 7974, "db_id": "dog_kennels", "final": {"question": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7938, "db_id": "dog_kennels", "final": {"question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7925, "db_id": "dog_kennels", "final": {"question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7948, "db_id": "dog_kennels", "final": {"question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7985, "db_id": "dog_kennels", "final": {"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7946, "db_id": "dog_kennels", "final": {"question": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7924, "db_id": "dog_kennels", "final": {"question": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7933, "db_id": "dog_kennels", "final": {"question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "source_tables": ["dogs", "treatments", "owners"]}}
{"sample_id": 7947, "db_id": "dog_kennels", "final": {"question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7982, "db_id": "dog_kennels", "final": {"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7971, "db_id": "dog_kennels", "final": {"question": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7927, "db_id": "dog_kennels", "final": {"question": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dogs", "breeds"]}}
{"sample_id": 7940, "db_id": "dog_kennels", "final": {"question": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7978, "db_id": "dog_kennels", "final": {"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 7972, "db_id": "dog_kennels", "final": {"question": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7935, "db_id": "dog_kennels", "final": {"question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7984, "db_id": "dog_kennels", "final": {"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7954, "db_id": "dog_kennels", "final": {"question": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7930, "db_id": "dog_kennels", "final": {"question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dogs", "treatments", "owners"]}}
{"sample_id": 7942, "db_id": "dog_kennels", "final": {"question": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "source_tables": ["treatment_types", "treatments"]}}
{"sample_id": 7916, "db_id": "dog_kennels", "final": {"question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7992, "db_id": "dog_kennels", "final": {"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["treatment_types", "professionals", "treatments"]}}
{"sample_id": 7957, "db_id": "dog_kennels", "final": {"question": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7958, "db_id": "dog_kennels", "final": {"question": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7941, "db_id": "dog_kennels", "final": {"question": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "source_tables": ["treatment_types", "treatments"]}}
{"sample_id": 7918, "db_id": "dog_kennels", "final": {"question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7961, "db_id": "dog_kennels", "final": {"question": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 7944, "db_id": "dog_kennels", "final": {"question": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7952, "db_id": "dog_kennels", "final": {"question": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7969, "db_id": "dog_kennels", "final": {"question": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "source_tables": ["treatments"]}}
{"sample_id": 7917, "db_id": "dog_kennels", "final": {"question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7921, "db_id": "dog_kennels", "final": {"question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7936, "db_id": "dog_kennels", "final": {"question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 8012, "db_id": "singer", "final": {"question": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "source_tables": ["singer", "song"]}}
{"sample_id": 8014, "db_id": "singer", "final": {"question": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "source_tables": ["singer", "song"]}}
{"sample_id": 8013, "db_id": "singer", "final": {"question": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "source_tables": ["singer", "song"]}}
{"sample_id": 8009, "db_id": "singer", "final": {"question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 8011, "db_id": "singer", "final": {"question": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "source_tables": ["singer", "song"]}}
{"sample_id": 8000, "db_id": "singer", "final": {"question": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "source_tables": ["singer"]}}
{"sample_id": 7996, "db_id": "singer", "final": {"question": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "source_tables": ["singer"]}}
{"sample_id": 8020, "db_id": "singer", "final": {"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}}
{"sample_id": 8021, "db_id": "singer", "final": {"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}}
{"sample_id": 8017, "db_id": "singer", "final": {"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}}
{"sample_id": 7999, "db_id": "singer", "final": {"question": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "source_tables": ["singer"]}}
{"sample_id": 7997, "db_id": "singer", "final": {"question": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "source_tables": ["singer"]}}
{"sample_id": 8003, "db_id": "singer", "final": {"question": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 8001, "db_id": "singer", "final": {"question": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "source_tables": ["singer"]}}
{"sample_id": 8005, "db_id": "singer", "final": {"question": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 8006, "db_id": "singer", "final": {"question": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 8016, "db_id": "singer", "final": {"question": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["singer", "song"]}}
{"sample_id": 7994, "db_id": "singer", "final": {"question": "What is the count of singers?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
