sample_id,db_id,question,score,gold_sql,cate_len_tbls,cate_gold_c,need_high|wrong,need_high|correct,need_mid|wrong,need_mid|correct,need_low|wrong,need_low|correct,need_1|wrong,need_1|correct,need_2|wrong,need_2|correct,need_3+|wrong,need_3+|correct,virtual_table,description
train.0,department_management,How many heads of the departments are older than 56 ?,1,SELECT count(*) FROM head WHERE age  >  56,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM head WHERE age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of department heads from the 'head' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.
train.3,department_management,What are the maximum and minimum budget of the departments?,1,"SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",This virtual table provides the maximum and minimum annual budget allocated to departments from the 'department' table. The placeholders in the SELECT clause represent the budget values in billions.
train.4,department_management,What is the average number of employees of the departments whose rank is between 10 and 15?,1,SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(num_employees) FROM department WHERE ranking BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average number of employees in departments from the 'department' table that have a ranking within a specified range. The placeholders in the WHERE clause represent the lower and upper bounds of the ranking range.
train.5,department_management,What are the names of the heads who are born outside the California state?,1,SELECT name FROM head WHERE born_state != 'California',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.
train.7,department_management,What are the names of the states where at least 3 heads were born?,1,SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results."
train.9,department_management,Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?,1,"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.
train.10,department_management,How many acting statuses are there?,1,SELECT count(DISTINCT temporary_acting) FROM management,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT temporary_acting) FROM management,"This virtual table provides a count of distinct values in the 'temporary_acting' column from the 'management' table, which indicates how many unique statuses of department heads (whether they are temporarily acting or not) exist."
train.11,department_management,How many departments are led by heads who are not mentioned?,1,SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);,"This virtual table provides the count of departments from the 'department' table that do not have a corresponding entry in the 'management' table, indicating that these departments are not currently managed by any head. The placeholder in the query allows for dynamic filtering based on department identifiers."
train.14,department_management,"Which department has more than 1 head at a time? List the id, name and the number of heads.",1,"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause."
train.15,department_management,Which head's name has the substring 'Ha'? List the id and name.,1,"SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT head_id ,  name FROM head WHERE name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the unique identifiers and names of department heads from the 'head' table whose names match a specific pattern. The placeholder in the WHERE clause allows for flexible searching of department head names.
train.16,farm,How many farms are there?,1,SELECT count(*) FROM farm,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM farm,"This virtual table provides the total count of farms recorded in the 'farm' table. The query uses the count function to aggregate the number of entries in the table, which represents the total number of farms."
train.18,farm,List the total number of horses on farms in ascending order.,1,SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC,"This virtual table provides a list of total horses present on various farms, sorted in ascending order. The query retrieves the 'Total_Horses' column from the 'farm' table, allowing users to see which farms have the least to the most horses."
train.20,farm,"What are the hosts of competitions whose theme is not ""Aliens""?",1,SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Hosts FROM farm_competition WHERE Theme !=  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of hosts for competitions from the 'farm_competition' table that do not match a specific theme. The placeholder in the WHERE clause represents the theme to be excluded.
train.22,farm,What are the themes of farm competitions sorted by year in ascending order?,1,SELECT Theme FROM farm_competition ORDER BY YEAR ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Theme FROM farm_competition ORDER BY YEAR ASC,"This virtual table provides a list of themes from the 'farm_competition' table, ordered by the year in which each competition took place. The placeholder in the ORDER BY clause indicates that the results will be sorted chronologically based on the year."
train.24,farm,What is the average number of working horses of farms with more than 5000 total number of horses?,1,SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average number of working horses from the 'farm' table for farms that have a total number of horses exceeding a specified threshold. The placeholder in the WHERE clause represents the minimum number of total horses required to be considered in the average calculation.
train.26,farm,What are the maximum and minimum number of cows across all farms.,1,"SELECT max(Cows) ,  min(Cows) FROM farm",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Cows) ,  min(Cows) FROM farm",This virtual table provides the maximum and minimum number of cows recorded on farms from the 'farm' table. The placeholders in the query allow for potential filtering or additional conditions to be applied in future queries.
train.28,farm,How many different statuses do cities have?,1,SELECT count(DISTINCT Status) FROM city,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Status) FROM city,This virtual table provides the count of distinct statuses of cities from the 'city' table. The result will indicate how many unique statuses (such as active or inactive) are present in the dataset.
train.30,farm,List official names of cities in descending order of population.,1,SELECT Official_Name FROM city ORDER BY Population DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Official_Name FROM city ORDER BY Population DESC,"This virtual table provides the official names of cities from the 'city' table, sorted in descending order based on their population. The query retrieves the 'Official_Name' column and orders the results by the 'Population' column to show the most populated cities first."
train.32,farm,List the official name and status of the city with the largest population.,1,"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned."
train.34,farm,Show the years and the official names of the host cities of competitions.,1,"SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",This virtual table provides the years of competitions along with the official names of the cities that hosted them. The placeholders in the query allow for dynamic filtering based on specific criteria if needed.
train.36,farm,Show the official names of the cities that have hosted more than one competition.,1,SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.
train.38,farm,Show the status of the city that has hosted the greatest number of competitions.,1,SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number."
train.40,farm,Please show the themes of competitions with host cities having populations larger than 1000.,1,SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.
train.42,farm,Please show the different statuses of cities and the average population of cities with each status.,1,"SELECT Status ,  avg(Population) FROM city GROUP BY Status",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Status ,  avg(Population) FROM city GROUP BY Status","This virtual table summarizes the average population of cities based on their current status (active or inactive) from the 'city' table. The query groups the results by the 'Status' column, allowing for a comparison of average populations across different city statuses."
train.48,farm,List the official names of cities that have not held any competition.,1,SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition),"This virtual table lists the official names of cities from the 'city' table that have not hosted any competitions. The placeholder in the WHERE clause represents the identifiers of cities that have hosted competitions, ensuring that only non-hosting cities are selected."
train.52,farm,Find the official names of cities with population bigger than 1500 or smaller than 500.,1,SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Official_Name FROM city WHERE Population  >  [PLACEHOLDER-TYPE:NUMBER] OR Population  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the official names of cities from the 'city' table where the population is either greater than or less than specified numeric values. The placeholders in the WHERE clause represent the population thresholds.
train.54,farm,"Show the census ranking of cities whose status are not ""Village"".",1,SELECT Census_Ranking FROM city WHERE Status !=  'Village',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Census_Ranking FROM city WHERE Status !=  [PLACEHOLDER-TYPE:STRING],This virtual table provides the census rankings of cities from the 'city' table that are not currently marked as a specific status. The placeholder in the WHERE clause represents the status to be excluded.
train.57,student_assessment,What is the name of the course with the most registered students?,1,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return."
train.60,student_assessment,what are the first name and last name of all candidates?,1,"SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",This virtual table describes the first and last names of candidates from the 'Candidates' table by joining it with the 'People' table. The join is based on the candidate's identifier matching the person's identifier.
train.62,student_assessment,List the id of students who never attends courses?,1,SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance),This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.
train.66,student_assessment,What are the ids of all students for courses and what are the names of those courses?,1,"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id","This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table."
train.69,student_assessment,How many students attend course English?,1,SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.
train.71,student_assessment,How many courses do the student whose id is 171 attend?,1,SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the count of attendance records for a specific course from the 'Courses' table, joined with the 'Student_Course_Attendance' table. The placeholder in the WHERE clause represents the unique identifier of the student whose attendance is being counted."
train.73,student_assessment,Find id of the candidate whose email is stanley.monahan@example.org?,1,SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique identifier of candidates from the 'candidates' table who are associated with a person in the 'people' table based on a specific email address. The placeholder in the WHERE clause represents the email address of the person.
train.75,student_assessment,Find id of the candidate who most recently accessed the course?,1,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.79,student_assessment,List the id of students who registered some courses and the number of their registered courses?,1,"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id","This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for."
train.83,student_assessment,"Find id of candidates whose assessment code is ""Pass""?",1,SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table based on a specific assessment outcome code. The placeholder in the WHERE clause represents the outcome code that is used to filter the results.
train.85,student_assessment,"Find the cell mobile number of the candidates whose assessment code is ""Fail""?",1,SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the mobile phone numbers of candidates from the 'candidates' table who have undergone assessments. It joins the 'candidate_assessments' table to filter candidates based on a specific assessment outcome code. The placeholder in the WHERE clause represents the outcome code of the assessment.
train.87,student_assessment,What are the id of students who registered course 301?,1,SELECT student_id FROM student_course_attendance WHERE course_id  =  301,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.
train.91,student_assessment,Find distinct cities of addresses of people?,1,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.
train.94,student_assessment,What are the different cities where students live?,1,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables."
train.95,student_assessment,List the names of courses in alphabetical order?,1,SELECT course_name FROM courses ORDER BY course_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT course_name FROM courses ORDER BY course_name,"This virtual table lists the names of all courses available in the 'Courses' table, sorted in alphabetical order. There are no filters applied, so all course names will be displayed."
train.97,student_assessment,List the first names of people in alphabetical order?,1,SELECT first_name FROM people ORDER BY first_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT first_name FROM people ORDER BY first_name,"This virtual table provides a list of first names of individuals from the 'People' table, sorted in alphabetical order. The query retrieves the 'first_name' column and organizes the results based on the names."
train.99,student_assessment,What are the id of students who registered courses or attended courses?,1,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,"This virtual table provides a list of unique student identifiers from two different sources: the 'Student_Course_Registrations' table, which contains students who have registered for courses, and the 'Student_Course_Attendance' table, which includes students who have attended courses. The use of UNION ensures that each student ID appears only once, regardless of whether they are registered or have attended a course."
train.101,student_assessment,Find the id of courses which are registered or attended by student whose id is 121?,1,SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.
train.107,student_assessment,List the id of students who attended  statistics courses in the order of attendance date.,1,SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance,"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course."
train.109,bike_1,Give me the dates when the max temperature was higher than 85.,1,SELECT date FROM weather WHERE max_temperature_f  >  85,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date FROM weather WHERE max_temperature_f  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates of weather reports from the 'weather' table where the maximum temperature exceeds a specified threshold. The placeholder in the WHERE clause represents the maximum temperature value to filter the results.
train.111,bike_1,What are the names of stations that have latitude lower than 37.5?,1,SELECT name FROM station WHERE lat  <  37.5,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.
train.113,bike_1,"For each city, return the highest latitude among its stations.",1,"SELECT city ,  max(lat) FROM station GROUP BY city",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT city ,  max(lat) FROM station GROUP BY city",This virtual table provides the maximum latitude of bike stations grouped by city from the 'station' table. The placeholder in the SELECT clause represents the city names.
train.115,bike_1,Give me the start station and end station for the trips with the three oldest id.,1,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the start and end station names of bike trips recorded in the 'trip' table. The results are ordered by the unique trip identifier and limited to a specified number of entries, represented by a placeholder for numeric values."
train.117,bike_1,What is the average latitude and longitude of stations located in San Jose city?,1,"SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  'San Jose'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average latitude and longitude of bike stations located in a specific city from the 'station' table. The placeholder in the WHERE clause represents the name of the city.
train.119,bike_1,What is the id of the trip that has the shortest duration?,1,SELECT id FROM trip ORDER BY duration LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT id FROM trip ORDER BY duration LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the unique identifiers of trips from the 'trip' table, ordered by the duration of each trip. The placeholder in the LIMIT clause allows the user to specify the maximum number of trip IDs to retrieve."
train.121,bike_1,What is the total and maximum duration of trips with bike id 636?,1,"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.
train.124,bike_1,"For each zip code, what is the average mean temperature for all dates that start with '8'?",1,"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code",This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.
train.125,bike_1,"From the trip record, find the number of unique bikes.",1,SELECT count(DISTINCT bike_id) FROM trip,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT bike_id) FROM trip,"This virtual table provides the total number of unique bikes that have been used in trips recorded in the 'trip' table. The query counts distinct bike identifiers, ensuring that each bike is only counted once, regardless of how many trips it has been involved in."
train.127,bike_1,What is the number of distinct cities the stations are located at?,1,SELECT count(DISTINCT city) FROM station,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT city) FROM station,This virtual table provides the count of distinct cities where bike stations are located from the 'station' table. The query counts unique city entries to give an overview of the geographical distribution of bike stations.
train.129,bike_1,How many stations does Mountain View city has?,1,SELECT COUNT(*) FROM station WHERE city  =  'Mountain View',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(*) FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of bike stations located in a specific city from the 'station' table. The placeholder in the WHERE clause represents the name of the city.
train.131,bike_1,Return the unique name for stations that have ever had 7 bikes available.,1,SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.
train.138,bike_1,What is the number of days that had an average humity above 50 and an average visibility above 8?,1,SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT COUNT(*) FROM weather WHERE mean_humidity  >  [PLACEHOLDER-TYPE:NUMBER] AND mean_visibility_miles  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of weather reports from the 'weather' table where the mean humidity exceeds a specified threshold and the mean visibility in miles also exceeds a specified threshold. The placeholders in the WHERE clause represent the numeric values for mean humidity and mean visibility that the user can define.
train.139,bike_1,"What is the latitude, longitude, city of the station from which the shortest trip started?",1,"SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the latitude and longitude coordinates along with the city of bike stations from the 'station' table that have been used as starting points for trips. The results are ordered by the duration of the trips, and the number of records returned is limited by a placeholder for numeric values."
train.141,bike_1,What are the ids of stations that are located in San Francisco and have average bike availability above 10.,1,SELECT id FROM station WHERE city  =  'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively."
train.147,bike_1,What is the zip code in which the average mean sea level pressure is the lowest?,1,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return."
train.149,bike_1,What is the average bike availability in stations that are not located in Palo Alto?,1,SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  'Palo Alto'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.
train.151,bike_1,What is the average longitude of stations that never had bike availability more than 10?,1,SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]),This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.
train.157,bike_1,"For each zip code, return how many times max wind speed reached 25?",1,"SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  [PLACEHOLDER-TYPE:NUMBER] GROUP BY zip_code",This virtual table summarizes the number of weather reports for each zip code where the maximum wind speed exceeded a specified threshold. The placeholder in the WHERE clause represents the minimum wind speed in miles per hour.
train.159,bike_1,On which day and in which zip code was the min dew point lower than any day in zip code 94107?,1,"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])",This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.
train.169,bike_1,What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,1,SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available."
train.171,bike_1,What are names of stations that have average bike availability above 10 and are not located in San Jose city?,1,SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  'San Jose',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively."
train.173,bike_1,"What are the name, latitude, and city of the station with the lowest latitude?",1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names, latitude coordinates, and cities of bike stations from the 'station' table, ordered by latitude. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
train.175,bike_1,"What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",1,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of weather conditions, specifically the date, mean temperature, and mean humidity, from the 'weather' table. The results are ordered by the maximum gust speed recorded for each day, allowing users to see the days with the highest wind gusts first. The placeholder in the LIMIT clause allows users to specify the number of records they wish to retrieve."
train.177,bike_1,List the name and the number of stations for all the cities that have at least 15 stations.,1,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the number of bike stations located in each city from the 'station' table. The placeholder in the HAVING clause represents the minimum count of stations required for a city to be included in the results.
train.179,bike_1,Find the ids and names of stations from which at least 200 trips started.,1,"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results."
train.181,bike_1,Find the zip code in which the average mean visibility is lower than 10.,1,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.
train.185,bike_1,What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of weather reports, specifically focusing on the date and cloud cover percentage. The results are ordered by cloud cover in descending order, allowing users to see the days with the highest cloud cover first. The placeholder in the LIMIT clause allows users to specify the number of records they wish to retrieve."
train.187,bike_1,What are the ids and durations of the trips with the top 3 durations?,1,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of trip identifiers and their corresponding durations from the 'trip' table, sorted in descending order by duration. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.193,bike_1,List all the distinct stations from which a trip of duration below 100 started.,1,SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT start_station_name FROM trip WHERE duration  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique names of bike stations from the 'trip' table where the duration of trips is less than a specified value. The placeholder in the WHERE clause represents the maximum duration of the trips.
train.197,bike_1,Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.,1,SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER]),This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.
train.199,bike_1,What are the dates in which the mean sea level pressure was between 30.3 and 31?,1,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates of weather reports from the 'weather' table where the mean sea level pressure falls within a specified range. The placeholders in the WHERE clause represent the lower and upper bounds of the mean sea level pressure in inches.
train.201,bike_1,Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.,1,"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.203,bike_1,What are the id and name of the stations that have ever had more than 12 bikes available?,1,"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available."
train.207,bike_1,What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?,1,SELECT name FROM station WHERE city  =  'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips."
train.209,bike_1,How many trips started from Mountain View city and ended at Palo Alto city?,1,SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' AND T3.city  =  'Palo Alto',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.
train.213,book_2,How many books are there?,1,SELECT count(*) FROM book,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM book,This virtual table provides the total count of books available in the 'book' table. The query uses the count function to aggregate the number of entries in the table.
train.215,book_2,List the titles of the books in ascending order of issues.,1,SELECT Title FROM book ORDER BY Issues ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Title FROM book ORDER BY Issues ASC,"This virtual table lists the titles of books from the 'book' table, ordered by the number of issues in ascending order. This allows users to see which books have the least number of editions first."
train.216,book_2,"What are the titles of the books whose writer is not ""Elaine Lee""?",1,SELECT Title FROM book WHERE Writer != 'Elaine Lee',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.
train.217,book_2,What are the title and issues of the books?,1,"SELECT Title ,  Issues FROM book",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Title ,  Issues FROM book","This virtual table describes the titles and number of issues of books from the 'book' table. There are no filters applied, so it retrieves all records available in the table."
train.218,book_2,What are the dates of publications in descending order of price?,1,SELECT Publication_Date FROM publication ORDER BY Price DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Publication_Date FROM publication ORDER BY Price DESC,"This virtual table provides the publication dates of books from the 'publication' table, sorted by their retail price in descending order. The query allows users to see when each book was published, with the most expensive publications listed first."
train.219,book_2,What are the distinct publishers of publications with price higher than 5000000?,1,SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.
train.220,book_2,List the publisher of the publication with the highest price.,1,SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve."
train.221,book_2,List the publication dates of publications with 3 lowest prices.,1,SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of publication dates from the 'publication' table, ordered by the retail price of the publications in ascending order. The placeholder in the LIMIT clause indicates the maximum number of records to return."
train.222,book_2,Show the title and publication dates of books.,1,"SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID","This virtual table describes the titles of books along with their publication dates from the 'book' and 'publication' tables. The join operation links the two tables based on the 'Book_ID', allowing us to retrieve relevant information about each book's publication."
train.223,book_2,Show writers who have published a book with price more than 4000000.,1,SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.
train.224,book_2,Show the titles of books in descending order of publication price.,1,SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC,"The virtual table describes the titles of books from the 'book' table, joined with the 'publication' table to include only those publications. The results are ordered by the retail price of the publications in descending order."
train.225,book_2,Show publishers that have more than one publication.,1,SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.
train.226,book_2,Show different publishers together with the number of publications they have.,1,"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.
train.228,book_2,List the writers who have written more than one book.,1,SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.
train.229,book_2,List the titles of books that are not published.,1,SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication),"This virtual table lists the titles of books from the 'book' table that have not been published, as indicated by their absence in the 'publication' table. The placeholder in the subquery represents the book identifiers that are associated with any publication."
train.231,book_2,What is the number of distinct publication dates?,1,SELECT COUNT (DISTINCT Publication_Date) FROM publication,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT (DISTINCT Publication_Date) FROM publication,This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.
train.233,book_2,"Show the prices of publications whose publisher is either ""Person"" or ""Wiley""",1,SELECT Price FROM publication WHERE Publisher  =  'Person' OR Publisher  =  'Wiley',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.
train.234,musical,How many actors are there?,1,SELECT count(*) FROM actor,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM actor,"This virtual table provides the total number of actors listed in the 'actor' table. The query counts all entries in the table, which reflects the total count of actors available."
train.236,musical,List the name of actors in ascending alphabetical order.,1,SELECT Name FROM actor ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM actor ORDER BY Name ASC,"This virtual table lists the names of actors from the 'actor' table, sorted in ascending order. The query retrieves all actor names without any filtering conditions."
train.240,musical,List the name of actors whose age is not 20.,1,SELECT Name FROM actor WHERE Age != 20,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM actor WHERE Age != [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of actors from the 'actor' table who are not of a specific age. The placeholder in the WHERE clause represents the age to be excluded.
train.242,musical,What are the characters of actors in descending order of age?,1,SELECT Character FROM actor ORDER BY age DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Character FROM actor ORDER BY age DESC,"This virtual table lists the characters played by actors in various musicals, ordered by the age of the actors at the time of their performances. The placeholder in the ORDER BY clause represents the sorting criteria based on the actors' ages."
train.244,musical,What is the duration of the oldest actor?,1,SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.246,musical,"What are the names of musicals with nominee ""Bob Fosse""?",1,SELECT Name FROM musical WHERE Nominee  =  'Bob Fosse',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM musical WHERE Nominee  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of musicals from the 'musical' table that have a specific nominee. The placeholder in the WHERE clause represents the name of the nominee.
train.248,musical,"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?",1,SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT Nominee FROM musical WHERE Award != [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct nominees from the 'musical' table who have not been associated with a specific award. The placeholder in the WHERE clause represents the name of the award that is being excluded from the results.
train.250,musical,Show names of actors and names of musicals they are in.,1,"SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID","This virtual table describes the names of actors and the titles of the musicals they are associated with. The join operation links the 'actor' table and the 'musical' table based on the Musical_ID, allowing us to retrieve the relevant names from both tables."
train.252,musical,"Show names of actors that have appeared in musical with name ""The Phantom of the Opera"".",1,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  'The Phantom of the Opera',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.
train.254,musical,Show names of actors in descending order of the year their musical is awarded.,1,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC,This virtual table describes the names of actors from the 'actor' table who are linked to specific musicals in the 'musical' table. The results are ordered by the year of the musical in descending order.
train.258,musical,Show names of musicals which have at least three actors.,1,SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.
train.266,musical,List the nominees that have been nominated more than two musicals.,1,SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.
train.268,musical,List the name of musicals that do not have actors.,1,SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor),This virtual table lists the titles of musicals from the 'musical' table that do not have any associated actors. The placeholder in the WHERE clause represents the unique identifier for the musicals.
train.270,musical,"Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award"".",1,SELECT Nominee FROM musical WHERE Award  =  'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award  =  'Drama Desk Award',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.
train.274,twitter_1,"Find the emails of the user named ""Mary"".",1,SELECT email FROM user_profiles WHERE name  =  'Mary',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT email FROM user_profiles WHERE name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the email addresses of users from the 'user_profiles' table based on a specific user's name. The placeholder in the WHERE clause represents the name of the user whose email is being queried.
train.275,twitter_1,"What is the partition id of the user named ""Iron Man"".",1,SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT partitionid FROM user_profiles WHERE name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the partition identifier of a user from the 'user_profiles' table based on the user's name. The placeholder in the WHERE clause represents the specific name of the user being queried.
train.276,twitter_1,How many users are there?,1,SELECT count(*) FROM user_profiles,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM user_profiles,"This virtual table provides the total number of user profiles in the 'user_profiles' table. The query counts all entries in the table, which represents the total user count."
train.279,twitter_1,Find the number of tweets in record.,1,SELECT count(*) FROM tweets,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM tweets,"This virtual table provides the total number of tweets from the 'tweets' table. The count function is used to aggregate the total number of entries in the table, which represents the overall activity of users posting tweets."
train.281,twitter_1,Find the name and email of the user whose name contains the word ‘Swift’.,1,"SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  email FROM user_profiles WHERE name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and email addresses of users from the 'user_profiles' table whose names match a specific pattern. The placeholder in the WHERE clause represents the name pattern to search for.
train.282,twitter_1,Find the names of users whose emails contain ‘superstar’ or ‘edu’.,1,SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM user_profiles WHERE email LIKE [PLACEHOLDER-TYPE:STRING] OR email LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the names of users from the 'user_profiles' table whose email addresses match specific patterns. The placeholders in the WHERE clause represent the email patterns to search for.
train.283,twitter_1,Return the text of tweets about the topic 'intern'.,1,SELECT text FROM tweets WHERE text LIKE '%intern%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT text FROM tweets WHERE text LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the content of tweets from the 'tweets' table that match a specific text pattern. The placeholder in the WHERE clause represents the text pattern to search for.
train.284,twitter_1,Find the name and email of the users who have more than 1000 followers.,1,"SELECT name ,  email FROM user_profiles WHERE followers  >  1000",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  email FROM user_profiles WHERE followers  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and email addresses of users from the 'user_profiles' table who have a number of followers greater than a specified threshold. The placeholder in the WHERE clause represents the minimum number of followers a user must have.
train.287,twitter_1,Find the names of users who have more than one tweet.,1,SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.
train.289,twitter_1,Find the id of users who are followed by Mary or Susan.,1,SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  'Mary' OR T1.name  =  'Susan',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.
train.290,twitter_1,Find the name of the user who has the largest number of followers.,1,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of user names from the 'user_profiles' table, ordered by the number of followers in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of user names to retrieve."
train.291,twitter_1,Find the name and email of the user followed by the least number of people.,1,"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.292,twitter_1,"List the name and number of followers for each user, and sort the results by the number of followers in descending order.",1,"SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  followers FROM user_profiles ORDER BY followers DESC","This virtual table provides the names and follower counts of users from the 'user_profiles' table, sorted in descending order by the number of followers. This allows for easy identification of the most followed users."
train.294,twitter_1,List the text of all tweets in the order of date.,1,SELECT text FROM tweets ORDER BY createdate,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT text FROM tweets ORDER BY createdate,"This virtual table provides a list of tweet contents from the 'tweets' table, ordered by the date and time they were created. The ordering allows users to see the most recent tweets first."
train.296,twitter_1,Find the name and partition id for users who tweeted less than twice.,1,"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.
train.297,twitter_1,"Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",1,"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause."
train.298,twitter_1,Find the average number of followers for the users who do not have any tweet.,1,SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets),This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.
train.300,twitter_1,Find the maximum and total number of followers of all users.,1,"SELECT max(followers) ,  sum(followers) FROM user_profiles",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(followers) ,  sum(followers) FROM user_profiles",This virtual table provides the maximum and total number of followers from the 'user_profiles' table. The placeholders in the SELECT statement allow for further customization if needed.
train.301,product_catalog,Find the names of all the catalog entries.,1,SELECT distinct(catalog_entry_name) FROM catalog_contents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT distinct(catalog_entry_name) FROM catalog_contents,"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table."
train.303,product_catalog,Find the list of attribute data types possessed by more than 3 attribute definitions.,1,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results."
train.305,product_catalog,"What is the attribute data type of the attribute with name ""Green""?",1,SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  'Green',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the data type of a specific attribute from the 'Attribute_Definitions' table based on the attribute's name. The placeholder in the WHERE clause represents the name of the attribute being queried.
train.307,product_catalog,Find the name and level of catalog structure with level between 5 and 10.,1,"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.
train.309,product_catalog,"Find all the catalog publishers whose name contains ""Murray""",1,SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE '%Murray%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.
train.318,product_catalog,Find the entry name of the catalog with the highest price (in USD).,1,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of catalog entry names from the 'Catalog_Contents' table, ordered by their price in dollars in descending order. The placeholder in the LIMIT clause allows the user to specify the number of entries to retrieve."
train.321,product_catalog,What are the average and minimum price (in Euro) of all products?,1,"SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",This virtual table provides the average and minimum prices in euros for products listed in the 'Catalog_Contents' table. The placeholders in the SELECT statement allow for dynamic querying based on specific conditions that may be applied later.
train.323,product_catalog,What is the product with the highest height? Give me the catalog entry name.,1,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of catalog entry names from the 'Catalog_Contents' table, ordered by their height in descending order. The placeholder in the LIMIT clause represents the maximum number of entries to be returned."
train.325,product_catalog,Find the name of the product that has the smallest capacity.,1,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of catalog entry names from the 'Catalog_Contents' table, ordered by their capacity in ascending order. The placeholder in the LIMIT clause represents the maximum number of entries to be returned."
train.327,product_catalog,"Find the names of all the products whose stock number starts with ""2"".",1,SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that match a specific product stock number. The placeholder in the WHERE clause represents the stock number being searched for.
train.333,product_catalog,Find the name and attribute ID of the attribute definitions with attribute value 0.,1,"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.
train.335,product_catalog,Find the name and capacity of products with price greater than 700 (in USD).,1,"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.
train.339,product_catalog,How many products are there in the records?,1,SELECT count(*) FROM catalog_contents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM catalog_contents,"This virtual table provides a count of all entries in the 'Catalog_Contents' table, which contains detailed information about various catalog entries. The result will indicate the total number of catalog entries available."
train.341,product_catalog,Name all the products with next entry ID greater than 8.,1,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.
train.343,flight_1,How many aircrafts do we have?,1,SELECT count(*) FROM Aircraft,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Aircraft,This virtual table provides a count of all aircraft entries in the 'Aircraft' table. It gives an overview of the total number of aircraft available in the database.
train.345,flight_1,Show name and distance for all aircrafts.,1,"SELECT name ,  distance FROM Aircraft",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  distance FROM Aircraft",This virtual table provides the names and maximum distances of aircraft from the 'aircraft' table. The placeholder in the SELECT statement allows for the retrieval of specific aircraft details based on user-defined criteria.
train.347,flight_1,Show ids for all aircrafts with more than 1000 distance.,1,SELECT aid FROM Aircraft WHERE distance  >  1000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT aid FROM Aircraft WHERE distance  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the aircraft IDs from the 'Aircraft' table that can travel a distance greater than a specified value. The placeholder in the WHERE clause represents the maximum distance that the aircraft should be able to cover.
train.349,flight_1,How many aircrafts have distance between 1000 and 5000?,1,SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Aircraft WHERE distance BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of aircraft from the 'Aircraft' table that can travel within a specified distance range. The placeholders in the BETWEEN clause represent the minimum and maximum distances.
train.351,flight_1,What is the name and distance for aircraft with id 12?,1,"SELECT name ,  distance FROM Aircraft WHERE aid  =  12",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  distance FROM Aircraft WHERE aid  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the name and maximum distance of a specific aircraft from the 'aircraft' table, identified by its unique aircraft ID. The placeholder in the WHERE clause represents the aircraft's ID."
train.353,flight_1,"What is the minimum, average, and maximum distance of all aircrafts.",1,"SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft","This virtual table provides the minimum, average, and maximum distances that can be traveled by the aircraft listed in the 'Aircraft' table. The placeholders in the SELECT statement represent the calculated distance metrics for the aircraft."
train.355,flight_1,Show the id and name of the aircraft with the maximum distance.,1,"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.357,flight_1,Show the name of aircrafts with top three lowest distances.,1,SELECT name FROM Aircraft ORDER BY distance LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM Aircraft ORDER BY distance LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of aircraft from the 'aircraft' table, ordered by their maximum travel distance. The placeholder in the LIMIT clause represents the maximum number of aircraft names to be displayed."
train.359,flight_1,Show names for all aircrafts with distances more than the average.,1,SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft),"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value."
train.361,flight_1,How many employees do we have?,1,SELECT count(*) FROM Employee,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Employee,This virtual table provides a count of all employees from the 'employee' table. The query uses the count function to aggregate the total number of employee records.
train.363,flight_1,Show name and salary for all employees sorted by salary.,1,"SELECT name ,  salary FROM Employee ORDER BY salary",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  salary FROM Employee ORDER BY salary","This virtual table provides a list of employee names and their corresponding salaries from the 'Employee' table, sorted in ascending order by salary. The query retrieves all employees and organizes them based on their salary levels."
train.365,flight_1,Show ids for all employees with at least 100000 salary.,1,SELECT eid FROM Employee WHERE salary  >  100000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT eid FROM Employee WHERE salary  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the employee IDs of employees from the 'Employee' table who have a salary greater than a specified amount. The placeholder in the WHERE clause represents the salary threshold.
train.367,flight_1,How many employees have salary between 100000 and 200000?,1,SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Employee WHERE salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of employees from the 'Employee' table whose annual salary falls within a specified range. The placeholders in the query represent the lower and upper bounds of the salary range.
train.369,flight_1,What is the name and salary for employee with id 242518965?,1,"SELECT name ,  salary FROM Employee WHERE eid  =  242518965",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  salary FROM Employee WHERE eid  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the names and salaries of employees from the 'employee' table based on a specific employee ID. The placeholder in the WHERE clause represents the unique identifier for the employee.
train.371,flight_1,What is average and maximum salary of all employees.,1,"SELECT avg(salary) ,  max(salary) FROM Employee",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(salary) ,  max(salary) FROM Employee",This virtual table provides the average and maximum annual salaries of employees from the 'employee' table. The placeholders in the SELECT clause represent the calculated values for salary statistics.
train.373,flight_1,Show the id and name of the employee with maximum salary.,1,"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists the employee IDs and names from the 'Employee' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of employees to be displayed."
train.375,flight_1,Show the name of employees with three lowest salaries.,1,SELECT name FROM Employee ORDER BY salary ASC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM Employee ORDER BY salary ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of employees from the 'Employee' table, ordered by their salary in ascending order. The placeholder in the LIMIT clause represents the maximum number of employee names to be returned."
train.377,flight_1,Show names for all employees with salary more than the average.,1,SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee),"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value."
train.379,flight_1,Show the id and salary of Mark Young.,1,"SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT eid ,  salary FROM Employee WHERE name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the employee IDs and their corresponding salaries from the 'Employee' table for a specific employee identified by their name. The placeholder in the WHERE clause represents the employee's name.
train.381,flight_1,How many flights do we have?,1,SELECT count(*) FROM Flight,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Flight,"This virtual table provides the total number of flights recorded in the 'Flight' table. The query counts all entries in the table, which is useful for understanding the volume of flights available."
train.383,flight_1,"Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",1,"SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin","This virtual table provides a list of flight numbers, their originating locations, and their destinations from the 'flight' table, sorted by the origin of the flights."
train.385,flight_1,Show all flight number from Los Angeles.,1,SELECT flno FROM Flight WHERE origin  =  'Los Angeles',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT flno FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the flight numbers from the 'Flight' table that originate from a specific starting location. The placeholder in the WHERE clause represents the origin of the flight.
train.389,flight_1,Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.,1,"SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING] AND destination  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the scheduled departure and arrival dates of flights from the 'Flight' table that originate from a specific location and are destined for another specific location. The placeholders in the WHERE clause represent the origin and destination of the flights.
train.391,flight_1,Show flight number for all flights with more than 2000 distance.,1,SELECT flno FROM Flight WHERE distance  >  2000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT flno FROM Flight WHERE distance  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the flight numbers from the 'Flight' table for flights that cover a distance greater than a specified value. The placeholder in the WHERE clause represents the minimum distance in miles or kilometers.
train.393,flight_1,What is the average price for flights from Los Angeles to Honolulu.,1,SELECT avg(price) FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT avg(price) FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING] AND destination  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average ticket price for flights originating from a specific location and heading to a specific destination. The placeholders in the WHERE clause represent the origin and destination of the flights.
train.395,flight_1,Show origin and destination for flights with price higher than 300.,1,"SELECT origin ,  destination FROM Flight WHERE price  >  300",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT origin ,  destination FROM Flight WHERE price  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the origin and destination of flights from the 'flight' table that have a ticket price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the tickets.
train.397,flight_1,Show the flight number and distance of the flight with maximum price.,1,"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return."
train.399,flight_1,Show the flight number of flights with three lowest distances.,1,SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT flno FROM Flight ORDER BY distance ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the flight numbers from the 'Flight' table, ordered by the distance of each flight in ascending order. The placeholder in the LIMIT clause represents the maximum number of flight numbers to be returned."
train.401,flight_1,What is the average distance and average price for flights from Los Angeles.,1,"SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  'Los Angeles'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average distance and average price of flights originating from a specific location. The placeholder in the WHERE clause represents the origin of the flights.
train.403,flight_1,Show all origins and the number of flights from each origin.,1,"SELECT origin ,  count(*) FROM Flight GROUP BY origin",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT origin ,  count(*) FROM Flight GROUP BY origin",This virtual table summarizes the number of flights originating from each location in the 'Flight' table. The placeholder in the SELECT statement allows for the retrieval of the origin and the count of flights grouped by that origin.
train.405,flight_1,Show all destinations and the number of flights to each destination.,1,"SELECT destination ,  count(*) FROM Flight GROUP BY destination",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT destination ,  count(*) FROM Flight GROUP BY destination","This virtual table summarizes the number of flights arriving at each destination from the 'Flight' table. The query groups the results by the destination, allowing users to see how many flights are scheduled to each location."
train.409,flight_1,Which destination has least number of flights?,1,SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve."
train.411,flight_1,What is the aircraft name for the flight with number 99,1,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.
train.413,flight_1,Show all flight numbers with aircraft Airbus A340-300.,1,SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  'Airbus A340-300',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.
train.417,flight_1,Show names for all aircraft with at least two flights.,1,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed."
train.419,flight_1,How many employees have certificate.,1,SELECT count(DISTINCT eid) FROM Certificate,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT eid) FROM Certificate,This virtual table provides the count of distinct employees who hold certificates related to aircraft. The placeholder in the SELECT clause represents the unique employee identifiers.
train.421,flight_1,Show ids for all employees who don't have a certificate.,1,SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate,"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected."
train.423,flight_1,Show names for all aircrafts of which John Williams has certificates.,1,SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.
train.425,flight_1,Show names for all employees who have certificate of Boeing 737-800.,1,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model."
train.427,flight_1,Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.,1,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Airbus A340-300',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.
train.435,flight_1,what is the salary and name of the employee who has the most number of aircraft certificates?,1,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.439,allergy_1,How many allergies are there?,1,SELECT count(DISTINCT allergy) FROM Allergy_type,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT allergy) FROM Allergy_type,This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.
train.441,allergy_1,How many different allergy types exist?,1,SELECT count(DISTINCT allergytype) FROM Allergy_type,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT allergytype) FROM Allergy_type,This virtual table provides the count of distinct allergy types from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type being counted.
train.443,allergy_1,Show all allergy types.,1,SELECT DISTINCT allergytype FROM Allergy_type,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT allergytype FROM Allergy_type,"This virtual table provides a distinct list of allergy types from the 'Allergy_Type' table. The query retrieves unique categories of allergies, which can be useful for understanding the variety of allergies present in the dataset."
train.445,allergy_1,Show all allergies and their types.,1,"SELECT allergy ,  allergytype FROM Allergy_type",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT allergy ,  allergytype FROM Allergy_type","This virtual table provides a list of allergies along with their corresponding types from the 'Allergy_Type' table. There are no filters applied, so it retrieves all available allergy data."
train.447,allergy_1,Show all allergies with type food.,1,SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  'food',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of allergies from the 'Allergy_Type' table that belong to a specific category of allergy. The placeholder in the WHERE clause represents the type of allergy being queried.
train.449,allergy_1,What is the type of allergy Cat?,1,SELECT allergytype FROM Allergy_type WHERE allergy  =  'Cat',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.
train.451,allergy_1,How many allergies have type animal?,1,SELECT count(*) FROM Allergy_type WHERE allergytype  =  'animal',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.
train.453,allergy_1,Show all allergy types and the number of allergies in each type.,1,"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype","This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy."
train.457,allergy_1,Which allergy type has least number of allergies?,1,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values."
train.459,allergy_1,How many students are there?,1,SELECT count(*) FROM Student,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Student,"This virtual table provides the total number of students from the 'Student' table. The query counts all entries in the table, which represents the total student population."
train.461,allergy_1,Show first name and last name for all students.,1,"SELECT Fname ,  Lname FROM Student",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Fname ,  Lname FROM Student","The virtual table describes the first and last names of students from the 'Student' table. The query can be modified to include conditions for filtering based on specific criteria such as age, major, or city code."
train.463,allergy_1,How many different advisors are listed?,1,SELECT count(DISTINCT advisor) FROM Student,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT advisor) FROM Student,This virtual table provides the count of distinct academic advisors from the 'Student' table. The placeholder in the SELECT clause indicates that the result will be a numeric value representing the number of unique advisors.
train.465,allergy_1,Show all majors.,1,SELECT DISTINCT Major FROM Student,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Major FROM Student,"This virtual table provides a list of unique academic majors from the 'Student' table. The query uses the DISTINCT keyword to ensure that each major is only listed once, regardless of how many students are enrolled in that major."
train.467,allergy_1,Show all cities where students live.,1,SELECT DISTINCT city_code FROM Student,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT city_code FROM Student,"This virtual table provides a list of unique city codes from the 'Student' table, representing the various cities where students reside. The query uses the DISTINCT keyword to ensure that each city code is listed only once."
train.469,allergy_1,"Show first name, last name, age for all female students. Their sex is F.",1,"SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first name, last name, and age of students from the 'Student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students."
train.473,allergy_1,How many students are age 18?,1,SELECT count(*) FROM Student WHERE age  =  18,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Student WHERE age  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of students from the 'Student' table who are of a specific age. The placeholder in the WHERE clause represents the age of the students being queried.
train.475,allergy_1,Show all student ids who are older than 20.,1,SELECT StuID FROM Student WHERE age  >  20,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.
train.477,allergy_1,"Which city does the student whose last name is ""Kim"" live in?",1,SELECT city_code FROM Student WHERE LName  =  'Kim',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT city_code FROM Student WHERE LName  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the city codes of students from the 'Student' table who have a specific last name. The placeholder in the WHERE clause represents the last name of the student.
train.479,allergy_1,Who is the advisor of student with ID 1004?,1,SELECT Advisor FROM Student WHERE StuID  =  1004,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.
train.481,allergy_1,How many students live in HKG or CHI?,1,SELECT count(*) FROM Student WHERE city_code  =  'HKG' OR city_code  =  'CHI',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Student WHERE city_code  =  [PLACEHOLDER-TYPE:STRING] OR city_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of students from the 'Student' table who reside in specific cities. The placeholders in the WHERE clause represent the city codes being queried.
train.483,allergy_1,"Show the minimum, average, and maximum age of all students.",1,"SELECT min(age) ,  avg(age) ,  max(age) FROM Student",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(age) ,  avg(age) ,  max(age) FROM Student","This virtual table provides the minimum, average, and maximum ages of students from the 'Student' table. The query aggregates the 'Age' column to give a statistical overview of the students' ages."
train.485,allergy_1,What is the last name of the youngest student?,1,SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student),"This virtual table describes the last names of students from the 'Student' table who are the youngest in age. The subquery in the WHERE clause retrieves the minimum age from the 'Student' table, allowing the main query to filter for students matching that age."
train.487,allergy_1,Show the student id of the oldest student.,1,SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student),"This virtual table identifies the unique identifier of the student who is the oldest in the 'Student' table. The subquery in the WHERE clause retrieves the maximum age from the same table, ensuring that only the student with the highest age is selected."
train.489,allergy_1,Show all majors and corresponding number of students.,1,"SELECT major ,  count(*) FROM Student GROUP BY major",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT major ,  count(*) FROM Student GROUP BY major",This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.
train.493,allergy_1,Show all ages and corresponding number of students.,1,"SELECT age ,  count(*) FROM Student GROUP BY age",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT age ,  count(*) FROM Student GROUP BY age","This virtual table summarizes the number of students grouped by their age from the 'Student' table. The placeholder in the SELECT clause represents the age of the students, and the count function provides the total number of students for each age group."
train.495,allergy_1,Show the average age for male and female students.,1,"SELECT avg(age) ,  sex FROM Student GROUP BY sex",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  sex FROM Student GROUP BY sex","This virtual table provides the average age of students grouped by their gender. The placeholder in the SELECT clause represents the average age calculation, while the grouping is done based on the gender of the students."
train.497,allergy_1,Show all cities and corresponding number of students.,1,"SELECT city_code ,  count(*) FROM Student GROUP BY city_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT city_code ,  count(*) FROM Student GROUP BY city_code","This virtual table summarizes the number of students residing in each city, based on the 'Student' table. The placeholder in the SELECT statement allows for counting the number of students grouped by their city codes."
train.499,allergy_1,Show all advisors and corresponding number of students.,1,"SELECT advisor ,  count(*) FROM Student GROUP BY advisor",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT advisor ,  count(*) FROM Student GROUP BY advisor","This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor."
train.505,allergy_1,Show all student IDs who have at least two allergies.,1,SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.
train.507,allergy_1,What are the student ids of students who don't have any allergies?,1,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy,This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.
train.515,allergy_1,Show all allergies with number of students affected.,1,"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy","This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy."
train.517,allergy_1,Show all allergy type with number of students affected.,1,"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype","This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type."
train.521,allergy_1,What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.,1,"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy",This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.
train.537,store_1,A list of the top 5 countries by number of invoices. List country name and number of invoices.,1,"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];",This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.
train.539,store_1,A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.,1,"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];",This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.
train.541,store_1,A list of the top 10 countries by average invoice size. List country name and average invoice size.,1,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned."
train.543,store_1,Find out 5 customers who most recently purchased something. List customers' first and last name.,1,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the first and last names of customers from the 'customers' table who have made purchases, along with the most recent invoice date. The results are ordered by the invoice date in descending order, and the number of records returned is limited by a placeholder for numeric values."
train.545,store_1,Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.,1,"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number."
train.547,store_1,List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.,1,"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder."
train.549,store_1,List the top 5 genres by number of tracks. List genres name and total tracks.,1,"SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];",This virtual table provides a summary of the number of tracks associated with each genre from the 'genres' table. It counts the tracks that belong to each genre and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of genres to return.
train.551,store_1,List every album's title.,1,SELECT title FROM albums;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM albums;,"This virtual table describes the titles of albums from the 'albums' table. There are no conditions applied, so it retrieves all album titles available in the database."
train.554,store_1,What are the titles of all the albums alphabetically ascending?,1,SELECT title FROM albums ORDER BY title;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM albums ORDER BY title;,"This virtual table lists the titles of all albums from the 'albums' table, sorted in alphabetical order. The query retrieves the 'title' column and orders the results by the album title."
train.556,store_1,What are the titles of all albums that start with A in alphabetical order?,1,SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT title FROM albums WHERE title LIKE [PLACEHOLDER-TYPE:STRING] ORDER BY title;,This virtual table describes the titles of albums from the 'albums' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the album titles.
train.557,store_1,List the customers first and last name of 10 least expensive invoices.,1,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the first and last names of customers who have made purchases, along with the total amount of their invoices. The data is retrieved from the 'customers' table and joined with the 'invoices' table based on the customer identifier. The results are ordered by the total amount of the invoices, and a placeholder is used to limit the number of results returned."
train.559,store_1,"List total amount of  invoice from Chicago, IL.",1,SELECT sum(total) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT sum(total) FROM invoices WHERE billing_city  =  [PLACEHOLDER-TYPE:STRING] AND billing_state  =  [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the total amount of invoices issued to customers based on their billing city and state. The placeholders in the WHERE clause represent the specific billing city and state for which the total is being calculated.
train.561,store_1,"List the number of invoices from Chicago, IL.",1,SELECT COUNT(*) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT COUNT(*) FROM invoices WHERE billing_city  =  [PLACEHOLDER-TYPE:STRING] AND billing_state  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total number of invoices issued for a specific billing city and state. The placeholders in the WHERE clause represent the billing city and state for which the count of invoices is being queried.
train.563,store_1,"List the number of invoices from the US, grouped by state.",1,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY billing_state;",This virtual table summarizes the number of invoices issued for each state within a specific country. The placeholder in the WHERE clause represents the name of the country for which the invoice counts are being aggregated.
train.569,store_1,List Aerosmith's albums.,1,SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = 'Aerosmith';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.
train.571,store_1,How many albums does Billy Cobham has?,1,SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the name of the artist.
train.573,store_1,Eduardo Martins is a customer at which company?,1,SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT company FROM customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the company names of customers from the 'customers' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.
train.576,store_1,What is the email and phone number of Astrid Gruber the customer?,1,"SELECT email ,  phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT email ,  phone FROM customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the email addresses and phone numbers of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.577,store_1,How many customers live in Prague city?,1,SELECT count(*) FROM customers WHERE city = 'Prague';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM customers WHERE city = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total number of customers residing in a specific city from the 'customers' table. The placeholder in the WHERE clause represents the name of the city.
train.579,store_1,How many customers in state of CA?,1,SELECT count(*) FROM customers WHERE state = 'CA';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM customers WHERE state = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total number of customers from the 'customers' table who reside in a specific state. The placeholder in the WHERE clause represents the state name.
train.581,store_1,What country does Roberto Almeida live?,1,SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT country FROM customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the countries of customers from the 'customers' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.
train.583,store_1,List the name of albums that are released by aritist whose name has 'Led',1,SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.
train.585,store_1,How many customers does Steve Johnson support?,1,SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of customers supported by a specific employee from the 'employees' table. The join condition links the 'customers' table to the 'employees' table based on the support representative's ID. The placeholders in the WHERE clause represent the first and last names of the employee whose customer count is being queried.
train.588,store_1,"What is the title, phone number and hire date for the employee named Nancy Edwards?",1,"SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];","This virtual table describes the titles, phone numbers, and hire dates of employees from the 'employees' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the employee."
train.590,store_1,What is the first and last name of the employee who reports to Nancy Edwards?,1,"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.
train.591,store_1,What is the address of employee Nancy Edwards?,1,SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT address FROM employees WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the street address of employees from the 'employees' table based on their first and last names. The placeholders in the WHERE clause represent the first and last names of the employee being queried.
train.595,store_1,How many employees are living in Canada?,1,SELECT count(*) FROM employees WHERE country = 'Canada';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM employees WHERE country = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total number of employees from the 'employees' table who are located in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.597,store_1,What is employee Nancy Edwards's phone number?,1,SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT phone FROM employees WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the phone number of employees from the 'employees' table based on their first and last names. The placeholders in the WHERE clause represent the specific first and last names of the employee being queried.
train.599,store_1,Who is the youngest employee in the company? List employee's first and last name.,1,"SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of employees' first and last names from the 'employees' table, ordered by their birth dates in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of employee records to return."
train.601,store_1,List top 10 employee work longest in the company. List employee's first and last name.,1,"SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of employees' first and last names from the 'employees' table, ordered by their hire date in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of employees to retrieve."
train.603,store_1,Find the number of employees whose title is IT Staff from each city?,1,"SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  city FROM employees WHERE title  =  [PLACEHOLDER-TYPE:STRING] GROUP BY city","This virtual table provides a count of employees grouped by their city from the 'employees' table, specifically for those who hold a certain job title. The placeholder in the WHERE clause represents the job title of the employees."
train.605,store_1,"Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",1,"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number."
train.607,store_1,How many orders does Lucas Mancini has?,1,SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer."
train.609,store_1,What is the total amount of money spent by Lucas Mancini?,1,SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.612,store_1,What are the names of all the media types?,1,SELECT name FROM media_types;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM media_types;,This virtual table describes the names of different media types from the 'media_types' table. The query retrieves all media type names without any filtering conditions.
train.613,store_1,List all different genre types.,1,SELECT DISTINCT name FROM genres;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT name FROM genres;,This virtual table lists all unique genre names from the 'genres' table. The use of DISTINCT ensures that each genre name appears only once in the result set.
train.615,store_1,List the name of all playlist.,1,SELECT name FROM playlists;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM playlists;,"This virtual table lists the names of all playlists available in the 'playlists' table. There are no conditions or filters applied, so it retrieves all entries."
train.617,store_1,Who is the composer of track Fast As a Shark?,1,SELECT composer FROM tracks WHERE name = 'Fast As a Shark';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT composer FROM tracks WHERE name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the composers of tracks from the 'tracks' table that match a specific track name. The placeholder in the WHERE clause represents the name of the track.
train.619,store_1,How long does track Fast As a Shark has?,1,SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT milliseconds FROM tracks WHERE name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the duration in milliseconds of tracks from the 'tracks' table that match a specific track name. The placeholder in the WHERE clause represents the name of the track being queried.
train.621,store_1,What is the name of tracks whose genre is Rock?,1,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.
train.627,store_1,List title of albums have the number of tracks greater than 10.,1,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.
train.629,store_1,List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.,1,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.
train.631,store_1,List the name of tracks belongs to genre Rock or media type is MPEG audio file.,1,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.
train.633,store_1,List the name of tracks belongs to genre Rock or genre Jazz.,1,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres."
train.635,store_1,List the name of all tracks in the playlists of Movies.,1,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];,"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder."
train.637,store_1,List the name of playlist which has number of tracks greater than 100.,1,SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists the names of playlists from the 'playlists' table that contain more than a specified number of tracks. The placeholder in the HAVING clause represents the minimum count of tracks required for a playlist to be included in the results.
train.639,store_1,List all tracks bought by customer Daan Peeters.,1,SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters';,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause."
train.641,store_1,How much is the track Fast As a Shark?,1,SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT unit_price FROM tracks WHERE name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the unit price of tracks from the 'tracks' table based on a specific track name. The placeholder in the WHERE clause represents the name of the track being queried.
train.643,store_1,Find the name of tracks which are in Movies playlist but not in music playlist.,1,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.
train.645,store_1,Find the name of tracks which are in both Movies and music playlists.,1,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.
train.647,store_1,Find number of tracks in each genre?,1,"SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;","This virtual table provides a count of tracks grouped by their respective genres from the 'genres' and 'tracks' tables. The placeholder in the SELECT clause represents the count of tracks, while the genre name is displayed alongside it."
train.649,journal_committee,How many editors are there?,1,SELECT count(*) FROM editor,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM editor,This virtual table provides the total number of editors from the 'editor' table. The query counts all entries in the editor table without any filtering conditions.
train.650,journal_committee,List the names of editors in ascending order of age.,1,SELECT Name FROM editor ORDER BY Age ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM editor ORDER BY Age ASC,"This virtual table lists the names of editors from the 'editor' table, sorted by their age in ascending order. The query retrieves the 'Name' column and organizes the results based on the 'Age' column."
train.651,journal_committee,What are the names and ages of editors?,1,"SELECT Name ,  Age FROM editor",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Name ,  Age FROM editor","This virtual table provides the names and ages of editors from the 'editor' table. There are no filtering conditions applied, so it retrieves all entries."
train.652,journal_committee,List the names of editors who are older than 25.,1,SELECT Name FROM editor WHERE Age  >  25,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM editor WHERE Age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of editors from the 'editor' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.
train.653,journal_committee,Show the names of editors of age either 24 or 25.,1,SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.
train.654,journal_committee,What is the name of the youngest editor?,1,SELECT Name FROM editor ORDER BY Age ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM editor ORDER BY Age ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of editors from the 'editor' table, sorted by their age in ascending order. The placeholder in the LIMIT clause represents the maximum number of editor names to be returned."
train.655,journal_committee,What are the different ages of editors? Show each age along with the number of editors of that age.,1,"SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Age ,  COUNT(*) FROM editor GROUP BY Age","This virtual table summarizes the number of editors grouped by their age from the 'editor' table. The placeholder in the SELECT clause represents the age of the editors, and the COUNT function is used to count the number of editors for each age group."
train.657,journal_committee,Show the distinct themes of journals.,1,SELECT DISTINCT Theme FROM journal,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Theme FROM journal,"This virtual table provides a unique list of themes from the 'journal' table, which represents the main topics of various journal entries. The query uses the DISTINCT keyword to ensure that each theme is listed only once, without duplicates."
train.658,journal_committee,Show the names of editors and the theme of journals for which they serve on committees.,1,"SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",This virtual table provides the names of editors along with the themes of the journal entries they are associated with. The data is retrieved by joining the 'journal_committee' table with the 'editor' and 'journal' tables based on their respective identifiers.
train.660,journal_committee,"Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",1,"SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC","This virtual table provides a list of editors along with their ages and the themes of the journal entries they are associated with. The data is sourced from the 'editor', 'journal', and 'journal_committee' tables, and is organized in ascending order based on the journal themes."
train.661,journal_committee,Show the names of editors that are on the committee of journals with sales bigger than 3000.,1,SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.
train.663,journal_committee,Show the names of editors that are on at least two journal committees.,1,SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.
train.664,journal_committee,List the names of editors that are not on any journal committee.,1,SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee),This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.
train.666,journal_committee,What is the average sales of the journals that have an editor whose work type is 'Photo'?,1,SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average sales figures from the 'journal' table for journal entries that are associated with a specific type of work done by the committee. The placeholder in the WHERE clause represents the type of work being queried.
train.667,customers_card_transactions,How many accounts do we have?,1,SELECT count(*) FROM Accounts,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Accounts,This virtual table provides a count of all accounts present in the 'Accounts' table. It serves to give an overview of the total number of accounts without specifying any particular account details.
train.669,customers_card_transactions,"Show ids, customer ids, names for all accounts.",1,"SELECT account_id ,  customer_id ,  account_name FROM Accounts",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT account_id ,  customer_id ,  account_name FROM Accounts","This virtual table describes the account ID, customer ID, and account name from the 'Accounts' table. The placeholders represent the specific values that can be filtered or modified as needed."
train.671,customers_card_transactions,Show other account details for account with name 338.,1,SELECT other_account_details FROM Accounts WHERE account_name  =  '338',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT other_account_details FROM Accounts WHERE account_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the additional details related to accounts from the 'Accounts' table, filtered by a specific account name. The placeholder in the WHERE clause represents the name of the account being queried."
train.673,customers_card_transactions,"What is the first name, last name, and phone of the customer with account name 162?",1,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  '162'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account."
train.675,customers_card_transactions,How many accounts does the customer with first name Art and last name Turcotte have?,1,SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.678,customers_card_transactions,How many accounts are there for each customer id?,1,"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id","This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer."
train.679,customers_card_transactions,Show the customer id and number of accounts with most accounts.,1,"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.
train.681,customers_card_transactions,"What is the customer first, last name and id with least number of accounts.",1,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder."
train.683,customers_card_transactions,Show the number of all customers without an account.,1,SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts),This virtual table counts the number of customers from the 'Customers' table who do not have any associated accounts. The placeholder in the subquery represents the customer identifiers linked to accounts.
train.685,customers_card_transactions,Show the first names and last names of customers without any account.,1,"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.
train.687,customers_card_transactions,Show distinct first and last names for all customers with an account.,1,"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.
train.689,customers_card_transactions,How many customers have an account?,1,SELECT count(DISTINCT customer_id) FROM Accounts,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT customer_id) FROM Accounts,This virtual table provides the count of distinct customers associated with accounts in the 'Accounts' table. The placeholder in the SELECT statement represents the unique customer identifiers.
train.691,customers_card_transactions,How many customers do we have?,1,SELECT count(*) FROM Customers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Customers,This virtual table provides a count of all customers from the 'Customers' table. It serves to give an overview of the total number of customers in the database.
train.693,customers_card_transactions,"Show ids, first names, last names, and phones for all customers.",1,"SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers","This virtual table describes the customer ID, first name, last name, and phone number of customers from the 'Customers' table. The placeholders represent the specific values that can be filtered or modified as needed."
train.695,customers_card_transactions,What is the phone and email for customer with first name Aniyah and last name Feest?,1,"SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  'Aniyah' AND customer_last_name  =  'Feest'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND customer_last_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the phone number and email address of customers from the 'Customers' table who match a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.697,customers_card_transactions,Show the number of customer cards.,1,SELECT count(*) FROM Customers_cards,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Customers_cards,"This virtual table provides a count of all customer cards from the 'Customers_Cards' table. The query uses the COUNT function to aggregate the total number of card entries, which can be useful for understanding the total number of cards issued to customers."
train.699,customers_card_transactions,"Show ids, customer ids, card type codes, card numbers for all cards.",1,"SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards","This virtual table describes the card details associated with customers from the 'Customers_Cards' table. The selected columns include the card ID, customer ID, card type code, and card number, which provide essential information about each card linked to a customer."
train.701,customers_card_transactions,Show the date valid from and the date valid to for the card with card number '4560596484842'.,1,"SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  '4560596484842'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the validity dates of a specific card from the 'Customers_Cards' table based on the card number. The placeholders in the WHERE clause represent the card number being queried.
train.703,customers_card_transactions,"What is the first name, last name, and phone of the customer with card 4560596484842.",1,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  '4560596484842'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried."
train.705,customers_card_transactions,How many cards does customer Art Turcotte have?,1,SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.708,customers_card_transactions,Count the number of customer cards of the type Debit.,1,SELECT count(*) FROM Customers_cards WHERE card_type_code  =  'Debit',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Customers_cards WHERE card_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of customer cards from the 'Customers_Cards' table that match a specific card type. The placeholder in the WHERE clause represents the card type code being queried.
train.709,customers_card_transactions,How many credit cards does customer Blanche Huels have?,1,SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Blanche' AND T2.customer_last_name  =  'Huels' AND T1.card_type_code  =  'Credit',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code."
train.711,customers_card_transactions,Show all customer ids and the number of cards owned by each customer.,1,"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id","This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer."
train.713,customers_card_transactions,"What is the customer id with most number of cards, and how many does he have?",1,"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.
train.715,customers_card_transactions,"Show id, first and last names for all customers with at least two cards.",1,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results."
train.719,customers_card_transactions,Show all card type codes and the number of cards in each type.,1,"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code","This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type."
train.723,customers_card_transactions,Show card type codes with at least 5 cards.,1,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered."
train.725,customers_card_transactions,Show all card type codes and the number of customers holding cards in each type.,1,"SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code","This virtual table summarizes the number of distinct customers associated with each type of card from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function is used to aggregate the distinct customer IDs for each card type."
train.730,customers_card_transactions,What are the different card type codes?,1,SELECT DISTINCT card_type_code FROM Customers_Cards,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT card_type_code FROM Customers_Cards,The virtual table provides a distinct list of card type codes from the 'Customers_Cards' table. The placeholder in the SELECT statement allows for potential filtering or further manipulation of the card type codes as needed.
train.731,customers_card_transactions,Show the number of card types.,1,SELECT count(DISTINCT card_type_code) FROM Customers_Cards,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT card_type_code) FROM Customers_Cards,This virtual table provides the count of distinct card types associated with customers from the 'Customers_Cards' table. The result will indicate how many unique card types are present in the database.
train.733,customers_card_transactions,Show all transaction types.,1,SELECT DISTINCT transaction_type FROM Financial_Transactions,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT transaction_type FROM Financial_Transactions,"This virtual table provides a list of unique transaction types recorded in the 'Financial_Transactions' table. The absence of any filtering conditions means it retrieves all distinct types of transactions, such as debit or credit, without duplicates."
train.736,customers_card_transactions,How many different types of transactions are there?,1,SELECT count(DISTINCT transaction_type) FROM Financial_Transactions,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT transaction_type) FROM Financial_Transactions,This virtual table provides the count of distinct transaction types recorded in the 'Financial_Transactions' table. This count helps in understanding the variety of transaction types that have been processed.
train.737,customers_card_transactions,What is the average and total transaction amount?,1,"SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",This virtual table calculates the average and total amount of transactions from the 'Financial_Transactions' table. The placeholders in the SELECT clause represent the aggregated values of transaction amounts.
train.739,customers_card_transactions,Show the card type codes and the number of transactions.,1,"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code","This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type."
train.741,customers_card_transactions,Show the transaction type and the number of transactions.,1,"SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type","This virtual table summarizes the count of different types of transactions recorded in the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the transaction type, and the count aggregates the number of occurrences for each type."
train.744,customers_card_transactions,Return the type of transaction with the highest total amount.,1,SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the types of transactions recorded in the 'Financial_Transactions' table, grouping them by their type and ordering the results by the total amount of each transaction type in descending order. The placeholder in the LIMIT clause allows the user to specify the number of transaction types to retrieve."
train.746,customers_card_transactions,"What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",1,"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id","This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account."
train.747,race_track,How many tracks do we have?,1,SELECT count(*) FROM track,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM track,"This virtual table provides the total number of racing tracks available in the 'track' table. The query counts all entries in the table, which gives an overview of the track resources."
train.751,race_track,"Show names and seatings, ordered by seating for all tracks opened after 2000.",1,"SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating",This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.
train.755,race_track,"What is the minimum, maximum, and average seating for all tracks.",1,"SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track","This virtual table provides statistical information about the seating capacity of racing tracks from the 'track' table. The placeholders represent the minimum, maximum, and average seating capacities of the tracks."
train.761,race_track,How many races are there?,1,SELECT count(*) FROM race,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM race,"This virtual table provides the total number of races recorded in the 'race' table. The query counts all entries in the race table, which includes various race events with their respective details."
train.771,race_track,List the race class with at least two races.,1,SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the classifications of races from the 'race' table, grouping them by class and filtering to show only those classes that have a specified minimum number of races. The placeholder in the HAVING clause represents the minimum count of races required for a class to be included in the results."
train.773,race_track,What are the names for tracks without a race in class 'GT'.,1,SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of racing tracks that do not host any races of a specific classification. The placeholder in the WHERE clause represents the classification of the race events.
train.775,race_track,Show all track names that have had no races.,1,SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race),This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.
train.778,race_track,What are the years of opening for tracks with seating between 4000 and 5000?,1,SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in."
train.781,race_track,Show the name of track with most number of races.,1,SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve."
train.783,race_track,Show the name and date for each race and its track name.,1,"SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",This virtual table provides a list of race events along with their scheduled dates and the names of the tracks where they will take place. The placeholders in the query allow for dynamic selection of race and track information based on the relationships defined in the schema.
train.785,race_track,Show the name and location of track with 1 race.,1,"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.
train.787,race_track,Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.,1,SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.
train.790,coffee_shop,Find the number of members living in each address.,1,"SELECT count(*) ,  address FROM member GROUP BY address",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  address FROM member GROUP BY address","This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group."
train.791,coffee_shop,Give me the names of members whose address is in Harford or Waterbury.,1,SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] OR address  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of members from the 'member' table who reside at specific addresses. The placeholders in the WHERE clause represent the addresses being queried.
train.793,coffee_shop,"Find the purchase time, age and address of each member, and show the results in the order of purchase time.",1,"SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase","This virtual table provides a list of members along with their purchase time, age, and residential address from the 'member' table. The results are ordered by the time of purchase, allowing for an easy view of member activity over time."
train.795,coffee_shop,Which address has both members younger than 30 and members older than 40?,1,SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.
train.796,coffee_shop,What is the membership card held by both members living in Hartford and ones living in Waterbury address?,1,SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values."
train.797,coffee_shop,How many members are not living in Hartford?,1,SELECT count(*) FROM member WHERE address != 'Hartford',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.
train.799,coffee_shop,Show the shop addresses ordered by their opening year.,1,SELECT address FROM shop ORDER BY open_year,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT address FROM shop ORDER BY open_year,"This virtual table provides the addresses of shops from the 'shop' table, sorted by the year they were established. The ordering allows users to see the progression of shop locations over time, from the earliest to the most recent openings."
train.800,coffee_shop,What are the average score and average staff number of all shops?,1,"SELECT avg(num_of_staff) ,  avg(score) FROM shop",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(num_of_staff) ,  avg(score) FROM shop",This virtual table provides the average number of staff and the average rating score of shops from the 'shop' table. The placeholders in the SELECT clause represent the aggregated values for staff and score.
train.801,coffee_shop,Find the id and address of the shops whose score is below the average score.,1,"SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)","This virtual table provides the shop IDs and addresses of shops from the 'shop' table that have a rating score lower than the average score of all shops. The subquery calculates the average score, and the placeholder in the WHERE clause allows for dynamic comparison against this average score."
train.802,coffee_shop,Find the address and staff number of the shops that do not have any happy hour.,1,"SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",This virtual table provides the addresses and the number of staff for shops that are not hosting any happy hour events. The placeholder in the WHERE clause is used to filter out shops that are involved in happy hours.
train.803,coffee_shop,What are the id and address of the shops which have a happy hour in May?,1,"SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the addresses and unique identifiers of shops that are hosting happy hour events during a specific month. The placeholder in the WHERE clause represents the month in which the happy hour occurs.
train.804,coffee_shop,which shop has happy hour most frequently? List its id and number of happy hours.,1,"SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of the number of happy hour events hosted by each shop, identified by their unique shop ID. The results are grouped by shop ID and ordered by the count of events in descending order, with a limit on the number of results returned, specified by a placeholder for numeric values."
train.806,coffee_shop,Which months have more than 2 happy hours?,1,SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of months during which happy hour events occurred, specifically those months that had a number of events exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of events required for a month to be included in the results."
train.807,chinook_1,How many albums are there?,1,SELECT count(*) FROM ALBUM,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ALBUM,The virtual table provides a count of all albums present in the 'Album' table. This count represents the total number of unique albums stored in the database.
train.809,chinook_1,List the names of all music genres.,1,SELECT Name FROM GENRE,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM GENRE,The virtual table describes the names of all genres available in the 'Genre' table. This allows users to retrieve a list of genre names without specifying any additional conditions.
train.811,chinook_1,Find all the customer information in state NY.,1,SELECT * FROM CUSTOMER WHERE State  =  'NY',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM CUSTOMER WHERE State  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of customers from the 'Customer' table who reside in a specific state. The placeholder in the WHERE clause represents the state name.
train.813,chinook_1,What are the first names and last names of the employees who live in Calgary city.,1,"SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  'Calgary'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of employees from the 'Employee' table who reside in a specific city. The placeholder in the WHERE clause represents the name of the city.
train.815,chinook_1,What are the distinct billing countries of the invoices?,1,SELECT distinct(BillingCountry) FROM INVOICE,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT distinct(BillingCountry) FROM INVOICE,This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.
train.817,chinook_1,"Find the names of all artists that have ""a"" in their names.",1,SELECT Name FROM ARTIST WHERE Name LIKE '%a%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM ARTIST WHERE Name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of artists from the 'Artist' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the artist's name.
train.819,chinook_1,"Find the title of all the albums of the artist ""AC/DC"".",1,SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  'AC/DC',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the titles of albums from the 'Album' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.
train.821,chinook_1,"Hom many albums does the artist ""Metallica"" have?",1,SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  'Metallica',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of albums from the 'Album' table that are associated with a specific artist from the 'Artist' table. The placeholder in the WHERE clause represents the name of the artist.
train.823,chinook_1,"Which artist does the album ""Balls to the Wall"" belong to?",1,SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  'Balls to the Wall',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.
train.826,chinook_1,What is the name of the artist with the greatest number of albums?,1,SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve."
train.827,chinook_1,"Find the names of all the tracks that contain the word ""you"".",1,SELECT Name FROM TRACK WHERE Name LIKE '%you%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM TRACK WHERE Name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of tracks from the 'Track' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the track names.
train.829,chinook_1,What is the average unit price of all the tracks?,1,SELECT AVG(UnitPrice) FROM TRACK,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT AVG(UnitPrice) FROM TRACK,The virtual table calculates the average price of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of the tracks.
train.831,chinook_1,What are the durations of the longest and the shortest tracks in milliseconds?,1,"SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",The virtual table summarizes the maximum and minimum duration of tracks from the 'Track' table. The placeholders in the SELECT statement represent the duration of the tracks in milliseconds.
train.833,chinook_1,"Show the album names, ids and the number of tracks for each album.",1,"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID","The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album."
train.835,chinook_1,What is the name of the most common genre in all tracks?,1,SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table provides a list of genre names from the 'Genre' table, ordered by the number of tracks associated with each genre in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of genres to retrieve."
train.838,chinook_1,What is the name of the media type that is least common across all tracks?,1,SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of media types from the 'MediaType' table, ordered by the number of tracks associated with each media type in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of media types to retrieve."
train.840,chinook_1,What are the titles and ids for albums containing tracks with unit price greater than 1?,1,"SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.AlbumID","This virtual table provides a list of album titles along with their unique identifiers from the 'Album' table, specifically for tracks that have a unit price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum unit price for filtering the tracks."
train.841,chinook_1,How many tracks belong to rock genre?,1,SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of tracks associated with a specific genre from the 'Genre' and 'Track' tables. The placeholder in the WHERE clause represents the name of the genre for which the track count is being queried.
train.843,chinook_1,What is the average unit price of tracks that belong to Jazz genre?,1,SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Jazz',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average price of tracks from a specific genre. It joins the 'Genre' table with the 'Track' table based on the genre identifier, and filters the results to include only those tracks that belong to the specified genre name."
train.845,chinook_1,"What is the first name and last name of the customer that has email ""luisg@embraer.com.br""?",1,"SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  'luisg@embraer.com.br'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of customers from the 'Customer' table who have a specific email address. The placeholder in the WHERE clause represents the customer's email address.
train.847,chinook_1,"How many customers have email that contains ""gmail.com""?",1,SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of customers from the 'Customer' table whose email addresses match a specific pattern. The placeholder in the WHERE clause represents the email pattern to be searched.
train.849,chinook_1,What is the first name and last name employee helps the customer with first name Leonie?,1,"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  'Leonie'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.
train.851,chinook_1,What city does the employee who helps the customer with postal code 70174 live in?,1,SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  '70174',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.
train.853,chinook_1,How many distinct cities does the employees live in?,1,SELECT COUNT(DISTINCT city) FROM EMPLOYEE,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(DISTINCT city) FROM EMPLOYEE,"This virtual table provides the count of distinct cities where employees reside, derived from the 'Employee' table. The result will indicate how many unique cities are represented by the employees in the database."
train.855,chinook_1,Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.,1,SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  'Astrid' AND LastName  =  'Gruber',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.
train.859,chinook_1,Find the first names of all customers that live in Brazil and have an invoice.,1,SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  'Brazil',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers."
train.863,chinook_1,List the phone numbers of all employees.,1,SELECT Phone FROM EMPLOYEE,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Phone FROM EMPLOYEE,This virtual table provides the contact phone numbers of employees from the 'Employee' table. The placeholder in the SELECT clause represents the phone number of each employee.
train.865,chinook_1,How many tracks are in the AAC audio file media type?,1,SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  'AAC audio file',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of tracks associated with a specific media type from the 'MediaType' and 'Track' tables. The placeholder in the WHERE clause represents the name of the media type being queried.
train.867,chinook_1,What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?,1,SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Latin' OR T1.Name  =  'Pop',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING] OR T1.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average duration of tracks from the 'Track' table that belong to specific genres defined in the 'Genre' table. The placeholders in the WHERE clause represent the names of the genres to filter the results accordingly.
train.873,chinook_1,Please list all album titles in alphabetical order.,1,SELECT Title FROM ALBUM ORDER BY Title,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Title FROM ALBUM ORDER BY Title,"This virtual table lists the titles of all albums from the 'Album' table, sorted in alphabetical order. The query retrieves the 'Title' column and orders the results by the title of the albums."
train.875,chinook_1,Please list the name and id of all artists that have at least 3 albums in alphabetical order.,1,"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name","This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name."
train.877,chinook_1,Find the names of artists that do not have any albums.,1,SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId,"This virtual table lists the names of artists who do not have any albums in the database. The query uses an EXCEPT clause to exclude the names of artists who are associated with any album, ensuring that only those without albums are displayed."
train.879,chinook_1,What is the average unit price of rock tracks?,1,SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average unit price of tracks from a specific genre. It joins the 'Genre' table with the 'Track' table based on the genre identifier, and filters the results based on the genre's name provided as a placeholder."
train.881,chinook_1,What are the duration of the longest and shortest pop tracks in milliseconds?,1,"SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Pop'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the maximum and minimum duration of tracks from a specific genre. The data is retrieved by joining the 'Genre' and 'Track' tables based on the genre identifier. The placeholder in the WHERE clause represents the name of the genre for which the duration statistics are being queried.
train.883,chinook_1,What are the birth dates of employees living in Edmonton?,1,SELECT BirthDate FROM EMPLOYEE WHERE City  =  'Edmonton',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT BirthDate FROM EMPLOYEE WHERE City  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the birth dates of employees from the 'Employee' table who reside in a specific city. The placeholder in the WHERE clause represents the name of the city.
train.885,chinook_1,What are the distinct unit prices of all tracks?,1,SELECT distinct(UnitPrice) FROM TRACK,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT distinct(UnitPrice) FROM TRACK,"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown."
train.887,chinook_1,How many artists do not have any album?,1,SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM),"This virtual table provides a count of artists from the 'Artist' table who do not have any albums associated with them. The subquery identifies artists that are linked to albums, and the main query counts those artists who are not in that list."
train.889,chinook_1,What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?,1,SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the titles of albums from the 'Album' table that contain tracks of a specific genre. The query uses joins to connect the 'Album', 'Track', and 'Genre' tables based on their relationships. The placeholders in the WHERE clause represent the genre's name, allowing users to specify the genre they are interested in."
train.891,insurance_fnol,Find all the phone numbers.,1,SELECT customer_phone FROM available_policies,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_phone FROM available_policies,This virtual table describes the contact phone numbers of customers from the 'Available_Policies' table. The placeholder in the SELECT clause represents the specific phone number of the customer.
train.901,insurance_fnol,Find the total and average amount of settlements.,1,"SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",This virtual table summarizes the total and average settlement amounts from the 'Settlements' table. The placeholders in the SELECT clause represent the aggregated values of the settlement amounts.
train.903,insurance_fnol,Find the name of services that have been used for more than 2 times in first notification of loss.,1,SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of service names associated with first notifications of loss from the 'First_Notification_of_Loss' table. It groups the results by service ID and filters the groups to include only those services that have more than a specified number of notifications, represented by a placeholder for numeric values."
train.905,insurance_fnol,What is the effective date of the claim that has the largest amount of total settlement?,1,SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the effective dates of claims from the 'Claims' table, ordered by the total settlement amounts in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return."
train.907,insurance_fnol,"How many policies are listed for the customer named ""Dayana Robel""?",1,SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Dayana Robel',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.
train.909,insurance_fnol,What is the name of the customer who has the most policies listed?,1,SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder."
train.911,insurance_fnol,"What are all the policy types of the customer named ""Dayana Robel""?",1,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  'Dayana Robel',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried."
train.913,insurance_fnol,What are all the policy types of the customer that has the most policies listed?,1,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider."
train.915,insurance_fnol,List all the services in the alphabetical order.,1,SELECT service_name FROM services ORDER BY service_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT service_name FROM services ORDER BY service_name,"The virtual table lists the names of services available in the 'Services' table, sorted in alphabetical order. This allows users to easily view all service names without any specific filtering criteria."
train.917,insurance_fnol,How many services are there?,1,SELECT count(*) FROM services,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM services,The virtual table counts the total number of services available in the 'Services' table. This provides a quick overview of the number of distinct services offered.
train.919,insurance_fnol,Find the names of users who do not have a first notification of loss record.,1,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id,This virtual table lists the names of customers from the 'Customers' table who have not reported any first notifications of loss. The query uses an EXCEPT clause to exclude customers who are linked to any records in the 'First_Notification_of_Loss' table.
train.921,insurance_fnol,"Find the names of customers who have used either the service ""Close a policy"" or the service ""Upgrade a policy"".",1,SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' OR t3.service_name  =  'Upgrade a policy',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.
train.923,insurance_fnol,"Find the names of customers who have used both the service ""Close a policy"" and the service ""New policy application"".",1,SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'New policy application',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies customers who have reported a first notification of loss for a specific service. The query uses an INTERSECT operation to find customers associated with two instances of the same service name, ensuring that only those customers who have reported losses for that service are included. The placeholder in the WHERE clause represents the name of the service being queried."
train.925,insurance_fnol,"Find the IDs of customers whose name contains ""Diana"".",1,SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_id FROM customers WHERE customer_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of customers from the 'Customers' table whose names match a specified pattern. The placeholder in the WHERE clause represents the customer's name pattern to search for.
train.927,insurance_fnol,What are the maximum and minimum settlement amount on record?,1,"SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",This virtual table provides the maximum and minimum settlement amounts from the 'Settlements' table. The placeholders in the SELECT clause represent the settlement amounts being aggregated.
train.929,insurance_fnol,List all the customers in increasing order of IDs.,1,"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC","This virtual table provides a list of customer IDs and their corresponding names from the 'Customers' table, sorted in ascending order by customer ID. The placeholders represent the customer identifiers and names."
train.931,insurance_fnol,"Retrieve the open and close dates of all the policies associated with the customer whose name contains ""Diana""",1,"SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE '%Diana%'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table provides the opening and closing dates of policies associated with a specific customer from the 'Customers' and 'Customers_Policies' tables. The placeholder in the WHERE clause represents the name of the customer being queried.
train.933,medicine_enzyme_interaction,How many kinds of enzymes are there?,1,SELECT count(*) FROM enzyme,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM enzyme,"This virtual table provides the total count of enzymes recorded in the 'enzyme' table. It does not filter or specify any conditions, thus returning the overall number of entries present."
train.935,medicine_enzyme_interaction,List the name of enzymes in descending lexicographical order.,1,SELECT name FROM enzyme ORDER BY name DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM enzyme ORDER BY name DESC,"This virtual table lists the names of enzymes from the 'enzyme' table, sorted in descending order. The output will show all enzyme names without any filtering conditions."
train.939,medicine_enzyme_interaction,What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?,1,SELECT max(OMIM) FROM enzyme,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(OMIM) FROM enzyme,"This virtual table provides the maximum OMIM identifier from the 'enzyme' table, which is used to uniquely identify genetic conditions related to enzymes. The query retrieves the highest value of the OMIM column, which is a numeric identifier."
train.941,medicine_enzyme_interaction,"What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",1,"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity."
train.943,medicine_enzyme_interaction,What are the names of enzymes who does not produce 'Heme'?,1,SELECT name FROM enzyme WHERE product != 'Heme',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.
train.945,medicine_enzyme_interaction,What are the names and trade names of the medicines which has 'Yes' value in the FDA record?,1,"SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and trade names of medicines from the 'medicine' table that have a specific FDA approval status. The placeholder in the WHERE clause represents the FDA approval status of the medicine.
train.947,medicine_enzyme_interaction,What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?,1,SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type."
train.949,medicine_enzyme_interaction,What are the ids and names of the medicine that can interact with two or more enzymes?,1,"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results."
train.955,medicine_enzyme_interaction,What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,1,SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.
train.957,medicine_enzyme_interaction,What is the most common interaction type between enzymes and medicine? And how many are there?,1,"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned."
train.959,medicine_enzyme_interaction,How many medicines have the FDA approval status 'No' ?,1,SELECT count(*) FROM medicine WHERE FDA_approved  =  'No',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM medicine WHERE FDA_approved  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of medicines from the 'medicine' table that have a specific FDA approval status. The placeholder in the WHERE clause represents the FDA approval status of the medicines.
train.961,medicine_enzyme_interaction,How many enzymes do not have any interactions?,1,SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );,"This virtual table provides a count of enzymes from the 'enzyme' table that do not have any recorded interactions with medicines in the 'medicine_enzyme_interaction' table. The subquery identifies all enzyme IDs that are involved in interactions, and the main query counts those enzymes that are not included in that list."
train.963,medicine_enzyme_interaction,What is the id and trade name of the medicines can interact with at least 3 enzymes?,1,"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required."
train.965,medicine_enzyme_interaction,"What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",1,"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried."
train.971,medicine_enzyme_interaction,How many distinct FDA approval statuses are there for the medicines?,1,SELECT count(DISTINCT FDA_approved) FROM medicine,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT FDA_approved) FROM medicine,This virtual table provides a count of distinct FDA approval statuses from the 'medicine' table. The placeholder in the SELECT clause indicates that the count will reflect the unique values of the FDA_approved column.
train.973,medicine_enzyme_interaction,"Which enzyme names have the substring ""ALA""?",1,SELECT name FROM enzyme WHERE name LIKE '%ALA%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM enzyme WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of enzymes from the 'enzyme' table that match a specific pattern. The placeholder in the LIKE clause represents the pattern to search for in the enzyme names.
train.975,medicine_enzyme_interaction,find the number of medicines offered by each trade.,1,"SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",This virtual table summarizes the count of medicines grouped by their trade names from the 'medicine' table. The placeholder in the SELECT clause represents the trade name of the medicines.
train.977,university_basketball,List all schools and their nicknames in the order of founded year.,1,"SELECT school ,  nickname FROM university ORDER BY founded",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT school ,  nickname FROM university ORDER BY founded","This virtual table provides the names and nicknames of universities from the 'university' table, ordered by the year they were founded. The query allows users to see the historical context of universities based on their establishment dates."
train.981,university_basketball,When was the school with the largest enrollment founded?,1,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve."
train.983,university_basketball,Find the founded year of the newest non public school.,1,SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.985,university_basketball,How many schools are in the basketball match?,1,SELECT count(DISTINCT school_id) FROM basketball_match,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT school_id) FROM basketball_match,This virtual table provides the count of distinct schools that have basketball teams participating in matches from the 'basketball_match' table. The result indicates how many unique schools are represented in the dataset.
train.987,university_basketball,What is the highest acc percent score in the competition?,1,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the winning percentages of basketball teams in the ACC, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return."
train.989,university_basketball,What is the primary conference of the school that has the lowest acc percent score in the competition?,1,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the primary athletic conference of universities associated with basketball teams, ordered by the winning percentage of the teams in the ACC. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.991,university_basketball,What is the team name and acc regular season score of the school that was founded for the longest time?,1,"SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of basketball teams along with their ACC regular season records, sourced from the 'basketball_match' table. The data is filtered based on the associated universities from the 'university' table, and it is ordered by the year the universities were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
train.993,university_basketball,Find the location and all games score of the school that has Clemson as its team name.,1,"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the overall game record of a specific basketball team along with the geographical location of the university associated with that team. The placeholder in the WHERE clause represents the name of the basketball team being queried.
train.995,university_basketball,What are the average enrollment size of the universities that are founded before 1850?,1,SELECT avg(enrollment) FROM university WHERE founded  <  1850,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT avg(enrollment) FROM university WHERE founded  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average enrollment of universities that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.
train.997,university_basketball,Show the enrollment and primary_conference of the oldest college.,1,"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
train.999,university_basketball,What is the total and minimum enrollment of all schools?,1,"SELECT sum(enrollment) ,  min(enrollment) FROM university",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT sum(enrollment) ,  min(enrollment) FROM university",This virtual table summarizes the total and minimum enrollment figures from the 'university' table. The placeholders represent the enrollment numbers for different universities.
train.1001,university_basketball,Find the total student enrollment for different affiliation type schools.,1,"SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation","This virtual table summarizes the total enrollment of universities grouped by their affiliation type. The placeholder in the SELECT clause represents the total number of students enrolled, while the affiliation column indicates the type of governance or affiliation of the universities."
train.1003,university_basketball,How many schools do not participate in the basketball match?,1,SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match),"This virtual table provides the count of universities that do not have any associated basketball teams in the 'basketball_match' table. The placeholder in the subquery represents the school IDs of universities that have teams, allowing for the identification of those without teams."
train.1007,university_basketball,Find how many different affiliation types there are.,1,SELECT count(DISTINCT affiliation) FROM university,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT affiliation) FROM university,This virtual table provides the count of distinct affiliations of universities from the 'university' table. The placeholder in the SELECT clause represents the unique affiliations of the universities.
train.1009,university_basketball,Find how many school locations have the word 'NY'.,1,SELECT count(*) FROM university WHERE LOCATION LIKE '%NY%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM university WHERE LOCATION LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of universities located in a specific geographical area. The placeholder in the WHERE clause allows users to specify the location they are interested in.
train.1011,university_basketball,Find the team names of the universities whose enrollments are smaller than the average enrollment size.,1,SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university),This virtual table lists the names of basketball teams from universities that have an enrollment below the average enrollment of all universities. The query joins the 'university' and 'basketball_match' tables based on the 'School_ID' to filter the teams accordingly.
train.1013,university_basketball,Find the number of universities that have over a 20000 enrollment size for each affiliation type.,1,"SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation","This virtual table provides a count of universities grouped by their affiliation type, specifically for those universities that have an enrollment greater than a specified number. The placeholder in the WHERE clause represents the minimum enrollment number."
train.1015,university_basketball,Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.,1,"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation","This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment."
train.1017,university_basketball,What is the maximum enrollment across all schools?,1,SELECT max(Enrollment) FROM university,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(Enrollment) FROM university,"This virtual table provides the maximum enrollment number from the 'university' table, which represents the largest student body among the universities listed. The placeholder in the SELECT clause indicates that the maximum value of the 'Enrollment' column will be retrieved."
train.1019,university_basketball,List all information regarding the basketball match.,1,SELECT * FROM basketball_match,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM basketball_match,"This virtual table provides a comprehensive view of all basketball matches, including details about the teams, their records in various competitions, and their associated universities. The data includes team identifiers, names, performance metrics in the ACC and overall games, as well as the school information linked through the School_ID."
train.1021,university_basketball,"List names of all teams in the basketball competition, ordered by all home scores in descending order.",1,SELECT team_name FROM basketball_match ORDER BY All_Home DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT team_name FROM basketball_match ORDER BY All_Home DESC,"This virtual table provides a list of basketball team names from the 'basketball_match' table, ordered by their home game records in descending order. This allows users to see which teams have the best performance in home games."
train.1023,phone_1,the names of models that launched between 2002 and 2004.,1,SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];,This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.
train.1024,phone_1,Which model has the least amount of RAM? List the model name and the amount of RAM.,1,"SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of chip models along with their RAM sizes from the 'chip_model' table. The results are ordered by the amount of RAM in ascending order, and the placeholder indicates the maximum number of records to return."
train.1026,phone_1,"How many phone hardware models are produced by the company named ""Nokia Corporation""?",1,SELECT count(*) FROM phone WHERE Company_name = 'Nokia Corporation';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM phone WHERE Company_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides a count of phones manufactured by a specific company from the 'phone' table. The placeholder in the WHERE clause represents the company's name.
train.1027,phone_1,"What is maximum and minimum RAM size of phone produced by company named ""Nokia Corporation""?",1,"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = 'Nokia Corporation';",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];",This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.
train.1028,phone_1,"What is the average ROM size of phones produced by the company named ""Nokia Corporation""?",1,SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = 'Nokia Corporation';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the average amount of ROM in MiB for chip models used in phones manufactured by a specific company. The placeholder in the WHERE clause represents the company's name.
train.1029,phone_1,List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.,1,"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];",This virtual table provides the hardware model names and company names of phones that utilize chip models launched in a specific year or have a RAM capacity exceeding a certain amount. The placeholders in the WHERE clause represent the launch year and the RAM size criteria.
train.1030,phone_1,Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.,1,"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];",This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.
train.1031,phone_1,"Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is ""LG-P760"".",1,"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = 'LG-P760';",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];","This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone."
train.1032,phone_1,"List the hardware model name and company name for the phone whose screen mode type is ""Graphics.""",1,"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  'Graphics';",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];",This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.
train.1033,phone_1,Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.,1,"SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the number of phones manufactured by each company from the 'phone' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of companies to display, sorted by the count of phones in ascending order."
train.1034,phone_1,List the name of the company that produced more than one phone model.,1,SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the names of companies that manufacture phones, specifically those that have produced more than a specified number of phone models. The placeholder in the HAVING clause represents the minimum count of phone models a company must have to be included in the results."
train.1035,phone_1,"List the maximum, minimum and average number of used kb in screen mode.",1,"SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;","This virtual table provides statistical information about the amount of kilobytes used by different screen modes from the 'screen_mode' table. The placeholders in the SELECT clause represent the maximum, minimum, and average kilobytes used across all screen modes."
train.1036,phone_1,List the name of the phone model launched in year 2002 and with the highest RAM size.,1,SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.RAM_MiB DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of hardware model names of phones that utilize chip models launched in a specific year. The results are ordered by the amount of RAM in descending order, and the number of results returned can be limited by a placeholder value."
train.1037,phone_1,"What are the wifi and screen mode type of the hardware model named ""LG-P760""?",1,"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760';",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];",This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.
train.1038,phone_1,"List the hardware model name for the phones that have screen mode type ""Text"" or RAM size greater than 32.",1,SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = 'Text' OR T1.RAM_MiB  >  32;,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.
train.1039,phone_1,"List the hardware model name for the phones that were produced by ""Nokia Corporation"" or whose screen mode type is ""Graphics.""",1,SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  'Graphics' OR t2.Company_name  =  'Nokia Corporation',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria."
train.1040,phone_1,"List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.",1,SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  'Nokia Corporation' AND T1.Type != 'Text';,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.Type != [PLACEHOLDER-TYPE:STRING];,This virtual table provides a list of distinct hardware model names of phones from the 'phone' table that are associated with a specific company and do not use a particular type of screen mode. The placeholders in the WHERE clause represent the company name and the type of screen mode to filter the results accordingly.
train.1041,phone_1,List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,1,"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode."
train.1042,phone_1,Find the number of phones for each accreditation type.,1,"SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",This virtual table summarizes the count of phones grouped by their accreditation type from the 'phone' table. The placeholder in the SELECT clause represents the accreditation type of the phones.
train.1044,phone_1,Find the accreditation level that more than 3 phones use.,1,SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the accreditation levels of phones from the 'phone' table, grouped by their accreditation level. The placeholder in the HAVING clause represents the minimum count of phones that must have the same accreditation level to be included in the results."
train.1045,phone_1,Find the details for all chip models.,1,SELECT * FROM chip_model,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM chip_model,"This virtual table provides a comprehensive view of all chip models available in the 'chip_model' table, including their names, launch years, RAM and ROM capacities, slot availability, and wireless capabilities. The data can be filtered or modified based on specific chip model attributes as needed."
train.1046,phone_1,How many models do not have the wifi function?,1,SELECT count(*) FROM chip_model WHERE wifi  =  'No',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM chip_model WHERE wifi  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried.
train.1048,phone_1,List all the model names sorted by their launch year.,1,SELECT model_name FROM chip_model ORDER BY launch_year,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT model_name FROM chip_model ORDER BY launch_year,"This virtual table lists the names of chip models from the 'chip_model' table, ordered by their launch year. This allows users to see the progression of chip models over time."
train.1049,phone_1,Find the average ram mib size of the chip models that are never used by any phone.,1,SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone),"This virtual table calculates the average amount of RAM in MiB for chip models that are not used in any phone. The placeholder in the subquery represents the chip models that are associated with phones, ensuring that only those chip models that are not referenced in the phone table are considered for the average calculation."
train.1052,match_season,How many countries are there in total?,1,SELECT count(*) FROM country,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM country,"This virtual table provides the total count of countries listed in the 'country' table. The query uses the COUNT function to aggregate the number of entries in the table, which helps in understanding the total number of unique countries available in the database."
train.1054,match_season,Show the country name and capital of all countries.,1,"SELECT Country_name ,  Capital FROM country",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Country_name ,  Capital FROM country","This virtual table describes the names and capitals of countries from the 'country' table. The query retrieves the 'Country_name' and 'Capital' columns, providing a clear view of each country's capital city."
train.1056,match_season,"Show all official native languages that contain the word ""English"".",1,SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Official_native_language FROM country WHERE Official_native_language LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the official native languages of countries from the 'country' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on a specified language pattern.
train.1061,match_season,Who are the players from UCLA?,1,SELECT Player FROM match_season WHERE College  =  'UCLA',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Player FROM match_season WHERE College  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the players who participated in matches during a specific season and attended a particular college. The placeholder in the WHERE clause represents the name of the college.
train.1065,match_season,What are the draft pick numbers and draft classes for players who play the Defender position?,1,"SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  'Defender'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in a specific position. The placeholder in the WHERE clause represents the position of the player.
train.1066,match_season,How many distinct teams are involved in match seasons?,1,SELECT count(DISTINCT Team) FROM match_season,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Team) FROM match_season,This virtual table provides the count of distinct teams that participated in matches during a specific season from the 'match_season' table. The result will give an overview of the number of unique teams involved in the matches.
train.1068,match_season,Show the players and the years played.,1,"SELECT Player ,  Years_Played FROM player",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Player ,  Years_Played FROM player",This virtual table provides the names and total years played by players from the 'player' table. The placeholder in the SELECT statement allows for the retrieval of player names and their corresponding years of experience.
train.1070,match_season,Show all team names.,1,SELECT Name FROM Team,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM Team,"This virtual table describes the names of teams from the 'team' table. There are no conditions applied, so it retrieves all team names available in the database."
train.1072,match_season,"Show the season, the player, and the name of the country that player belongs to.",1,"SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country","This virtual table provides a list of match seasons along with the players participating in those seasons and the corresponding country names they represent. The data is retrieved by joining the 'country' table with the 'match_season' table based on the country identifier, allowing us to associate each player with their respective country during a specific season."
train.1074,match_season,Which players are from Indonesia?,1,SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  'Indonesia',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause."
train.1076,match_season,What are the distinct positions of the players from a country whose capital is Dublin?,1,SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  'Dublin',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.
train.1078,match_season,What are the official languages of the countries of players from Maryland or Duke college?,1,SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  'Maryland' OR T2.College  =  'Duke',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.
train.1081,match_season,Count the number of different official languages corresponding to countries that players who play Defender are from.,1,SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.
train.1084,match_season,"Show the positions of the players from the team with name ""Ryley Goldner"".",1,SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Ryley Goldner',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.
train.1086,match_season,"How many distinct colleges are associated with players from the team with name ""Columbus Crew"".",1,SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Columbus Crew',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.
train.1088,match_season,"Show the players and years played for players from team ""Columbus Crew"".",1,"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Columbus Crew'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.
train.1095,match_season,"What are all the players who played in match season, sorted by college in ascending alphabetical order?",1,SELECT player FROM match_season ORDER BY College ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT player FROM match_season ORDER BY College ASC,"This virtual table lists the names of players from the 'match_season' table, ordered by their college names in ascending order. The placeholder in the ORDER BY clause represents the college names."
train.1100,match_season,Show the name of colleges that have at least two players.,1,SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.
train.1102,match_season,Show the name of colleges that have at least two players in descending alphabetical order.,1,SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC,"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college."
train.1104,match_season,What are the names of teams that do no have match season record?,1,SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season),This virtual table lists the names of teams from the 'team' table that have not participated in any matches during the specified season. The placeholder in the subquery represents the team IDs associated with the matches.
train.1110,climbing,How many climbers are there?,1,SELECT count(*) FROM climber,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM climber,"This virtual table provides the total number of climbers recorded in the 'climber' table. The count function is used to aggregate the number of entries, giving a single numeric result representing the total climbers."
train.1112,climbing,List the names of climbers in descending order of points.,1,SELECT Name FROM climber ORDER BY Points DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM climber ORDER BY Points DESC,"This virtual table lists the names of climbers from the 'climber' table, ordered by the points they have earned in descending order. This allows for easy identification of the top climbers based on their achievements."
train.1114,climbing,List the names of climbers whose country is not Switzerland.,1,SELECT Name FROM climber WHERE Country != 'Switzerland',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM climber WHERE Country != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of climbers from the 'climber' table who are not from a specific country. The placeholder in the WHERE clause represents the country that is being excluded.
train.1116,climbing,What is the maximum point for climbers whose country is United Kingdom?,1,SELECT max(Points) FROM climber WHERE Country  =  'United Kingdom',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT max(Points) FROM climber WHERE Country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the maximum points awarded to climbers from a specific country based on their achievements in climbing mountains. The placeholder in the WHERE clause represents the country of origin of the climbers.
train.1118,climbing,How many distinct countries are the climbers from?,1,SELECT COUNT(DISTINCT Country) FROM climber,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(DISTINCT Country) FROM climber,This virtual table provides the count of distinct countries represented by climbers in the 'climber' table. The result indicates the diversity of climbers based on their country of origin.
train.1120,climbing,What are the names of mountains in ascending alphabetical order?,1,SELECT Name FROM mountain ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM mountain ORDER BY Name ASC,"This virtual table lists the names of mountains from the 'mountain' table, sorted in ascending order. The query retrieves all mountain names without any filtering conditions."
train.1124,climbing,What is the name of the highest mountain?,1,SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM mountain ORDER BY Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of mountains from the 'mountain' table, ordered by their height in descending order. The placeholder in the LIMIT clause represents the maximum number of mountain names to be returned."
train.1128,climbing,Show names of climbers and the names of mountains they climb.,1,"SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID","This virtual table describes the names of climbers and the names of the mountains they have climbed. The join operation links the climber's data with the corresponding mountain data based on the Mountain_ID, allowing for a comprehensive view of which climbers have ascended which mountains."
train.1130,climbing,Show the names of climbers and the heights of mountains they climb.,1,"SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID","This virtual table provides the names of climbers along with the heights of the mountains they have climbed. The data is sourced from the 'climber' and 'mountain' tables, linked by the Mountain_ID, which serves as a foreign key. The placeholders in the query allow for dynamic selection of climber and mountain data based on specific criteria."
train.1132,climbing,Show the height of the mountain climbed by the climber with the maximum points.,1,SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return."
train.1134,climbing,"Show the distinct names of mountains climbed by climbers from country ""West Germany"".",1,SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  'West Germany',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.
train.1136,climbing,Show the times used by climbers to climb mountains in Country Uganda.,1,SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  'Uganda',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.1138,climbing,Please show the countries and the number of climbers from each country.,1,"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country","This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country."
train.1140,climbing,List the countries that have more than one mountain.,1,SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.
train.1142,climbing,List the names of mountains that do not have any climber.,1,SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber),"This virtual table lists the names of mountains from the 'mountain' table that have not been climbed by any climber. The subquery checks for mountain IDs that exist in the 'climber' table, and the placeholder in the WHERE clause ensures that only mountains without any climbers are selected."
train.1146,climbing,Show the range that has the most number of mountains.,1,SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of mountain ranges from the 'mountain' table, grouped by the range name. The results are ordered by the number of mountains in each range in descending order, and the placeholder allows for limiting the number of results returned."
train.1148,climbing,Show the names of mountains with height more than 5000 or prominence more than 1000.,1,SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Name FROM mountain WHERE Height  >  [PLACEHOLDER-TYPE:NUMBER] OR Prominence  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of mountains from the 'mountain' table that have a height greater than a specified value or a prominence greater than a specified value. The placeholders in the WHERE clause represent the height and prominence thresholds.
train.1150,body_builder,How many body builders are there?,1,SELECT count(*) FROM body_builder,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM body_builder,"This virtual table provides the total count of bodybuilders recorded in the 'body_builder' table. It does not filter or specify any conditions, thus returning the overall number of entries."
train.1151,body_builder,List the total scores of body builders in ascending order.,1,SELECT Total FROM body_builder ORDER BY Total ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Total FROM body_builder ORDER BY Total ASC,"This virtual table provides the total weight lifted by bodybuilders from the 'body_builder' table, sorted in ascending order. The placeholder in the SELECT clause represents the total weight lifted across all events."
train.1152,body_builder,List the snatch score and clean jerk score of body builders in ascending order of snatch score.,1,"SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",This virtual table describes the weights lifted in the snatch and clean and jerk events by bodybuilders from the 'body_builder' table. The results are ordered by the weight lifted in the snatch event in ascending order.
train.1153,body_builder,What is the average snatch score of body builders?,1,SELECT avg(Snatch) FROM body_builder,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Snatch) FROM body_builder,This virtual table calculates the average weight lifted in the snatch event by bodybuilders from the 'body_builder' table. The result provides insights into the performance of bodybuilders in this specific event.
train.1154,body_builder,What are the clean and jerk score of the body builder with the highest total score?,1,SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the clean jerk weights lifted by bodybuilders from the 'body_builder' table, sorted in descending order based on the total weight lifted across all events. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.1155,body_builder,What are the birthdays of people in ascending order of height?,1,SELECT Birth_Date FROM People ORDER BY Height ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Birth_Date FROM People ORDER BY Height ASC,"This virtual table provides the birth dates of individuals from the 'People' table, sorted in ascending order by their height. The sorting allows for an easy comparison of birth dates relative to the height of each individual."
train.1156,body_builder,What are the names of body builders?,1,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID,This virtual table describes the names of individuals who are bodybuilders by joining the 'body_builder' table with the 'people' table based on their unique identifiers. The query retrieves the 'Name' column from the 'people' table for those who have a corresponding entry in the 'body_builder' table.
train.1157,body_builder,What are the names of body builders whose total score is higher than 300?,1,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of individuals from the 'people' table who are bodybuilders and have lifted a total weight exceeding a specified amount. The placeholder in the WHERE clause represents the total weight lifted.
train.1158,body_builder,What is the name of the body builder with the greatest body weight?,1,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of bodybuilders from the 'body_builder' table, joined with their corresponding details from the 'people' table. The results are ordered by the weight of the individuals in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.1159,body_builder,What are the birth date and birth place of the body builder with the highest total points?,1,"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return."
train.1160,body_builder,What are the heights of body builders with total score smaller than 315?,1,SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the heights of bodybuilders from the 'body_builder' table whose total weight lifted is below a specified threshold. The placeholder in the WHERE clause represents the maximum total weight lifted.
train.1161,body_builder,What is the average total score of body builders with height bigger than 200?,1,SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table calculates the average total weight lifted by bodybuilders from the 'body_builder' table, filtered by the height of the individuals from the 'people' table. The placeholder in the WHERE clause represents the minimum height in centimeters that the individuals must exceed."
train.1162,body_builder,What are the names of body builders in descending order of total scores?,1,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC,"This virtual table provides the names of bodybuilders from the 'people' table, ordered by their total weight lifted in descending order. The placeholder in the JOIN clause represents the relationship between bodybuilders and their corresponding personal details."
train.1163,body_builder,List each birth place along with the number of people from there.,1,"SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",This virtual table summarizes the count of individuals grouped by their place of birth from the 'people' table. The placeholder in the SELECT clause represents the birth place of the individuals.
train.1165,body_builder,What are the birth places that are shared by at least two people?,1,SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the birth places of individuals from the 'people' table, grouped by their birth place. The placeholder in the HAVING clause represents the minimum count of individuals required to include a birth place in the results."
train.1166,body_builder,List the height and weight of people in descending order of height.,1,"SELECT Height ,  Weight FROM people ORDER BY Height DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Height ,  Weight FROM people ORDER BY Height DESC","This virtual table provides the height and weight of individuals from the 'people' table, sorted in descending order by height. This allows for easy identification of the tallest individuals along with their corresponding weights."
train.1167,body_builder,Show all information about each body builder.,1,SELECT * FROM body_builder,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM body_builder,"This virtual table provides a comprehensive view of bodybuilders, including their unique identifiers, associated person identifiers, and the weights lifted in various events. The data is sourced from the 'body_builder' table, which is linked to the 'people' table through the People_ID foreign key, allowing for detailed insights into each bodybuilder's performance and personal information."
train.1168,body_builder,List the names and origins of people who are not body builders.,1,"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",This virtual table describes the names and birthplaces of individuals from the 'people' table who are not associated with any bodybuilder in the 'body_builder' table. The query uses an EXCEPT clause to exclude those who have a corresponding entry in the bodybuilder records.
train.1169,body_builder,How many distinct birth places are there?,1,SELECT count(DISTINCT Birth_Place) FROM people,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Birth_Place) FROM people,This virtual table provides the count of distinct birthplaces from the 'people' table. The result will indicate how many unique places of birth are represented in the dataset.
train.1170,body_builder,How many persons are not body builders?,1,SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder),This virtual table provides a count of individuals from the 'people' table who are not associated with any bodybuilder in the 'body_builder' table. The query uses a subquery to identify those individuals by checking the 'People_ID' against the 'body_builder' table.
train.1172,body_builder,"What are the total scores of the body builders whose birthday contains the string ""January"" ?",1,SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE '%January%';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the total weight lifted by bodybuilders from the 'body_builder' table, filtered by the birth date of the associated person from the 'people' table. The placeholder in the WHERE clause represents the specific birth date to filter the results."
train.1173,body_builder,What is the minimum snatch score?,1,SELECT min(snatch) FROM body_builder,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT min(snatch) FROM body_builder,This virtual table provides the minimum weight lifted in the snatch event from the 'body_builder' table. The query focuses on the 'snatch' column to determine the lowest value recorded.
train.1174,election_representative,How many elections are there?,1,SELECT count(*) FROM election,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM election,"This virtual table provides the total number of elections recorded in the 'election' table. The query counts all entries in the table, which reflects the overall participation in elections."
train.1175,election_representative,List the votes of elections in descending order.,1,SELECT Votes FROM election ORDER BY Votes DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Votes FROM election ORDER BY Votes DESC,"This virtual table provides the total number of votes cast in elections from the 'election' table, sorted in descending order. The query retrieves the 'Votes' column, allowing users to see which elections received the highest number of votes."
train.1176,election_representative,List the dates and vote percents of elections.,1,"SELECT Date ,  Vote_Percent FROM election",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Date ,  Vote_Percent FROM election",This virtual table provides the date and vote percentage of elections from the 'election' table. The data can be filtered or modified based on specific criteria such as election ID or location.
train.1177,election_representative,What are the minimum and maximum vote percents of elections?,1,"SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election","This virtual table provides the minimum and maximum vote percentages from the 'election' table, which records various details about elections, including the percentage of votes received by representatives. The query does not require any specific filtering, thus it retrieves overall statistics on vote percentages across all elections."
train.1178,election_representative,What are the names and parties of representatives?,1,"SELECT Name ,  Party FROM representative",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Name ,  Party FROM representative","This virtual table describes the names and political party affiliations of representatives from the 'representative' table. There are no filtering conditions applied, so it retrieves all representatives."
train.1179,election_representative,"What are the names of representatives whose party is not ""Republican""?",1,SELECT Name FROM Representative WHERE Party != 'Republican',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM Representative WHERE Party != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of representatives from the 'representative' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the party's name.
train.1180,election_representative,What are the life spans of representatives from New York state or Indiana state?,1,SELECT Lifespan FROM representative WHERE State  =  'New York' OR State  =  'Indiana',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Lifespan FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING] OR State  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the lifespan of representatives from the 'representative' table who belong to specific states. The placeholders in the WHERE clause represent the names of the states being queried.
train.1181,election_representative,What are the names of representatives and the dates of elections they participated in.,1,"SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID","This virtual table provides the names of representatives along with the dates of the elections they participated in. The data is sourced from the 'election' table, which contains details about each election, and the 'representative' table, which holds information about the representatives. The join condition links the two tables based on the representative's identifier, ensuring that the correct representative's name is associated with each election date."
train.1182,election_representative,What are the names of representatives with more than 10000 votes in election?,1,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of representatives from the 'representative' table who have participated in elections where the total number of votes cast exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of votes required to filter the results.
train.1183,election_representative,What are the names of representatives in descending order of votes?,1,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC,"This virtual table provides the names of representatives associated with elections, ordered by the total number of votes received in descending order. The query joins the 'election' table with the 'representative' table using the representative's identifier, ensuring that only relevant representatives are displayed based on their election results."
train.1184,election_representative,What is the party of the representative that has the smallest number of votes.,1,SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the political party affiliations of representatives associated with elections, sorted by the number of votes received in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.1185,election_representative,What are the lifespans of representatives in descending order of vote percent?,1,SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC,"This virtual table provides the lifespan of representatives associated with elections, ordered by the percentage of votes they received. The query joins the 'election' table with the 'representative' table using the representative's identifier, ensuring that only relevant representatives are included based on their election results."
train.1186,election_representative,"What is the average number of votes of representatives from party ""Republican""?",1,SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  'Republican',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average number of votes received in elections for representatives belonging to a specific political party. The placeholder in the WHERE clause represents the name of the political party.
train.1187,election_representative,What are the different parties of representative? Show the party name and the number of representatives in each party.,1,"SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Party ,  COUNT(*) FROM representative GROUP BY Party","This virtual table summarizes the number of representatives from each political party. The placeholder in the SELECT statement allows for the retrieval of the party affiliation, while the COUNT function aggregates the total number of representatives associated with each party."
train.1189,election_representative,What parties have at least three representatives?,1,SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of political parties from the 'representative' table that have a minimum number of representatives, as specified by the placeholder. The query groups the representatives by their party affiliation and filters the results based on the count of representatives in each party."
train.1190,election_representative,What states have at least two representatives?,1,SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of states from the 'representative' table that have a number of representatives equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of representatives required for a state to be included in the results.
train.1191,election_representative,List the names of representatives that have not participated in elections listed here.,1,SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election),"This virtual table lists the names of representatives from the 'representative' table who have not participated in any elections. The subquery identifies representatives that have an associated election, and the placeholder in the WHERE clause ensures that only those representatives without election records are selected."
train.1192,election_representative,Show the parties that have both representatives in New York state and representatives in Pennsylvania state.,1,SELECT Party FROM representative WHERE State  =  'New York' INTERSECT SELECT Party FROM representative WHERE State  =  'Pennsylvania',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the political parties that are represented in two different states. The placeholders in the WHERE clauses represent the names of the states being compared.
train.1193,election_representative,How many distinct parties are there for representatives?,1,SELECT count(DISTINCT Party) FROM representative,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Party) FROM representative,"This virtual table provides the count of distinct political parties represented in the 'representative' table. The query counts unique entries in the 'Party' column, which indicates the variety of political affiliations among the representatives."
train.1194,apartment_rentals,How many apartment bookings are there in total?,1,SELECT count(*) FROM Apartment_Bookings,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Apartment_Bookings,"This virtual table provides the total number of apartment bookings recorded in the 'Apartment_Bookings' table. The query counts all entries, giving a summary of the total bookings made."
train.1196,apartment_rentals,Show the start dates and end dates of all the apartment bookings.,1,"SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",This virtual table describes the start and end dates of apartment bookings from the 'Apartment_Bookings' table. The placeholders in the SELECT statement can be modified to filter or sort the results based on specific criteria.
train.1198,apartment_rentals,Show all distinct building descriptions.,1,SELECT DISTINCT building_description FROM Apartment_Buildings,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT building_description FROM Apartment_Buildings,"This virtual table provides a unique list of descriptions for apartment buildings from the 'Apartment_Buildings' table. The query uses the DISTINCT keyword to ensure that each description is listed only once, without duplicates."
train.1200,apartment_rentals,"Show the short names of the buildings managed by ""Emma"".",1,SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 =  'Emma',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the abbreviated names of apartment buildings from the 'Apartment_Buildings' table that are managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.
train.1202,apartment_rentals,"Show the addresses and phones of all the buildings managed by ""Brenden"".",1,"SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager	 =  'Brenden'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager	 =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the physical address and contact phone number of apartment buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.
train.1204,apartment_rentals,"What are the building full names that contain the word ""court""?",1,SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the full names of apartment buildings from the 'Apartment_Buildings' table that match a specific pattern. The placeholder in the WHERE clause represents the search pattern for the building's full name.
train.1206,apartment_rentals,What is the minimum and maximum number of bathrooms of all the apartments?,1,"SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",This virtual table provides the minimum and maximum number of bathrooms available in the apartments from the 'Apartments' table. The placeholders represent the values being calculated for the bathroom count.
train.1208,apartment_rentals,What is the average number of bedrooms of all apartments?,1,SELECT avg(bedroom_count) FROM Apartments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(bedroom_count) FROM Apartments,This virtual table calculates the average number of bedrooms across all apartments in the 'Apartments' table. The result provides insight into the typical size of the apartments available.
train.1210,apartment_rentals,Return the apartment number and the number of rooms for each apartment.,1,"SELECT apt_number ,  room_count FROM Apartments",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT apt_number ,  room_count FROM Apartments",This virtual table provides the apartment number and total room count for each apartment listed in the 'Apartments' table. The data can be filtered or modified based on specific criteria as needed.
train.1212,apartment_rentals,"What is the average number of rooms of apartments with type code ""Studio""?",1,SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  'Studio',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average number of rooms in apartments from the 'Apartments' table that match a specific type code. The placeholder in the WHERE clause represents the apartment type code being queried.
train.1214,apartment_rentals,"Return the apartment numbers of the apartments with type code ""Flat"".",1,SELECT apt_number FROM Apartments WHERE apt_type_code  =  'Flat',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT apt_number FROM Apartments WHERE apt_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the apartment numbers from the 'Apartments' table that correspond to a specific type of apartment. The placeholder in the WHERE clause represents the type code of the apartment.
train.1216,apartment_rentals,Return the first names and last names of all guests,1,"SELECT guest_first_name ,  guest_last_name FROM Guests",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT guest_first_name ,  guest_last_name FROM Guests","This virtual table describes the first and last names of guests from the 'Guests' table. There are no filters applied, so it retrieves all guests' names."
train.1218,apartment_rentals,"Return the date of birth for all the guests with gender code ""Male"".",1,SELECT date_of_birth FROM Guests WHERE gender_code  =  'Male',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_of_birth FROM Guests WHERE gender_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the birth dates of guests from the 'Guests' table who have a specific gender. The placeholder in the WHERE clause represents the gender code of the guests.
train.1226,apartment_rentals,"What is the booking status code of the apartment with apartment number ""Suite 634""?",1,SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  'Suite 634',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.
train.1228,apartment_rentals,"Show the distinct apartment numbers of the apartments that have bookings with status code ""Confirmed"".",1,SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.
train.1230,apartment_rentals,"Show the average room count of the apartments that have booking status code ""Provisional"".",1,SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.
train.1236,apartment_rentals,"Show the first names and last names of all the guests that have apartment bookings with status code ""Confirmed"".",1,"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  'Confirmed'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.
train.1240,apartment_rentals,"Show the total number of rooms of all apartments with facility code ""Gym"".",1,SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  'Gym',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.
train.1242,apartment_rentals,"Show the total number of rooms of the apartments in the building with short name ""Columbus Square"".",1,SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  'Columbus Square',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.
train.1244,apartment_rentals,Show the addresses of the buildings that have apartments with more than 2 bathrooms.,1,SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.
train.1246,apartment_rentals,"Show the apartment type codes and apartment numbers in the buildings managed by ""Kyle"".",1,"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  'Kyle'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.
train.1248,apartment_rentals,Show the booking status code and the corresponding number of bookings.,1,"SELECT 	booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT 	booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code","This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status."
train.1250,apartment_rentals,Return all the apartment numbers sorted by the room count in ascending order.,1,SELECT apt_number FROM Apartments ORDER BY room_count ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT apt_number FROM Apartments ORDER BY room_count ASC,"This virtual table lists the apartment numbers from the 'Apartments' table, sorted in ascending order based on the total number of rooms in each apartment. The sorting allows users to easily identify apartments with fewer rooms first."
train.1252,apartment_rentals,Return the apartment number with the largest number of bedrooms.,1,SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of apartment numbers from the 'Apartments' table, sorted in descending order based on the number of bedrooms. The placeholder in the LIMIT clause allows the user to specify the maximum number of apartment numbers to retrieve."
train.1254,apartment_rentals,Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.,1,"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC","This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type."
train.1264,apartment_rentals,"Show each apartment type code, and the maximum and minimum number of rooms for each type.",1,"SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",This virtual table summarizes the maximum and minimum number of rooms for each type of apartment from the 'Apartments' table. The placeholder in the SELECT clause represents the apartment type code.
train.1266,apartment_rentals,Show each gender code and the corresponding count of guests sorted by the count in descending order.,1,"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC","This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order."
train.1268,apartment_rentals,How many apartments do not have any facility?,1,SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities),"This virtual table provides the count of apartments from the 'Apartments' table that do not have any associated facilities. The subquery checks for apartments that are linked to the 'Apartment_Facilities' table, and the placeholder in the main query represents the absence of any facilities for those apartments."
train.1270,apartment_rentals,"Show the apartment numbers of apartments with bookings that have status code both ""Provisional"" and ""Confirmed""",1,SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes."
train.1273,apartment_rentals,Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.,1,SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the apartment numbers from the 'Apartments' table that are available based on a specific availability status. The query uses an INTERSECT operation to find common apartment numbers that meet the availability criteria specified by the placeholders.
train.1274,game_injury,How many games are held after season 2007?,1,SELECT count(*) FROM game WHERE season  >  2007,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM game WHERE season  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the total count of games played in seasons that are greater than a specified season. The placeholder in the WHERE clause represents the season number to filter the results.
train.1276,game_injury,"List the season, home team, away team of all the games.",1,"SELECT season ,  home_team ,  away_team FROM game",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT season ,  home_team ,  away_team FROM game","This virtual table provides information about the games played, specifically the season and the teams involved in each game. The placeholders represent the specific values for the season, home team, and away team."
train.1280,game_injury,What is the season of the game which causes the player 'Walter Samuel' to get injured?,1,SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the seasons in which games were played that involved a specific player who sustained an injury. The placeholder in the WHERE clause represents the player's name.
train.1281,game_injury,"What are the ids, scores, and dates of the games which caused at least two injury accidents?",1,"SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of games from the 'game' table that have a certain number of injury incidents associated with them. The placeholders in the SELECT statement represent the game ID, score, and date, while the HAVING clause uses a placeholder for the minimum count of injuries to filter the results accordingly."
train.1282,game_injury,What are the id and name of the stadium where the most injury accidents happened?,1,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query."
train.1284,game_injury,In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?,1,"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.
train.1286,game_injury,How many games are free of injury accidents?,1,SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ),"This virtual table provides the count of games from the 'game' table that do not have any associated injury incidents recorded in the 'injury_accident' table. The subquery filters out games that have injury records, ensuring only those without injuries are counted."
train.1287,game_injury,How many distinct kinds of injuries happened after season 2010?,1,SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of distinct injuries reported in games that occurred in seasons after a specified season. The placeholders in the query allow users to specify the season of interest.
train.1288,game_injury,List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.,1,SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the names of stadiums where a specific player has sustained injuries during games. The query uses an intersection to find stadiums associated with two instances of injury records for the same player, ensuring that both records are considered. The placeholders represent the player's name."
train.1290,game_injury,"Which stadium name contains the substring ""Bank""?",1,SELECT name FROM stadium WHERE name LIKE '%Bank%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM stadium WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of stadiums from the 'stadium' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the stadium names.
train.1292,game_injury,"For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",1,"SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC","This virtual table provides a list of game dates along with the names of players who sustained injuries during those games. The data is sourced from the 'game' and 'injury_accident' tables, where the games are linked to their respective injuries through the game identifier. The results are ordered by the season in descending order, allowing users to see the most recent games first."
train.1293,soccer_1,List all country and league names.,1,"SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id","This virtual table describes the names of countries and their corresponding leagues. The query joins the 'Country' table with the 'League' table based on the country identifier, allowing users to see which leagues belong to which countries."
train.1295,soccer_1,What is the average weight of all players?,1,SELECT avg(weight) FROM Player,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(weight) FROM Player,This virtual table calculates the average weight of players from the 'Player' table. The result provides insights into the physical attributes of players in the database.
train.1301,soccer_1,What is the average rating for right-footed players and left-footed players?,1,"SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot","This virtual table summarizes the average overall skill rating of players, categorized by their preferred foot (left or right). The placeholder in the SELECT clause represents the player's preferred foot, while the average overall rating is calculated for each category."
train.1302,soccer_1,"Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",1,"SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY preferred_foot","This virtual table summarizes the preferred foot of players from the 'Player_Attributes' table who have an overall rating above a specified threshold. The count of players for each preferred foot is aggregated, allowing for an analysis of foot preference among higher-rated players."
train.1307,performance_attendance,How many performances are there?,1,SELECT count(*) FROM performance,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM performance,"This virtual table provides the total count of performance events recorded in the 'performance' table. It does not filter or group the results, thus giving a straightforward count of all performances."
train.1308,performance_attendance,List the hosts of performances in ascending order of attendance.,1,SELECT HOST FROM performance ORDER BY Attendance ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT HOST FROM performance ORDER BY Attendance ASC,"This virtual table provides a list of hosts from the 'performance' table, ordered by the number of attendees in ascending order. The placeholder in the ORDER BY clause represents the attendance count."
train.1309,performance_attendance,What are the dates and locations of performances?,1,"SELECT Date ,  LOCATION FROM performance",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Date ,  LOCATION FROM performance",This virtual table provides the dates and locations of performances from the 'performance' table. The placeholders can be used to filter or modify the query as needed.
train.1311,performance_attendance,What is the average number of attendees for performances?,1,SELECT avg(Attendance) FROM performance,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Attendance) FROM performance,This virtual table calculates the average attendance of performance events from the 'performance' table. The result provides insights into the general turnout for performances held.
train.1312,performance_attendance,What is the date of the performance with the highest number of attendees?,1,SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Date FROM performance ORDER BY Attendance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of performance dates from the 'performance' table, ordered by the number of attendees in descending order. The placeholder in the LIMIT clause indicates the maximum number of performance dates to retrieve."
train.1315,performance_attendance,Show the locations that have at least two performances.,1,SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the locations of performances from the 'performance' table that have hosted a minimum number of events. The placeholder in the HAVING clause represents the minimum count of performances required at each location.
train.1316,performance_attendance,Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.,1,SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT LOCATION FROM performance WHERE Attendance  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies locations of performances from the 'performance' table where the attendance is greater than a specified number and also less than another specified number. The placeholders in the WHERE clauses represent the attendance thresholds.
train.1317,performance_attendance,Show the names of members and the location of the performances they attended.,1,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID","This virtual table provides the names of members along with the locations of performances they attended. The data is sourced from the 'member', 'performance', and 'member_attendance' tables, linking members to their attendance at specific performances."
train.1318,performance_attendance,Show the names of members and the location of performances they attended in ascending alphabetical order of their names.,1,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC","This virtual table provides a list of member names along with the locations of performances they attended. The data is sourced from the 'member', 'performance', and 'member_attendance' tables, with members being linked to their attendance records and the corresponding performance details. The results are sorted in ascending order by the member's name."
train.1319,performance_attendance,"Show the dates of performances with attending members whose roles are ""Violin"".",1,SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  'Violin',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the dates of performances attended by members of the organization who hold a specific role. The placeholders in the WHERE clause represent the role of the member being queried.
train.1320,performance_attendance,Show the names of members and the dates of performances they attended in descending order of attendance of the performances.,1,"SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC","This virtual table provides a list of member names along with the dates of their performances, sorted by the number of attendees at each performance. The placeholders in the query represent the member and performance identifiers, allowing for dynamic querying based on specific criteria."
train.1321,performance_attendance,List the names of members who did not attend any performance.,1,SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance),This virtual table lists the names of members from the 'member' table who have not attended any performance events. The query uses a subquery to filter out members based on their attendance records.
train.1322,college_2,Find the buildings which have rooms with capacity more than 50.,1,SELECT DISTINCT building FROM classroom WHERE capacity  >  50,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT building FROM classroom WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique buildings that contain classrooms with a capacity greater than a specified number of students. The placeholder in the WHERE clause represents the minimum capacity requirement.
train.1324,college_2,Count the number of rooms that are not in the Lamberton building.,1,SELECT count(*) FROM classroom WHERE building != 'Lamberton',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM classroom WHERE building != [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of classrooms located in buildings other than a specified building. The placeholder in the WHERE clause represents the name of the building to be excluded from the count.
train.1326,college_2,What is the name and building of the departments whose budget is more than the average budget?,1,"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)","This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison."
train.1328,college_2,Find the room number of the rooms which can sit 50 to 100 students and their buildings.,1,"SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the buildings and room numbers of classrooms from the 'classroom' table that can accommodate a specific range of students. The placeholders in the WHERE clause represent the minimum and maximum capacity of students.
train.1330,college_2,Find the name and building of the department with the highest budget.,1,"SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of academic departments along with their respective building locations, sorted by the allocated budget in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to retrieve."
train.1332,college_2,What is the name of the student who has the highest total credits in the History department.,1,SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM student WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY tot_cred DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of students from the 'student' table who are enrolled in a specific department. The results are ordered by the total credits earned by each student in descending order, and the number of results returned is limited by a specified number."
train.1334,college_2,How many rooms does the Lamberton building have?,1,SELECT count(*) FROM classroom WHERE building  =  'Lamberton',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM classroom WHERE building  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of classrooms located in a specific building from the 'classroom' table. The placeholder in the WHERE clause represents the name of the building.
train.1336,college_2,How many students have advisors?,1,SELECT count(DISTINCT s_id) FROM advisor,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT s_id) FROM advisor,"This virtual table provides the count of distinct student identifiers from the 'advisor' table, which indicates the number of unique students being advised."
train.1338,college_2,How many departments offer courses?,1,SELECT count(DISTINCT dept_name) FROM course,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT dept_name) FROM course,"This virtual table provides the count of distinct academic departments that offer courses in the 'course' table. The query uses the DISTINCT keyword to ensure that each department is only counted once, regardless of how many courses it offers."
train.1340,college_2,How many different courses offered by Physics department?,1,SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct courses offered by a specific academic department from the 'course' table. The placeholder in the WHERE clause represents the name of the department.
train.1342,college_2,Find the title of courses that have two prerequisites?,1,SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.
train.1344,college_2,"Find the title, credit, and department name of courses that have more than one prerequisites?",1,"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed."
train.1346,college_2,How many courses that do not have prerequisite?,1,SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq),"This virtual table provides a count of courses from the 'course' table that do not have any prerequisites. The subquery identifies all course IDs that are listed as prerequisites in the 'prereq' table, and the main query counts those courses that are not included in that list."
train.1348,college_2,Find the name of the courses that do not have any prerequisite?,1,SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq),"This virtual table lists the titles of courses from the 'course' table that do not have any prerequisites associated with them. The subquery checks for course IDs in the 'prereq' table, and the placeholder in the WHERE clause indicates that we are filtering out courses that are not prerequisites for any other course."
train.1350,college_2,How many different instructors have taught some course?,1,SELECT COUNT (DISTINCT id) FROM teaches,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT (DISTINCT id) FROM teaches,This virtual table provides the count of distinct instructors who are teaching courses. The placeholder in the COUNT function allows for filtering based on specific criteria if needed.
train.1352,college_2,Find the total budgets of the Marketing or Finance department.,1,SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(budget) FROM department WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] OR dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total budget allocated to specific academic departments from the 'department' table. The placeholders in the WHERE clause represent the names of the departments for which the budget is being summed.
train.1354,college_2,Find the department name of the instructor whose name contains 'Soisalon'.,1,SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM instructor WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of academic departments associated with instructors whose names match a specified pattern. The placeholder in the WHERE clause allows for flexible searching of instructor names.
train.1356,college_2,How many rooms whose capacity is less than 50 does the Lamberton building have?,1,SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM classroom WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND capacity  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of classrooms located in a specific building that have a capacity less than a specified number of students. The placeholders in the WHERE clause represent the building's name and the maximum capacity.
train.1358,college_2,Find the name and budget of departments whose budgets are more than the average budget.,1,"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)","This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value."
train.1360,college_2,what is the name of the instructor who is in Statistics department and earns the lowest salary?,1,SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY salary LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of instructors from the 'instructor' table who belong to a specific department. The results are ordered by the instructors' salaries, and the number of results returned is limited by a specified number."
train.1362,college_2,Find the title of course that is provided by both Statistics and Psychology departments.,1,SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.
train.1366,college_2,Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.,1,SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results."
train.1368,college_2,Find the name of students who took any class in the years of 2009 and 2010.,1,SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.
train.1370,college_2,Find the names of the top 3 departments that provide the largest amount of courses?,1,SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic departments from the 'course' table, grouped by department name. The results are ordered by the number of courses offered by each department in descending order, with a limit on the number of departments returned, specified by a placeholder for numeric values."
train.1372,college_2,Find the name of the department that offers the highest total credits?,1,SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the academic departments based on the total credits of the courses they offer. It retrieves the department names from the 'course' table, groups the results by department name, and orders them in descending order of the sum of credits. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to display."
train.1374,college_2,List the names of all courses ordered by their titles and credits.,1,"SELECT title FROM course ORDER BY title ,  credits",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT title FROM course ORDER BY title ,  credits","This virtual table lists the titles of courses from the 'course' table, sorted alphabetically by title and then by the number of credits awarded for each course. The sorting allows for easy identification of courses based on their titles and credit values."
train.1376,college_2,Which department has the lowest budget?,1,SELECT dept_name FROM department ORDER BY budget LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM department ORDER BY budget LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of academic departments from the 'department' table, ordered by their allocated budget. The placeholder in the LIMIT clause represents the maximum number of departments to be displayed."
train.1378,college_2,List the names and buildings of all departments sorted by the budget from large to small.,1,"SELECT dept_name ,  building FROM department ORDER BY budget DESC",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT dept_name ,  building FROM department ORDER BY budget DESC","This virtual table provides a list of academic departments along with their respective building locations, sorted by the allocated budget in descending order. The placeholder in the ORDER BY clause represents the budget for each department."
train.1380,college_2,Who is the instructor with the highest salary?,1,SELECT name FROM instructor ORDER BY salary DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed."
train.1382,college_2,List the information of all instructors ordered by their salary in ascending order.,1,SELECT * FROM instructor ORDER BY salary,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM instructor ORDER BY salary,"This virtual table provides a comprehensive list of all instructors from the 'instructor' table, sorted by their annual salary in ascending order. The query retrieves all columns for each instructor, allowing for a detailed view of their information."
train.1384,college_2,Find the name of the students and their department names sorted by their total credits in ascending order.,1,"SELECT name ,  dept_name FROM student ORDER BY tot_cred",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  dept_name FROM student ORDER BY tot_cred","This virtual table provides a list of student names along with their respective department names from the 'student' table, sorted by the total credits earned by each student. The sorting is done in ascending order based on the total credits."
train.1386,college_2,list in alphabetic order all course names and their instructors' names in year 2008.,1,"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title",This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.
train.1388,college_2,Find the name of instructors who are advising more than one student.,1,SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.
train.1390,college_2,Find the name of the students who have more than one advisor?,1,SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of students who have more than a specified number of advisors. The query joins the 'student' table with the 'advisor' table on the student ID, groups the results by student ID, and filters the groups to include only those with a count of advisors greater than a placeholder value."
train.1392,college_2,Find the number of rooms with more than 50 capacity for each building.,1,"SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  building FROM classroom WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY building","This virtual table provides the count of classrooms grouped by building, where the capacity of the classrooms exceeds a specified number. The placeholder in the WHERE clause represents the minimum capacity requirement for the classrooms."
train.1394,college_2,Find the maximum and average capacity among rooms in each building.,1,"SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",This virtual table summarizes the maximum and average classroom capacities grouped by building from the 'classroom' table. The placeholders represent the building names and capacity values.
train.1396,college_2,Find the title of the course that is offered by more than one department.,1,SELECT title FROM course GROUP BY title HAVING count(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.
train.1398,college_2,Find the total credits of courses provided by different department.,1,"SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name","This virtual table summarizes the total number of credits offered by each academic department from the 'course' table. The placeholder in the SELECT clause represents the total credits, while the GROUP BY clause organizes the results by department name."
train.1408,college_2,Find the name of department has the highest amount of students?,1,SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic departments from the 'student' table, grouped by department name. The results are ordered by the number of students in each department in descending order, and the number of departments returned is limited by a specified placeholder value."
train.1410,college_2,Find the total number of students in each department.,1,"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name","This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department."
train.1414,college_2,What is the id of the instructor who advises of all students from History department?,1,SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.
train.1416,college_2,Find the name and salary of the instructors who are advisors of any student from History department?,1,"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.
train.1418,college_2,Find the id of the courses that do not have any prerequisite?,1,SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq,"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment."
train.1423,college_2,Give the title of the prerequisite to the course International Finance.,1,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.
train.1428,college_2,What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?,1,SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results."
train.1430,college_2,Find the name of the instructors who taught C Programming course before.,1,SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.
train.1432,college_2,Find the name and salary of instructors who are advisors of the students from the Math department.,1,"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.
train.1434,college_2,"Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",1,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred,"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students."
train.1440,college_2,Find the name of instructors who didn't teach any courses?,1,SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches),"This virtual table lists the names of instructors from the 'instructor' table who are not currently teaching any courses. The subquery identifies the IDs of instructors who are teaching, and the main query filters out those IDs to return only the names of instructors who are available for teaching."
train.1442,college_2,Find the id of instructors who didn't teach any courses?,1,SELECT id FROM instructor EXCEPT SELECT id FROM teaches,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT id FROM instructor EXCEPT SELECT id FROM teaches,This virtual table lists the identifiers of instructors from the 'instructor' table who are not currently teaching any courses. The use of the EXCEPT clause ensures that only those instructors who do not have any associated records in the 'teaches' table are included in the result.
train.1444,college_2,Find the names of instructors who didn't each any courses in any Spring semester.,1,SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of instructors from the 'instructor' table who are not teaching any courses during a specific semester. The placeholder in the subquery represents the semester in which we want to check if the instructors are teaching.
train.1446,college_2,Find the name of the department which has the highest average salary of professors.,1,SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic departments from the 'instructor' table, grouped by department name. The results are ordered by the average salary of instructors in each department in descending order, and the number of departments returned is limited by a specified placeholder for numeric values."
train.1450,college_2,What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?,1,"SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)","This virtual table provides the titles and credits of courses that are held in the classroom with the maximum capacity. It joins the 'classroom', 'section', and 'course' tables to filter the results based on the classroom's capacity."
train.1456,college_2,Find the name of students who have taken the prerequisite course of the course with title International Finance.,1,SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance'),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses."
train.1459,college_2,What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?,1,"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.
train.1460,college_2,Find the name of students who took some course offered by Statistics department.,1,SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.
train.1462,college_2,"Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",1,"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title","This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department."
train.1465,college_2,What are the names of all instructors in the Comp. Sci. department?,1,SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of instructors from the 'instructor' table who belong to a specific academic department. The placeholder in the WHERE clause represents the department's name.
train.1466,college_2,Find the names of all instructors in Comp. Sci. department with salary > 80000.,1,SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]  AND salary  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the names of instructors from the 'instructor' table who belong to a specific department and have a salary above a certain threshold. The placeholders in the WHERE clause represent the department's name and the salary amount.
train.1468,college_2,Find the names of all instructors who have taught some course and the course_id.,1,"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID","This virtual table describes the names of instructors along with the course identifiers for the courses they teach. The join operation connects the 'instructor' table with the 'teaches' table based on the instructor's ID, allowing us to retrieve relevant information about the courses taught by each instructor."
train.1470,college_2,Find the names of all instructors in the Art department who have taught some course and the course_id.,1,"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name."
train.1472,college_2,Find the names of all instructors whose name includes the substring “dar”.,1,SELECT name FROM instructor WHERE name LIKE '%dar%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM instructor WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of instructors from the 'instructor' table whose names match a specific pattern. The placeholder in the WHERE clause allows for flexible searching based on the provided string value.
train.1474,college_2,List in alphabetic order the names of all distinct instructors.,1,SELECT DISTINCT name FROM  instructor ORDER BY name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT name FROM  instructor ORDER BY name,"This virtual table lists the distinct names of instructors from the 'instructor' table, sorted in alphabetical order. The absence of any filtering conditions means it retrieves all unique instructor names available in the database."
train.1477,college_2,What are the ids for courses in the Fall of 2009 or the Spring of 2010?,1,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of course identifiers from the 'section' table for two different instances of the same semester and year. The placeholders in the WHERE clauses represent the semester and year values that can be specified by the user.
train.1479,college_2,What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?,1,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.
train.1481,college_2,What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?,1,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies the course IDs from the 'SECTION' table that are offered in a specific semester and year, excluding those that are also offered in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results."
train.1482,college_2,Find the salaries of all distinct instructors that are less than the largest salary.,1,SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor),This virtual table provides a list of distinct salaries of instructors from the 'instructor' table that are less than the maximum salary among all instructors. The placeholder in the WHERE clause represents a comparison to the maximum salary value.
train.1484,college_2,Find the total number of instructors who teach a course in the Spring 2010 semester.,1,SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.
train.1488,college_2,Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.,1,SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.
train.1490,college_2,Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.,1,SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.
train.1492,debate,How many debates are there?,1,SELECT count(*) FROM debate,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM debate,"This virtual table provides the total number of debate events recorded in the 'debate' table. The query counts all entries in the table, giving a clear overview of how many debates have taken place."
train.1493,debate,List the venues of debates in ascending order of the number of audience.,1,SELECT Venue FROM debate ORDER BY Num_of_Audience ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Venue FROM debate ORDER BY Num_of_Audience ASC,"This virtual table provides a list of venues from the 'debate' table, ordered by the number of audience members attending each debate in ascending order. This allows users to see which venues had the least to most audience participation."
train.1494,debate,What are the date and venue of each debate?,1,"SELECT Date ,  Venue FROM debate",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Date ,  Venue FROM debate",This virtual table provides the date and venue of debate events from the 'debate' table. The placeholders in the SELECT statement can be modified to filter or sort the results based on specific criteria.
train.1495,debate,List the dates of debates with number of audience bigger than 150,1,SELECT Date FROM debate WHERE Num_of_Audience  >  150,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Date FROM debate WHERE Num_of_Audience  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates of debate events from the 'debate' table where the number of audience members exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of audience members required to filter the results.
train.1496,debate,Show the names of people aged either 35 or 36.,1,SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM  people WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of individuals from the 'people' table who are of specific ages. The placeholders in the WHERE clause represent the ages being queried.
train.1497,debate,What is the party of the youngest people?,1,SELECT Party FROM people ORDER BY Age ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Party FROM people ORDER BY Age ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of political party affiliations from the 'people' table, ordered by the age of individuals in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.1498,debate,Show different parties of people along with the number of people in each party.,1,"SELECT Party ,  COUNT(*) FROM people GROUP BY Party",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Party ,  COUNT(*) FROM people GROUP BY Party","This virtual table summarizes the number of individuals affiliated with each political party from the 'people' table. The query groups the results by the 'Party' column, allowing for a count of people in each party."
train.1500,debate,Show the distinct venues of debates,1,SELECT DISTINCT Venue FROM debate,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Venue FROM debate,"This virtual table provides a list of unique venues from the 'debate' table where debate events are held. The query uses the DISTINCT keyword to ensure that each venue is listed only once, regardless of how many debates occur at that location."
train.1501,debate,"Show the names of people, and dates and venues of debates they are on the affirmative side.",1,"SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID","This virtual table provides the names of individuals who were on the affirmative side of debates, along with the corresponding date and venue of each debate. The placeholders in the query represent the identifiers linking the debates and the people involved."
train.1502,debate,"Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",1,"SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC","This virtual table provides the names of individuals who participated on the negative side of debates, along with the corresponding debate dates and venues. The placeholders in the query allow for dynamic filtering and sorting based on the names of the participants."
train.1503,debate,Show the names of people that are on affirmative side of debates with number of audience bigger than 200.,1,SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of individuals who were on the affirmative side of debates that had a specific number of audience members. The placeholders in the query allow for filtering based on the audience size.
train.1504,debate,Show the names of people and the number of times they have been on the affirmative side of debates.,1,"SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",This virtual table summarizes the count of debates in which each person has participated on the affirmative side. It joins the 'debate_people' table with the 'people' table to retrieve the names of individuals and their corresponding counts of affirmative participation.
train.1505,debate,Show the names of people who have been on the negative side of debates at least twice.,1,SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of individuals who have participated in debates on the negative side, specifically those who have participated in a minimum number of debates as specified by the placeholder. The query joins the 'debate_people' table with the 'people' table to retrieve the names of the individuals associated with the negative side of the debates."
train.1506,debate,List the names of people that have not been on the affirmative side of debates.,1,SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people),This virtual table lists the names of individuals from the 'people' table who did not participate on the affirmative side in any debate. The placeholder in the subquery represents the affirmative participants' identifiers.
train.1507,insurance_and_eClaims,List the names of all the customers in alphabetical order.,1,SELECT customer_details FROM customers ORDER BY customer_details,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_details FROM customers ORDER BY customer_details,"This virtual table provides a list of detailed information about customers from the 'Customers' table, sorted in ascending order based on the customer details. The placeholder in the ORDER BY clause allows for dynamic sorting based on the specified criteria."
train.1509,insurance_and_eClaims,"Find all the policy type codes associated with the customer ""Dayana Robel""",1,SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  'Dayana Robel',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.
train.1512,insurance_and_eClaims,Find the type code of the most frequently used policy.,1,SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of insurance policies available in the 'Policies' table. It groups the policies by their type code and orders them by the number of occurrences, allowing users to see the most common policy types. The placeholder in the LIMIT clause represents the maximum number of policy types to return."
train.1514,insurance_and_eClaims,Which types of policy are chosen by more than 2 customers? Give me the policy type codes.,1,SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.
train.1520,insurance_and_eClaims,Which customer made the largest amount of claim in a single claim? Return the customer details.,1,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers),3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers),"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims."
train.1523,insurance_and_eClaims,Find the names of customers who have no policies associated.,1,SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id,"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed."
train.1525,insurance_and_eClaims,How many claim processing stages are there in total?,1,SELECT count(*) FROM claims_processing_stages,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM claims_processing_stages,This virtual table provides a count of all claim processing stages recorded in the 'Claims_Processing_Stages' table. The result will indicate the total number of distinct stages available for processing claims.
train.1529,insurance_and_eClaims,"Find the names of customers whose name contains ""Diana"".",1,SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_details FROM customers WHERE customer_details LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the detailed information of customers from the 'Customers' table that match a specific pattern. The placeholder in the WHERE clause represents the search criteria for customer details.
train.1532,insurance_and_eClaims,"Which customers have an insurance policy with the type code ""Deputy""? Give me the customer details.",1,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  'Deputy',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.
train.1534,insurance_and_eClaims,"Which customers have an insurance policy with the type code ""Deputy"" or ""Uniform""? Return the customer details.",1,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  'Deputy' OR t1.policy_type_code  =  'Uniform',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.
train.1537,insurance_and_eClaims,Find the number of records of each policy type and its type code.,1,"SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",This virtual table summarizes the count of insurance policies grouped by their type from the 'Policies' table. The placeholder in the SELECT clause represents the policy type code.
train.1539,insurance_and_eClaims,Find the name of the customer that has been involved in the most policies.,1,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return."
train.1541,insurance_and_eClaims,"What is the description of the claim status ""Open""?",1,SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  'Open',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of the current status of claims from the 'claims_processing_stages' table based on a specific status name. The placeholder in the WHERE clause represents the name of the claim status being queried.
train.1543,insurance_and_eClaims,How many distinct claim outcome codes are there?,1,SELECT count(DISTINCT claim_outcome_code) FROM claims_processing,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT claim_outcome_code) FROM claims_processing,This virtual table provides the count of distinct claim outcome codes from the 'Claims_Processing' table. The result will indicate how many unique outcomes have been recorded for claims processing.
train.1551,customers_and_invoices,"Show the id, the date of account opened, the account name, and other account detail for all accounts.",1,"SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts","This virtual table describes the account details of customers from the 'Accounts' table. It includes the account ID, the date the account was opened, the name of the account, and any additional details related to the account."
train.1554,customers_and_invoices,"What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name ""Meaghan""?",1,"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values."
train.1555,customers_and_invoices,Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.,1,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan' AND T2.customer_last_name  =  'Keeling'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names."
train.1557,customers_and_invoices,Show the first name and last name for the customer with account name 900.,1,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  '900'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.
train.1561,customers_and_invoices,"Show the unique first names, last names, and phone numbers for all customers with any account.",1,"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id","This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts."
train.1563,customers_and_invoices,Show customer ids who don't have an account.,1,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts,"This virtual table identifies customers from the 'Customers' table who do not have an associated account in the 'Accounts' table. The query uses the EXCEPT clause to filter out customer IDs that are present in the 'Accounts' table, leaving only those customers without accounts."
train.1565,customers_and_invoices,How many accounts does each customer have? List the number and customer id.,1,"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id","This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer."
train.1567,customers_and_invoices,"What is the customer id, first and last name with most number of accounts.",1,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number."
train.1571,customers_and_invoices,Show first name and id for all customers with at least 2 accounts.,1,"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause."
train.1575,customers_and_invoices,Show the number of customers for each gender.,1,"SELECT gender ,  count(*) FROM Customers GROUP BY gender",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT gender ,  count(*) FROM Customers GROUP BY gender",This virtual table summarizes the number of customers grouped by their gender from the 'Customers' table. The placeholder in the SELECT clause represents the gender of the customers.
train.1577,customers_and_invoices,How many transactions do we have?,1,SELECT count(*) FROM Financial_transactions,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Financial_transactions,This virtual table provides a count of all financial transactions recorded in the 'Financial_Transactions' table. The query uses the COUNT function to aggregate the total number of transactions without any filtering conditions.
train.1581,customers_and_invoices,How many transaction does account with name 337 have?,1,SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  '337',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.
train.1583,customers_and_invoices,"What is the average, minimum, maximum, and total transaction amount?",1,"SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions","This virtual table provides a summary of financial transactions, including the average, minimum, maximum, and total amounts of transactions recorded in the 'Financial_Transactions' table. The placeholders in the SELECT statement represent the aggregated values of transaction amounts."
train.1585,customers_and_invoices,Show ids for all transactions whose amounts are greater than the average.,1,SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions),"This virtual table lists the unique identifiers of financial transactions from the 'Financial_Transactions' table where the transaction amount exceeds the average transaction amount. The subquery calculates the average transaction amount, and the placeholder in the WHERE clause allows for dynamic filtering based on this average."
train.1587,customers_and_invoices,Show the transaction types and the total amount of transactions.,1,"SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type","This virtual table summarizes the total amount of financial transactions grouped by their type from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the type of transaction, while the sum of the transaction amounts is calculated for each type."
train.1591,customers_and_invoices,Show the account id with most number of transactions.,1,SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return."
train.1593,customers_and_invoices,Show the account id and name with at least 4 transactions.,1,"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results."
train.1595,customers_and_invoices,Show all product sizes.,1,SELECT DISTINCT product_size FROM Products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT product_size FROM Products,"This virtual table provides a list of unique product sizes available in the 'Products' table. The query uses the DISTINCT keyword to ensure that each size is only listed once, regardless of how many products share that size."
train.1597,customers_and_invoices,Show all product colors.,1,SELECT DISTINCT product_color FROM Products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT product_color FROM Products,This virtual table provides a list of unique product colors from the 'Products' table. The absence of any filtering conditions means it retrieves all distinct colors available for the products.
train.1600,customers_and_invoices,How many transactions correspond to each invoice number?,1,"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number","This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice."
train.1601,customers_and_invoices,What is the invoice number and invoice date for the invoice with most number of transactions?,1,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.1603,customers_and_invoices,How many invoices do we have?,1,SELECT count(*) FROM Invoices,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Invoices,This virtual table provides a count of all invoices recorded in the 'Invoices' table. It serves to give an overview of the total number of invoices without detailing individual entries.
train.1605,customers_and_invoices,Show invoice dates and order id and details for all invoices.,1,"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.
train.1608,customers_and_invoices,How many invoices correspond to each order id?,1,"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id","This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order."
train.1609,customers_and_invoices,What is the order id and order details for the order more than two invoices.,1,"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.
train.1611,customers_and_invoices,"What is the customer last name, id and phone number with most number of orders?",1,"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values."
train.1613,customers_and_invoices,Show all product names without an order.,1,SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id,"This virtual table lists the names of products from the 'Products' table that have not been ordered, by excluding those that appear in the 'Order_Items' table. The query uses a subquery to filter out the product names that are associated with any order items."
train.1615,customers_and_invoices,Show all product names and the total quantity ordered for each product name.,1,"SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name","This virtual table summarizes the total quantity of each product ordered from the 'Order_Items' table, joining with the 'Products' table to retrieve the product names. The result is grouped by product name to provide a clear overview of the quantities ordered for each product."
train.1618,customers_and_invoices,How many order items correspond to each order id?,1,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id","This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order."
train.1619,customers_and_invoices,Show the product ids and the number of unique orders containing each product.,1,"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id","This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product."
train.1624,customers_and_invoices,How many different products correspond to each order id?,1,"SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id","This virtual table summarizes the total number of distinct products ordered for each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function calculates the number of different products associated with each order."
train.1625,customers_and_invoices,Show order ids and the total quantity in each order.,1,"SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id","This virtual table summarizes the total quantity of products ordered for each order from the 'Order_Items' table. The placeholder in the SELECT statement represents the unique identifier for each order, while the sum function calculates the total quantity of products associated with that order."
train.1627,customers_and_invoices,How many products were not included in any order?,1,SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items ),"This virtual table provides a count of products from the 'Products' table that have not been ordered, as indicated by their absence in the 'Order_Items' table. The query uses a subquery to filter out product IDs that exist in the 'Order_Items' table, ensuring only unordered products are counted."
train.1629,wedding,How many churches opened before 1850 are there?,1,SELECT count(*) FROM Church WHERE Open_Date  <  1850,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Church WHERE Open_Date  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a count of churches from the 'Church' table that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.
train.1630,wedding,"Show the name, open date, and organizer for all churches.",1,"SELECT name ,  open_date ,  organized_by FROM Church",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  open_date ,  organized_by FROM Church","This virtual table describes the names, open dates, and organizers of churches from the 'church' table. The placeholder in the SELECT clause allows for the retrieval of specific church details."
train.1631,wedding,List all church names in descending order of opening date.,1,SELECT name FROM church ORDER BY open_date DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM church ORDER BY open_date DESC,"This virtual table lists the names of churches from the 'church' table, ordered by their establishment date in descending order. This allows users to see the most recently established churches first."
train.1632,wedding,Show the opening year in whcih at least two churches opened.,1,SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the open dates of churches from the 'church' table that have been established on the same date, filtering for those dates that have a count of occurrences greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of churches that must share the same open date."
train.1633,wedding,Show the organizer and name for churches that opened between 1830 and 1840.,1,"SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT organized_by ,  name FROM church WHERE open_date BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides information about churches, specifically the organizer and name of each church, filtered by the date range of when the churches were established. The placeholders in the WHERE clause represent the start and end dates for filtering the churches based on their open dates."
train.1634,wedding,Show all opening years and the number of churches that opened in that year.,1,"SELECT open_date ,  count(*) FROM church GROUP BY open_date",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT open_date ,  count(*) FROM church GROUP BY open_date","This virtual table summarizes the number of churches established on each open date from the 'church' table. The query groups the results by the open date, allowing users to see how many churches were opened on each specific date."
train.1635,wedding,Show the name and opening year for three churches that opened most recently.,1,"SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of church names along with their opening dates from the 'church' table, sorted by the most recent opening date. The placeholder in the LIMIT clause indicates the maximum number of records to return."
train.1638,wedding,"Show the minimum, maximum, and average age for all people.",1,"SELECT min(age) ,  max(age) ,  avg(age) FROM people",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(age) ,  max(age) ,  avg(age) FROM people","This virtual table provides the minimum, maximum, and average ages of individuals from the 'people' table. The query aggregates age data to give insights into the age distribution of the population."
train.1639,wedding,Show the name and country for all people whose age is smaller than the average.,1,"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.
train.1640,wedding,Show the pair of male and female names in all weddings after year 2014,1,"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.
train.1643,wedding,Show all church names that have hosted least two weddings.,1,SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of churches from the 'church' table that have hosted a specified number of weddings. The placeholder in the HAVING clause represents the minimum count of weddings that a church must have hosted to be included in the results.
train.1644,wedding,Show the names for all females from Canada having a wedding in year 2016.,1,SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.is_male  =  [PLACEHOLDER-TYPE:STRING] AND T2.country  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of female participants in weddings that took place in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender indication, and the country name."
train.1645,wedding,How many weddings are there in year 2016?,1,SELECT count(*) FROM wedding WHERE YEAR  =  2016,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the total number of weddings that took place in a specific year, as recorded in the 'wedding' table. The placeholder in the WHERE clause represents the year of interest."
train.1646,wedding,Show the church names for the weddings of all people older than 30.,1,SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants."
train.1647,wedding,Show all countries and the number of people from each country.,1,"SELECT country ,  count(*) FROM people GROUP BY country",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT country ,  count(*) FROM people GROUP BY country","This virtual table summarizes the number of people residing in each country from the 'people' table. The query groups the results by the 'country' column, allowing for a count of individuals per country."
train.1648,wedding,How many churches have a wedding in year 2016?,1,SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of distinct churches that hosted weddings in a specific year. The placeholder in the WHERE clause represents the year of interest.
train.1649,theme_gallery,How many artists do we have?,1,SELECT count(*) FROM artist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM artist,"This virtual table provides the total number of artists recorded in the 'artist' table. The query uses the count function to aggregate the data, returning a single numeric value representing the total count of artists."
train.1651,theme_gallery,"Show all artist name, age, and country ordered by the yeared they joined.",1,"SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  age ,  country FROM artist ORDER BY Year_Join","This virtual table provides the names, ages, and countries of artists from the 'artist' table, sorted by the year they joined the exhibition. The ordering allows for a chronological view of the artists' joining years."
train.1653,theme_gallery,What are all distinct country for artists?,1,SELECT DISTINCT country FROM artist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT country FROM artist,"This virtual table provides a list of unique countries represented by artists in the 'artist' table. The query uses the DISTINCT keyword to ensure that each country is only listed once, regardless of how many artists come from that country."
train.1655,theme_gallery,Show all artist names and the year joined who are not from United States.,1,"SELECT name ,  year_join FROM artist WHERE country != 'United States'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  year_join FROM artist WHERE country != [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and joining years of artists from the 'artist' table who are not from a specific country. The placeholder in the WHERE clause represents the country name that should be excluded.
train.1657,theme_gallery,How many artists are above age 46 and joined after 1990?,1,SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM artist WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND year_join  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a count of artists from the 'artist' table who are older than a specified age and joined the exhibition after a certain year. The placeholders in the WHERE clause represent the age and year criteria.
train.1659,theme_gallery,What is the average and minimum age of all artists from United States.,1,"SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(age) ,  min(age) FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average and minimum age of artists from the 'artist' table who are from a specific country. The placeholder in the WHERE clause represents the country's name.
train.1661,theme_gallery,What is the name of the artist who joined latest?,1,SELECT name FROM artist ORDER BY year_join DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM artist ORDER BY year_join DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of artists from the 'artist' table, ordered by the year they joined the exhibition in descending order. The placeholder in the LIMIT clause represents the maximum number of artist names to be displayed."
train.1663,theme_gallery,How many exhibition are there in year 2005 or after?,1,SELECT count(*) FROM exhibition WHERE YEAR  >=  2005,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.
train.1669,theme_gallery,What is the name and country for the artist with most number of exhibitions?,1,"SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and countries of artists who have participated in exhibitions, sorted by the number of exhibitions they have been part of. The placeholder in the LIMIT clause allows for specifying the maximum number of artists to return based on their exhibition count."
train.1671,theme_gallery,Show names for artists without any exhibition.,1,SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition),This virtual table lists the names of artists from the 'artist' table who have not participated in any exhibitions. The placeholder in the subquery represents the artist identifiers that are linked to the exhibitions.
train.1673,theme_gallery,What is the theme and artist name for the exhibition with a ticket price higher than the average?,1,"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)","This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices."
train.1675,theme_gallery,"Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",1,"SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the average, minimum, and maximum ticket prices from the 'exhibition' table for exhibitions that took place before a specified year. The placeholder in the WHERE clause represents the year to filter the exhibitions."
train.1679,theme_gallery,"What is the theme, date, and attendance for the exhibition in year 2004?",1,"SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides information about the themes of exhibitions, the dates they occurred, and the attendance figures. It combines data from the 'exhibition_record' and 'exhibition' tables, filtered by a specific year of the exhibition."
train.1681,theme_gallery,Show all artist names who didn't have an exhibition in 2004.,1,SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of artists who did not participate in a specific exhibition year. The placeholder in the WHERE clause represents the year of the exhibition being queried.
train.1684,theme_gallery,Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?,1,SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the themes of exhibitions that had attendance numbers both below and above specified thresholds. The placeholders in the WHERE clause represent the attendance limits for filtering the exhibitions.
train.1685,theme_gallery,How many exhibitions have a attendance more than 100 or have a ticket price below 10?,1,SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER] OR T2.ticket_price  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of exhibitions from the 'exhibition_record' table that had an attendance greater than a specified number or where the ticket price from the 'exhibition' table is less than a specified amount. The placeholders in the WHERE clause represent the attendance threshold and the ticket price limit.
train.1687,theme_gallery,Show all artist names with an average exhibition attendance over 200.,1,SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of artists whose exhibitions have had an average attendance greater than a specified number. The query joins the 'exhibition_record' table with the 'exhibition' table to link exhibitions to their respective records, and then further joins with the 'artist' table to retrieve the artist names. The placeholder in the HAVING clause represents the minimum average attendance threshold."
train.1689,epinions_1,"Find the id of the item whose title is ""orange"".",1,SELECT i_id FROM item WHERE title  =  'orange',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT i_id FROM item WHERE title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of items from the 'item' table that match a specific title. The placeholder in the WHERE clause represents the title of the item being queried.
train.1690,epinions_1,List all information in the item table.,1,SELECT * FROM item,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM item,This virtual table retrieves all details of items from the 'item' table. The output includes unique identifiers and titles for each item.
train.1691,epinions_1,Find the number of reviews.,1,SELECT count(*) FROM review,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM review,"This virtual table provides the total number of reviews recorded in the 'review' table. It counts all entries without any filtering, giving a complete overview of the review data available."
train.1692,epinions_1,How many users are there?,1,SELECT count(*) FROM useracct,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM useracct,"This virtual table provides the total number of user accounts present in the 'useracct' table. The query counts all entries in the table, which helps in understanding the size of the user base."
train.1693,epinions_1,Find the average and maximum rating of all reviews.,1,"SELECT avg(rating) ,  max(rating) FROM review",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(rating) ,  max(rating) FROM review",This virtual table provides the average and maximum ratings from the 'review' table. The placeholders in the SELECT statement allow for dynamic querying of the average and maximum ratings based on the reviews recorded.
train.1695,epinions_1,How many different users wrote some reviews?,1,SELECT count(DISTINCT u_id) FROM review,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT u_id) FROM review,This virtual table provides the count of distinct users who have written reviews for items in the 'review' table. The placeholder in the SELECT statement indicates that the result will be a numeric value representing the number of unique user identifiers.
train.1696,epinions_1,How many different items were reviewed by some users?,1,SELECT count(DISTINCT i_id) FROM review,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT i_id) FROM review,"This virtual table provides the count of distinct items that have been reviewed in the 'review' table. The query counts unique item identifiers, ensuring that each item is only counted once regardless of the number of reviews it has received."
train.1697,epinions_1,Find the number of items that did not receive any review.,1,SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review),"This virtual table provides a count of items from the 'item' table that do not have any associated reviews. The subquery checks for item identifiers that exist in the 'review' table, and the main query counts those items that are not present in that list."
train.1698,epinions_1,Find the names of users who did not leave any review.,1,SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review),This virtual table lists the names of users from the 'useracct' table who have not written any reviews. The placeholder in the subquery represents the user identifiers that have submitted reviews.
train.1699,epinions_1,Find the names of goods that receive a rating of 10.,1,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the titles of items from the 'item' table that have received a specific rating in the 'review' table. The placeholder in the WHERE clause represents the rating value.
train.1700,epinions_1,Find the titles of items whose rating is higher than the average review rating of all items.,1,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review),"This virtual table provides the titles of items from the 'item' table that have received a rating higher than the average rating across all reviews. The query uses a subquery to calculate the average rating from the 'review' table, and filters the results based on this average."
train.1701,epinions_1,Find the titles of items that received any rating below 5.,1,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the titles of items from the 'item' table that have received a rating lower than a specified value. The placeholder in the WHERE clause represents the rating threshold.
train.1703,epinions_1,Find the names of items whose rank is higher than 3 and whose average rating is above 5.,1,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table retrieves the titles of items from the 'item' table that meet two criteria: first, they must have reviews with a rank greater than a specified value; second, the average rating of the reviews for these items must also exceed a specified threshold. The placeholders in the query represent the numeric values for the rank and average rating thresholds."
train.1704,epinions_1,Find the name of the item with the lowest average rating.,1,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of item titles from the 'item' table, ordered by the average rating from the 'review' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of item titles to retrieve."
train.1705,epinions_1,List the titles of all items in alphabetic order .,1,SELECT title FROM item ORDER BY title,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM item ORDER BY title,"This virtual table lists the titles of items from the 'item' table, sorted in alphabetical order. There are no filters applied, so all item titles will be included in the result set."
train.1706,epinions_1,Find the name of the user who gives the most reviews.,1,SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of users from the 'useracct' table who have written reviews, ordered by the number of reviews they have submitted. The placeholder in the LIMIT clause allows for specifying the maximum number of users to display."
train.1707,epinions_1,Find the name and id of the item with the highest average rating.,1,"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rating of reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve."
train.1708,epinions_1,Find the name and id of the good with the highest average rank.,1,"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rank of their reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve."
train.1709,epinions_1,"For each user, return the name and the average rating of reviews given by them.",1,"SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id","This virtual table provides the names of users along with the average rating they have given for items. The data is sourced from the 'useracct' table, which contains user information, and the 'review' table, which holds the ratings given by users. The average rating is calculated by grouping the results based on the user identifier, ensuring that each user's average rating is displayed alongside their name."
train.1712,epinions_1,Find the name of the source user with the highest average trust score.,1,SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of users from the 'useracct' table who have trusted other users, ordered by the average trust level they have given. The placeholder in the LIMIT clause represents the maximum number of users to display."
train.1713,epinions_1,Find each target user's name and average trust score.,1,"SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id","This virtual table provides the names of users along with the average trust level they receive from other users. The data is sourced from the 'useracct' and 'trust' tables, where the trust levels are aggregated based on the user being trusted."
train.1714,epinions_1,Find the name of the target user with the lowest trust score.,1,SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of users from the 'useracct' table who are trusted by other users, based on the trust relationships defined in the 'trust' table. The results are ordered by the trust level, and the placeholder in the LIMIT clause specifies the maximum number of names to return."
train.1715,epinions_1,Find the names of the items that did not receive any review.,1,SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review),"This virtual table lists the titles of items from the 'item' table that have not received any reviews. The subquery checks for item identifiers that exist in the 'review' table, and the placeholder in the WHERE clause ensures that only items without reviews are selected."
train.1717,epinions_1,Find the number of users who did not write any review.,1,SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review),"This virtual table provides the count of user accounts from the 'useracct' table that have not written any reviews. The subquery identifies users who have submitted reviews, and the main query counts those users who are not included in that list."
train.1719,riding_club,How many players are there?,1,SELECT count(*) FROM player,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM player,"This virtual table provides the total number of players recorded in the 'player' table. The query uses the count function to aggregate the data, resulting in a single numeric value representing the total player count."
train.1720,riding_club,List the names of players in ascending order of votes.,1,SELECT Player_name FROM player ORDER BY Votes ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Player_name FROM player ORDER BY Votes ASC,"This virtual table lists the names of players from the 'player' table, ordered by the number of votes they have received in ascending order. This allows for easy identification of players with the least votes at the top of the list."
train.1721,riding_club,What are the gender and occupation of players?,1,"SELECT Gender ,  Occupation FROM player",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Gender ,  Occupation FROM player",This virtual table describes the gender and occupation of players from the 'player' table. The data can be used to analyze the distribution of genders and occupations among players.
train.1722,riding_club,"List the name and residence for players whose occupation is not ""Researcher"".",1,"SELECT Player_name ,  residence FROM player WHERE Occupation != 'Researcher'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Player_name ,  residence FROM player WHERE Occupation != [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and residences of players from the 'player' table who do not have a specific occupation. The placeholder in the WHERE clause represents the occupation to be excluded.
train.1723,riding_club,"Show the names of sponsors of players whose residence is either ""Brandon"" or ""Birtle"".",1,SELECT Sponsor_name FROM player WHERE Residence  =  'Brandon' OR Residence  =  'Birtle',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Sponsor_name FROM player WHERE Residence  =  [PLACEHOLDER-TYPE:STRING] OR Residence  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of sponsors associated with players from the 'player' table who reside in specific locations. The placeholders in the WHERE clause represent the residential addresses of the players.
train.1724,riding_club,What is the name of the player with the largest number of votes?,1,SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Player_name FROM player ORDER BY Votes DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of player names from the 'player' table, ordered by the number of votes they received in descending order. The placeholder in the LIMIT clause allows the user to specify how many top players they want to retrieve based on their votes."
train.1725,riding_club,Show different occupations along with the number of players in each occupation.,1,"SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation","This virtual table summarizes the number of players in each occupation from the 'player' table. The query groups the results by the 'Occupation' column, allowing users to see how many players belong to each specific occupation."
train.1727,riding_club,Show the residences that have at least two players.,1,SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of residential locations of players from the 'player' table, grouped by residence. The placeholder in the HAVING clause represents the minimum number of players that must reside in each location for it to be included in the results."
train.1728,riding_club,Show the names of players and names of their coaches.,1,"SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",This virtual table describes the names of players along with their associated coaches from the 'player' and 'coach' tables. The query utilizes a join on the 'player_coach' table to link players with their respective coaches based on their unique identifiers.
train.1729,riding_club,Show the names of players coached by the rank 1 coach.,1,SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.
train.1730,riding_club,Show the names and genders of players with a coach starting after 2011.,1,"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and genders of players who have been coached by a coach starting from a specific year. The placeholder in the WHERE clause represents the starting year of the coaching relationship.
train.1731,riding_club,Show the names of players and names of their coaches in descending order of the votes of players.,1,"SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC","This virtual table provides a list of player names along with their associated coach names from the 'player', 'coach', and 'player_coach' tables. The results are ordered by the number of votes received by each player, allowing for easy identification of the most popular players."
train.1732,riding_club,List the names of players that do not have coaches.,1,SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach),"This virtual table lists the names of players from the 'player' table who are not currently associated with any coach. The subquery identifies players who have a coaching relationship, and the main query filters out those players from the results."
train.1733,riding_club,"Show the residences that have both a player of gender ""M"" and a player of gender ""F"".",1,SELECT Residence FROM player WHERE gender  =  'M' INTERSECT SELECT Residence FROM player WHERE gender  =  'F',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Residence FROM player WHERE gender  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Residence FROM player WHERE gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the residential addresses of players from the 'player' table who share the same gender. The placeholders in the query represent the gender of the players being compared.
train.1736,gymnast,How many gymnasts are there?,1,SELECT count(*) FROM gymnast,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM gymnast,"This virtual table provides the total number of gymnasts recorded in the 'gymnast' table. The query counts all entries in the table, which reflects the total participation in gymnastics events."
train.1738,gymnast,List the total points of gymnasts in descending order.,1,SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC,"This virtual table provides the total points scored by gymnasts in various events, sorted in descending order. The placeholder in the SELECT clause represents the total points accumulated by each gymnast."
train.1740,gymnast,List the total points of gymnasts in descending order of floor exercise points.,1,SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC,"This virtual table provides the total points scored by gymnasts from the 'gymnast' table, ordered by their points in the floor exercise event in descending order. The query allows for easy identification of gymnasts with the highest floor exercise scores."
train.1742,gymnast,What is the average horizontal bar points for all gymnasts?,1,SELECT avg(Horizontal_Bar_Points) FROM gymnast,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Horizontal_Bar_Points) FROM gymnast,This virtual table calculates the average points scored by gymnasts in the horizontal bar event from the 'gymnast' table. The result will provide insight into the performance of gymnasts in this specific event.
train.1744,gymnast,What are the names of people in ascending alphabetical order?,1,SELECT Name FROM People ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM People ORDER BY Name ASC,"This virtual table lists the names of individuals from the 'People' table, sorted in ascending order. The query retrieves the 'Name' column and organizes the results alphabetically."
train.1746,gymnast,What are the names of gymnasts?,1,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID,This virtual table describes the names of individuals who are gymnasts by joining the 'gymnast' and 'people' tables based on their unique identifiers. The query retrieves the names of gymnasts from the 'people' table using the Gymnast_ID from the 'gymnast' table.
train.1748,gymnast,"What are the names of gymnasts whose hometown is not ""Santo Domingo""?",1,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != 'Santo Domingo',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.
train.1750,gymnast,What is the age of the tallest person?,1,SELECT Age FROM people ORDER BY Height DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Age FROM people ORDER BY Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the ages of individuals from the 'people' table, sorted in descending order by their height. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.1752,gymnast,List the names of the top 5 oldest people.,1,SELECT Name FROM People ORDER BY Age DESC LIMIT 5,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM People ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of individuals from the 'People' table, sorted by age in descending order. The placeholder in the LIMIT clause represents the maximum number of names to be returned."
train.1756,gymnast,What is the average age of all gymnasts?,1,SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID,This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.
train.1758,gymnast,What are the distinct hometowns of gymnasts with total points more than 57.5?,1,SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.
train.1760,gymnast,What are the hometowns of gymnasts and the corresponding number of gymnasts?,1,"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown","This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown."
train.1763,gymnast,Return the hometown that is most common among gymnasts.,1,SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return."
train.1766,gymnast,List the names of gymnasts in ascending order by their heights.,1,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC,"This virtual table provides a list of names of gymnasts from the 'people' table, ordered by their height in ascending order. The placeholder in the JOIN clause represents the relationship between gymnasts and people based on their unique identifiers."
train.1772,gymnast,How many distinct hometowns did these people have?,1,SELECT count(DISTINCT Hometown) FROM people,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Hometown) FROM people,This virtual table provides the count of distinct hometowns from the 'people' table. The result will indicate how many unique hometowns are represented in the dataset.
train.1774,gymnast,Show the ages of gymnasts in descending order of total points.,1,SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC,"This virtual table provides the ages of gymnasts by joining the 'gymnast' and 'people' tables based on their unique identifiers. The results are ordered by the total points scored by the gymnasts in descending order, allowing users to see the ages of the highest-scoring gymnasts first."
train.1776,small_bank_1,Find the total savings balance of all accounts except the account with name ‘Brown’.,1,SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results."
train.1778,small_bank_1,How many accounts are there in total?,1,SELECT count(*) FROM accounts,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM accounts,"This virtual table provides the total number of customers in the 'ACCOUNTS' table. The query counts all entries in the table, which represents the customer records."
train.1780,small_bank_1,What is the total checking balance in all accounts?,1,SELECT sum(balance) FROM checking,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(balance) FROM checking,This virtual table calculates the total balance from the 'CHECKING' table for all customers. The placeholder in the SELECT clause represents the sum of the checking account balances.
train.1782,small_bank_1,Find the average checking balance.,1,SELECT avg(balance) FROM checking,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(balance) FROM checking,This virtual table calculates the average balance of all checking accounts from the 'CHECKING' table. The result will provide insight into the overall financial status of customers' checking accounts.
train.1784,small_bank_1,How many accounts have a savings balance above the average savings balance?,1,SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings),"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition."
train.1786,small_bank_1,Find the name and id of accounts whose checking balance is below the maximum checking balance.,1,"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",This virtual table provides a list of customer IDs and names from the 'ACCOUNTS' table for customers who have a checking account balance that is less than the maximum balance found in the 'CHECKING' table. The placeholders in the query allow for dynamic filtering based on the balance criteria.
train.1788,small_bank_1,What is the checking balance of the account whose owner’s name contains the substring ‘ee’?,1,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the current balance of checking accounts for customers from the 'ACCOUNTS' table whose names match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the customer's name.
train.1792,small_bank_1,"Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings),This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.
train.1794,small_bank_1,Find the checking balance of the accounts whose savings balance is higher than the average savings balance.,1,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings)),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings)),This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.
train.1796,small_bank_1,List all customers’ names in the alphabetical order.,1,SELECT name FROM accounts ORDER BY name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM accounts ORDER BY name,"This virtual table describes the names of customers from the 'ACCOUNTS' table, sorted in alphabetical order. The query retrieves the 'name' column and organizes the results based on the customer's name."
train.1798,small_bank_1,Find the name of account that has the lowest total checking and saving balance.,1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values."
train.1800,small_bank_1,Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.,1,"SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",This virtual table provides the names of customers along with the total balance from both their checking and savings accounts. The placeholder in the WHERE clause indicates that only customers with a savings account balance above the average balance will be included.
train.1802,small_bank_1,Find the name and checking balance of the account with the lowest savings balance.,1,"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of customers along with their checking account balances from the 'ACCOUNTS' and 'CHECKING' tables, while also ensuring that the customers have a corresponding entry in the 'SAVINGS' table. The results are ordered by the savings account balance, and the number of results returned can be limited using a placeholder for numeric values."
train.1804,small_bank_1,Find the number of checking accounts for each account name.,1,"SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name","This virtual table provides a count of checking accounts grouped by customer names from the 'ACCOUNTS' table. The placeholder in the SELECT clause represents the count of accounts, while the names of the customers are displayed alongside the count."
train.1806,small_bank_1,Find the total saving balance for each account name.,1,"SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name","This virtual table summarizes the total savings balance for each customer from the 'ACCOUNTS' and 'SAVINGS' tables. The placeholder in the SELECT clause represents the customer's name, while the sum of the balance is calculated for each customer."
train.1808,small_bank_1,Find the name of accounts whose checking balance is below the average checking balance.,1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking),This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.
train.1814,small_bank_1,Find the name and checking balance of the account with the lowest saving balance.,1,"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned."
train.1816,small_bank_1,"Find the name, checking balance and saving balance of all accounts in the bank.",1,"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",This virtual table provides the balances of both checking and savings accounts along with the customer's full name from the 'ACCOUNTS' table. The placeholders represent the customer identifiers used to link the accounts.
train.1818,small_bank_1,"Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",1,"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC","This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order."
train.1820,small_bank_1,Find the name of accounts whose checking balance is higher than corresponding saving balance.,1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance,"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly."
train.1822,small_bank_1,Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.,1,"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance","This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers."
train.1824,small_bank_1,Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.,1,"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of customers along with their savings account balances from the 'ACCOUNTS' and 'SAVINGS' tables. The results are ordered by the balance in descending order, and the placeholder allows for limiting the number of results returned."
train.1826,browser_web,How many main stream browsers whose market share is at least 5 exist?,1,SELECT count(*) FROM browser WHERE market_share  >=  5,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM browser WHERE market_share  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of browsers from the 'browser' table that have a market share equal to or greater than a specified percentage. The placeholder in the WHERE clause represents the minimum market share percentage.
train.1827,browser_web,List the name of browsers in descending order by market share.,1,SELECT name FROM browser ORDER BY market_share DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM browser ORDER BY market_share DESC,"The virtual table describes the names of browsers from the 'browser' table, ordered by their market share in descending order. This allows users to see which browsers have the highest market share at a glance."
train.1828,browser_web,"List the ids, names and market shares of all browsers.",1,"SELECT id ,  name ,  market_share FROM browser",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT id ,  name ,  market_share FROM browser","This virtual table describes the unique identifiers, names, and market shares of browsers from the 'browser' table. The placeholders represent the specific values that can be filtered or modified as needed."
train.1829,browser_web,"What is the maximum, minimum and average market share of the listed browsers?",1,"SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser","This virtual table provides statistical insights into the market share of different browsers from the 'browser' table. The placeholders in the SELECT clause represent the maximum, minimum, and average market share values."
train.1830,browser_web,What is the id and market share of the browser Safari?,1,"SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT id ,  market_share FROM browser WHERE name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the unique identifier and market share percentage of browsers from the 'browser' table that match a specific browser name. The placeholder in the WHERE clause represents the name of the browser being queried.
train.1832,browser_web,What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?,1,SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.compatible_since_year  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of browsers that are compatible with a specific web client accelerator, filtered by the name of the accelerator and the year they became compatible. The placeholders in the WHERE clause represent the accelerator's name and the year of compatibility."
train.1833,browser_web,What are the ids and names of the web accelerators that are compatible with two or more browsers?,1,"SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of web client accelerators along with their unique identifiers. It filters the results to include only those accelerators that are compatible with a certain number of browsers, as specified by the placeholder. The placeholder in the HAVING clause represents the minimum count of compatible browsers required for the accelerators to be included in the results."
train.1834,browser_web,What is the id and name of the browser that is compatible with the most web accelerators?,1,"SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of browser identifiers and names that are compatible with web client accelerators. The results are grouped by browser ID and ordered by the number of accelerators each browser is compatible with, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of browsers to return."
train.1835,browser_web,When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?,1,SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the years when specific browsers became compatible with a particular web client accelerator. The placeholders in the WHERE clause represent the names of the web client accelerator and the browser.
train.1836,browser_web,How many different kinds of clients are supported by the web clients accelerators?,1,SELECT count(DISTINCT client) FROM web_client_accelerator,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT client) FROM web_client_accelerator,This virtual table provides the count of distinct client types associated with web client accelerators from the 'Web_client_accelerator' table. The query uses a placeholder to represent the count of unique clients.
train.1837,browser_web,How many accelerators are not compatible with the browsers listed ?,1,SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );,This virtual table provides a count of web client accelerators from the 'Web_client_accelerator' table that do not have any associated compatible browsers in the 'accelerator_compatible_browser' table. The query uses a subquery to filter out those accelerators that are linked to any browser.
train.1838,browser_web,What distinct accelerator names are compatible with the browswers that have market share higher than 15?,1,SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists the distinct names of web client accelerators that are compatible with browsers having a market share greater than a specified percentage. The placeholders in the WHERE clause represent the market share threshold.
train.1839,browser_web,List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.,1,SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of browsers that are compatible with a specific web client accelerator. The query uses an INTERSECT operation to find common browsers that are compatible with two instances of the same web client accelerator, identified by their names. The placeholders in the WHERE clause represent the names of the web client accelerators being compared."
train.1840,browser_web,Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.,1,"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and operating systems of web client accelerators from the 'Web_client_accelerator' table that are not compatible with a specific browser. The placeholder in the WHERE clause represents the name of the browser being checked for compatibility.
train.1841,browser_web,"Which accelerator name contains substring ""Opera""?",1,SELECT name FROM web_client_accelerator WHERE name LIKE '%Opera%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM web_client_accelerator WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of web client accelerators from the 'Web_client_accelerator' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the names of the web client accelerators.
train.1842,browser_web,Find the number of web accelerators used for each Operating system.,1,"SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system",This virtual table summarizes the number of web client accelerators grouped by their operating systems. The placeholder in the SELECT statement allows for counting the total number of accelerators for each unique operating system.
train.1844,wrestler,How many wrestlers are there?,1,SELECT count(*) FROM wrestler,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM wrestler,"This virtual table provides a count of all wrestlers present in the 'wrestler' table. The query uses the count function to aggregate the total number of entries, which represents the total number of unique wrestlers."
train.1846,wrestler,List the names of wrestlers in descending order of days held.,1,SELECT Name FROM wrestler ORDER BY Days_held DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM wrestler ORDER BY Days_held DESC,"This virtual table lists the names of wrestlers from the 'wrestler' table, ordered by the total number of days they held their title. The ordering is done in descending order, meaning the wrestler with the longest title reign appears first."
train.1848,wrestler,What is the name of the wrestler with the fewest days held?,1,SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of wrestlers from the 'wrestler' table, ordered by the total number of days they held their title in ascending order. The placeholder in the LIMIT clause represents the maximum number of wrestlers to be displayed."
train.1850,wrestler,"What are the distinct reigns of wrestlers whose location is not ""Tokyo,Japan"" ?",1,"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != 'Tokyo , Japan'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out."
train.1854,wrestler,"What are the elimination moves of wrestlers whose team is ""Team Orton""?",1,SELECT Elimination_Move FROM Elimination WHERE Team  =  'Team Orton',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.
train.1856,wrestler,What are the names of wrestlers and the elimination moves?,1,"SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID","This virtual table provides the names of wrestlers along with the moves used to eliminate them during matches. The data is sourced from the 'wrestler' and 'elimination' tables, where the wrestler's unique identifier is used to join the two tables."
train.1858,wrestler,List the names of wrestlers and the teams in elimination in descending order of days held.,1,"SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC","This virtual table provides the names of wrestlers along with their corresponding team identifiers from the 'elimination' and 'wrestler' tables. The results are ordered by the total number of days each wrestler held their title, allowing for a ranking based on their title reigns."
train.1862,wrestler,Show times of elimination of wrestlers with days held more than 50.,1,SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.
train.1864,wrestler,Show different teams in eliminations and the number of eliminations from each team.,1,"SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team","This virtual table summarizes the number of eliminations by each team from the 'Elimination' table. The placeholder in the SELECT statement represents the team identifier, and the COUNT function aggregates the total eliminations for each team."
train.1868,wrestler,Show the reign and days held of wrestlers.,1,"SELECT Reign ,  Days_held FROM wrestler",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Reign ,  Days_held FROM wrestler",This virtual table provides information about the title reigns and the total number of days each wrestler has held their title from the 'wrestler' table. The placeholders represent the specific details of the wrestlers' reigns.
train.1870,wrestler,What are the names of wrestlers days held less than 100?,1,SELECT Name FROM wrestler WHERE Days_held  <  100,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.
train.1874,wrestler,List the locations that are shared by more than two wrestlers.,1,SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location."
train.1876,wrestler,List the names of wrestlers that have not been eliminated.,1,SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination),"This virtual table lists the names of wrestlers from the 'wrestler' table who have not been eliminated in any elimination events. The subquery identifies the Wrestler_IDs of those who have been eliminated, and the main query filters out these IDs to return only the names of wrestlers who remain in the competition."
train.1880,wrestler,What is the number of distinct teams that suffer elimination?,1,SELECT COUNT (DISTINCT team) FROM elimination,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT (DISTINCT team) FROM elimination,This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.
train.1884,school_finance,How many schools are there?,1,SELECT count(*) FROM school,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM school,"This virtual table provides the total number of schools recorded in the 'School' table. The query counts all entries in the table, which helps in understanding the scale of the school database."
train.1886,school_finance,Show all school names in alphabetical order.,1,SELECT school_name FROM school ORDER BY school_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT school_name FROM school ORDER BY school_name,"This virtual table lists the names of schools from the 'School' table, ordered alphabetically by the school name."
train.1888,school_finance,What are the total and average enrollment of all schools?,1,"SELECT sum(enrollment) ,  avg(enrollment) FROM school",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT sum(enrollment) ,  avg(enrollment) FROM school",This virtual table summarizes the total and average enrollment figures from the 'School' table. The placeholders in the SELECT statement represent the aggregated values of student enrollment across all schools.
train.1889,school_finance,What are the mascots for schools with enrollments above the average?,1,SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school),"This virtual table provides the mascots of schools from the 'School' table that have an enrollment greater than the average enrollment across all schools. The subquery calculates the average enrollment, and the main query filters schools based on this average."
train.1890,school_finance,List the name of the school with the smallest enrollment.,1,SELECT school_name FROM school ORDER BY enrollment LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT school_name FROM school ORDER BY enrollment LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of school names from the 'School' table, ordered by the total number of students enrolled. The placeholder in the LIMIT clause indicates the maximum number of school names to return."
train.1891,school_finance,"Show the average, maximum, minimum enrollment of all schools.",1,"SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school","This virtual table provides the average, maximum, and minimum enrollment figures from the 'School' table. The placeholders represent the calculated values for enrollment statistics across all schools."
train.1892,school_finance,Show each county along with the number of schools and total enrollment in each county.,1,"SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",This virtual table summarizes the number of schools and the total enrollment of students grouped by county from the 'School' table. The placeholders represent the county's name and the total enrollment count.
train.1893,school_finance,"How many donors have endowment for school named ""Glenn""?",1,SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct donator names from the 'endowment' table for a specific school. The placeholder in the WHERE clause represents the name of the school being queried.
train.1894,school_finance,List each donator name and the amount of endowment in descending order of the amount of endowment.,1,"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC","This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first."
train.1895,school_finance,List the names of the schools without any endowment.,1,SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment),"This virtual table lists the names of schools from the 'School' table that do not have any associated endowment records. The query uses a subquery to filter out schools that have received donations, ensuring that only schools without endowments are included in the results."
train.1897,school_finance,"Show the names of donors who donated to both school ""Glenn"" and ""Triton.""",1,SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the names of donors who have contributed to two different schools, specified by their names. The placeholders in the WHERE clause represent the names of the schools being queried."
train.1898,school_finance,Show the names of all the donors except those whose donation amount less than 9.,1,SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of donors from the 'endowment' table who have donated an amount greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum donation amount.
train.1899,school_finance,List the amount and donor name for the largest amount of donation.,1,"SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of donations made to schools, displaying the amount donated and the name of the donor. The results are ordered by the donation amount in descending order, with a limit set by a placeholder for the number of records to return."
train.1900,school_finance,How many budgets are above 3000 in year 2001 or before?,1,SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM budget WHERE budgeted  >  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of schools from the 'budget' table that have a budgeted amount greater than a specified value and for fiscal years up to a certain year. The placeholders in the WHERE clause represent the budgeted amount and the fiscal year limit.
train.1902,school_finance,"Show each school name, its budgeted amount, and invested amount in year 2002 or after.",1,"SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a view of school names along with their budgeted and invested amounts from the 'budget' table, filtered by fiscal years that are greater than or equal to a specified year. The placeholders in the WHERE clause represent the fiscal year to filter the results."
train.1903,school_finance,Show all donor names.,1,SELECT DISTINCT donator_name FROM endowment,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT donator_name FROM endowment,"This virtual table provides a list of unique donator names from the 'endowment' table. The query uses the DISTINCT keyword to ensure that each donator's name appears only once in the result set, regardless of how many donations they may have made."
train.1904,school_finance,How many budget record has a budget amount smaller than the invested amount?,1,SELECT count(*) FROM budget WHERE budgeted  <  invested,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM budget WHERE budgeted  <  invested,This virtual table provides a count of schools from the 'budget' table where the budgeted amount is less than the invested amount. The query uses a condition to filter records based on the comparison of the 'budgeted' and 'invested' columns.
train.1905,school_finance,"What is the total budget amount for school ""Glenn"" in all years?",1,SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total budgeted amount from the 'budget' table for a specific school. The placeholder in the WHERE clause represents the name of the school being queried.
train.1907,school_finance,Find the names of schools that have more than one donator with donation amount above 8.5.,1,SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed."
train.1909,school_finance,"List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",1,"SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  <  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted","This virtual table provides a list of school names, their mascots, and football class designations from the 'School' table, filtered by budget conditions. The placeholders in the WHERE clause represent the budgeted amount and the fiscal year, allowing users to specify their criteria for filtering the results."
train.1910,protein_institute,How many buildings are there?,1,SELECT count(*) FROM building,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM building,This virtual table provides a count of all buildings recorded in the 'building' table. It serves to give an overview of the total number of buildings without specifying any particular attributes or conditions.
train.1911,protein_institute,"Show the name, street address, and number of floors for all buildings ordered by the number of floors.",1,"SELECT name ,  street_address ,  floors FROM building ORDER BY floors",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  street_address ,  floors FROM building ORDER BY floors","This virtual table provides a list of building names, their street addresses, and the total number of floors from the 'building' table, sorted in ascending order by the number of floors each building has."
train.1912,protein_institute,What is the name of the tallest building?,1,SELECT name FROM building ORDER BY height_feet DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM building ORDER BY height_feet DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table lists the names of buildings from the 'building' table, ordered by their height in feet in descending order. The placeholder in the LIMIT clause represents the maximum number of building names to return."
train.1913,protein_institute,"What are the average, maximum, and minimum number of floors for all buildings?",1,"SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building","This virtual table provides the average, maximum, and minimum number of floors from the 'building' table. The placeholders in the SELECT statement allow for dynamic calculations based on the data present in the table."
train.1914,protein_institute,Show the number of buildings with a height above the average or a number of floors above the average.,1,SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building),"This virtual table provides a count of buildings from the 'building' table that are either taller than the average height of all buildings or have more floors than the average number of floors. The query uses subqueries to calculate the average height and average number of floors, and applies these averages as conditions in the WHERE clause."
train.1915,protein_institute,List the names of buildings with at least 200 feet of height and with at least 20 floors.,1,SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM building WHERE height_feet  >=  [PLACEHOLDER-TYPE:NUMBER] AND floors  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of buildings from the 'building' table that meet specific height and floor criteria. The placeholders in the WHERE clause represent the minimum height in feet and the minimum number of floors required for the buildings.
train.1919,protein_institute,Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.,1,SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT TYPE FROM institution WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] AND enrollment  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides information about institutions that were founded after a specific year and have a minimum number of enrolled students. The placeholders in the WHERE clause represent the year of founding and the enrollment count, allowing users to filter the results based on their criteria."
train.1920,protein_institute,Show the name of buildings that do not have any institution.,1,SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution),"This virtual table lists the names of buildings from the 'building' table that are not associated with any institution. The query uses a subquery to filter out buildings that have a corresponding entry in the 'institution' table, ensuring that only those buildings without any linked institutions are displayed."
train.1921,protein_institute,Show the names of buildings except for those having an institution founded in 2003.,1,SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of buildings from the 'building' table that are not associated with any institution founded in a specific year. The placeholder in the query represents the year of establishment for filtering the institutions.
train.1923,protein_institute,Show the names and heights of buildings with at least two institutions founded after 1880.,1,"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.building_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the names and heights of buildings from the 'building' table that are associated with institutions founded after a specific year. The query groups the results by building ID and filters to include only those buildings linked to institutions with a count of at least a specified number of entries.
train.1926,protein_institute,"How many proteins are associated with an institution founded after 1880 or an institution with type ""Private""?",1,SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  [PLACEHOLDER-TYPE:NUMBER] OR T1.type  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of institutions that were founded after a specific year or belong to a certain type. It combines data from the 'Institution' and 'protein' tables based on their relationship through the institution identifier. The placeholders in the WHERE clause allow for filtering based on the founding year and institution type.
train.1927,protein_institute,Show the protein name and the institution name.,1,"SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",This virtual table describes the relationship between institutions and their associated proteins. It retrieves the scientific names of proteins along with the names of the institutions they are linked to. The join operation connects the 'Institution' table and the 'protein' table based on their respective identifiers.
train.1928,protein_institute,How many proteins are associated with an institution in a building with at least 20 floors?,1,SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the count of institutions that are associated with proteins, specifically filtering for those institutions located in buildings that have a certain number of floors or more. The placeholder in the WHERE clause represents the minimum number of floors required for the buildings."
train.1929,protein_institute,How many institutions do not have an associated protein in our record?,1,SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein),This virtual table provides a count of institutions from the 'Institution' table that do not have any associated protein records. The placeholder in the query allows for filtering based on the institution's unique identifier.
train.1932,cinema,How many cinema do we have?,1,SELECT count(*) FROM cinema,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM cinema,"This virtual table provides the total number of cinemas recorded in the 'cinema' table. The query counts all entries in the cinema table, which helps in understanding the scale of cinema operations."
train.1934,cinema,"Show name, opening year, and capacity for each cinema.",1,"SELECT name ,  openning_year ,  capacity FROM cinema",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  openning_year ,  capacity FROM cinema","This virtual table provides information about cinemas, including their names, the year they opened, and their seating capacities. The data is sourced from the 'cinema' table, which contains details about each cinema's unique identifier, name, opening year, capacity, and location."
train.1938,cinema,Show all the cinema names and opening years in descending order of opening year.,1,"SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC","This virtual table provides a list of cinema names along with their opening years, sorted in descending order by the year they were opened. The placeholder in the SELECT statement allows for the retrieval of cinema names and their respective opening years."
train.1940,cinema,"Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",1,"SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the average, minimum, and maximum seating capacity of cinemas that were opened in a specific year or later. The placeholder in the WHERE clause represents the year from which to consider the cinemas."
train.1943,cinema,Show all the locations with at least two cinemas with capacity above 300.,1,SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and have at least a certain number of cinemas in that location. The placeholders in the query allow users to specify the minimum capacity and the minimum count of cinemas required.
train.1945,cinema,Show the title and director for all films.,1,"SELECT title ,  directed_by FROM film",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT title ,  directed_by FROM film","This virtual table describes the titles and directors of films from the 'film' table. The query retrieves the title and the name of the director for each film, providing a concise overview of the films available."
train.1947,cinema,Show all directors.,1,SELECT DISTINCT directed_by FROM film,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT directed_by FROM film,"This virtual table provides a list of unique directors from the 'film' table. The query uses the DISTINCT keyword to ensure that each director's name appears only once, regardless of how many films they have directed."
train.1949,cinema,List all directors along with the number of films directed by each director.,1,"SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",This virtual table summarizes the number of films directed by each director from the 'film' table. The placeholder in the SELECT statement allows for counting the films grouped by the director's name.
train.1950,cinema,What is total number of show times per dat for each cinema?,1,"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id","This virtual table summarizes the total number of showtimes per day for films at each cinema. It combines data from the 'schedule' table, which contains information about film showings, with the 'cinema' table, which provides details about each cinema. The placeholder in the SELECT statement represents the name of the cinema, while the aggregation function calculates the total showtimes for each cinema based on the cinema's unique identifier."
train.1951,cinema,What are the title and maximum price of each film?,1,"SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id","This virtual table provides the titles of films along with the maximum ticket price for each film from the 'schedule' and 'film' tables. The placeholder in the SELECT statement represents the film titles, while the maximum price is calculated for each film based on the schedule."
train.1953,cinema,"Show cinema name, film title, date, and price for each record in schedule.",1,"SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id","This virtual table provides a view of the cinema name, film title, showing date, and ticket price for films scheduled in various cinemas. The placeholders in the query represent the identifiers for the films and cinemas involved in the schedule."
train.1954,cinema,What are the title and director of the films without any schedule?,1,"SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",This virtual table describes the titles and directors of films from the 'film' table that are not currently scheduled for showing in any cinema. The placeholder in the subquery represents the film identifiers that are linked to the schedule.
train.1956,cinema,Find the locations that have more than one movie theater with capacity above 300.,1,SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and are showing more than a certain number of films. The placeholders in the query allow users to specify the minimum capacity and the minimum count of films being shown.
train.1958,cinema,How many films have the word 'Dummy' in their titles?,1,SELECT count(*) FROM film WHERE title LIKE '%Dummy%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM film WHERE title LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of films from the 'film' table that match a specific title pattern. The placeholder in the WHERE clause allows for flexible searching of film titles based on user input.
train.1965,products_for_hire,What is the product description of the product booked with an amount of 102.76?,1,SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount."
train.1966,products_for_hire,What are the start date and end date of the booking that has booked the product named 'Book collection A'?,1,"SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the start and end dates of bookings for a specific product from the 'Products_for_Hire' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.1967,products_for_hire,What are the names of products whose availability equals to 1?,1,SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of products available for hire from the 'Products_for_Hire' table, based on their availability status recorded in the 'View_Product_Availability' table. The placeholder in the WHERE clause represents the availability indicator (yes/no)."
train.1968,products_for_hire,How many different product types are there?,1,SELECT count(DISTINCT product_type_code) FROM products_for_hire,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT product_type_code) FROM products_for_hire,The virtual table summarizes the count of distinct product types available for hire from the 'Products_for_Hire' table. The placeholder in the SELECT statement allows for potential modifications to filter or group the results based on specific criteria.
train.1970,products_for_hire,What is the average amount due for all the payments?,1,SELECT avg(amount_due) FROM payments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(amount_due) FROM payments,This virtual table calculates the average amount due from the 'Payments' table. The placeholder in the SELECT statement represents the average of the total amount due for all payment transactions.
train.1971,products_for_hire,"What are the maximum, minimum, and average booked count for the products booked?",1,"SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked","This virtual table provides statistical insights into the number of units booked for products from the 'Products_Booked' table. It calculates the maximum, minimum, and average count of booked units, allowing users to understand booking trends and product demand."
train.1972,products_for_hire,What are all the distinct payment types?,1,SELECT DISTINCT payment_type_code FROM payments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT payment_type_code FROM payments,This virtual table provides a list of unique payment types used in the 'Payments' table. The placeholder in the SELECT statement allows for the retrieval of distinct payment type codes without specifying any particular value.
train.1973,products_for_hire,What are the daily hire costs for the products with substring 'Book' in its name?,1,SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table provides the daily hire cost of products available for hire from the 'Products_for_Hire' table, filtered by a specific product name. The placeholder in the WHERE clause allows users to specify the product name they are interested in."
train.1976,products_for_hire,What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check',1,SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT payment_date FROM payments WHERE amount_paid  >  [PLACEHOLDER-TYPE:NUMBER] OR payment_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the payment dates from the 'Payments' table where the amount paid exceeds a specified threshold or the payment type matches a specific code. The placeholders in the WHERE clause represent the numeric amount and the string payment type code.
train.1977,products_for_hire,What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?,1,"SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  [PLACEHOLDER-TYPE:STRING] AND daily_hire_cost  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and descriptions of products available for hire from the 'Products_for_Hire' table that belong to a specific product type and have a daily hire cost below a specified amount. The placeholders in the WHERE clause represent the product type code and the maximum daily hire cost.
train.1978,phone_market,How many phones are there?,1,SELECT count(*) FROM phone,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM phone,"This virtual table provides the total count of phone models available in the 'phone' table. It does not filter or group the results, thus giving a straightforward count of all entries."
train.1979,phone_market,List the names of phones in ascending order of price.,1,SELECT Name FROM phone ORDER BY Price ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM phone ORDER BY Price ASC,"This virtual table lists the names of phone models from the 'phone' table, sorted in ascending order by their retail price. This allows users to see the available phone models starting from the least expensive to the most expensive."
train.1980,phone_market,What are the memories and carriers of phones?,1,"SELECT Memory_in_G ,  Carrier FROM phone",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Memory_in_G ,  Carrier FROM phone",This virtual table provides information about the memory capacity and mobile carrier of various phone models from the 'phone' table. The placeholders can be used to filter or modify the query as needed.
train.1981,phone_market,List the distinct carriers of phones with memories bigger than 32.,1,SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct mobile carriers from the 'phone' table for phone models that have more memory than a specified amount in gigabytes. The placeholder in the WHERE clause represents the minimum memory requirement.
train.1982,phone_market,"Show the names of phones with carrier either ""Sprint"" or ""TMobile"".",1,SELECT Name FROM phone WHERE Carrier  =  'Sprint' OR Carrier  =  'TMobile',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM phone WHERE Carrier  =  [PLACEHOLDER-TYPE:STRING] OR Carrier  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of phone models from the 'phone' table that are associated with specific mobile carriers. The placeholders in the WHERE clause represent the names of the carriers being queried.
train.1983,phone_market,What is the carrier of the most expensive phone?,1,SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Carrier FROM phone ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of mobile carriers from the 'phone' table, ordered by the retail price of the phones in descending order. The placeholder in the LIMIT clause indicates the maximum number of carriers to be returned."
train.1984,phone_market,Show different carriers of phones together with the number of phones with each carrier.,1,"SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier","This virtual table summarizes the number of phone models available from each mobile carrier in the 'phone' table. The placeholder in the SELECT clause represents the carrier's name, and the COUNT function is used to aggregate the total number of models per carrier."
train.1986,phone_market,Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.,1,SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Carrier FROM phone WHERE Memory_in_G  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the mobile carriers that offer phone models with memory capacities both below and above specified thresholds. The placeholders represent the memory limits in gigabytes.
train.1987,phone_market,Show the names of phones and the districts of markets they are on.,1,"SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID","This virtual table provides a list of phone models along with their associated market districts. It combines data from the 'phone', 'market', and 'phone_market' tables, linking phone models to their respective markets through the phone_market table. The placeholders in the query allow for dynamic selection of phone and market information."
train.1988,phone_market,"Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",1,"SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking","This virtual table provides a list of phone models along with their associated market districts. The data is sourced from the 'phone', 'market', and 'phone_market' tables, where the phone models are linked to their respective markets through the 'phone_market' table. The results are ordered by the market's ranking, allowing users to see which districts have the highest-performing markets for each phone model."
train.1989,phone_market,Show the names of phones that are on market with number of shops greater than 50.,1,SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of phone models available in markets that have a specified number of shops. The placeholders in the WHERE clause represent the minimum number of shops required for the market.
train.1990,phone_market,"For each phone, show its names and total number of stocks.",1,"SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name","This virtual table summarizes the total stock of each phone model available in various markets. It combines data from the 'phone_market' table, which tracks the stock levels of phones in different markets, and the 'phone' table, which contains details about each phone model. The result will display the phone model names along with the total number of units available across all markets."
train.1991,phone_market,"Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",1,SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY sum(T1.Num_of_stock) DESC,This virtual table lists the names of phone models that have a total stock greater than a specified number across all markets. The placeholder in the HAVING clause represents the minimum stock quantity required for the phone models to be included in the results.
train.1992,phone_market,List the names of phones that are not on any market.,1,SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market),"This virtual table lists the names of phone models from the 'phone' table that are not currently available in any market. The subquery checks for phone IDs that exist in the 'phone_market' table, and the placeholder represents the condition for filtering out those phone models."
train.1994,gas_company,What is the total number of companies?,1,SELECT count(*) FROM company,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM company,"This virtual table provides the total count of companies listed in the 'company' table. It does not filter or group the data, simply returning the overall number of entries present."
train.1995,gas_company,List the company name and rank for all companies in the decreasing order of their sales.,1,"SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT company ,  rank FROM company ORDER BY Sales_billion DESC","This virtual table provides a list of companies along with their ranks, sorted by total sales revenue in descending order. The placeholder in the ORDER BY clause indicates that the sorting is based on the sales figures in billions."
train.1997,gas_company,Show the company name and the main industry for all companies whose headquarters are not from USA.,1,"SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.
train.1999,gas_company,Show all company names and headquarters in the descending order of market value.,1,"SELECT company ,  headquarters FROM company ORDER BY market_value DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT company ,  headquarters FROM company ORDER BY market_value DESC","This virtual table provides a list of companies along with their headquarters, sorted by their market value in descending order. The placeholder in the ORDER BY clause represents the market value of the companies."
train.2001,gas_company,"Show minimum, maximum, and average market value for all companies.",1,"SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company","This virtual table provides the minimum, maximum, and average market values of companies from the 'company' table. The placeholders in the SELECT statement represent the calculated values for market value."
train.2003,gas_company,Show all main industry for all companies.,1,SELECT DISTINCT main_industry FROM company,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT main_industry FROM company,"This virtual table provides a list of unique primary industries from the 'company' table. The query uses the DISTINCT keyword to ensure that each industry is only listed once, regardless of how many companies operate within that industry."
train.2005,gas_company,List all headquarters and the number of companies in each headquarter.,1,"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters","This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area."
train.2007,gas_company,Show all main industry and total market value in each industry.,1,"SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",This virtual table summarizes the total market value of companies grouped by their primary industry. The placeholder in the SELECT statement represents the main industry of the companies.
train.2009,gas_company,List the main industry with highest total market value and its number of companies.,1,"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.
train.2011,gas_company,Show headquarters with at least two companies in the banking industry.,1,SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies."
train.2015,gas_company,How many gas station are opened between 2000 and 2005?,1,SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.
train.2023,gas_company,Show the company name with the number of gas station.,1,"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id","This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company."
train.2025,gas_company,Show company name and main industry without a gas station.,1,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.
train.2027,gas_company,Show the manager name for gas stations belonging to the ExxonMobil company.,1,SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.
train.2029,gas_company,Show all locations where a gas station for company with market value greater than 100 is located.,1,SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.
train.2033,gas_company,order all gas station locations by the opening year.,1,SELECT LOCATION FROM gas_station ORDER BY open_year,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM gas_station ORDER BY open_year,"This virtual table provides the locations of gas stations from the 'gas_station' table, ordered by the year they were opened. The ordering allows users to see the progression of gas station openings over time."
train.2035,gas_company,"find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",1,"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] ORDER BY sales_billion ,  profits_billion","This virtual table provides the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the industry type, and the results are ordered by total sales and profits in billions."
train.2037,gas_company,find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.,1,"SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of gas station locations along with their representative names, sorted by the total assets of the associated companies in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return."
train.2039,party_people,How many regions do we have?,1,SELECT count(*) FROM region,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM region,"This virtual table provides a count of all regions from the 'region' table. It does not filter or group the results, thus returning the total number of regions available in the database."
train.2041,party_people,Show all distinct region names ordered by their labels.,1,SELECT DISTINCT region_name FROM region ORDER BY Label,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT region_name FROM region ORDER BY Label,"This virtual table provides a distinct list of region names from the 'region' table, ordered by their associated labels. The ordering helps in categorizing the regions based on their labels for better readability."
train.2043,party_people,How many parties do we have?,1,SELECT count(DISTINCT party_name) FROM party,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT party_name) FROM party,This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.
train.2045,party_people,"Show the ministers and the time they took and left office, listed by the time they left office.",1,"SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office","This virtual table provides a list of ministers along with their respective dates of taking office and leaving office from the 'party' table, sorted by the date they left office. The query allows for an organized view of the political transitions within the parties."
train.2047,party_people,Show the minister who took office after 1961 or before 1959.,1,SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT minister FROM party WHERE took_office  >  [PLACEHOLDER-TYPE:NUMBER] OR took_office  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of ministers from the 'party' table who took office either after or before a specific date. The placeholders in the WHERE clause represent the dates for filtering the ministers' office tenure.
train.2051,party_people,Show all ministers and parties they belong to in descending order of the time they took office.,1,"SELECT minister ,  party_name FROM party ORDER BY took_office DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT minister ,  party_name FROM party ORDER BY took_office DESC","This virtual table provides a list of ministers and their associated political party names from the 'party' table, ordered by the date they took office in descending order. This allows users to see the most recent ministers first."
train.2053,party_people,Return the minister who left office at the latest time.,1,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT minister FROM party ORDER BY left_office DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of ministers from the 'party' table, ordered by the date they left office in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ministers to retrieve."
train.2055,party_people,List member names and their party names.,1,"SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id","This virtual table provides a list of member names along with their associated political party names. The data is retrieved from the 'Member' table and the 'party' table, where the member's party ID is used to join the two tables."
train.2059,party_people,What is the name of party with most number of members?,1,SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned."
train.2061,party_people,Show all party names and their region names.,1,"SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id","This virtual table describes the names of political parties along with the corresponding regions they operate in. The join between the 'party' and 'region' tables is established through the 'Region_ID', allowing for a comprehensive view of party affiliations within specific regions."
train.2063,party_people,Show names of parties that does not have any members.,1,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member),"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected."
train.2065,party_people,Show the member names which are in both the party with id 3 and the party with id 1.,1,SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of members who belong to two different political parties. The query uses the INTERSECT operator to find members that are common to both parties identified by their unique party IDs. The placeholders represent the IDs of the parties being compared.
train.2067,party_people,Show member names that are not in the Progress Party.,1,SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != 'Progress Party',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.
train.2069,party_people,How many party events do we have?,1,SELECT count(*) FROM party_events,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM party_events,"This virtual table provides a count of all party events recorded in the 'party_events' table. It does not filter or group the results, thus returning the total number of events regardless of any specific criteria."
train.2073,party_people,Show all member names who are not in charge of any event.,1,SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id,"This virtual table lists the names of members from the 'member' table who are not in charge of any party events. The query uses an EXCEPT clause to exclude members who are associated with any events, ensuring that only those members without event responsibilities are displayed."
train.2075,party_people,What are the names of parties with at least 2 events?,1,SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.
train.2077,party_people,What is the name of member in charge of greatest number of events?,1,SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve."
train.2079,party_people,find the event names that have more than 2 records.,1,SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of events organized by political parties from the 'party_events' table that have occurred more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of occurrences for the events.
train.2083,pilot_record,How many pilots are there?,1,SELECT count(*) FROM pilot,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM pilot,"This virtual table provides a count of all pilots from the 'pilot' table. It does not filter or group the results, thus returning the total number of pilots present in the database."
train.2084,pilot_record,List the names of pilots in ascending order of rank.,1,SELECT Pilot_name FROM pilot ORDER BY Rank ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Pilot_name FROM pilot ORDER BY Rank ASC,"This virtual table lists the names of pilots from the 'pilot' table, ordered by their rank in ascending order. The query retrieves the 'Pilot_name' column and sorts the results based on the 'Rank' column."
train.2087,pilot_record,"Show the names of pilots from team ""Bradley"" or ""Fordham"".",1,SELECT Pilot_name FROM pilot WHERE Team  =  'Bradley' OR Team  =  'Fordham',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.
train.2089,pilot_record,What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.,1,"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality",This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.
train.2092,pilot_record,Show the names of pilots and models of aircrafts they have flied with.,1,"SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID","This virtual table provides the names of pilots along with the specific model of the aircraft they have flown. The data is sourced from the 'pilot_record' table, which links pilots to aircraft through their respective IDs. The placeholders in the query represent the relationships between the tables, allowing for dynamic querying based on pilot and aircraft information."
train.2093,pilot_record,Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.,1,"SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank","This virtual table provides a list of pilot names along with the fleet series of the aircraft they have flown. The data is sourced from the 'pilot_record', 'aircraft', and 'pilot' tables, and is organized by the rank of the pilots."
train.2094,pilot_record,Show the fleet series of the aircrafts flied by pilots younger than 34,1,SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.
train.2097,pilot_record,List the names of pilots that do not have any record.,1,SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record),"This virtual table lists the names of pilots from the 'pilot' table who do not have any associated flight records in the 'pilot_record' table. The subquery checks for Pilot_IDs that exist in the 'pilot_record' table, and the main query filters out those Pilot_IDs to return only the names of pilots without records."
train.2098,cre_Doc_Control_Systems,What document status codes do we have?,1,SELECT document_status_code FROM Ref_Document_Status;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_status_code FROM Ref_Document_Status;,This virtual table provides a list of unique codes representing the status of documents from the 'Ref_Document_Status' table. The placeholder in the SELECT clause indicates that the user can specify which document status codes they are interested in retrieving.
train.2099,cre_Doc_Control_Systems,What is the description of document status code 'working'?,1,SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the description of a document's status from the 'Ref_Document_Status' table based on a specific status code. The placeholder in the WHERE clause represents the unique code for the document status.
train.2100,cre_Doc_Control_Systems,What document type codes do we have?,1,SELECT document_type_code FROM Ref_Document_Types;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_code FROM Ref_Document_Types;,This virtual table provides a list of unique codes representing different types of documents from the 'Ref_Document_Types' table. The placeholder in the SELECT clause indicates that the user can specify which document type codes they are interested in retrieving.
train.2101,cre_Doc_Control_Systems,What is the description of document type 'Paper'?,1,SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the document type descriptions from the 'Ref_Document_Types' table for a specific document type code. The placeholder in the WHERE clause represents the unique code for the document type.
train.2102,cre_Doc_Control_Systems,What are the shipping agent names?,1,SELECT shipping_agent_name FROM Ref_Shipping_Agents;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT shipping_agent_name FROM Ref_Shipping_Agents;,This virtual table provides the names of shipping agents from the 'Ref_Shipping_Agents' table. It allows users to retrieve the names associated with each shipping agent's unique code.
train.2103,cre_Doc_Control_Systems,What is the shipping agent code of shipping agent UPS?,1,SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'UPS';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the unique shipping agent code from the 'Ref_Shipping_Agents' table for a specific shipping agent name. The placeholder in the WHERE clause represents the name of the shipping agent being queried.
train.2104,cre_Doc_Control_Systems,What are all role codes?,1,SELECT role_code FROM ROLES;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT role_code FROM ROLES;,"This virtual table describes the unique role codes from the 'Roles' table, which represent different roles within the organization. The placeholder in the SELECT clause indicates that the user can specify which role codes they are interested in retrieving."
train.2105,cre_Doc_Control_Systems,What is the description of role code ED?,1,SELECT role_description FROM ROLES WHERE role_code = 'ED';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT role_description FROM ROLES WHERE role_code = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the role descriptions of employees from the 'Roles' table based on a specific role code. The placeholder in the WHERE clause represents the unique code for the role.
train.2106,cre_Doc_Control_Systems,How many employees do we have?,1,SELECT count(*) FROM Employees;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Employees;,"This virtual table provides a count of all employees from the 'Employees' table. It does not filter or group the results, giving a total number of employees present in the database."
train.2107,cre_Doc_Control_Systems,What is the role of the employee named Koby?,1,SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = 'Koby';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the role descriptions of employees from the 'Employees' table based on their names. The placeholder in the WHERE clause represents the specific employee's name.
train.2108,cre_Doc_Control_Systems,List all document ids and receipt dates of documents.,1,"SELECT document_id ,  receipt_date FROM Documents;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT document_id ,  receipt_date FROM Documents;",This virtual table provides the unique identifier and receipt date of documents from the 'Documents' table. The placeholders can be used to filter or modify the query as needed.
train.2109,cre_Doc_Control_Systems,"How many employees does each role have? List role description, id and number of employees.",1,"SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;","This virtual table summarizes the count of employees for each role in the organization, displaying the role description and role code. The data is aggregated by role code, allowing for an overview of how many employees hold each specific role."
train.2110,cre_Doc_Control_Systems,List roles that have more than one employee. List the role description and number of employees.,1,"SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a summary of the number of employees associated with each role in the organization. It joins the 'Roles' table with the 'Employees' table based on the role code, counts the number of employees for each role, and filters the results to show only those roles that have a count greater than a specified number."
train.2111,cre_Doc_Control_Systems,What is the document status description of the document with id 1?,1,SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the description of the status of a specific document from the 'Ref_Document_Status' table by joining it with the 'Documents' table. The placeholder in the WHERE clause represents the unique identifier of the document for which the status is being queried.
train.2112,cre_Doc_Control_Systems,How many documents have the status code done?,1,SELECT count(*) FROM Documents WHERE document_status_code = 'done';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Documents WHERE document_status_code = [PLACEHOLDER-TYPE:STRING];,This virtual table provides a count of documents from the 'Documents' table that have a specific status. The placeholder in the WHERE clause represents the document status code being queried.
train.2113,cre_Doc_Control_Systems,List the document type code for the document with the id 2.,1,SELECT document_type_code FROM Documents WHERE document_id = 2;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_code FROM Documents WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table retrieves the document type code from the 'Documents' table for a specific document identified by its unique document ID. The placeholder in the WHERE clause represents the document's ID.
train.2115,cre_Doc_Control_Systems,What is the name of the shipping agent of the document with id 2?,1,SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the names of shipping agents associated with a specific document from the 'Documents' table. The placeholder in the WHERE clause represents the unique identifier of the document.
train.2116,cre_Doc_Control_Systems,How many documents were shipped by USPS?,1,SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of documents associated with a specific shipping agent from the 'Ref_Shipping_Agents' table. The placeholder in the WHERE clause represents the name of the shipping agent being queried.
train.2117,cre_Doc_Control_Systems,Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.,1,"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];",This virtual table provides a summary of the number of documents handled by each shipping agent from the 'Ref_Shipping_Agents' table. It counts the documents associated with each shipping agent and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of shipping agents to display.
train.2118,cre_Doc_Control_Systems,What is the receipt date of the document with id 3?,1,SELECT receipt_date FROM Documents WHERE document_id = 3;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT receipt_date FROM Documents WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the receipt date of a specific document from the 'Documents' table based on its unique identifier. The placeholder in the WHERE clause represents the document's ID.
train.2119,cre_Doc_Control_Systems,What address was the document with id 4 mailed to?,1,SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the detailed address information from the 'Addresses' table for documents that have been mailed. The placeholder in the WHERE clause represents the unique identifier of the document.
train.2120,cre_Doc_Control_Systems,What is the mail date of the document with id 7?,1,SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT mailing_date FROM Documents_Mailed WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the mailing dates of documents from the 'Documents_Mailed' table based on a specific document identifier. The placeholder in the WHERE clause represents the unique identifier of the document.
train.2123,cre_Doc_Control_Systems,What is draft detail of the document with id 7?,1,SELECT draft_details FROM Document_Drafts WHERE document_id = 7;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT draft_details FROM Document_Drafts WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the details of drafts associated with a specific document from the 'Document_Drafts' table. The placeholder in the WHERE clause represents the unique identifier of the document for which the draft details are being retrieved.
train.2124,cre_Doc_Control_Systems,How many draft copies does the document with id 2 have?,1,SELECT count(*) FROM Draft_Copies WHERE document_id = 2;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Draft_Copies WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the total count of draft copies associated with a specific document identified by its unique document ID. The placeholder in the query represents the document ID for which the count is being requested.
train.2125,cre_Doc_Control_Systems,Which document has the most draft copies? List its document id and number of draft copies.,1,"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the number of copies made for each document from the 'Draft_Copies' table. The result is grouped by the document identifier and ordered by the count of copies in descending order, with a limit on the number of results returned based on a specified number."
train.2126,cre_Doc_Control_Systems,Which documents have more than 1 draft copies? List document id and number of draft copies.,1,"SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];",This virtual table summarizes the number of draft copies associated with each document from the 'Draft_Copies' table. The placeholder in the HAVING clause represents the minimum count of draft copies that a document must have to be included in the results.
train.2127,cre_Doc_Control_Systems,List all employees in the circulation history of the document with id 1. List the employee's name.,1,SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.
train.2128,cre_Doc_Control_Systems,List the employees who have not showed up in any circulation history of documents. List the employee's name.,1,SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id,"This virtual table lists the names of employees from the 'Employees' table who have not been involved in the circulation of any document. The query uses an EXCEPT clause to exclude those employees whose IDs appear in the 'Circulation_History' table, indicating their participation in document circulation."
train.2130,cre_Doc_Control_Systems,"For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",1,"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;","This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document."
train.2131,company_1,List all department names ordered by their starting date.,1,SELECT dname FROM department ORDER BY mgr_start_date,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dname FROM department ORDER BY mgr_start_date,"This virtual table lists the names of departments from the 'department' table, ordered by the date when the manager started in each department. The ordering is based on the 'mgr_start_date' column."
train.2133,company_1,how many female dependents are there?,1,SELECT count(*) FROM dependent WHERE sex  =  'F',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM dependent WHERE sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of dependents from the 'dependent' table filtered by their gender. The placeholder in the WHERE clause represents the gender of the dependents being queried.
train.2134,company_1,Find the names of departments that are located in Houston.,1,SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of departments from the 'department' table that are located in a specific physical location. The placeholder in the WHERE clause represents the location of the department.
train.2135,company_1,Return the first names and last names of employees who earn more than 30000 in salary.,1,"SELECT fname ,  lname FROM employee WHERE salary  >  30000",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT fname ,  lname FROM employee WHERE salary  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first and last names of employees from the 'employee' table who earn a salary greater than a specified amount. The placeholder in the WHERE clause represents the salary threshold.
train.2136,company_1,Find the number of employees of each gender whose salary is lower than 50000.,1,"SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  sex FROM employee WHERE salary  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY sex","This virtual table provides a count of employees grouped by their gender from the 'employee' table, specifically for those whose salary is below a certain threshold. The placeholder in the WHERE clause represents the salary limit."
train.2137,company_1,"list the first and last names, and the addresses of all employees in the ascending order of their birth date.",1,"SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate","This virtual table provides the first name, last name, and home address of employees from the 'employee' table, sorted by their birth date. The ordering allows for a chronological view of employees based on when they were born."
train.2138,local_govt_in_alabama,what are the event details of the services that have the type code 'Marriage'?,1,SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the details of events from the 'Events' table that are associated with a specific type of service. The placeholder in the WHERE clause represents the service type code.
train.2139,local_govt_in_alabama,What are the ids and details of events that have more than one participants?,1,"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results."
train.2141,local_govt_in_alabama,"What are all the the participant ids, type code and details?",1,"SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants","This virtual table describes the unique identifiers, type codes, and details of participants from the 'Participants' table. The query retrieves all relevant information about participants without any filtering conditions."
train.2142,local_govt_in_alabama,How many participants belong to the type 'Organizer'?,1,SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM participants WHERE participant_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of participants from the 'Participants' table who belong to a specific participant type. The placeholder in the WHERE clause represents the participant type code.
train.2143,local_govt_in_alabama,List the type of the services in alphabetical order.,1,SELECT service_type_code FROM services ORDER BY service_type_code,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT service_type_code FROM services ORDER BY service_type_code,"This virtual table provides a list of service type codes from the 'Services' table, ordered alphabetically. The query retrieves all unique service type codes available in the database."
train.2144,local_govt_in_alabama,List the service id and details for the events.,1,"SELECT service_id ,  event_details FROM EVENTS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT service_id ,  event_details FROM EVENTS",This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.
train.2145,local_govt_in_alabama,How many events had participants whose details had the substring 'Dr.',1,SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.
train.2147,local_govt_in_alabama,Which service id and type has the least number of participants?,1,"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.2148,local_govt_in_alabama,What is the id of the event with the most participants?,1,SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of event identifiers from the 'Participants_in_Events' table, grouped by event ID. The results are ordered by the number of participants in each event in descending order, allowing users to see which events have the most participants. The placeholder in the LIMIT clause represents the maximum number of event IDs to return."
train.2151,local_govt_in_alabama,How many events did not have any participants?,1,SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events),"This virtual table provides a count of events from the 'Events' table that do not have any participants associated with them. The query uses a subquery to filter out event IDs that are present in the 'Participants_in_Events' table, ensuring that only events without participants are counted."
train.2153,formula_1,What is the name of the race held most recently?,1,SELECT name FROM races ORDER BY date DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM races ORDER BY date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of race names from the 'races' table, ordered by the date of the race in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of race names to retrieve."
train.2155,formula_1,What is the name and date of the most recent race?,1,"SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  date FROM races ORDER BY date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of race names and their corresponding dates from the 'races' table, ordered by date in descending order. The placeholder in the LIMIT clause allows the user to specify the number of recent races to retrieve."
train.2157,formula_1,Find the names of all races held in 2017.,1,SELECT name FROM races WHERE YEAR = 2017,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM races WHERE YEAR = [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of races that took place in a specific year from the 'races' table. The placeholder in the WHERE clause represents the year of the race.
train.2159,formula_1,Find the distinct names of all races held between 2014 and 2017?,1,SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT name FROM races WHERE YEAR BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique race names from the 'races' table that occurred within a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the races.
train.2161,formula_1,List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?,1,"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.
train.2163,formula_1,Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?,1,"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included."
train.2165,formula_1,What are the forename and surname of the driver who has the smallest laptime?,1,"SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first and last names of drivers from the 'drivers' table who have participated in races, ordered by their lap times in milliseconds. The placeholder in the LIMIT clause allows for specifying the number of drivers to retrieve."
train.2169,formula_1,"What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",1,"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.
train.2171,formula_1,How many drivers participated in the race Australian Grand Prix held in 2009?,1,SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.
train.2175,formula_1,Give me a list of names and years of races that had any driver whose forename is Lewis?,1,"SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = 'Lewis'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names and years of races in which a specific driver participated, identified by their first name. The placeholders in the WHERE clause allow for filtering based on the driver's first name."
train.2177,formula_1,Find the forename and surname of drivers whose nationality is German?,1,"SELECT forename ,  surname FROM drivers WHERE nationality = 'German'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT forename ,  surname FROM drivers WHERE nationality = [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first names and surnames of drivers from the 'drivers' table who belong to a specific nationality. The placeholder in the WHERE clause represents the driver's nationality.
train.2187,formula_1,What are the numbers of constructors for different nationalities?,1,"SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  nationality FROM constructors GROUP BY nationality","This virtual table provides a count of constructors grouped by their nationality from the 'constructors' table. The placeholder in the SELECT clause represents the count of constructors, while the nationality is used to categorize them."
train.2191,formula_1,What are the names of races that were held after 2017 and the circuits were in the country of Spain?,1,SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of races held in circuits located in a specific country, filtered by the year of the race being greater than a specified year. The placeholders in the WHERE clause represent the country name and the year."
train.2193,formula_1,What are the unique names of races that held after 2000 and the circuits were in Spain?,1,SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.
train.2199,formula_1,List the forenames of all distinct drivers in alphabetical order?,1,SELECT DISTINCT forename FROM drivers ORDER BY forename ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT forename FROM drivers ORDER BY forename ASC,"This virtual table provides a list of unique first names of drivers from the 'drivers' table, sorted in ascending order. The use of DISTINCT ensures that each name appears only once in the result set."
train.2201,formula_1,List the names of all distinct races in reversed  lexicographic order?,1,SELECT DISTINCT name FROM races ORDER BY name DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT name FROM races ORDER BY name DESC,"This virtual table provides a distinct list of race names from the 'races' table, sorted in descending order. The placeholder in the ORDER BY clause indicates that the names will be arranged from Z to A."
train.2203,formula_1,What are the names of races held between 2009 and 2011?,1,SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM races WHERE YEAR BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of races that took place within a specified range of years from the 'races' table. The placeholders in the WHERE clause represent the start and end years for filtering the races.
train.2205,formula_1,What are the names of races held after 12:00:00 or before 09:00:00?,1,SELECT name FROM races WHERE TIME > '12:00:00' OR TIME < '09:00:00',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM races WHERE TIME > [PLACEHOLDER-TYPE:STRING] OR TIME < [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of races from the 'races' table that occurred either after or before specific times. The placeholders in the WHERE clause represent the time values to filter the races.
train.2207,formula_1,"What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",1,"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results."
train.2209,formula_1,What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?,1,"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.
train.2211,formula_1,What is the id and last name of the driver who participated in the most races after 2010?,1,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned."
train.2213,formula_1,What are the names of circuits that belong to UK or Malaysia?,1,SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM circuits WHERE country = [PLACEHOLDER-TYPE:STRING] OR country = [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of circuits from the 'circuits' table that are located in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.
train.2227,formula_1,"Find the id, forename and number of races of all drivers who have at least participated in two races?",1,"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values."
train.2229,formula_1,Find the driver id and number of races of all drivers who have at most participated in 30 races?,1,"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in."
train.2231,formula_1,Find the id and surname of the driver who participated the most number of races?,1,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed."
train.2233,machine_repair,How many technicians are there?,1,SELECT count(*) FROM technician,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM technician,"This virtual table provides the total number of technicians recorded in the 'technician' table. The count function is used to aggregate the number of entries, giving a quick overview of the technician workforce."
train.2235,machine_repair,List the names of technicians in ascending order of age.,1,SELECT Name FROM technician ORDER BY Age ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM technician ORDER BY Age ASC,"This virtual table lists the names of technicians from the 'technician' table, ordered by their age in ascending order. This allows users to see the technicians starting from the youngest to the oldest."
train.2237,machine_repair,What are the team and starting year of technicians?,1,"SELECT Team ,  Starting_Year FROM technician",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Team ,  Starting_Year FROM technician",This virtual table provides information about the teams and starting years of technicians from the 'technician' table. The placeholders allow for filtering or further specification of the data if needed.
train.2239,machine_repair,"List the name of technicians whose team is not ""NYY"".",1,SELECT Name FROM technician WHERE Team != 'NYY',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM technician WHERE Team != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of technicians from the 'technician' table who are not part of a specific team. The placeholder in the WHERE clause represents the team identifier that is being excluded.
train.2241,machine_repair,Show the name of technicians aged either 36 or 37,1,SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.
train.2245,machine_repair,Show different teams of technicians and the number of technicians in each team.,1,"SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",This virtual table summarizes the number of technicians grouped by their respective teams from the 'technician' table. The placeholder in the SELECT statement allows for counting the technicians in each team.
train.2249,machine_repair,Show the team that have at least two technicians.,1,SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.
train.2251,machine_repair,Show names of technicians and series of machines they are assigned to repair.,1,"SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID","This virtual table provides the names of technicians along with the series numbers of the machines they are assigned to repair. The data is sourced from the 'repair_assignment', 'machine', and 'technician' tables, linking them through their respective identifiers."
train.2253,machine_repair,Show names of technicians in ascending order of quality rank of the machine they are assigned.,1,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank,"This virtual table lists the names of technicians who are assigned to repairs on machines, ordered by the quality rank of the machines involved. The placeholders in the query represent the relationships between the repair assignments, machines, and technicians."
train.2255,machine_repair,Show names of technicians who are assigned to repair machines with value point more than 70.,1,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.
train.2259,machine_repair,List the names of technicians who have not been assigned to repair machines.,1,SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment),"This virtual table lists the names of technicians from the 'technician' table who are not currently assigned to any repair tasks. The subquery identifies technicians that have been assigned repairs, and the main query filters out those technicians from the results."
train.2261,machine_repair,"Show the starting years shared by technicians from team ""CLE"" and ""CWS"".",1,SELECT Starting_Year FROM technician WHERE Team  =  'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  'CWS',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.
train.2263,entrepreneur,How many entrepreneurs are there?,1,SELECT count(*) FROM entrepreneur,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM entrepreneur,"This virtual table provides the total number of entrepreneurs recorded in the 'entrepreneur' table. The query counts all entries, giving a quick overview of how many entrepreneurs are present in the database."
train.2265,entrepreneur,List the companies of entrepreneurs in descending order of money requested.,1,SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC,"This virtual table lists the names of companies founded by entrepreneurs from the 'entrepreneur' table, ordered by the amount of money requested in descending order. This allows users to see which companies are seeking the most funding at a glance."
train.2267,entrepreneur,List the companies and the investors of entrepreneurs.,1,"SELECT Company ,  Investor FROM entrepreneur",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Company ,  Investor FROM entrepreneur",This virtual table describes the companies and their respective investors from the 'entrepreneur' table. The query retrieves the company names and the names of investors associated with each entrepreneur.
train.2269,entrepreneur,What is the average money requested by all entrepreneurs?,1,SELECT avg(Money_Requested) FROM entrepreneur,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Money_Requested) FROM entrepreneur,This virtual table calculates the average amount of money requested by entrepreneurs from the 'entrepreneur' table. The placeholder in the SELECT clause represents the average value of the 'Money_Requested' column.
train.2271,entrepreneur,What are the names of people in ascending order of weight?,1,SELECT Name FROM People ORDER BY Weight ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM People ORDER BY Weight ASC,"This virtual table describes the names of individuals from the 'people' table, sorted in ascending order based on their weight. The query retrieves the names of all people and organizes them from the lightest to the heaviest."
train.2273,entrepreneur,What are the names of entrepreneurs?,1,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID,This virtual table describes the names of individuals who are entrepreneurs by joining the 'entrepreneur' table with the 'people' table based on their unique identifiers. The query retrieves the 'Name' from the 'people' table for those who have an entry in the 'entrepreneur' table.
train.2275,entrepreneur,"What are the names of entrepreneurs whose investor is not ""Rachel Elnaugh""?",1,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != 'Rachel Elnaugh',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.
train.2277,entrepreneur,What is the weight of the shortest person?,1,SELECT Weight FROM people ORDER BY Height ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Weight FROM people ORDER BY Height ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the weights of individuals from the 'people' table, sorted in ascending order by their height. The placeholder in the LIMIT clause indicates the maximum number of records to return."
train.2280,entrepreneur,Return the name of the heaviest entrepreneur.,1,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of entrepreneurs from the 'entrepreneur' table, joined with their corresponding details from the 'people' table. The results are ordered by the weight of the individuals in descending order, and a limit is applied to restrict the number of results returned, represented by a numeric placeholder."
train.2283,entrepreneur,"What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?",1,SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  'Simon Woodroffe' OR T1.Investor  =  'Peter Jones',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause."
train.2285,entrepreneur,What are the weights of entrepreneurs in descending order of money requested?,1,SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC,"This virtual table provides the weights of entrepreneurs, ordered by the amount of money they requested. It combines data from the 'entrepreneur' and 'people' tables, linking them through the 'People_ID' foreign key. The placeholder in the ORDER BY clause represents the money requested by the entrepreneur, allowing for dynamic sorting based on this value."
train.2287,entrepreneur,What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?,1,"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor","This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor."
train.2289,entrepreneur,What is the investor that has invested in the most number of entrepreneurs?,1,SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number."
train.2291,entrepreneur,What are the investors that have invested in at least two entrepreneurs?,1,SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of investors who have shown interest in multiple entrepreneurs. The placeholder in the HAVING clause represents the minimum number of entrepreneurs an investor must be associated with to be included in the results.
train.2295,entrepreneur,List the names of people that are not entrepreneurs.,1,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur),"This virtual table lists the names of individuals from the 'people' table who are not associated with any entrepreneur in the 'entrepreneur' table. The subquery filters out those who have an entry in the 'entrepreneur' table, ensuring that only those without entrepreneurial links are displayed."
train.2297,entrepreneur,Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.,1,SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.
train.2299,entrepreneur,How many distinct companies are there?,1,SELECT count(DISTINCT Company) FROM entrepreneur,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Company) FROM entrepreneur,This virtual table provides the count of distinct companies founded by entrepreneurs from the 'entrepreneur' table. The query uses the DISTINCT keyword to ensure that only unique company names are counted.
train.2301,entrepreneur,Show the company of the tallest entrepreneur.,1,SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the companies founded by entrepreneurs, ordered by the height of the associated individuals in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.2303,perpetrator,How many perpetrators are there?,1,SELECT count(*) FROM perpetrator,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM perpetrator,"This virtual table provides a count of all incidents recorded in the 'perpetrator' table. It does not filter or group the data, thus returning the total number of entries, which represents the total number of incidents involving perpetrators."
train.2304,perpetrator,List the date of perpetrators in descending order of the number of people killed.,1,SELECT Date FROM perpetrator ORDER BY Killed DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Date FROM perpetrator ORDER BY Killed DESC,"This virtual table provides a list of incident dates from the 'perpetrator' table, ordered by the number of people killed in descending order. This allows users to see the most deadly incidents first."
train.2305,perpetrator,List the number of people injured by perpetrators in ascending order.,1,SELECT Injured FROM perpetrator ORDER BY Injured ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Injured FROM perpetrator ORDER BY Injured ASC,"This virtual table provides a list of the number of people injured in incidents involving perpetrators, sorted in ascending order. The query retrieves data from the 'perpetrator' table, specifically focusing on the 'Injured' column."
train.2306,perpetrator,What is the average number of people injured by all perpetrators?,1,SELECT avg(Injured) FROM perpetrator,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Injured) FROM perpetrator,"This virtual table calculates the average number of people injured in incidents recorded in the 'perpetrator' table. The result provides insight into the severity of incidents over time, without specifying any particular incident or condition."
train.2307,perpetrator,What is the location of the perpetrator with the largest kills.,1,SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of locations from the 'perpetrator' table, ordered by the number of people killed in descending order. The placeholder in the LIMIT clause indicates the maximum number of locations to return."
train.2308,perpetrator,What are the names of people in ascending order of height?,1,SELECT Name FROM People ORDER BY Height ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM People ORDER BY Height ASC,"This virtual table describes the names of individuals from the 'People' table, sorted by their height in ascending order. The query retrieves the names of all people and organizes them based on their height, allowing for an easy comparison of individuals' heights."
train.2309,perpetrator,What are the names of perpetrators?,1,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID,"This virtual table describes the names of individuals from the 'people' table who are linked to incidents recorded in the 'perpetrator' table. The join condition connects the two tables based on the unique identifier for each person, allowing for the retrieval of names associated with specific incidents."
train.2310,perpetrator,"What are the names of perpetrators whose country is not ""China""?",1,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != 'China',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table, specifically filtering out those incidents that occurred in a specified country. The placeholder in the WHERE clause represents the name of the country to exclude from the results."
train.2311,perpetrator,What is the name of the perpetrator with the biggest weight.,1,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table. The results are ordered by the weight of the individuals in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.2313,perpetrator,"What are the names of perpetrators in country ""China"" or ""Japan""?",1,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  'China' OR T2.Country  =  'Japan',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING] OR T2.Country  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table that occurred in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.
train.2314,perpetrator,What are the heights of perpetrators in descending order of the number of people they injured?,1,SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC,"This virtual table provides the heights of individuals from the 'people' table who are linked to incidents recorded in the 'perpetrator' table. The results are ordered by the number of injured individuals in descending order, allowing for an analysis of the heights of individuals associated with more severe incidents."
train.2315,perpetrator,What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.,1,"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country","This virtual table summarizes the number of incidents involving perpetrators, grouped by country. The placeholder in the SELECT statement allows for counting the total incidents per country."
train.2316,perpetrator,What is the country that has the most perpetrators?,1,"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the number of incidents involving perpetrators grouped by country from the 'perpetrator' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on the count of incidents.
train.2318,perpetrator,List the names of perpetrators in descending order of the year.,1,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC,"This virtual table provides the names of individuals from the 'people' table who are linked to incidents recorded in the 'perpetrator' table. The results are ordered by the year of the incident in descending order, allowing users to see the most recent incidents first."
train.2319,perpetrator,List the names of people that are not perpetrators.,1,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator),"This virtual table lists the names of individuals from the 'people' table who have not been associated with any incidents involving a perpetrator. The subquery filters out those individuals who have a corresponding entry in the 'perpetrator' table, ensuring that only those without any incident involvement are selected."
train.2320,perpetrator,Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.,1,SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Country FROM perpetrator WHERE Injured  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies countries where the number of injured individuals in incidents involving perpetrators falls within a specific range. The placeholders represent the lower and upper limits for the number of injured individuals.
train.2322,perpetrator,Show the date of the tallest perpetrator.,1,SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of incident dates involving perpetrators, ordered by the height of the associated individuals from the 'people' table. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.2323,perpetrator,In which year did the most recent crime happen?,1,SELECT max(YEAR) FROM perpetrator;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(YEAR) FROM perpetrator;,This virtual table retrieves the maximum year of incidents recorded in the 'perpetrator' table. The placeholder in the SELECT clause indicates that the result will be the highest year value found in the data.
train.2324,csu_1,Report the name of all campuses in Los Angeles county.,1,SELECT campus FROM campuses WHERE county  =  'Los Angeles',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT campus FROM campuses WHERE county  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the campuses located in a specific county from the 'Campuses' table. The placeholder in the WHERE clause represents the name of the county.
train.2326,csu_1,What are the names of all campuses located at Chico?,1,SELECT campus FROM campuses WHERE LOCATION  =  'Chico',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT campus FROM campuses WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the campuses from the 'Campuses' table that are located in a specific geographical location. The placeholder in the WHERE clause represents the location of the campus.
train.2329,csu_1,What are the campuses that opened in 1958?,1,SELECT campus FROM campuses WHERE YEAR  =  1958,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT campus FROM campuses WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of campuses from the 'Campuses' table that have records for a specific year. The placeholder in the WHERE clause represents the year for which the campus data is being queried.
train.2330,csu_1,Find the name of the campuses opened before 1800.,1,SELECT campus FROM campuses WHERE YEAR  <  1800,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT campus FROM campuses WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of campuses from the 'Campuses' table that have records from years earlier than a specified year. The placeholder in the WHERE clause represents the year to compare against.
train.2332,csu_1,Which campus was opened between 1935 and 1939?,1,SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.
train.2336,csu_1,"What is the campus fee of ""San Jose State University"" in year 1996?",1,SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND T2.year  =  1996,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND T2.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the campus fee amount for a specific campus in a given year. The placeholders in the WHERE clause represent the campus name and the applicable year for the fee.
train.2338,csu_1,"What is the campus fee of ""San Francisco State University"" in year 1996?",1,SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  'San Francisco State University' AND T2.year  =  1996,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND T2.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the campus fee amount for a specific campus in a given year. The placeholders in the WHERE clause represent the campus name and the applicable year for the fee.
train.2340,csu_1,Find the count of universities whose campus fee is greater than the average campus fee.,1,SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees),This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.
train.2344,csu_1,Which university is in Los Angeles county and opened after 1950?,1,SELECT campus FROM campuses WHERE county  =  'Los Angeles' AND YEAR  >  1950,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT campus FROM campuses WHERE county  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the campuses located in a specific county that have data records from a certain year onwards. The placeholders in the WHERE clause represent the county name and the year threshold.
train.2352,csu_1,Find the average fee on a CSU campus in 1996,1,SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average campus fee from the 'csu_fees' table for a specific year. The placeholder in the WHERE clause represents the year for which the average fee is being calculated.
train.2354,csu_1,What is the average fee on a CSU campus in 2005?,1,SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average campus fee from the 'csu_fees' table for a specific year. The placeholder in the WHERE clause represents the year for which the average fee is being calculated.
train.2360,csu_1,Find the names of the campus which has more faculties in 2002 than every campus in Orange county.,1,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  'Orange'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER] AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T1.county  =  [PLACEHOLDER-TYPE:STRING]),This virtual table identifies campuses that have a number of faculty members greater than the maximum number of faculty members in a specified county for a given year. The placeholders in the query represent the year and the county name.
train.2364,csu_1,How many campuses are there in Los Angeles county?,1,SELECT count(*) FROM campuses WHERE county  =  'Los Angeles',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM campuses WHERE county  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of campuses located in a specific county from the 'Campuses' table. The placeholder in the WHERE clause represents the name of the county.
train.2370,csu_1,"What are the degrees conferred in ""San Francisco State University"" in 2001.",1,SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Francisco State University' AND t2.year  =  2001,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.
train.2372,csu_1,How many faculty is there in total in the year of 2002?,1,SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(faculty) FROM faculty WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the total number of faculty members across all campuses for a specific year. The placeholder in the WHERE clause represents the year for which the faculty count is being queried.
train.2375,csu_1,What is the number of faculty at Long Beach State University in 2002?,1,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  'Long Beach State University',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.
train.2384,csu_1,"How many undergraduates are there in ""San Jose State University"" in year 2004?",1,SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.
train.2386,csu_1,"What is the number of graduates in ""San Francisco State University"" in year 2004?",1,SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Francisco State University',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.
train.2388,csu_1,"What is the campus fee of ""San Francisco State University"" in year 2000?",1,SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Francisco State University' AND t1.year  =  2000,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  [PLACEHOLDER-TYPE:STRING] AND t1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the campus fee amount for a specific campus and year from the 'csu_fees' table. The placeholders in the WHERE clause represent the campus name and the applicable year.
train.2390,csu_1,"Find the campus fee of ""San Jose State University"" in year 2000.",1,SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Jose State University' AND t1.year  =  2000,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  [PLACEHOLDER-TYPE:STRING] AND t1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the campus fee amount for a specific campus and year from the 'csu_fees' table. The placeholders in the WHERE clause represent the campus name and the applicable year.
train.2392,csu_1,How many CSU campuses are there?,1,SELECT count(*) FROM campuses,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM campuses,"This virtual table provides the total count of campuses recorded in the 'Campuses' table. The query uses the count function to aggregate the number of entries in the table, which helps in understanding the scale of the campus data available."
train.2394,candidate_poll,How many candidates are there?,1,SELECT count(*) FROM candidate,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM candidate,"This virtual table provides the total number of candidates recorded in the 'candidate' table. The query counts all entries in the table, which helps in understanding the overall participation in the polling data."
train.2399,candidate_poll,Return the top 3 greatest support rates.,1,SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the support rates of candidates from the 'candidate' table, ordered from highest to lowest. The placeholder in the LIMIT clause indicates the maximum number of results to return."
train.2400,candidate_poll,Find the id of the candidate who got the lowest oppose rate.,1,SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of candidate identifiers from the 'candidate' table, ordered by the rate of opposition to each candidate. The placeholder in the LIMIT clause allows for specifying the maximum number of candidates to retrieve."
train.2404,candidate_poll,which poll source does the highest oppose rate come from?,1,SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of poll sources from the 'candidate' table, ordered by the rate of opposition to the candidates. The placeholder in the LIMIT clause allows for specifying the maximum number of poll sources to retrieve."
train.2406,candidate_poll,List all people names in the order of their date of birth from old to young.,1,SELECT name FROM people ORDER BY date_of_birth,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM people ORDER BY date_of_birth,"This virtual table lists the names of individuals from the 'people' table, ordered by their date of birth. This allows for a chronological view of individuals based on their age."
train.2408,candidate_poll,Find the average height and weight for all males (sex is M).,1,"SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  [PLACEHOLDER-TYPE:STRING]","This virtual table calculates the average height and weight of individuals from the 'people' table, filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the individuals being queried."
train.2410,candidate_poll,find the names of people who are taller than 200 or lower than 190.,1,SELECT name FROM people WHERE height  >  200 OR height  <  190,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT name FROM people WHERE height  >  [PLACEHOLDER-TYPE:NUMBER] OR height  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of individuals from the 'people' table whose height is either greater than or less than specified values. The placeholders in the WHERE clause represent the height thresholds for filtering the results.
train.2412,candidate_poll,Find the average and minimum weight for each gender.,1,"SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",This virtual table provides the average and minimum weight of individuals grouped by their gender from the 'people' table. The placeholders in the SELECT clause represent the calculated values for weight and the gender category.
train.2414,candidate_poll,Find the name and gender of the candidate who got the highest support rate.,1,"SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and genders of individuals from the 'people' table who are linked to the 'candidate' table, sorted by their support rates in descending order. The placeholder in the LIMIT clause indicates the maximum number of records to return."
train.2416,candidate_poll,Find the name of the candidates whose oppose percentage is the lowest for each sex.,1,"SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex","This virtual table provides the names and genders of individuals from the 'people' table, along with the minimum opposition rate from the 'candidate' table for each gender. The placeholder in the SELECT statement allows for the retrieval of specific data related to the candidates' opposition rates grouped by gender."
train.2419,candidate_poll,What is the sex of the candidate who had the highest unsure rate?,1,SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.2420,candidate_poll,what are the names of people who did not participate in the candidate election.,1,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate),"This virtual table lists the names of individuals from the 'people' table who are not associated with any candidate in the 'candidate' table. The subquery filters out those individuals who have a corresponding entry in the 'candidate' table, ensuring that only those without any candidate affiliation are included."
train.2422,candidate_poll,Find the names of the candidates whose support percentage is lower than their oppose rate.,1,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate,"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details."
train.2424,candidate_poll,how many people are there whose weight is higher than 85 for each gender?,1,"SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  sex FROM people WHERE weight  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY sex","This virtual table provides a count of individuals grouped by their gender from the 'people' table, specifically for those whose weight exceeds a certain threshold. The placeholder in the WHERE clause represents the weight limit."
train.2426,candidate_poll,"find the highest support percentage, lowest consider rate and oppose rate of all candidates.",1,"SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate","This virtual table summarizes the maximum support rate, minimum consideration rate, and minimum opposition rate for candidates from the 'candidate' table. The placeholders represent the respective rates being analyzed."
train.2428,candidate_poll,list all female (sex is F) candidate names in the alphabetical order.,1,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  [PLACEHOLDER-TYPE:STRING] ORDER BY t1.name,"This virtual table describes the names of individuals from the 'people' table who are linked to candidates in the 'candidate' table, filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the individuals."
train.2430,candidate_poll,find the name of people whose height is lower than the average.,1,SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people),"This virtual table lists the names of individuals from the 'people' table who have a height less than the average height of all individuals in the same table. The query uses a subquery to calculate the average height, ensuring that only those below this average are selected."
train.2432,candidate_poll,List all info about all people.,1,SELECT * FROM people,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM people,"This virtual table retrieves all details of individuals from the 'people' table. The table includes unique identifiers, gender, full name, birth date, height, and weight of each person."
train.2435,movie_1,What are the names of all movies directed by Steven Spielberg?,1,SELECT title FROM Movie WHERE director = 'Steven Spielberg',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM Movie WHERE director = [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of movies from the 'Movie' table that were directed by a specific director. The placeholder in the WHERE clause represents the director's name.
train.2436,movie_1,What is the name of the movie produced after 2000 and directed by James Cameron?,1,SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT title FROM Movie WHERE director = [PLACEHOLDER-TYPE:STRING] AND YEAR  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the titles of movies from the 'Movie' table that were directed by a specific director and released after a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.
train.2438,movie_1,How many movies were made before 2000?,1,SELECT count(*) FROM Movie WHERE YEAR  <  2000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Movie WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table counts the number of movies from the 'Movie' table that were released before a specific year. The placeholder in the WHERE clause represents the year of release.
train.2440,movie_1,Who is the director of movie Avatar?,1,SELECT director FROM Movie WHERE title  = 'Avatar',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT director FROM Movie WHERE title  = [PLACEHOLDER-TYPE:STRING],This virtual table describes the directors of movies from the 'Movie' table based on a specific movie title. The placeholder in the WHERE clause represents the title of the movie.
train.2442,movie_1,How many reviewers listed?,1,SELECT count(*) FROM Reviewer,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Reviewer,"This virtual table provides the total number of reviewers from the 'Reviewer' table. The query counts all entries in the Reviewer table, which helps in understanding the size of the reviewer pool."
train.2444,movie_1,What is the id of the reviewer whose name has substring “Mike”?,1,SELECT rID FROM Reviewer WHERE name LIKE '%Mike%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT rID FROM Reviewer WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of reviewers from the 'Reviewer' table whose names match a specific pattern. The placeholder in the WHERE clause represents the reviewer's name pattern.
train.2446,movie_1,What is the reviewer id of Daniel Lewis?,1,SELECT rID FROM Reviewer WHERE name  =  'Daniel Lewis',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT rID FROM Reviewer WHERE name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of reviewers from the 'Reviewer' table who have a specific name. The placeholder in the WHERE clause represents the reviewer's name.
train.2448,movie_1,What is the total number of ratings that has more than 3 stars?,1,SELECT count(*) FROM Rating WHERE stars  >  3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Rating WHERE stars  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of ratings from the 'Rating' table where the number of stars given exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of stars that a rating must have to be included in the count.
train.2450,movie_1,What is the lowest and highest rating star?,1,"SELECT max(stars) ,  min(stars) FROM Rating",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(stars) ,  min(stars) FROM Rating","This virtual table provides the maximum and minimum star ratings from the 'Rating' table, which captures the ratings given by reviewers to various movies. The placeholders in the SELECT statement represent the aggregated values of the star ratings."
train.2454,movie_1,What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.,1,"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.
train.2456,movie_1,What is the average rating star for each reviewer?,1,"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name","This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings."
train.2458,movie_1,Find the titles of all movies that have no ratings.,1,SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating),2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating),"This virtual table lists the titles of movies from the 'Movie' table that have not received any ratings. The subquery identifies the movie IDs that have been rated, and the main query filters out these IDs to show only unrated movies."
train.2462,movie_1,What is the average rating stars and title for the oldest movie?,1,"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)","This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year."
train.2464,movie_1,What is the name of the most recent movie?,1,SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie),1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie),"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected."
train.2466,movie_1,What is the maximum stars and year for the most recent movie?,1,"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)","This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database."
train.2468,movie_1,What is the names of movies whose created year is after all movies directed by Steven Spielberg?,1,SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  'Steven Spielberg'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING]),This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.
train.2470,movie_1,What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?,1,"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  'James Cameron')",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.
train.2472,movie_1,"Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",1,"SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars","This virtual table presents the names of reviewers along with the titles of movies they rated, the star ratings given, and the dates of those ratings. The placeholders in the query allow for dynamic filtering and sorting based on reviewer names, movie titles, and star ratings."
train.2474,movie_1,Find the names of all reviewers who have contributed three or more ratings.,1,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.
train.2477,movie_1,What are the names of all the different reviewers who rates Gone with the Wind?,1,SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.
train.2478,movie_1,Find the names of all directors whose movies are rated by Sarah Martinez.,1,SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.
train.2480,movie_1,"For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",1,"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name","This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name."
train.2484,movie_1,Find the titles of all movies not reviewed by Chris Jackson.,1,SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.
train.2486,movie_1,"For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",1,"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.
train.2490,movie_1,What are the names of the directors who made exactly one movie?,1,SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.
train.2492,movie_1,What are the names of the directors who made exactly one movie excluding director NULL?,1,SELECT director FROM Movie WHERE director != 'null' GROUP BY director HAVING count(*)  =  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors."
train.2498,movie_1,What are the movie titles and average rating of the movies with the lowest average rating?,1,"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder."
train.2501,movie_1,What are the names and years released for the movies with the top 3 highest ratings?,1,"SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of movie titles and their release years from the 'Movie' table, ordered by the number of stars given in ratings from the 'Rating' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
train.2510,movie_1,What are the titles of all movies that have rating star is between 3 and 5?,1,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.
train.2512,movie_1,Find the names of reviewers who had given higher than 3 star ratings.,1,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided."
train.2520,movie_1,find the ids of reviewers who did not give 4 star.,1,SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.
train.2524,movie_1,What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?,1,SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively."
train.2526,movie_1,What are names of the movies that are either made before 1980 or directed by James Cameron?,1,SELECT title FROM Movie WHERE director  =  'James Cameron' OR YEAR   <  1980,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.
train.2532,county_public_safety,How many counties are there?,1,SELECT count(*) FROM county_public_safety,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM county_public_safety,"This virtual table provides the total count of records from the 'county_public_safety' table, which contains information about various counties and their public safety metrics. The query uses a count function to aggregate the number of entries in the table."
train.2534,county_public_safety,List the names of counties in descending order of population.,1,SELECT Name FROM county_public_safety ORDER BY Population DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM county_public_safety ORDER BY Population DESC,"This virtual table provides a list of county names from the 'county_public_safety' table, ordered by their population in descending order. This allows users to easily identify the counties with the largest populations."
train.2536,county_public_safety,List the distinct police forces of counties whose location is not on east side.,1,SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != 'East',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct police forces from the 'county_public_safety' table, excluding those located in a specific geographical area. The placeholder in the WHERE clause represents the location to be filtered out."
train.2538,county_public_safety,What are the minimum and maximum crime rate of counties?,1,"SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",This virtual table provides the minimum and maximum crime rates from the 'county_public_safety' table. The placeholders in the SELECT statement allow for further customization if needed.
train.2540,county_public_safety,Show the crime rates of counties in ascending order of number of police officers.,1,SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC,"This virtual table provides the crime rates from the 'county_public_safety' table, sorted in ascending order based on the number of police officers in each county. This allows for an analysis of how the crime rate correlates with the size of the police force."
train.2542,county_public_safety,What are the names of cities in ascending alphabetical order?,1,SELECT Name FROM city ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM city ORDER BY Name ASC,"This virtual table lists the names of cities from the 'city' table, sorted in ascending order. The query retrieves all city names without any filtering, ensuring a comprehensive view of the cities available in the database."
train.2546,county_public_safety,List the name of the county with the largest population.,1,SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of counties from the 'county_public_safety' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of counties to be displayed."
train.2548,county_public_safety,List the names of the city with the top 5 white percentages.,1,SELECT Name FROM city ORDER BY White DESC LIMIT 5,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned."
train.2550,county_public_safety,Show names of cities and names of counties they are in.,1,"SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID","This virtual table describes the names of cities along with their corresponding counties from the 'city' and 'county_public_safety' tables. The join condition links cities to their respective counties based on the County_ID, ensuring that the data reflects the correct relationships between cities and counties."
train.2554,county_public_safety,Show the name of cities in the county that has the largest number of police officers.,1,SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.
train.2556,county_public_safety,Show the number of cities in counties that have a population more than 20000.,1,SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  [PLACEHOLDER-TYPE:NUMBER]),This virtual table provides the count of cities that belong to counties with a population exceeding a specified threshold. The placeholder in the subquery represents the population limit used to filter the counties.
train.2560,county_public_safety,Please show the police forces and the number of counties with each police force.,1,"SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force","This virtual table summarizes the number of counties grouped by the description of their police force from the 'county_public_safety' table. The placeholder in the SELECT clause represents the police force description, while the COUNT function aggregates the number of counties for each unique police force description."
train.2564,county_public_safety,List the names of counties that do not have any cities.,1,SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city),This virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. The placeholder in the WHERE clause represents the County_IDs of counties that are present in the 'city' table.
train.2568,county_public_safety,Show the names of cities in counties that have a crime rate less than 100.,1,SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER]),This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.
train.2571,county_public_safety,"What are the case burdens of counties, ordered descending by population?",1,SELECT Case_burden FROM county_public_safety ORDER BY Population DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Case_burden FROM county_public_safety ORDER BY Population DESC,"This virtual table provides the average case burden handled by police in counties, sorted by the total population of each county in descending order. The query retrieves the 'Case_burden' from the 'county_public_safety' table, allowing users to understand which counties have the highest case burdens relative to their populations."
train.2572,inn_1,Find the names of all modern rooms with a base price below $160 and two beds.,1,SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT roomName FROM Rooms WHERE basePrice  <  [PLACEHOLDER-TYPE:NUMBER] AND beds =  [PLACEHOLDER-TYPE:NUMBER] AND decor  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table describes the names of rooms from the 'Rooms' table that have a base price lower than a specified amount, a specific number of beds, and a particular type of decor. The placeholders in the WHERE clause represent the maximum price, number of beds, and decor description respectively."
train.2574,inn_1,Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.,1,"SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  [PLACEHOLDER-TYPE:NUMBER] AND maxOccupancy  >  [PLACEHOLDER-TYPE:NUMBER];",This virtual table describes the names and unique identifiers of rooms from the 'Rooms' table that have a base price exceeding a specified amount and can accommodate more than a certain number of occupants. The placeholders in the WHERE clause represent the minimum base price and maximum occupancy limits.
train.2580,inn_1,How many times does ROY SWEAZY has reserved a room.,1,SELECT count(*) FROM Reservations WHERE FirstName = 'ROY' AND LastName  =  'SWEAZY';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Reservations WHERE FirstName = [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of reservations made by a specific guest identified by their first and last name. The placeholders in the WHERE clause represent the guest's first and last names.
train.2584,inn_1,"How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",1,SELECT Adults FROM Reservations WHERE CheckIn  =  '2010-10-23' AND FirstName  =  'CONRAD' AND LastName  =  'SELBIG';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Adults FROM Reservations WHERE CheckIn  =  [PLACEHOLDER-TYPE:STRING] AND FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table describes the number of adults in reservations from the 'Reservations' table for a specific check-in date and guest's first and last name. The placeholders in the WHERE clause represent the check-in date and the names of the guests.
train.2586,inn_1,"How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",1,SELECT Kids FROM Reservations WHERE CheckIn  =  '2010-09-21' AND FirstName  =  'DAMIEN' AND LastName  =  'TRACHSEL';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Kids FROM Reservations WHERE CheckIn  =  [PLACEHOLDER-TYPE:STRING] AND FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the number of kids associated with reservations made by a specific guest on a particular check-in date. The placeholders in the WHERE clause represent the check-in date and the first and last names of the guest.
train.2592,inn_1,Which room has cheapest base price? List the room's name and the base price.,1,"SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of room names along with their base prices from the 'Rooms' table, sorted in ascending order of price. The placeholder in the LIMIT clause indicates the maximum number of results to return."
train.2595,inn_1,"Return the decor of the room named ""Recluse and defiance"".",1,SELECT decor FROM Rooms WHERE roomName  =  'Recluse and defiance';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT decor FROM Rooms WHERE roomName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table describes the decor of a specific room from the 'Rooms' table based on the room's name. The placeholder in the WHERE clause represents the name of the room being queried.
train.2596,inn_1,What is the average base price of different bed type? List bed type and average base price.,1,"SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;","This virtual table provides the average base price of rooms grouped by the type of beds available in each room. The placeholder in the SELECT clause represents the bed type, while the average price is calculated for each group."
train.2598,inn_1,What is the total number of people who could stay in the modern rooms in this inn?,1,SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the total maximum occupancy of rooms from the 'Rooms' table that have a specific decor style. The placeholder in the WHERE clause represents the decor description being queried.
train.2603,inn_1,How many times the number of adults and kids staying in a room reached the maximum capacity of the room?,1,SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;,This virtual table provides a count of reservations where the total number of occupants (adults and kids) matches the maximum occupancy allowed for each room. The placeholders in the query represent the relevant columns from the Reservations and Rooms tables.
train.2606,inn_1,How many rooms are there?,1,SELECT count(*) FROM Rooms;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Rooms;,"This virtual table provides the total number of rooms available in the 'Rooms' table. The query counts all entries in the table, which gives an overview of the room inventory."
train.2610,inn_1,Find the number of rooms for each bed type.,1,"SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;","This virtual table summarizes the different types of beds available in the rooms from the 'Rooms' table, along with the count of rooms for each bed type. The query groups the results by the bed type to provide a clear overview of the distribution of bed types across the available rooms."
train.2613,inn_1,What is the name of the room that can accommodate the most people?,1,SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the names of rooms from the 'Rooms' table, ordered by their maximum occupancy in descending order. The placeholder in the LIMIT clause represents the maximum number of room names to be displayed."
train.2614,inn_1,Find the id and name of the most expensive base price room.,1,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of room identifiers and their names from the 'Rooms' table, sorted by the base price in descending order. The placeholder in the LIMIT clause represents the maximum number of rooms to display."
train.2616,inn_1,List the type of bed and name of all traditional rooms.,1,"SELECT roomName ,  bedType FROM Rooms WHERE decor = 'traditional';",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT roomName ,  bedType FROM Rooms WHERE decor = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the names and types of beds available in rooms from the 'Rooms' table that have a specific decor style. The placeholder in the WHERE clause represents the decor description.
train.2620,inn_1,Find the average and minimum price of the rooms in different decor.,1,"SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;","This virtual table provides a summary of the average and minimum base prices of rooms, grouped by their decor descriptions. The placeholders represent the decor type and pricing information."
train.2622,inn_1,List the name of all rooms sorted by their prices.,1,SELECT roomName FROM Rooms ORDER BY basePrice;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT roomName FROM Rooms ORDER BY basePrice;,"This virtual table lists the names of rooms from the 'Rooms' table, ordered by their base price per night. The ordering allows users to easily identify the rooms based on their pricing."
train.2624,inn_1,Find the number of rooms with price higher than 120 for different decor.,1,"SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT decor , count(*) FROM Rooms WHERE basePrice  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY decor;",This virtual table provides a summary of the room decor and the count of rooms that have a base price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum base price for filtering the rooms.
train.2630,inn_1,How many different types of beds are there?,1,SELECT count(DISTINCT bedType) FROM Rooms;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT bedType) FROM Rooms;,This virtual table provides the count of distinct bed types available in the 'Rooms' table. The result will indicate how many unique types of beds are offered across all rooms.
train.2632,inn_1,Find the name and id of the top 3 expensive rooms.,1,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of room identifiers and their corresponding names from the 'Rooms' table, sorted by the base price in descending order. The placeholder in the LIMIT clause indicates the maximum number of rooms to be displayed."
train.2634,inn_1,Find the name of rooms whose price is higher than the average price.,1,SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );,"This virtual table lists the names of rooms from the 'Rooms' table that have a base price higher than the average base price of all rooms. The query uses a subquery to calculate the average base price, and the placeholder in the WHERE clause represents the condition for filtering the rooms based on their price."
train.2636,inn_1,Find the number of rooms that do not have any reservation.,1,SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations),"This virtual table provides the count of rooms from the 'Rooms' table that are currently not reserved, as indicated by their absence in the 'Reservations' table. The query uses a subquery to identify reserved rooms and filters out those from the count."
train.2640,inn_1,Find the names of rooms that have been reserved for more than 60 times.,1,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of rooms from the 'Rooms' table that have been reserved more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of reservations required to include a room's name in the results.
train.2642,inn_1,Find the name of rooms whose base price is between 120 and 150.,1,SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT roomname FROM rooms WHERE baseprice BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of rooms from the 'Rooms' table that have a base price within a specified range. The placeholders in the WHERE clause represent the minimum and maximum base prices for filtering the results.
train.2644,inn_1,Find the name of rooms booked by some customers whose first name contains ROY.,1,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of rooms from the 'Rooms' table that have been reserved by guests with a specific first name. The placeholder in the WHERE clause represents the first name of the guest.
train.2647,local_govt_mdm,What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.,1,"SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the cross-reference IDs and their associated source system codes from the 'CMI_Cross_References' table, specifically for those cross-references that are linked to council tax records. The results are grouped by the cross-reference ID, and only those with a count of associated records meeting a specified threshold are included, represented by a placeholder for numeric values."
train.2649,local_govt_mdm,"What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",1,"SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id","This virtual table provides a list of source system codes from the 'CMI_Cross_References' table along with the corresponding council tax IDs from the 'Benefits_Overpayments' table. The data is linked through the cross-reference ID, allowing for a comprehensive view of benefits overpayments associated with different source systems. The results are ordered by the council tax ID for better organization."
train.2652,local_govt_mdm,What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?,1,SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  [PLACEHOLDER-TYPE:STRING] OR T2.source_system_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the electoral register IDs from the 'Electoral_Register' table for entries that are linked to cross-references in the 'CMI_Cross_References' table. The query filters the results based on the source system codes, allowing for multiple codes to be specified using placeholders."
train.2653,local_govt_mdm,How many different source system code for the cmi cross references are there?,1,SELECT count(DISTINCT source_system_code) FROM CMI_cross_references,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT source_system_code) FROM CMI_cross_references,This virtual table provides the count of distinct source system codes from the 'CMI_Cross_References' table. The placeholder in the SELECT clause represents the unique source system codes that can be counted.
train.2654,local_govt_mdm,"List all information about customer master index, and sort them by details in descending order.",1,SELECT * FROM customer_master_index ORDER BY cmi_details DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM customer_master_index ORDER BY cmi_details DESC,"This virtual table provides a comprehensive view of all customers from the 'Customer_Master_Index' table, sorted in descending order based on the details related to each customer. The use of a wildcard (*) indicates that all columns from the table will be included in the result set."
train.2655,local_govt_mdm,List the council tax ids and their related cmi cross references of all the parking fines.,1,"SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",This virtual table describes the council tax identifiers and their corresponding cross-reference identifiers from the 'Parking_Fines' table. The placeholders represent the specific values that can be filtered or modified as needed.
train.2658,local_govt_mdm,Which cmi cross reference id is not related to any parking taxes?,1,SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines,This virtual table identifies the unique cross-reference IDs from the 'CMI_Cross_References' table that do not have corresponding entries in the 'Parking_Fines' table. The placeholder in the query allows for the exclusion of specific cross-reference IDs related to parking fines.
train.2659,local_govt_mdm,Which distinct source system code includes the substring 'en'?,1,SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of source system codes from the 'CMI_Cross_References' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the desired source system code pattern.
train.2660,party_host,How many parties are there?,1,SELECT count(*) FROM party,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM party,"This virtual table provides the total count of parties recorded in the 'party' table. It does not filter or specify any conditions, thus returning the overall number of parties."
train.2662,party_host,List the themes of parties in ascending order of number of hosts.,1,SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC,"This virtual table provides the themes of parties from the 'party' table, sorted by the number of hosts involved in ascending order. The sorting allows users to see which parties have fewer hosts first, potentially indicating smaller or more intimate gatherings."
train.2666,party_host,"Show the first year and last year of parties with theme ""Spring"" or ""Teqnology"".",1,"SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  'Spring' OR Party_Theme  =  'Teqnology'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  [PLACEHOLDER-TYPE:STRING] OR Party_Theme  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the first and last years of parties from the 'party' table that have specific themes. The placeholders in the WHERE clause represent the themes of the parties being queried.
train.2668,party_host,What is the average number of hosts for parties?,1,SELECT avg(Number_of_hosts) FROM party,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Number_of_hosts) FROM party,This virtual table calculates the average number of hosts involved in parties from the 'party' table. The placeholder in the SELECT clause represents the average value of the 'Number_of_hosts' column.
train.2670,party_host,What is the location of the party with the most hosts?,1,SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of party locations from the 'party' table, ordered by the number of hosts involved in each party in descending order. The placeholder in the LIMIT clause represents the maximum number of locations to be returned."
train.2672,party_host,Show different nationalities along with the number of hosts of each nationality.,1,"SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",This virtual table summarizes the number of hosts grouped by their nationality from the 'host' table. The placeholder in the COUNT function allows for dynamic counting of hosts based on their nationality.
train.2677,party_host,Which nations have both hosts of age above 45 and hosts of age below 35?,1,SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Nationality FROM HOST WHERE Age  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Nationality FROM HOST WHERE Age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of nationalities of hosts from the 'host' table who are either older than a specified age or younger than another specified age. The placeholders in the query represent the age limits for filtering the hosts.
train.2678,party_host,Show the themes of parties and the names of the party hosts.,1,"SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID","This virtual table describes the themes of parties along with the names of the hosts associated with those parties. The query combines data from the 'party', 'host', and 'party_host' tables to provide a comprehensive view of which hosts are linked to which party themes."
train.2680,party_host,Show the locations of parties and the names of the party hosts in ascending order of the age of the host.,1,"SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age","This virtual table provides a list of host names along with the locations of the parties they are associated with. The data is retrieved from the 'party', 'host', and 'party_host' tables, and is ordered by the age of the hosts."
train.2682,party_host,Show the locations of parties with hosts older than 50.,1,SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the locations of parties from the 'party' table where the hosts, linked through the 'party_host' table, are older than a specified age. The placeholder in the WHERE clause represents the age of the hosts."
train.2684,party_host,Show the host names for parties with number of hosts greater than 20.,1,SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of hosts from the 'host' table who are associated with parties in the 'party' table that have a total number of hosts exceeding a specified number. The placeholder in the WHERE clause represents the minimum number of hosts required for the parties.
train.2686,party_host,Show the name and the nationality of the oldest host.,1,"SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of host names and their nationalities from the 'host' table, ordered by age in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.2688,party_host,List the names of hosts who did not serve as a host of any party in our record.,1,SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host),"This virtual table lists the names of hosts from the 'host' table who are not associated with any party. The subquery checks for hosts that are linked to parties through the 'party_host' table, and the placeholder in the NOT IN clause represents the host identifiers."
train.2692,storm_record,Show all region code and region name sorted by the codes.,1,"SELECT region_code ,  region_name FROM region ORDER BY region_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT region_code ,  region_name FROM region ORDER BY region_code","This virtual table provides a list of region codes and their corresponding names from the 'region' table, sorted by the region code. This allows users to easily identify and reference regions based on their codes."
train.2694,storm_record,List all region names in alphabetical order.,1,SELECT region_name FROM region ORDER BY region_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT region_name FROM region ORDER BY region_name,"This virtual table lists the names of regions from the 'region' table, sorted in alphabetical order. There are no filters applied, so all regions will be included in the result set."
train.2696,storm_record,Show names for all regions except for Denmark.,1,SELECT region_name FROM region WHERE region_name != 'Denmark',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT region_name FROM region WHERE region_name != [PLACEHOLDER-TYPE:STRING],"This virtual table provides the names of regions from the 'region' table, excluding a specific region name. The placeholder in the WHERE clause represents the name of the region to be excluded."
train.2698,storm_record,How many storms had death records?,1,SELECT count(*) FROM storm WHERE Number_Deaths  >  0,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM storm WHERE Number_Deaths  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of storms from the 'storm' table that have resulted in a number of deaths exceeding a specified threshold. The placeholder in the WHERE clause represents the minimum number of deaths to filter the storms.
train.2700,storm_record,"List name, dates active, and number of deaths for all storms with at least 1 death.",1,"SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides information about storms, specifically their names, active dates, and the number of deaths attributed to them. The placeholder in the WHERE clause allows filtering storms based on a minimum number of deaths."
train.2702,storm_record,Show the average and maximum damage for all storms with max speed higher than 1000.,1,"SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the average and maximum estimated damage caused by storms from the 'storm' table, specifically for those storms that have a maximum wind speed exceeding a specified threshold. The placeholder in the WHERE clause represents the wind speed limit."
train.2704,storm_record,What is the total number of deaths and damage for all storms with a max speed greater than the average?,1,"SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",This virtual table summarizes the total number of deaths and estimated damage caused by storms from the 'storm' table that have a maximum wind speed greater than the average maximum wind speed of all storms. The placeholders in the query allow for dynamic filtering based on storm characteristics.
train.2706,storm_record,List name and damage for all storms in a descending order of max speed.,1,"SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC","This virtual table provides the names of storms along with their estimated damages in millions of USD from the 'storm' table, sorted by the maximum wind speed in descending order. The sorting allows users to quickly identify the most severe storms based on wind speed and their associated damages."
train.2708,storm_record,How many regions are affected?,1,SELECT count(DISTINCT region_id) FROM affected_region,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT region_id) FROM affected_region,"This virtual table provides the count of distinct regions that were affected by storms, as recorded in the 'affected_region' table. The placeholder in the SELECT clause represents the unique identifier for each region."
train.2710,storm_record,Show the name for regions not affected.,1,SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region),"This virtual table lists the names of regions from the 'region' table that were not affected by any storm. The query uses a subquery to filter out regions that have been impacted by storms, ensuring that only unaffected regions are displayed."
train.2715,storm_record,How many regions were affected by each storm?,1,"SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",This virtual table provides the names of storms along with the count of regions affected by each storm. The placeholder in the query allows for dynamic counting of affected regions based on the storm's unique identifier.
train.2716,storm_record,What is the storm name and max speed which affected the greatest number of regions?,1,"SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and maximum wind speeds of storms from the 'storm' table, along with a count of how many regions were affected by each storm. The results are grouped by storm identifier and ordered by the number of affected regions in descending order, with a limit on the number of results specified by a placeholder for numeric values."
train.2718,storm_record,Show the name of storms which don't have affected region in record.,1,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),This virtual table lists the names of storms from the 'storm' table that did not affect any region. The placeholder in the WHERE clause is used to filter out storms that are present in the 'affected_region' table.
train.2720,storm_record,Show storm name with at least two regions and 10 cities affected.,1,SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies storms that have affected a significant number of regions and cities. It retrieves the names of storms from the 'storm' table, joining it with the 'affected_region' table to filter storms based on the count of affected regions and the total number of cities impacted. The placeholders represent the minimum thresholds for the number of affected regions and the total number of cities affected."
train.2722,storm_record,Show all storm names except for those with at least two affected regions.,1,SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of storms from the 'storm' table that have not affected a specified number of regions. The placeholder in the HAVING clause represents the minimum count of affected regions required to exclude a storm from the results.
train.2724,storm_record,What are the region names affected by the storm with a number of deaths of least 10?,1,SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of regions that were affected by storms resulting in a specified number of deaths. The query joins the 'affected_region' table with the 'region' table to retrieve the region names, and it also joins with the 'storm' table to filter based on the number of deaths attributed to those storms. The placeholder in the WHERE clause represents the minimum number of deaths to filter the results."
train.2726,storm_record,"Show all storm names affecting region ""Denmark"".",1,SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of storms that have affected a specific region. The query joins the 'affected_region' table with the 'region' table to filter by the region's name, and then it joins with the 'storm' table to retrieve the storm names. The placeholder in the WHERE clause represents the name of the region being queried."
train.2728,storm_record,Show the region name with at least two storms.,1,SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of regions from the 'region' table that have been affected by storms, specifically those regions where the number of affected cities meets or exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum count of affected cities required for a region to be included in the results."
train.2732,storm_record,Find the name of the storm that affected both Afghanistan and Albania regions.,1,SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the names of storms that have affected two specific regions. The query uses joins to connect the 'affected_region', 'region', and 'storm' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the regions being queried, allowing for the retrieval of storm names that impacted both regions."
train.2734,election,How many counties are there in total?,1,SELECT count(*) FROM county,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM county,"This virtual table provides a count of all counties from the 'county' table. It does not filter or group the results, thus returning the total number of counties present in the database."
train.2736,election,Show the county name and population of all counties.,1,"SELECT County_name ,  Population FROM county",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT County_name ,  Population FROM county","This virtual table provides the names and populations of counties from the 'county' table. It does not include any filtering criteria, allowing for a comprehensive view of all counties and their respective populations."
train.2738,election,Show the average population of all counties.,1,SELECT avg(Population) FROM county,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Population) FROM county,This virtual table calculates the average population of counties from the 'county' table. The result will provide a single numeric value representing the mean population across all counties.
train.2740,election,Return the maximum and minimum population among all counties.,1,"SELECT max(Population) ,  min(Population) FROM county",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Population) ,  min(Population) FROM county",This virtual table provides the maximum and minimum population values from the 'county' table. The query aggregates the population data to give insights into the range of populations across different counties.
train.2742,election,Show all the distinct districts for elections.,1,SELECT DISTINCT District FROM election,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT District FROM election,"This virtual table provides a list of unique electoral districts from the 'election' table. The query uses the DISTINCT keyword to ensure that each district is only listed once, regardless of how many elections it may have been involved in."
train.2744,election,"Show the zip code of the county with name ""Howard"".",1,SELECT Zip_code FROM county WHERE County_name  =  'Howard',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Zip_code FROM county WHERE County_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the postal code associated with a specific county from the 'county' table. The placeholder in the WHERE clause represents the name of the county being queried.
train.2746,election,Show the delegate from district 1 in election.,1,SELECT Delegate FROM election WHERE District  =  1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Delegate FROM election WHERE District  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the delegates representing elections from the 'election' table for a specific electoral district. The placeholder in the WHERE clause represents the district's identifier.
train.2748,election,Show the delegate and committee information of elections.,1,"SELECT Delegate ,  Committee FROM election",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Delegate ,  Committee FROM election",This virtual table provides information about the delegates and committees associated with elections from the 'election' table. The placeholders represent the specific details of the elections being queried.
train.2750,election,How many distinct governors are there?,1,SELECT count(DISTINCT Governor) FROM party,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Governor) FROM party,This virtual table provides the count of distinct votes received by governor candidates from the 'party' table. The result will indicate how many unique vote counts were recorded for the governor position across different elections.
train.2756,election,Show all the information about election.,1,SELECT * FROM election,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM election,"This virtual table provides a comprehensive view of all elections recorded in the 'election' table, including details such as the unique election identifier, the counties represented, the electoral district, the delegate, the associated political party, the year the delegate was first elected, and the overseeing committee."
train.2758,election,Show the delegates and the names of county they belong to.,1,"SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District","This virtual table provides a list of delegates along with the names of the counties they represent. The data is sourced from the 'county' and 'election' tables, where the counties are matched with their corresponding electoral districts through a join operation."
train.2760,election,Which delegates are from counties with population smaller than 100000?,1,SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the delegates representing elections in counties with a population below a specified threshold. The placeholder in the WHERE clause represents the population limit.
train.2762,election,How many distinct delegates are from counties with population larger than 50000?,1,SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table counts the distinct delegates from the 'election' table who represent counties from the 'county' table with a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.
train.2764,election,"What are the names of the county that the delegates on ""Appropriations"" committee belong to?",1,SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  'Appropriations',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of counties from the 'county' table that are associated with elections overseen by a specific committee. The placeholder in the WHERE clause represents the name of the committee.
train.2766,election,Show the delegates and the names of the party they belong to.,1,"SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID","This virtual table describes the delegates and their associated political parties from the 'election' and 'party' tables. The join condition links the 'Party' column in the 'election' table with the 'Party_ID' in the 'party' table, allowing for the retrieval of party information for each delegate."
train.2768,election,Who were the governors of the parties associated with delegates from district 1?,1,SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the number of votes received by the governor candidate from the 'party' table for a specific electoral district represented in the 'election' table. The placeholder in the WHERE clause represents the district's identifier.
train.2770,election,Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?,1,SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  [PLACEHOLDER-TYPE:NUMBER] OR T1.District  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the comptroller votes received in elections from the 'election' table, filtered by specific electoral districts. The placeholders in the WHERE clause represent the district identifiers for which the comptroller votes are being queried."
train.2774,election,Show the name of each county along with the corresponding number of delegates from that county.,1,"SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id","This virtual table provides a count of elections held in each county, displaying the county names alongside the number of elections. The placeholder in the COUNT function allows for dynamic counting based on the counties represented in the election table."
train.2778,election,Return the names of all counties sorted by population in ascending order.,1,SELECT County_name FROM county ORDER BY Population ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT County_name FROM county ORDER BY Population ASC,"This virtual table lists the names of counties from the 'county' table, ordered by their population in ascending order. This allows users to see which counties have the smallest populations at the top of the list."
train.2780,election,Return the names of all counties sorted by county name in descending alphabetical order.,1,SELECT County_name FROM county ORDER BY County_name DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT County_name FROM county ORDER BY County_name DESC,"This virtual table lists the names of counties from the 'county' table, sorted in descending order. The query retrieves the 'County_name' column and organizes the results based on the county names in reverse alphabetical order."
train.2782,election,Show the name of the county with the biggest population.,1,SELECT County_name FROM county ORDER BY Population DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT County_name FROM county ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of counties from the 'county' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of counties to display."
train.2784,election,Show the 3 counties with the smallest population.,1,SELECT County_name FROM county ORDER BY Population ASC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT County_name FROM county ORDER BY Population ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of counties from the 'county' table, ordered by their population in ascending order. The placeholder in the LIMIT clause represents the maximum number of counties to be returned."
train.2786,election,Show the names of counties that have at least two delegates.,1,SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of counties from the 'county' table that have participated in a certain number of elections. The placeholder in the HAVING clause represents the minimum count of elections a county must have participated in to be included in the results.
train.2788,election,Show the name of the party that has at least two records.,1,SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the political parties that have received a significant number of votes in elections. The placeholder in the HAVING clause represents the minimum count of votes that a party must have received to be included in the results.
train.2796,election,What are the names of parties that do not have delegates in election?,1,SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election),This virtual table lists the political parties from the 'party' table that did not participate in any election. The placeholder in the WHERE clause represents the unique identifier for the political parties.
train.2802,news_report,How many journalists are there?,1,SELECT count(*) FROM journalist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM journalist,"This virtual table provides the total count of journalists from the 'journalist' table. It does not filter or group the data, simply returning the number of entries present in the table."
train.2803,news_report,List the names of journalists in ascending order of years working.,1,SELECT Name FROM journalist ORDER BY Years_working ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM journalist ORDER BY Years_working ASC,"This virtual table lists the names of journalists from the 'journalist' table, ordered by their years of experience in ascending order. This allows users to see which journalists are relatively new to the field compared to their more experienced counterparts."
train.2804,news_report,What are the nationalities and ages of journalists?,1,"SELECT Nationality ,  Age FROM journalist",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Nationality ,  Age FROM journalist",This virtual table describes the nationality and age of journalists from the 'journalist' table. The query retrieves these specific attributes for all journalists listed in the database.
train.2805,news_report,"Show the names of journalists from ""England"" or ""Wales"".",1,SELECT Name FROM journalist WHERE Nationality  =  'England' OR Nationality  =  'Wales',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM journalist WHERE Nationality  =  [PLACEHOLDER-TYPE:STRING] OR Nationality  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of journalists from the 'journalist' table who belong to specific nationalities. The placeholders in the WHERE clause represent the nationalities being queried.
train.2806,news_report,What is the average number of years spent working as a journalist?,1,SELECT avg(Years_working) FROM journalist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Years_working) FROM journalist,This virtual table calculates the average number of years that journalists have been active in the field. The placeholder in the SELECT clause represents the average value of the 'Years_working' column from the 'journalist' table.
train.2807,news_report,What is the nationality of the journalist with the largest number of years working?,1,SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of journalists' nationalities from the 'journalist' table, ordered by their years of experience in descending order. The placeholder in the LIMIT clause indicates the maximum number of nationalities to return."
train.2808,news_report,Show the different nationalities and the number of journalists of each nationality.,1,"SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",This virtual table summarizes the number of journalists grouped by their nationality from the 'journalist' table. The placeholder in the COUNT function represents the count of journalists for each nationality.
train.2810,news_report,Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.,1,SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Nationality FROM journalist WHERE Years_working  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the nationalities of journalists who have been active in the field for a number of years that is both greater than and less than specified thresholds. The placeholders in the query represent the years of experience that journalists must exceed or fall below.
train.2811,news_report,"Show the dates, places, and names of events in descending order of the attendance.",1,"SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC","This virtual table provides a list of events, including their dates, names, and venues, sorted by the number of attendees in descending order. The sorting allows users to easily identify the most attended events."
train.2812,news_report,Show the names of journalists and the dates of the events they reported.,1,"SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID","This virtual table provides the names of journalists along with the dates of the events they covered. It combines data from the 'news_report', 'event', and 'journalist' tables, linking them through their respective identifiers. The placeholders in the query represent the necessary identifiers for the joins between the tables."
train.2814,news_report,Show the names of journalists and the number of events they reported.,1,"SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name","This virtual table summarizes the number of reports written by each journalist for various events. It combines data from the 'news_report', 'event', and 'journalist' tables, grouping the results by the journalist's name to show how many reports each journalist has contributed to events."
train.2815,news_report,Show the names of journalists that have reported more than one event.,1,SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of journalists who have covered more than a specified number of events. The query joins the 'news_report', 'event', and 'journalist' tables to aggregate the data based on the journalist's name and filter the results using a placeholder for the minimum count of events covered."
train.2816,news_report,List the names of journalists who have not reported any event.,1,SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report),"This virtual table lists the names of journalists from the 'journalist' table who have not written any reports. The subquery identifies journalists who are linked to reports in the 'news_report' table, and the placeholder in the WHERE clause ensures that only those not present in the subquery are selected."
train.2817,news_report,what are the average and maximum attendances of all events?,1,"SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",This virtual table provides the average and maximum attendance figures for events recorded in the 'event' table. The placeholders in the SELECT statement represent the aggregate functions applied to the 'Event_Attendance' column.
train.2818,news_report,Find the average age and experience working length of journalists working on different role type.,1,"SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type","This virtual table provides the average age and average years of experience of journalists, grouped by the type of work they have reported on. The placeholders in the query represent the necessary fields for calculating these averages and categorizing the results by work type."
train.2819,news_report,List the event venues and names that have the top 2 most number of people attended.,1,"SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of venues and names of events from the 'event' table, ordered by the number of attendees in descending order. The placeholder in the LIMIT clause represents the maximum number of events to display."
train.2821,restaurant_1,What is the address of the restaurant Subway?,1,SELECT Address FROM Restaurant WHERE ResName = 'Subway';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Address FROM Restaurant WHERE ResName = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the physical address of a restaurant from the 'Restaurant' table based on the restaurant's name. The placeholder in the WHERE clause represents the name of the restaurant being queried.
train.2822,restaurant_1,What is the rating of the restaurant Subway?,1,SELECT Rating FROM Restaurant WHERE ResName = 'Subway';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Rating FROM Restaurant WHERE ResName = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the rating of a specific restaurant from the 'Restaurant' table based on its name. The placeholder in the WHERE clause represents the name of the restaurant being queried.
train.2824,restaurant_1,What is the description of the restaurant type Sandwich?,1,SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = 'Sandwich';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the description of a specific type of restaurant from the 'Restaurant_Type' table based on its name. The placeholder in the WHERE clause represents the name of the restaurant type being queried.
train.2826,restaurant_1,What is the age of student Linda Smith?,1,SELECT Age FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Age FROM Student WHERE Fname = [PLACEHOLDER-TYPE:STRING] AND Lname = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the age of a specific student from the 'Student' table based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names.
train.2827,restaurant_1,What is the gender of the student Linda Smith?,1,SELECT Sex FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Sex FROM Student WHERE Fname = [PLACEHOLDER-TYPE:STRING] AND Lname = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the gender of a specific student from the 'Student' table based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names.
train.2828,restaurant_1,List all students' first names and last names who majored in 600.,1,"SELECT Fname , Lname FROM Student WHERE Major  =  600;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Fname , Lname FROM Student WHERE Major  =  [PLACEHOLDER-TYPE:NUMBER];",This virtual table describes the first and last names of students from the 'Student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major's identifier.
train.2829,restaurant_1,Which city does student Linda Smith live in?,1,SELECT city_code FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT city_code FROM Student WHERE Fname = [PLACEHOLDER-TYPE:STRING] AND Lname = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the city code of a student from the 'Student' table based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names.
train.2830,restaurant_1,Advisor 1121 has how many students?,1,SELECT count(*) FROM Student WHERE Advisor =  1121;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Student WHERE Advisor =  [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the count of students from the 'Student' table who are assigned to a specific academic advisor. The placeholder in the WHERE clause represents the advisor's identifier.
train.2831,restaurant_1,Which Advisor has most of students? List advisor and the number of students.,1,"SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the LIMIT clause represents the maximum number of advisors to display, allowing for flexibility in the query results."
train.2832,restaurant_1,Which major has least number of students? List the major and the number of students.,1,"SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];",This virtual table summarizes the number of students in each major from the 'Student' table. The results are grouped by the 'Major' field and ordered by the count of students in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.
train.2833,restaurant_1,Which major has between 2 and 30 number of students? List major and the number of students.,1,"SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];",This virtual table summarizes the number of students enrolled in each major from the 'Student' table. The placeholders in the HAVING clause represent the range of student counts for each major that the user is interested in.
train.2834,restaurant_1,Which student's age is older than 18 and is majoring in 600? List each student's first and last name.,1,"SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Fname , Lname FROM Student WHERE Age  >  [PLACEHOLDER-TYPE:NUMBER] AND Major = [PLACEHOLDER-TYPE:NUMBER];",This virtual table describes the first and last names of students from the 'Student' table who are older than a specified age and are pursuing a specific major. The placeholders in the WHERE clause represent the age and major of the students.
train.2836,restaurant_1,How many restaurant is the Sandwich type restaurant?,1,SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of restaurants grouped by their type from the 'Restaurant' table. It joins the 'Type_Of_Restaurant' and 'Restaurant_Type' tables to filter the results based on a specific restaurant type. The placeholder in the HAVING clause represents the name of the restaurant type being queried.
train.2837,restaurant_1,How long does student Linda Smith spend on the restaurant in total?,1,SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = [PLACEHOLDER-TYPE:STRING] AND Student.Lname = [PLACEHOLDER-TYPE:STRING];,"This virtual table calculates the total amount of money spent by a specific student at restaurants. It retrieves data from the 'Student' and 'Visits_Restaurant' tables, joining them on the student's unique identifier. The placeholders in the WHERE clause represent the first and last names of the student whose spending is being queried."
train.2838,restaurant_1,How many times has the student Linda Smith visited Subway?,1,SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = [PLACEHOLDER-TYPE:STRING] AND Student.Lname = [PLACEHOLDER-TYPE:STRING] AND Restaurant.ResName = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of visits made by a specific student to a particular restaurant. The placeholders in the WHERE clause represent the student's first name, last name, and the restaurant's name."
train.2839,restaurant_1,When did Linda Smith visit Subway?,1,SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = [PLACEHOLDER-TYPE:STRING] AND Student.Lname = [PLACEHOLDER-TYPE:STRING] AND Restaurant.ResName = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the visit times of a specific student to a particular restaurant. The placeholders in the WHERE clause represent the student's first name, last name, and the restaurant's name."
train.2841,restaurant_1,Which student visited restaurant most often? List student's first name and last name.,1,"SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the first and last names of students who have visited restaurants, sorted by the number of visits in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of students to return."
train.2842,customer_deliveries,Find the ids of orders whose status is 'Success'.,1,SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of actual order identifiers from the 'Actual_Orders' table that match a specific order status. The placeholder in the WHERE clause represents the status code of the order.
train.2844,customer_deliveries,Find the number of customers in total.,1,SELECT count(*) FROM customers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM customers,"This virtual table provides the total number of customers recorded in the 'Customers' table. The count function is used to aggregate the number of entries, giving a single numeric result representing the customer count."
train.2845,customer_deliveries,How many different payment methods are there?,1,SELECT count(DISTINCT payment_method) FROM customers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT payment_method) FROM customers,This virtual table provides the count of distinct payment methods used by customers from the 'Customers' table. The result will indicate how many unique payment methods are available among all customers.
train.2847,customer_deliveries,Find the name of the most expensive product.,1,SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_name FROM products ORDER BY product_price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of products from the 'Products' table, ordered by their price in descending order. The placeholder in the LIMIT clause represents the maximum number of product names to be displayed."
train.2849,customer_deliveries,List the names and emails of customers who payed by Visa card.,1,"SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the email addresses and names of customers from the 'Customers' table who prefer a specific payment method. The placeholder in the WHERE clause represents the payment method used by the customers.
train.2850,customer_deliveries,Find the names and phone numbers of customers living in California state.,1,"SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the names and phone numbers of customers from the 'Customers' table who are associated with addresses located in a specific state, province, or county. The placeholders in the WHERE clause represent the state, province, or county name."
train.2851,customer_deliveries,Find the states which do not have any employee in their record.,1,SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees),"The virtual table describes the state, province, or county of addresses from the 'Addresses' table that are not associated with any employee's address. The placeholder in the WHERE clause represents the address identifier."
train.2852,customer_deliveries,"List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",1,"SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer","This virtual table describes the names, phone numbers, and email addresses of customers from the 'Customers' table, ordered by the date they became customers. The query allows for easy retrieval of customer contact information based on their registration date."
train.2855,customer_deliveries,List the names of all routes in alphabetic order.,1,SELECT route_name FROM Delivery_Routes ORDER BY route_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT route_name FROM Delivery_Routes ORDER BY route_name,"This virtual table lists the names of delivery routes from the 'Delivery_Routes' table, sorted in ascending order. The query retrieves the 'route_name' column and orders the results by this column."
train.2858,icfp_1,How many authors are there?,1,SELECT count(*) FROM authors,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM authors,This virtual table provides the total number of authors from the 'Authors' table. The query uses the count function to aggregate the number of entries in the authors table.
train.2860,icfp_1,How many institutions are there?,1,SELECT count(*) FROM inst,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM inst,This virtual table provides a count of all institutions recorded in the 'Inst' table. The query uses the count function to aggregate the total number of entries in the table.
train.2862,icfp_1,How many papers are published in total?,1,SELECT count(*) FROM papers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM papers,"This virtual table provides a count of all papers recorded in the 'Papers' table. The query uses the count function to aggregate the total number of entries in the table, which is useful for understanding the volume of published papers."
train.2864,icfp_1,"What are the titles of papers published by ""Jeremy Gibbons""?",1,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  'Jeremy' AND t1.lname  =  'Gibbons',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of papers authored by a specific author from the 'Authors' table. The placeholders in the WHERE clause represent the author's first and last names.
train.2866,icfp_1,"Find all the papers published by ""Aaron Turon"".",1,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  'Aaron' AND t1.lname  =  'Turon',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of papers authored by a specific author identified by their first and last names. The placeholders in the WHERE clause represent the author's first and last names.
train.2868,icfp_1,"How many papers have ""Atsushi Ohori"" published?",1,SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  'Atsushi' AND t1.lname  =  'Ohori',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of papers authored by a specific author identified by their first and last name. The query joins the 'Authors', 'Authorship', and 'Papers' tables to filter the results based on the author's name, using placeholders for the first and last names."
train.2870,icfp_1,"What is the name of the institution that ""Matthias Blume"" belongs to?",1,SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  'Matthias' AND t1.lname  =  'Blume',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the distinct names of institutions associated with a specific author from the 'Authors' table. The placeholders in the WHERE clause represent the author's first and last names.
train.2872,icfp_1,"Which institution does ""Katsuhiro Ueno"" belong to?",1,SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  'Katsuhiro' AND t1.lname  =  'Ueno',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct institution names associated with a specific author identified by their first and last names. The placeholders in the WHERE clause represent the author's first and last names.
train.2876,icfp_1,"Which authors belong to the institution ""Google""? Show the first names and last names.",1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  'Google'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a list of distinct first and last names of authors affiliated with institutions located in a specific country. The placeholders in the WHERE clause represent the name of the institution.
train.2878,icfp_1,"What are the last names of the author of the paper titled ""Binders Unbound""?",1,SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  'Binders Unbound',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the last names of authors from the 'Authors' table who have authored a specific paper. The query joins the 'Authors', 'Authorship', and 'Papers' tables to filter authors based on the title of the paper, with a placeholder representing the paper's title."
train.2882,icfp_1,"What are the papers published under the institution ""Indiana University""?",1,SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  'Indiana University',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct titles of papers from the 'Papers' table that are associated with authors from a specific institution. The placeholder in the WHERE clause represents the name of the institution.
train.2884,icfp_1,"Find all the papers published by the institution ""Google"".",1,SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  'Google',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct titles of papers from the 'Papers' table that are associated with authors from a specific institution. The placeholder in the WHERE clause represents the name of the institution.
train.2886,icfp_1,"How many papers are published by the institution ""Tokohu University""?",1,SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  'Tokohu University',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the distinct titles of papers from the 'Papers' table that are associated with authors from a specific institution. The placeholder in the WHERE clause represents the name of the institution.
train.2889,icfp_1,"How many papers are written by authors from the institution ""University of Pennsylvania""?",1,SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  'University of Pennsylvania',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the distinct titles of papers from the 'Papers' table that are associated with authors from a specific institution. The placeholder in the WHERE clause represents the name of the institution.
train.2890,icfp_1,"Find the papers which have ""Olin Shivers"" as an author.",1,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  'Olin' AND t1.lname  =  'Shivers',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of papers authored by a specific author from the 'Authors' table. The placeholders in the WHERE clause represent the author's first and last names.
train.2892,icfp_1,"Which papers have ""Stephanie Weirich"" as an author?",1,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  'Stephanie' AND t1.lname  =  'Weirich',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  [PLACEHOLDER-TYPE:STRING] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of papers authored by a specific author from the 'Authors' table. The placeholders in the WHERE clause represent the author's first and last names.
train.2894,icfp_1,"Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?",1,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  'USA' AND t2.authorder  =  2 AND t1.lname  =  'Turon',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  [PLACEHOLDER-TYPE:STRING] AND t2.authorder  =  [PLACEHOLDER-TYPE:NUMBER] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the titles of papers authored by individuals from a specific institution located in a particular country. The placeholders in the WHERE clause represent the country name, the author's order in the list, and the author's last name."
train.2896,icfp_1,"Find the titles of papers whose first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""?",1,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  'Japan' AND t2.authorder  =  1 AND t1.lname  =  'Ohori',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  [PLACEHOLDER-TYPE:STRING] AND t2.authorder  =  [PLACEHOLDER-TYPE:NUMBER] AND t1.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the titles of papers authored by individuals from a specific institution located in a particular country. The placeholders in the WHERE clause represent the country name, the author's order in the list, and the author's last name."
train.2898,icfp_1,What is the last name of the author that has published the most papers?,1,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of last names of authors who have contributed to papers, ordered by the number of contributions in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of authors to retrieve."
train.2902,icfp_1,Find the name of the organization that has published the largest number of papers.,1,SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of institution names from the 'Inst' table that have authored papers, ordered by the number of papers in descending order. The placeholder in the LIMIT clause represents the maximum number of institutions to return."
train.2904,icfp_1,"Find the titles of the papers that contain the word ""ML"".",1,SELECT title FROM papers WHERE title LIKE '%ML%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM papers WHERE title LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of papers from the 'Papers' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the paper titles.
train.2906,icfp_1,"Which paper's title contains the word ""Database""?",1,SELECT title FROM papers WHERE title LIKE '%Database%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM papers WHERE title LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of papers from the 'Papers' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the paper titles.
train.2908,icfp_1,"Find the first names of all the authors who have written a paper with title containing the word ""Functional"".",1,SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Functional%',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of authors from the 'Authors' table who have contributed to papers with a specific title. The query joins the 'Authors', 'Authorship', and 'Papers' tables to filter authors based on the title of the paper, with a placeholder for the title in the WHERE clause."
train.2910,icfp_1,"Find the last names of all the authors that have written a paper with title containing the word ""Monadic"".",1,SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of authors from the 'Authors' table who have authored papers with a specific title. The placeholder in the WHERE clause represents the title of the paper.
train.2912,icfp_1,Retrieve the title of the paper that has the largest number of authors.,1,SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship),"This virtual table describes the titles of papers authored by the last author in the list of authors for each paper. The query joins the 'Authorship' table with the 'Papers' table to retrieve the titles, and it filters the results to include only those papers where the author is the last in the order of authorship, determined by a subquery that finds the maximum author order."
train.2914,icfp_1,"What is the first name of the author with last name ""Ueno""?",1,SELECT fname FROM authors WHERE lname  =  'Ueno',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT fname FROM authors WHERE lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the first names of authors from the 'Authors' table who have a specific last name. The placeholder in the WHERE clause represents the last name of the author.
train.2916,icfp_1,"Find the last name of the author with first name ""Amal"".",1,SELECT lname FROM authors WHERE fname  =  'Amal',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT lname FROM authors WHERE fname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of authors from the 'Authors' table who have a specific first name. The placeholder in the WHERE clause represents the first name of the author.
train.2918,icfp_1,Find the first names of all the authors ordered in alphabetical order.,1,SELECT fname FROM authors ORDER BY fname,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT fname FROM authors ORDER BY fname,"This virtual table describes the first names of authors from the 'Authors' table, sorted in ascending order. The query retrieves the 'fname' column and organizes the results based on the alphabetical order of the first names."
train.2920,icfp_1,Retrieve all the last names of authors in alphabetical order.,1,SELECT lname FROM authors ORDER BY lname,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT lname FROM authors ORDER BY lname,"This virtual table lists the last names of authors from the 'Authors' table, sorted in alphabetical order. The query retrieves the 'lname' column and organizes the results based on the last names."
train.2922,icfp_1,Retrieve all the first and last names of authors in the alphabetical order of last names.,1,"SELECT fname ,  lname FROM authors ORDER BY lname",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT fname ,  lname FROM authors ORDER BY lname","This virtual table provides the first and last names of authors from the 'Authors' table, sorted by their last names. The query retrieves all authors without any filtering, ensuring a comprehensive list of names."
train.2924,sakila_1,How many different last names do the actors and actresses have?,1,SELECT count(DISTINCT last_name) FROM actor,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT last_name) FROM actor,"This virtual table provides the count of unique last names from the 'actor' table, which represents the distinct actors in the database. The query uses a placeholder to allow for potential filtering or additional conditions in the future."
train.2930,sakila_1,Which districts have at least two addresses?,1,SELECT district FROM address GROUP BY district HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT district FROM address GROUP BY district HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of districts from the 'address' table that have a specified minimum number of associated addresses. The placeholder in the HAVING clause represents the minimum count of addresses required for a district to be included in the results.
train.2932,sakila_1,What is the phone number and postal code of the address 1031 Daugavpils Parkway?,1,"SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT phone ,  postal_code FROM address WHERE address  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the phone number and postal code from the 'address' table for a specific address. The placeholder in the WHERE clause represents the address line being queried.
train.2934,sakila_1,"Which city has the most addresses? List the city name, number of addresses, and city id.",1,"SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of the number of addresses associated with each city from the 'address' and 'city' tables. It groups the results by city and orders them in descending order based on the count of addresses, with a limit on the number of results returned as specified by the placeholder."
train.2936,sakila_1,How many addresses are in the district of California?,1,SELECT count(*) FROM address WHERE district  =  'California',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM address WHERE district  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of addresses located in a specific district from the 'address' table. The placeholder in the WHERE clause represents the name of the district.
train.2939,sakila_1,What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?,1,"SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT title ,  film_id FROM film WHERE rental_rate  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of film titles and their identifiers from the 'film' table that meet two criteria: first, the rental rate matches a specified value, and second, the film is available in inventory with a count of items less than a specified number. The placeholders in the query represent the rental rate and the maximum inventory count."
train.2940,sakila_1,How many cities are in Australia?,1,SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of cities from the 'city' table that are associated with a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country.
train.2943,sakila_1,What are the countries that contain 3 or more cities?,1,SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the countries that have a significant number of associated cities. The placeholder in the HAVING clause represents the minimum count of cities required for a country to be included in the results.
train.2945,sakila_1,What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?,1,SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT payment_date FROM payment WHERE amount  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of payment dates from the 'payment' table where the payment amount exceeds a specified value. Additionally, it includes payment dates from the same table where the associated staff member's first name matches a given name. The placeholders in the query represent the amount and the staff member's first name."
train.2946,sakila_1,How many customers have an active value of 1?,1,SELECT count(*) FROM customer WHERE active = '1',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM customer WHERE active = [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of customers from the 'customer' table who are marked as active. The placeholder in the WHERE clause represents the active status of the customers.
train.2948,sakila_1,Which film has the highest rental rate? And what is the rate?,1,"SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of film titles along with their rental rates from the 'film' table, sorted in descending order by rental rate. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.2950,sakila_1,"Which film has the most number of actors or actresses? List the film name, film id and description.",1,"SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of film titles, their unique identifiers, and descriptions from the 'film' table. It retrieves films associated with actors from the 'film_actor' table, grouping the results by film ID to count the number of actors per film. The results are ordered by the number of actors in descending order, and a placeholder is included to limit the number of results returned."
train.2952,sakila_1,"Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",1,"SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of actors along with their first and last names from the 'actor' table, based on their appearances in films. The results are grouped by actor ID and ordered by the number of films they have acted in, with a limit set by a placeholder for the maximum number of actors to display."
train.2954,sakila_1,Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.,1,"SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first and last names of actors who have appeared in more than a specified number of films. The placeholder in the HAVING clause represents the minimum count of films an actor must have appeared in to be included in the results.
train.2957,sakila_1,What is the id of the store that has the most items in inventory?,1,SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of store identifiers from the 'inventory' table, grouped by store. The results are ordered by the number of inventory items in each store in descending order, allowing users to see which stores have the most inventory. The placeholder in the LIMIT clause represents the maximum number of store identifiers to return."
train.2958,sakila_1,What is the total amount of all payments?,1,SELECT sum(amount) FROM payment,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(amount) FROM payment,This virtual table calculates the total amount of payments made by customers from the 'payment' table. The query uses the SUM function to aggregate the payment amounts.
train.2960,sakila_1,"Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",1,"SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customers along with their first and last names from the 'customer' table, who have made payments. The results are grouped by customer ID and ordered by the total payment amount in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.2962,sakila_1,What is the genre name of the film HUNGER ROOF?,1,SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of categories associated with a specific film title from the 'category' table. The placeholders in the JOIN clauses represent the relationships between categories and films, while the placeholder in the WHERE clause represents the film's title."
train.2964,sakila_1,"How many films are there in each category? List the genre name, genre id and the count.",1,"SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id","This virtual table summarizes the number of films in each category from the 'film_category' and 'category' tables. It displays the category name and its corresponding identifier, along with the count of films associated with each category."
train.2967,sakila_1,What is the title and id of the film that has the greatest number of copies in inventory?,1,"SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of film titles and their corresponding identifiers from the 'film' table, along with the count of how many times each film appears in the inventory. The results are grouped by film identifier and ordered by the frequency of inventory items in descending order, with a limit on the number of results returned based on a specified number."
train.2968,sakila_1,What is the film title and inventory id of the item in the inventory which was rented most frequently?,1,"SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of film titles along with their corresponding inventory IDs from the 'film' and 'inventory' tables. It joins these tables based on the film ID and further joins with the 'rental' table to count the number of rentals for each inventory item. The results are grouped by inventory ID and ordered by the count of rentals in descending order, with a limit specified by a placeholder for numeric values."
train.2970,sakila_1,How many languages are in these films?,1,SELECT count(DISTINCT language_id) FROM film,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT language_id) FROM film,The virtual table provides a count of distinct languages used in the films available in the 'film' table. The placeholder in the SELECT statement represents the unique language identifiers associated with the films.
train.2972,sakila_1,What are all the movies rated as R? List the titles.,1,SELECT title FROM film WHERE rating  =  'R',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM film WHERE rating  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of films from the 'film' table that have a specific rating. The placeholder in the WHERE clause represents the film's rating.
train.2974,sakila_1,Where is store 1 located?,1,SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the address of a specific store from the 'store' table by joining it with the 'address' table. The placeholder in the WHERE clause represents the unique identifier of the store.
train.2976,sakila_1,Which staff handled least number of payments? List the full name and the id.,1,"SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of staff members along with their first names, last names, and unique identifiers. It retrieves data from the 'staff' table and joins it with the 'payment' table to count the number of payments processed by each staff member. The results are grouped by staff ID and ordered by the count of payments in ascending order, allowing users to see which staff members have processed the least number of payments, limited to a specified number of results."
train.2978,sakila_1,Which language does the film AIRPORT POLLOCK use? List the language name.,1,SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of languages associated with a specific film title from the 'film' table. The placeholder in the WHERE clause represents the title of the film.
train.2980,sakila_1,How many stores are there?,1,SELECT count(*) FROM store,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM store,"This virtual table provides the total number of stores recorded in the 'store' table. The query counts all entries in the store table, which helps in understanding the scale of the store operations."
train.2982,sakila_1,How many kinds of different ratings are listed?,1,SELECT count(DISTINCT rating) FROM film,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT rating) FROM film,This virtual table provides the count of distinct film ratings from the 'film' table. The result will indicate how many unique ratings are available for the films.
train.2984,sakila_1,Which movies have 'Deleted Scenes' as a substring in the special feature?,1,SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM film WHERE special_features LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of films from the 'film' table that have specific special features. The placeholder in the WHERE clause represents the special features criteria to filter the films.
train.2986,sakila_1,How many items in inventory does store 1 have?,1,SELECT count(*) FROM inventory WHERE store_id  =  1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM inventory WHERE store_id  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the total count of inventory items available in a specific store. The placeholder in the WHERE clause represents the unique identifier for the store.
train.2988,sakila_1,When did the first payment happen?,1,SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of payment dates from the 'payment' table, ordered in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of payment dates to retrieve."
train.2992,sakila_1,"Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",1,SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT title FROM film WHERE LENGTH  >  [PLACEHOLDER-TYPE:NUMBER] OR rating  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT title FROM film WHERE replacement_cost  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the titles of films from the 'film' table that either have a length greater than a specified number or have a specific rating. Additionally, it excludes titles of films that have a replacement cost greater than a specified number. The placeholders in the WHERE clause represent the length, rating, and replacement cost criteria."
train.2994,sakila_1,What is the first name and the last name of the customer who made the earliest rental?,1,"SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of first and last names of customers who have made rentals, ordered by the date of rental in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.2996,sakila_1,What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?,1,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  [PLACEHOLDER-TYPE:STRING] AND T3.last_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the distinct first and last names of staff members who have processed rentals for a specific customer. The placeholders in the WHERE clause represent the first and last names of the customer.
train.2999,sakila_1,Return the id of the store with the most customers.,1,SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of store identifiers from the 'customer' table, grouped by store. The results are ordered by the number of customers associated with each store in descending order, allowing users to see which stores have the most customers. The placeholder in the LIMIT clause represents the maximum number of store identifiers to return."
train.3000,sakila_1,What is the largest payment amount?,1,SELECT amount FROM payment ORDER BY amount DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT amount FROM payment ORDER BY amount DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of payment amounts from the 'payment' table, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of top payment amounts to retrieve."
train.3002,sakila_1,Where does the staff member with the first name Elsa live?,1,SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the addresses of staff members from the 'staff' table based on a specific first name. The placeholder in the WHERE clause represents the first name of the staff member being queried.
train.3005,sakila_1,Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.,1,SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  [PLACEHOLDER-TYPE:STRING] ),This virtual table describes the first names of customers from the 'customer' table who have not made any rentals after a specified date. The placeholder in the WHERE clause represents the date to filter the rental records.
train.3006,loan_1,How many bank branches are there?,1,SELECT count(*) FROM bank,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM bank,"This virtual table provides the total number of bank branches recorded in the 'bank' table. The query counts all entries in the table, which gives an overview of the bank's presence across different locations."
train.3009,loan_1,What is the total number of customers across banks?,1,SELECT sum(no_of_customers) FROM bank,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(no_of_customers) FROM bank,This virtual table provides the total number of customers across all bank branches from the 'bank' table. The query aggregates the 'no_of_customers' column to give a single sum value representing the overall customer count.
train.3010,loan_1,Find the number of customers in the banks at New York City.,1,SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(no_of_customers) FROM bank WHERE city  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of customers from all bank branches located in a specific city. The placeholder in the WHERE clause represents the name of the city.
train.3012,loan_1,Find the average number of customers in all banks of Utah state.,1,SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(no_of_customers) FROM bank WHERE state  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average number of customers from the 'bank' table for branches located in a specific state. The placeholder in the WHERE clause represents the state name.
train.3014,loan_1,Find the average number of customers cross all banks.,1,SELECT avg(no_of_customers) FROM bank,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(no_of_customers) FROM bank,This virtual table calculates the average number of customers across all bank branches from the 'bank' table. The result provides insight into the customer distribution among branches.
train.3016,loan_1,Find the city and state of the bank branch named morningside.,1,"SELECT city ,  state FROM bank WHERE bname  =  'morningside'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT city ,  state FROM bank WHERE bname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the cities and states of bank branches from the 'bank' table that match a specific branch name. The placeholder in the WHERE clause represents the name of the bank branch.
train.3018,loan_1,Find the branch names of banks in the New York state.,1,SELECT bname FROM bank WHERE state  =  'New York',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT bname FROM bank WHERE state  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of bank branches located in a specific state from the 'bank' table. The placeholder in the WHERE clause represents the state name.
train.3020,loan_1,List the name of all customers sorted by their account balance in ascending order.,1,SELECT cust_name FROM customer ORDER BY acc_bal,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT cust_name FROM customer ORDER BY acc_bal,"This virtual table lists the names of customers from the 'customer' table, ordered by their account balance. The ordering allows for easy identification of customers based on their financial standing, with the placeholder indicating that the results will be sorted according to the account balance."
train.3023,loan_1,"What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount),"This virtual table lists the names of customers from the 'customer' table who have taken out loans, ordered by the total amount of loans they have taken. The placeholder in the query allows for dynamic filtering based on customer identifiers."
train.3024,loan_1,"Find the state, account type, and credit score of the customer whose number of loan is 0.",1,"SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides information about customers from the 'customer' table who have taken a specific number of loans. It includes the state where the customer resides, the type of account they hold, and their credit score. The placeholder in the WHERE clause represents the number of loans taken by the customer."
train.3026,loan_1,Find the number of different cities which banks are located at.,1,SELECT count(DISTINCT city) FROM bank,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT city) FROM bank,"This virtual table provides the count of distinct cities where bank branches are located. The query counts unique city entries from the 'bank' table, which helps in understanding the geographical distribution of bank branches."
train.3028,loan_1,Find the number of different states which banks are located at.,1,SELECT count(DISTINCT state) FROM bank,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT state) FROM bank,This virtual table provides the count of distinct states where bank branches are located. The placeholder in the SELECT clause indicates that the result will be a numeric value representing the number of unique states.
train.3030,loan_1,How many distinct types of accounts are there?,1,SELECT count(DISTINCT acc_type) FROM customer,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT acc_type) FROM customer,This virtual table provides the count of distinct account types held by customers in the 'customer' table. The result indicates the variety of account types available across all customers.
train.3032,loan_1,Find the name and account balance of the customer whose name includes the letter ‘a’.,1,"SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and account balances of customers from the 'customer' table whose names match a specific pattern. The placeholder in the WHERE clause represents the customer's name pattern to filter results.
train.3036,loan_1,Find the name of customers who have both saving and checking account types.,1,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT cust_name FROM customer WHERE acc_type  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers from the 'customer' table who hold two specific types of accounts. The placeholders in the WHERE clauses represent the account types being compared.
train.3040,loan_1,Find the name of customers who do not have a loan with a type of Mortgages.,1,SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of customers from the 'customer' table who do not have a specific type of loan. The placeholder in the EXCEPT clause represents the type of loan that is being excluded from the results.
train.3042,loan_1,Find the name of customers who have loans of both Mortgages and Auto.,1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers who have taken out loans of two specific types. The placeholders in the WHERE clause represent the types of loans being queried.
train.3044,loan_1,Find the name of customers whose credit score is below the average credit scores of all customers.,1,SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer),"This virtual table lists the names of customers from the 'customer' table whose credit scores are below the average credit score of all customers. The subquery calculates the average credit score, and the placeholder in the WHERE clause represents the condition for filtering based on credit score."
train.3046,loan_1,Find the branch name of the bank that has the most number of customers.,1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of bank branches from the 'bank' table, ordered by the total number of customers in descending order. The placeholder in the LIMIT clause represents the maximum number of branches to display."
train.3048,loan_1,Find the name of customer who has the lowest credit score.,1,SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT cust_name FROM customer ORDER BY credit_score LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of customers from the 'customer' table, ordered by their credit scores. The placeholder in the LIMIT clause represents the maximum number of customer names to be retrieved."
train.3050,loan_1,"Find the name, account type, and account balance of the customer who has the highest credit score.",1,"SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer names, their account types, and current account balances from the 'customer' table. The results are ordered by the customers' credit scores in descending order, and the number of records returned is limited by a placeholder for numeric values."
train.3052,loan_1,Find the name of customer who has the highest amount of loans.,1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'customer' table who have taken out loans, sorted by the total loan amount in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to return."
train.3056,loan_1,"For each account type, find the average account balance of customers with credit score lower than 50.",1,"SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY acc_type",This virtual table provides the average account balance and account type of customers from the 'customer' table who have a credit score below a specified threshold. The placeholder in the WHERE clause represents the credit score limit.
train.3058,loan_1,"For each state, find the total account balance of customers whose credit score is above 100.",1,"SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY state","This virtual table summarizes the total account balances of customers from the 'customer' table, grouped by their state. The placeholder in the WHERE clause represents a minimum credit score threshold, allowing users to filter customers based on their creditworthiness."
train.3060,loan_1,Find the total amount of loans offered by each bank branch.,1,"SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname","This virtual table summarizes the total loan amounts issued by each bank branch. It combines data from the 'bank' and 'loan' tables, grouping the results by the branch name. The placeholder in the SELECT clause represents the total loan amount for each branch."
train.3062,loan_1,Find the name of customers who have more than one loan.,1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of customers from the 'customer' table who have taken out more than a specified number of loans. The placeholder in the HAVING clause represents the minimum count of loans a customer must have to be included in the results.
train.3066,loan_1,Find the name of bank branch that provided the greatest total amount of loans.,1,SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of bank branches from the 'bank' table, which are associated with loans issued. The branches are grouped by their names and ordered by the total loan amounts issued, allowing users to see which branches have the highest loan totals. The placeholder in the LIMIT clause represents the maximum number of branches to display."
train.3068,loan_1,Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.,1,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of bank branches that have issued loans to customers with a credit score below a specified threshold. The results are grouped by branch name and ordered by the total loan amount issued, allowing for the identification of branches with the highest loan amounts for lower credit score customers. The placeholders in the WHERE clause and LIMIT clause represent the credit score threshold and the maximum number of results to return, respectively."
train.3070,loan_1,Find the name of bank branches that provided some loans.,1,SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id,"This virtual table lists the unique names of bank branches that have issued loans. The query joins the 'bank' table with the 'loan' table based on the branch identifier, ensuring that only branches that have provided loans are included in the results."
train.3073,loan_1,What are the different names and credit scores of customers who have taken a loan?,1,"SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id","This virtual table provides a distinct list of customer names along with their credit scores from the 'customer' table, specifically for those customers who have taken out loans. The join operation links the 'customer' and 'loan' tables based on the customer identifier, ensuring that only customers with loans are included in the results."
train.3074,loan_1,Find the the name of the customers who have a loan with amount more than 3000.,1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of customers from the 'customer' table who have taken out loans exceeding a specified amount. The placeholder in the WHERE clause represents the loan amount that is being queried.
train.3078,loan_1,Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.,1,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of bank branches from the 'bank' table where customers with a credit score below a specified threshold have taken loans. The placeholders in the WHERE clause represent the credit score limit.
train.3080,loan_1,Find the total amount of loans provided by bank branches in the state of New York.,1,SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total amount of loans issued by bank branches located in a specific state. The placeholder in the WHERE clause represents the state name.
train.3084,loan_1,Find the average credit score of the customers who do not have any loan.,1,SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan),This virtual table calculates the average credit score of customers from the 'customer' table who do not have any loans. The placeholder in the subquery represents the customer IDs of those who have taken loans.
train.3086,behavior_monitoring,How many assessment notes are there in total?,1,SELECT count(*) FROM ASSESSMENT_NOTES,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ASSESSMENT_NOTES,This virtual table provides a count of all assessment notes recorded in the 'Assessment_Notes' table. The query uses the COUNT function to aggregate the total number of notes without any specific filtering conditions.
train.3087,behavior_monitoring,What are the dates of the assessment notes?,1,SELECT date_of_notes FROM Assessment_Notes,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_of_notes FROM Assessment_Notes,This virtual table provides the dates of assessment notes recorded in the 'Assessment_Notes' table. The absence of a WHERE clause indicates that all dates will be retrieved without any filtering criteria.
train.3088,behavior_monitoring,How many addresses have zip code 197?,1,SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  '197',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of addresses from the 'Addresses' table that match a specific postal code. The placeholder in the WHERE clause represents the postal code being queried.
train.3089,behavior_monitoring,How many distinct incident type codes are there?,1,SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident,This virtual table provides the count of distinct incident types recorded in the 'Behavior_Incident' table. The query uses a placeholder to represent the specific criteria for counting unique incident types.
train.3090,behavior_monitoring,Return all distinct detention type codes.,1,SELECT DISTINCT detention_type_code FROM Detention,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT detention_type_code FROM Detention,This virtual table provides a list of unique detention type codes from the 'Detention' table. The placeholder in the SELECT statement allows for the retrieval of distinct values for the detention type code.
train.3092,behavior_monitoring,Return all detention summaries.,1,SELECT detention_summary FROM Detention,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT detention_summary FROM Detention,This virtual table provides a summary of detentions recorded in the 'Detention' table. The placeholder in the SELECT clause allows for further filtering or modification to specify which detention summaries to retrieve.
train.3093,behavior_monitoring,Return the cell phone number and email address for all students.,1,"SELECT cell_mobile_number ,  email_address FROM STUDENTS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT cell_mobile_number ,  email_address FROM STUDENTS",This virtual table describes the mobile phone numbers and email addresses of students from the 'Students' table. The placeholders represent the specific values that can be modified to filter or retrieve specific student information.
train.3094,behavior_monitoring,"What is the email of the student with first name ""Emma"" and last name ""Rohan""?",1,SELECT email_address FROM Students WHERE first_name  =  'Emma' AND last_name  =  'Rohan',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT email_address FROM Students WHERE first_name  =  [PLACEHOLDER-TYPE:STRING] AND last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the email addresses of students from the 'Students' table who match a specific first and last name. The placeholders in the WHERE clause represent the student's first and last names.
train.3095,behavior_monitoring,How many distinct students have been in detention?,1,SELECT count(DISTINCT student_id) FROM Students_in_Detention,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT student_id) FROM Students_in_Detention,"This virtual table provides the count of unique students who have been recorded in detention from the 'Students_in_Detention' table. The query uses the DISTINCT keyword to ensure that each student is only counted once, regardless of how many times they appear in the table."
train.3096,behavior_monitoring,"What is the gender of the teacher with last name ""Medhurst""?",1,SELECT gender FROM TEACHERS WHERE last_name  =  'Medhurst',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT gender FROM TEACHERS WHERE last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the gender of teachers from the 'Teachers' table who have a specific last name. The placeholder in the WHERE clause represents the last name of the teacher.
train.3097,behavior_monitoring,"What is the incident type description for the incident type with code ""VIOLENCE""?",1,SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  'VIOLENCE',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the incident type description from the 'Ref_Incident_Type' table for a specific incident type code. The placeholder in the WHERE clause represents the unique code for the incident type.
train.3098,behavior_monitoring,Find the maximum and minimum monthly rental for all student addresses.,1,"SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses","This virtual table provides the maximum and minimum monthly rental costs from the 'Student_Addresses' table, which contains information about students' residences and their associated rental costs. The placeholders in the SELECT statement allow for further customization if needed."
train.3099,behavior_monitoring,"Find the first names of teachers whose email address contains the word ""man"".",1,SELECT first_name FROM Teachers WHERE email_address LIKE '%man%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT first_name FROM Teachers WHERE email_address LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the first names of teachers from the 'Teachers' table whose email addresses match a specific pattern. The placeholder in the WHERE clause represents the email address pattern to filter the results.
train.3100,behavior_monitoring,List all information about the assessment notes sorted by date in ascending order.,1,SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC,"This virtual table provides a comprehensive view of all assessment notes recorded in the 'Assessment_Notes' table, sorted by the date the notes were made in ascending order. This allows users to see the progression of notes over time."
train.3101,behavior_monitoring,List all cities of addresses in alphabetical order.,1,SELECT city FROM Addresses ORDER BY city,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT city FROM Addresses ORDER BY city,"This virtual table provides a list of cities from the 'Addresses' table, sorted in alphabetical order. The query retrieves the 'city' column and organizes the results to enhance readability."
train.3102,behavior_monitoring,Find the first names and last names of teachers in alphabetical order of last name.,1,"SELECT first_name ,  last_name FROM Teachers ORDER BY last_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name FROM Teachers ORDER BY last_name","This virtual table describes the first and last names of teachers from the 'Teachers' table, ordered by their last names. The query retrieves the names of all teachers, allowing for easy identification and sorting based on their last names."
train.3103,behavior_monitoring,"Find all information about student addresses, and sort by monthly rental in descending order.",1,SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC,"This virtual table provides a comprehensive view of all student addresses, sorted by the monthly rental cost in descending order. The data includes details such as the student identifier, address identifier, duration of residence, and rental cost, allowing for an analysis of student housing expenses."
train.3104,behavior_monitoring,Find the id and first name of the student that has the most number of assessment notes?,1,"SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of student IDs and their corresponding first names from the 'Students' table, based on the assessment notes recorded in the 'Assessment_Notes' table. The results are grouped by student ID and ordered by the count of assessment notes in descending order, allowing users to see which students have the most notes. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.3106,behavior_monitoring,Find the id and last name of the student that has the most behavior incidents?,1,"SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of student IDs and their corresponding last names from the 'Students' table, specifically for students involved in behavior incidents. The results are grouped by student ID and ordered by the count of incidents in descending order, allowing users to see which students have the most incidents. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.3107,behavior_monitoring,"Find the id and last name of the teacher that has the most detentions with detention type code ""AFTER""?",1,"SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  'AFTER' GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of teacher IDs and their last names from the 'Teachers' table who are overseeing detentions of a specific type. The results are grouped by teacher ID and ordered by the number of detentions they oversee, with a limit on the number of results returned. The placeholders in the WHERE clause and LIMIT clause allow for dynamic input of the detention type and the maximum number of results to display."
train.3108,behavior_monitoring,What are the id and first name of the student whose addresses have the highest average monthly rental?,1,"SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of student IDs and their corresponding first names from the 'Students' table, based on their associated addresses in the 'Student_Addresses' table. The results are grouped by student ID and ordered by the average monthly rental cost in descending order, with a limit on the number of results specified by a placeholder for numeric values."
train.3110,behavior_monitoring,What are the code and description of the most frequent behavior incident type?,1,"SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of incident types recorded in the 'Behavior_Incident' table, along with their descriptions from the 'Ref_Incident_Type' table. The results are grouped by the incident type code and ordered by the frequency of each incident type, allowing users to see the most common incidents up to a specified limit."
train.3111,behavior_monitoring,What are the code and description of the least frequent detention type ?,1,"SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of detention types from the 'Detention' table, along with their descriptions from the 'Ref_Detention_Type' table. The results are grouped by the detention type code and ordered by the count of occurrences in ascending order, allowing the user to specify a limit on the number of results returned."
train.3112,behavior_monitoring,"Find the dates of assessment notes for students with first name ""Fanny"".",1,SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  'Fanny',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the dates of assessment notes made for students from the 'Assessment_Notes' table, specifically filtering for students with a given first name. The placeholder in the WHERE clause represents the first name of the student."
train.3113,behavior_monitoring,"Find the texts of assessment notes for teachers with last name ""Schuster"".",1,SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  'Schuster',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the content of assessment notes made by teachers from the 'Assessment_Notes' table, filtered by the last name of the teacher. The placeholder in the WHERE clause represents the teacher's last name."
train.3114,behavior_monitoring,"Find the start and end dates of behavior incidents of students with last name ""Fahey"".",1,"SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  'Fahey'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the start and end dates of behavior incidents from the 'Behavior_Incident' table for students with a specific last name. The placeholder in the WHERE clause represents the last name of the student.
train.3115,behavior_monitoring,"Find the start and end dates of detentions of teachers with last name ""Schultz"".",1,"SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  'Schultz'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the start and end date and time of detentions from the 'Detention' table, filtered by the last name of the teacher overseeing the detention. The placeholder in the WHERE clause represents the teacher's last name."
train.3116,behavior_monitoring,What are the id and zip code of the address with the highest monthly rental?,1,"SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of address IDs along with their corresponding postal codes from the 'Addresses' table, specifically for students' addresses. The results are ordered by the monthly rental cost in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.3117,behavior_monitoring,What is the cell phone number of the student whose address has the lowest monthly rental?,1,SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the mobile phone numbers of students from the 'Students' table, ordered by their associated monthly rental costs from the 'Student_Addresses' table in ascending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.3118,behavior_monitoring,What are the monthly rentals of student addresses in Texas state?,1,SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  'Texas',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the monthly rental costs for addresses located in a specific state, province, or county. The data is retrieved by joining the 'Addresses' table with the 'Student_Addresses' table based on the address identifier. The placeholder in the WHERE clause represents the state, province, or county of interest."
train.3119,behavior_monitoring,What are the first names and last names of students with address in Wisconsin state?,1,"SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  'Wisconsin'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first and last names of students who reside in a specific state, province, or county. The placeholder in the WHERE clause represents the state, province, or county name."
train.3120,behavior_monitoring,What are the line 1 and average monthly rentals of all student addresses?,1,"SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id","This virtual table provides the primary address lines and the average monthly rental costs for each address associated with students. The data is aggregated by address, allowing for a summary of rental costs per address."
train.3121,behavior_monitoring,"What is the zip code of the address where the teacher with first name ""Lyla"" lives?",1,SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  'Lyla',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the postal codes of addresses associated with teachers from the 'Addresses' table. The join condition links the 'Addresses' table to the 'Teachers' table based on the address identifier. The placeholder in the WHERE clause allows for filtering by the teacher's first name.
train.3122,behavior_monitoring,"What are the email addresses of teachers whose address has zip code ""918""?",1,SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  '918',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the email addresses of teachers who reside at a specific postal code. The query joins the 'Addresses' table with the 'Teachers' table based on the address identifier, filtering the results by the specified postal code."
train.3123,behavior_monitoring,How many students are not involved in any behavior incident?,1,SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident ),"This virtual table provides a count of students from the 'Students' table who have not been involved in any behavior incidents. The subquery filters out students who have records in the 'Behavior_Incident' table, ensuring that only those without any incidents are counted."
train.3125,behavior_monitoring,What are the line 1 of addresses shared by some students and some teachers?,1,SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id,This virtual table retrieves the primary address lines of locations that are shared by both students and teachers. The query uses an INTERSECT operation to find common address lines from the 'Addresses' table linked to the 'Students' and 'Teachers' tables.
train.3127,assets_maintenance,How many assets does each maintenance contract contain? List the number and the contract id.,1,"SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id","This virtual table provides a count of assets associated with each maintenance contract from the 'Maintenance_Contracts' table. The result is grouped by the maintenance contract identifier, allowing users to see how many assets are linked to each contract."
train.3128,assets_maintenance,How many assets does each third party company supply? List the count and the company id.,1,"SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id","This virtual table provides a count of assets associated with each third-party company from the 'Third_Party_Companies' table. The placeholder in the SELECT statement represents the number of assets, and the GROUP BY clause groups the results by the unique identifier of the company."
train.3129,assets_maintenance,Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.,1,"SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of third-party companies that have either maintenance engineers or maintenance contracts associated with them. The results are filtered to include only those companies that have a specified minimum number of associated engineers or contracts. The placeholders in the HAVING clause represent the minimum count of engineers or contracts required for a company to be included in the results.
train.3130,assets_maintenance,What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?,1,"SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",This virtual table provides a list of staff members who have recorded faults but have not been contacted for engineer visits. It combines data from the 'Staff' and 'Fault_Log' tables to identify those who logged faults and excludes those who were involved in engineer visits.
train.3132,assets_maintenance,Which parts have more than 2 faults? Show the part name and id.,1,"SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists the names and unique identifiers of parts from the 'Parts' table that are associated with faults, as indicated in the 'Part_Faults' table. The placeholder in the HAVING clause represents the minimum count of faults that a part must be associated with to be included in the results."
train.3133,assets_maintenance,"List all every engineer's first name, last name, details and coresponding skill description.",1,"SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id","This virtual table provides a list of maintenance engineers along with their skills. It includes the first name, last name, and additional details of the engineers from the 'Maintenance_Engineers' table, and the description of the skills they possess from the 'Skills' table. The relationships are established through the 'Engineer_Skills' table, which links engineers to their respective skills."
train.3135,assets_maintenance,How many assets can each parts be used in? List the part name and the number.,1,"SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name","This virtual table provides a summary of the parts used in assets, showing the name of each part along with the count of how many times each part is associated with assets. The data is aggregated by part name, allowing users to see the frequency of each part's usage across all assets."
train.3137,assets_maintenance,How many engineer visits are required at most for a single fault log? List the number and the log entry id.,1,"SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a count of engineer visits associated with each fault log entry from the 'Fault_Log' table. It groups the results by the fault log entry ID and orders them in descending order based on the number of visits. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return.
train.3138,assets_maintenance,What are all the distinct last names of all the engineers?,1,SELECT DISTINCT last_name FROM Maintenance_Engineers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT last_name FROM Maintenance_Engineers,This virtual table provides a list of unique last names of maintenance engineers from the 'Maintenance_Engineers' table. The use of DISTINCT ensures that each last name appears only once in the result set.
train.3140,assets_maintenance,Which engineers have never visited to maintain the assets? List the engineer first name and last name.,1,"SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)","The virtual table describes the first and last names of maintenance engineers from the 'Maintenance_Engineers' table who have not conducted any visits. The subquery filters out engineers who have entries in the 'Engineer_Visits' table, ensuring that only those without visits are selected."
train.3141,assets_maintenance,"List the asset id, details, make and model for every asset.",1,"SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets","This virtual table provides information about assets, including their unique identifier, detailed description, manufacturer, and model. The placeholders in the SELECT statement allow for dynamic querying of specific asset attributes."
train.3142,assets_maintenance,When was the first asset acquired?,1,SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of asset acquisition dates from the 'Assets' table, sorted in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.3144,assets_maintenance,Which kind of part has the least number of faults? List the part name.,1,SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of parts from the 'Parts' table that are associated with faults, as recorded in the 'Part_Faults' table. The results are grouped by part name and ordered by the count of associated faults in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
train.3145,assets_maintenance,"Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",1,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of maintenance engineers along with their first and last names, sorted by the number of visits they have conducted. The placeholder in the LIMIT clause allows the user to specify the maximum number of engineers to retrieve."
train.3146,assets_maintenance,Which staff have contacted which engineers? List the staff name and the engineer first name and last name.,1,"SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id","This virtual table describes the names of staff members who contacted engineers for visits, along with the first and last names of those engineers. The placeholders in the query represent the relevant identifiers for the staff and engineers involved in the visits."
train.3147,assets_maintenance,"Which fault log included the most number of faulty parts? List the fault log id, description and record time.",1,"SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of fault log entries from the 'Fault_Log' table, including the unique identifier for each entry, the description of the fault, and the date and time when the fault was logged. The results are grouped by the fault log entry ID and ordered by the number of associated parts, allowing users to see the most common faults based on the number of parts linked to each entry. The placeholder in the LIMIT clause represents the maximum number of entries to return."
train.3148,assets_maintenance,Which skill is used in fixing the most number of faults? List the skill id and description.,1,"SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of skills required to fix faults, along with their descriptions, from the 'Skills' table. The results are grouped by skill ID and ordered by the frequency of their occurrence in the 'Skills_Required_To_Fix' table, allowing users to see the most commonly required skills. The placeholder in the LIMIT clause represents the maximum number of skills to return."
train.3149,assets_maintenance,What are all the distinct asset models?,1,SELECT DISTINCT asset_model FROM Assets,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT asset_model FROM Assets,"This virtual table provides a list of unique asset models from the 'Assets' table. The query retrieves distinct values from the 'asset_model' column, ensuring that each model is represented only once."
train.3150,assets_maintenance,"List the all the assets make, model, details by the disposed date ascendingly.",1,"SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC","This virtual table provides a list of assets, including their make, model, and detailed descriptions, from the 'Assets' table. The results are ordered by the date when the assets were disposed of, allowing users to see the assets in chronological order of disposal."
train.3151,assets_maintenance,Which part has the least chargeable amount? List the part id and amount.,1,"SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of part identifiers and their associated chargeable amounts from the 'Parts' table, sorted in ascending order based on the chargeable amount. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.3152,assets_maintenance,Which company started the earliest the maintenance contract? Show the company name.,1,SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of third-party companies that have maintenance contracts, ordered by the start date of the contracts. The placeholder in the LIMIT clause allows the user to specify the maximum number of company names to retrieve."
train.3155,assets_maintenance,How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.,1,"SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",This virtual table provides a count of engineer visits grouped by the names of staff members who were contacted for those visits. The placeholder in the query allows for dynamic filtering or modification based on specific staff names if needed.
train.3156,assets_maintenance,Which assets did not incur any fault log? List the asset model.,1,SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log),This virtual table lists the models of assets from the 'Assets' table that have not been associated with any fault logs. The placeholder in the WHERE clause indicates that we are filtering out assets that have entries in the fault log.
train.3157,station_weather,list the local authorities and services provided by all stations.,1,"SELECT local_authority ,  services FROM station",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT local_authority ,  services FROM station",This virtual table provides information about the local authorities and the number of services available at each station from the 'station' table. The data can be used to understand the governance and service availability at different train stations.
train.3158,station_weather,show all train numbers and names ordered by their time from early to late.,1,"SELECT train_number ,  name FROM train ORDER BY TIME",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT train_number ,  name FROM train ORDER BY TIME","This virtual table provides a list of train numbers and their corresponding names from the 'train' table, ordered by the scheduled time of the trains. The placeholder in the ORDER BY clause represents the time of the train's journey."
train.3160,station_weather,How many trains have 'Express' in their names?,1,SELECT count(*) FROM train WHERE name LIKE '%Express%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM train WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of trains from the 'train' table that match a specific name pattern. The placeholder in the query allows users to specify the name or part of the name of the train they are interested in.
train.3162,station_weather,Find the number of trains starting from each origin.,1,"SELECT origin ,  count(*) FROM train GROUP BY origin",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT origin ,  count(*) FROM train GROUP BY origin",This virtual table summarizes the number of trains departing from each origin station. The placeholder in the SELECT statement allows for the retrieval of the origin station names along with the count of trains associated with each origin.
train.3163,station_weather,Find the name of the train whose route runs through greatest number of stations.,1,SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of the most frequently used trains from the 'train' table, based on their associations with routes in the 'route' table. The placeholder in the LIMIT clause represents the maximum number of train names to be returned."
train.3165,station_weather,What is the average high temperature for each day of week?,1,"SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week","This virtual table provides the average high temperature recorded for each day of the week from the 'weekly_weather' table. The results are grouped by the day of the week, allowing for a comparison of temperature trends across different days."
train.3166,station_weather,Give me the maximum low temperature and average precipitation at the Amersham station.,1,"SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  'Amersham'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the maximum low temperature and the average precipitation recorded for a specific transport network. The data is sourced from the 'weekly_weather' table, which is joined with the 'station' table to filter results based on the network name. The placeholders in the WHERE clause represent the name of the transport network."
train.3167,station_weather,Find names and times of trains that run through stations for the local authority Chiltern.,1,"SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  'Chiltern'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and scheduled times of trains that stop at stations managed by a specific local authority. The placeholders in the WHERE clause represent the local authority's name.
train.3169,station_weather,Find the id and local authority of the station with has the highest average high temperature.,1,"SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of station IDs and their corresponding local authorities from the 'station' table, based on the average high temperatures recorded in the 'weekly_weather' table. The results are grouped by station ID and ordered by the average high temperature in descending order, with a limit on the number of results specified by a placeholder for numeric values."
train.3171,station_weather,show the lowest low temperature and highest wind speed in miles per hour.,1,"SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",This virtual table provides the minimum low temperature and maximum wind speed recorded from the 'weekly_weather' table. The placeholders in the SELECT statement allow for further filtering or aggregation based on specific criteria if needed.
train.3172,station_weather,Find the origins from which more than 1 train starts.,1,SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT origin FROM train GROUP BY origin HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of train origins from the 'train' table that have a number of trains exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of trains originating from each station.
train.3173,college_1,Find the number of professors in accounting department.,1,SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  'Accounting',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of professors associated with a specific department from the 'professor' and 'department' tables. The placeholder in the WHERE clause represents the name of the department being queried.
train.3177,college_1,What is the first and last name of the professor in biology department?,1,"SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  'Biology'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of professors from the 'professor' table who belong to a specific department. The placeholder in the WHERE clause represents the name of the department.
train.3181,college_1,How many classes are professor whose last name is Graztevski has?,1,SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of classes taught by a specific professor based on their last name. It joins the 'employee' table with the 'CLASS' table using the professor's unique identifier, allowing for the aggregation of class counts associated with that professor's last name."
train.3183,college_1,What is the code of the school where the accounting department belongs to?,1,SELECT school_code FROM department WHERE dept_name  =  'Accounting',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT school_code FROM department WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the school code associated with a specific department from the 'DEPARTMENT' table. The placeholder in the WHERE clause represents the name of the department being queried.
train.3185,college_1,"How many credits does course CIS-220 have, and what its description?",1,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the credit hours and description of a specific course from the 'COURSE' table based on the course code. The placeholder in the WHERE clause represents the unique code for the course.
train.3187,college_1,what is the address of history department?,1,SELECT dept_address FROM department WHERE dept_name  =  'History',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_address FROM department WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the physical address of a department from the 'DEPARTMENT' table based on the specified department name. The placeholder in the WHERE clause represents the name of the department being queried.
train.3191,college_1,How many different locations does each school have?,1,"SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code","This virtual table provides a count of distinct department addresses grouped by school code from the 'DEPARTMENT' table. The placeholder in the SELECT clause represents the distinct addresses, while the school code is used to categorize the results."
train.3193,college_1,Find the description and credit for the course QM-261?,1,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides information about the credit hours and description of a specific course from the 'COURSE' table. The placeholder in the WHERE clause represents the unique course code for which the details are being queried.
train.3195,college_1,Find the number of departments in each school.,1,"SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code","This virtual table provides a count of distinct department names grouped by their associated school codes from the 'DEPARTMENT' table. The placeholder in the SELECT clause represents the distinct department names, while the school code is used to group the results."
train.3197,college_1,Find the number of different departments in each school whose number of different departments is less than 5.,1,"SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a count of distinct department names grouped by school code from the 'DEPARTMENT' table. The placeholder in the HAVING clause allows for filtering the results based on a specified minimum count of distinct departments per school.
train.3199,college_1,How many sections does each course has?,1,"SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",This virtual table provides a count of classes grouped by their course codes from the 'CLASS' table. The placeholder in the SELECT statement represents the course code for which the count of classes is being aggregated.
train.3203,college_1,Find the number of classes offered for all class rooms that held at least 2 classes.,1,"SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of classes held in each room from the 'CLASS' table, grouped by the room. The placeholder in the HAVING clause represents the minimum number of classes that must be held in a room to be included in the results."
train.3207,college_1,Find the number of classes in each school.,1,"SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code","This virtual table provides a count of classes grouped by the school code from the 'CLASS', 'COURSE', and 'DEPARTMENT' tables. The placeholders in the query allow for dynamic filtering or modification based on specific criteria related to the courses and departments."
train.3211,college_1,Find the count and code of the job has most employees.,1,"SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the number of employees grouped by their job codes from the 'employee' table. The placeholder in the LIMIT clause represents the maximum number of job codes to display, allowing users to specify how many job codes they want to see in the result."
train.3223,college_1,What is the name and the average gpa of department whose students have the highest average gpa?,1,"SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the average GPA of students grouped by their respective departments. It joins the 'student' table with the 'department' table to associate each student with their department, and it orders the results by the average GPA in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to display."
train.3225,college_1,how many schools exist in total?,1,SELECT count(DISTINCT school_code) FROM department,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT school_code) FROM department,"This virtual table provides the count of distinct school codes from the 'DEPARTMENT' table, which represents the different schools associated with various departments."
train.3227,college_1,How many different classes are there?,1,SELECT count(DISTINCT class_code) FROM CLASS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT class_code) FROM CLASS,"This virtual table provides the count of distinct class codes from the 'CLASS' table, which represents the unique classes offered. The result will indicate how many different classes are available in the database."
train.3229,college_1,How many courses are offered?,1,SELECT count(DISTINCT crs_code) FROM CLASS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT crs_code) FROM CLASS,"This virtual table provides the count of distinct course codes from the 'CLASS' table, indicating the number of unique courses being offered in the classes."
train.3231,college_1,How many departments does the college has?,1,SELECT count(DISTINCT dept_name) FROM department,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT dept_name) FROM department,This virtual table provides the count of distinct department names from the 'DEPARTMENT' table. The result will indicate how many unique departments are present in the database.
train.3233,college_1,How many courses are offered by the Computer Info. Systems department?,1,SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  'Computer Info. Systems',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of courses offered by a specific department from the 'DEPARTMENT' and 'COURSE' tables. The placeholder in the WHERE clause represents the name of the department for which the course count is being queried.
train.3235,college_1,How many sections does course ACCT-211 has?,1,SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct class sections from the 'CLASS' table for a specific course code. The placeholder in the WHERE clause represents the course code being queried.
train.3239,college_1,Find the name of the department that offers the largest number of credits of all classes.,1,SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'DEPARTMENT' table, which are associated with courses from the 'COURSE' table. The query joins the 'COURSE' and 'CLASS' tables to link courses to their respective classes, and then joins the 'DEPARTMENT' table to retrieve the department names. The results are grouped by department code and ordered by the total sum of credit hours for the courses in descending order, with a limit on the number of departments returned as specified by a placeholder."
train.3242,college_1,What are the total number of students enrolled in ACCT-211?,1,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students enrolled in classes associated with a specific course code from the 'CLASS' and 'ENROLL' tables. The placeholder in the WHERE clause represents the course code for which the enrollment count is being queried.
train.3244,college_1,What are the first names of all students in course ACCT-211?,1,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students enrolled in classes associated with a specific course code from the 'CLASS', 'ENROLL', and 'STUDENT' tables. The placeholder in the WHERE clause represents the course code."
train.3246,college_1,What are the first names of all students who took ACCT-211 and received a C?,1,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  [PLACEHOLDER-TYPE:STRING] AND T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the first names of students enrolled in classes associated with a specific course code and who have received a specific grade. The placeholders in the WHERE clause represent the course code and the grade received by the students.
train.3247,college_1,Find the total number of employees.,1,SELECT count(*) FROM employee,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM employee,This virtual table provides a count of all employees in the 'employee' table. The query uses the count function to aggregate the total number of employee records.
train.3249,college_1,How many professors do have a Ph.D. degree?,1,SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM professor WHERE prof_high_degree  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of professors from the 'professor' table who hold a specific highest degree. The placeholder in the WHERE clause represents the degree type being queried.
train.3251,college_1,How many students are enrolled in the class taught by some professor from the accounting department?,1,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of classes offered by a specific department. It joins the 'CLASS', 'ENROLL', 'COURSE', and 'DEPARTMENT' tables to filter the results based on the department's name. The placeholder in the WHERE clause represents the name of the department being queried."
train.3255,college_1,list names of all departments ordered by their names.,1,SELECT dept_name FROM department ORDER BY dept_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_name FROM department ORDER BY dept_name,"This virtual table lists the names of all departments from the 'DEPARTMENT' table, sorted in alphabetical order. The query retrieves the 'dept_name' column and orders the results by the same column."
train.3259,college_1,List the first name of all employees with job code PROF ordered by their date of birth.,1,SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT emp_fname FROM employee WHERE emp_jobcode  =  [PLACEHOLDER-TYPE:STRING] ORDER BY emp_dob,"This virtual table describes the first names of employees from the 'employee' table who hold a specific job code. The placeholder in the WHERE clause represents the job code of the employees, and the results are ordered by their date of birth."
train.3261,college_1,Find the first names and offices of all professors sorted by alphabetical order of their first name.,1,"SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",This virtual table provides the first names of professors along with their office locations from the 'PROFESSOR' and 'EMPLOYEE' tables. The data is organized in ascending order based on the professors' first names.
train.3263,college_1,What is the first and last name of the oldest employee?,1,"SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of first and last names of employees from the 'EMPLOYEE' table, ordered by their date of birth. The placeholder in the LIMIT clause allows for specifying the maximum number of employees to retrieve."
train.3265,college_1,"What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",1,"SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY stu_dob DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first name, last name, and GPA of students from the 'STUDENT' table who have a GPA greater than a specified value. The placeholders in the WHERE clause represent the minimum GPA threshold and the limit on the number of results returned."
train.3268,college_1,What are the first names of all students who got a grade C in a class?,1,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct first names of students who have received a specific grade in their enrolled classes. The query joins the 'student' table with the 'enroll' table based on the unique student identifier, allowing for the filtering of students based on their grades."
train.3269,college_1,What is the name of department where has the smallest number of professors?,1,SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'department' table, which are associated with professors in the 'professor' table. The results are grouped by department code to count the number of professors in each department, and the output is limited to a specified number of departments based on the placeholder."
train.3275,college_1,What is the first names of the professors from the history department who do not teach a class.,1,SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num,This virtual table describes the first names of employees who are professors in a specific department but are not teaching any classes. The placeholders in the WHERE clause represent the department's name.
train.3277,college_1,What is the last name and office of the professor from the history department?,1,"SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the last names of employees and their corresponding office locations from the 'employee' and 'professor' tables, filtered by a specific department name. The placeholder in the WHERE clause represents the name of the department."
train.3279,college_1,What is department name and office for the professor whose last name is Heffington?,1,"SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names of departments and the office locations of professors associated with a specific employee's last name. The placeholders in the WHERE clause represent the last name of the employee being queried.
train.3281,college_1,Find the last name and hire date of the professor who is in office DRE 102.,1,"SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the last names and hire dates of employees who are professors, filtered by a specific office location. The placeholder in the WHERE clause represents the office of the professor."
train.3283,college_1,What is the code of the course which the student whose last name is Smithson took?,1,SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the course codes for classes that a specific student is enrolled in, identified by their last name. The placeholders in the WHERE clause represent the student's last name."
train.3285,college_1,What are the description and credit of the course which the student whose last name is Smithson took?,1,"SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the course descriptions and credit hours for courses that students are enrolled in, filtered by the last name of a specific student. The placeholders in the WHERE clause represent the student's last name."
train.3287,college_1,How many professors who has a either Ph.D. or MA degree?,1,SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM professor WHERE prof_high_degree  =  [PLACEHOLDER-TYPE:STRING] OR prof_high_degree  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of professors from the 'professor' table who hold a specific high degree. The placeholders in the WHERE clause represent the degrees being queried.
train.3289,college_1,How many professors who are from either Accounting or Biology department?,1,SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING] OR T2.dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of professors associated with specific departments from the 'professor' and 'department' tables. The placeholders in the WHERE clause represent the names of the departments being queried.
train.3291,college_1,Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.,1,SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of professors who are teaching classes associated with a specific course code. The query uses an INTERSECT operation to find professors who are teaching the same course in two different instances, represented by placeholders for the course code."
train.3295,college_1,What is the average gpa of the students enrolled in the course with code ACCT-211?,1,SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average GPA of students enrolled in a specific course. It joins the 'enroll' table with the 'student' table to access student GPA data and the 'class' table to filter by the course code. The placeholder in the WHERE clause represents the course code for which the average GPA is being calculated.
train.3297,college_1,"What is the first name, gpa and phone number of the top 5 students with highest gpa?",1,"SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of students' first names, GPAs, and phone numbers from the 'student' table, ordered by GPA in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.3301,college_1,Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.,1,"SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",This virtual table provides the first names and GPA of students from the 'student' table who have a GPA lower than the average GPA of all students. The placeholder in the WHERE clause represents the condition for filtering students based on their GPA.
train.3303,college_1,Find the name and address of the department that has the highest number of students.,1,"SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of department names and their addresses for students, grouped by department code. The results are ordered by the number of students in each department, with a limit on the number of departments returned, specified by a placeholder for numeric values."
train.3305,college_1,"Find the name, address, number of students in the departments that have the top 3 highest number of students.",1,"SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of the number of students enrolled in each department, along with the department's name and address. The data is aggregated by department code, allowing users to see which departments have the most students. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to display."
train.3307,college_1,Find the first name and office of the professor who is in the history department and has a Ph.D. degree.,1,"SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.prof_high_degree  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names of employees and the office locations of professors from the 'employee' and 'professor' tables, respectively. It filters the results based on a specific department name and the highest degree obtained by the professors, both represented by placeholders for string values."
train.3310,college_1,What are the first names of all teachers who have taught a course and the corresponding course codes?,1,"SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",This virtual table provides the first names of professors along with the course codes they teach from the 'CLASS' and 'EMPLOYEE' tables. The join condition links the professor's identifier in the 'CLASS' table to the corresponding identifier in the 'EMPLOYEE' table.
train.3311,college_1,Find the first names of all instructors who have taught some course and the course description.,1,"SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code","This virtual table provides the first names of professors along with the descriptions of the courses they teach. It combines data from the 'CLASS', 'EMPLOYEE', and 'COURSE' tables, linking professors to their respective classes and the courses associated with those classes."
train.3313,college_1,Find the first names and offices of all instructors who have taught some course and also find the course description.,1,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num","This virtual table provides the first names of employees, the office locations of professors, and descriptions of courses associated with classes. The data is retrieved by joining the 'CLASS', 'EMPLOYEE', 'COURSE', and 'PROFESSOR' tables based on their respective identifiers. The placeholders in the query allow for dynamic filtering or selection of specific records as needed."
train.3316,college_1,"What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?",1,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code","This virtual table provides a view of the first names of professors, their office locations, course descriptions, and department names associated with classes. The placeholders in the query represent the relationships between the tables involved, allowing for dynamic filtering or selection based on user input."
train.3317,college_1,Find names of all students who took some course and the course description.,1,"SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code","This virtual table provides the first and last names of students along with the descriptions of the courses they are enrolled in. It combines data from the 'student', 'enroll', 'class', and 'course' tables, linking students to their respective enrollments and the courses associated with those classes."
train.3320,college_1,What are the names of all students taking a course who received an A or C?,1,"SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING] OR T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students from the 'student' table who have received specific grades in their enrolled classes. The placeholders in the WHERE clause represent the grades being queried.
train.3321,college_1,Find the first names of all professors in the Accounting department who is teaching some course and the class room.,1,"SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names of professors and the rooms where their classes are held from the 'CLASS' table, joined with the 'EMPLOYEE', 'PROFESSOR', and 'DEPARTMENT' tables. The placeholder in the WHERE clause represents the name of the department."
train.3325,college_1,What is the last name of the student who got a grade A in the class with code 10018.,1,SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING] AND T2.class_code  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the last names of students who have received a specific grade in a particular class. The placeholders in the WHERE clause represent the grade and the class code respectively.
train.3327,college_1,Find the first name and office of history professor who did not get a Ph.D. degree.,1,"SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.prof_high_degree != [PLACEHOLDER-TYPE:STRING]",This virtual table provides the first names of employees and the office locations of professors from the 'PROFESSOR' and 'EMPLOYEE' tables. It filters the results based on a specific department name and excludes professors with a certain highest degree. The placeholders in the WHERE clause represent the department's name and the highest degree to filter out.
train.3329,college_1,Find the first names of professors who are teaching more than one class.,1,SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the first names of professors who teach more than a specified number of classes. It joins the 'CLASS' table with the 'EMPLOYEE' table based on the professor's identifier, grouping the results by the professor's identifier and filtering the groups based on the count of classes taught."
train.3331,college_1,Find the first names of students who took exactly one class.,1,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students from the 'student' table who are enrolled in a specific number of classes. The placeholder in the HAVING clause represents the count of classes that the students are enrolled in.
train.3334,college_1,"What is the name of the department that offers a course that has a description including the word ""Statistics""?",1,SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table provides the names of departments that offer courses matching a specific description. The query joins the 'course' table with the 'department' table based on the department code, filtering the results to include only those courses whose descriptions contain a specified string."
train.3335,college_1,What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?,1,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  [PLACEHOLDER-TYPE:STRING] AND T1.stu_lname LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students who are enrolled in a specific course identified by its course code. The query joins the 'student' table with the 'enroll' table to find students enrolled in classes, and then joins with the 'CLASS' table to filter by the course code. The placeholders in the WHERE clause represent the course code and the last name pattern of the students."
train.3337,sports_competition,How many clubs are there?,1,SELECT count(*) FROM club,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM club,"This virtual table provides the total number of clubs present in the 'club' table. The query counts all entries in the table, which represents the clubs."
train.3339,sports_competition,List the distinct region of clubs in ascending alphabetical order.,1,SELECT DISTINCT Region FROM club ORDER BY Region ASC,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT Region FROM club ORDER BY Region ASC,"This virtual table provides a list of unique geographical regions where clubs are located, sorted in ascending order. The placeholder in the SELECT statement indicates that the results will be distinct regions from the 'club' table."
train.3341,sports_competition,What is the average number of gold medals for clubs?,1,SELECT avg(Gold) FROM club_rank,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Gold) FROM club_rank,This virtual table calculates the average number of gold medals won by clubs from the 'club_rank' table. The result provides insight into the overall performance of clubs in terms of gold medal achievements.
train.3347,sports_competition,What are the maximum and minimum number of silver medals for clubs.,1,"SELECT max(Silver) ,  min(Silver) FROM club_rank",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Silver) ,  min(Silver) FROM club_rank",This virtual table provides the maximum and minimum number of silver medals won by clubs from the 'club_rank' table. The placeholders in the SELECT statement allow for potential modifications to specify different medal counts if needed.
train.3349,sports_competition,How many clubs have total medals less than 10?,1,SELECT count(*) FROM club_rank WHERE Total  <  10,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM club_rank WHERE Total  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table counts the number of clubs from the 'club_rank' table that have won a total number of medals less than a specified value. The placeholder in the WHERE clause represents the total number of medals.
train.3351,sports_competition,List all club names in ascending order of start year.,1,SELECT name FROM club ORDER BY Start_year ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM club ORDER BY Start_year ASC,"This virtual table lists the names of clubs from the 'club' table, ordered by the year they were established. This allows users to see the clubs in chronological order of their founding."
train.3353,sports_competition,List all club names in descending alphabetical order.,1,SELECT name FROM club ORDER BY name DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM club ORDER BY name DESC,"This virtual table lists the names of clubs from the 'club' table, sorted in descending order. The query retrieves all club names and organizes them from Z to A."
train.3357,sports_competition,"Show the names of clubs that have players with position ""Right Wing"".",1,SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  'Right Wing',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of clubs from the 'club' table that have players in a specific playing position. The placeholder in the WHERE clause represents the player's position.
train.3359,sports_competition,"What is the average points of players from club with name ""AIB"".",1,SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  'AIB',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average points scored by players from a specific club. The placeholder in the WHERE clause represents the name of the club for which the average points are being calculated.
train.3365,sports_competition,List the types of competition and the number of competitions of each type.,1,"SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type","This virtual table summarizes the different types of competitions held, along with the count of each type from the 'competition' table. The result will show how many competitions of each type have taken place."
train.3369,sports_competition,List the types of competition that have at most five competitions of that type.,1,SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the types of competitions held in the database, specifically focusing on those competition types that have a count of occurrences less than or equal to a specified number. The placeholder in the HAVING clause represents the maximum count of competitions for which the types are being queried."
train.3371,sports_competition,List the names of clubs that do not have any players.,1,SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player),"This virtual table lists the names of clubs from the 'club' table that do not have any associated players. The subquery checks for clubs that have player entries, and the placeholder in the NOT IN clause represents the absence of player identifiers."
train.3373,sports_competition,What are the positions with both players having more than 20 points and less than 10 points.,1,SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT POSITION FROM player WHERE Points  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT POSITION FROM player WHERE Points  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the playing positions of players from the 'player' table who have a total points score that falls between two specified numeric values. The placeholders in the query represent the lower and upper bounds for the points scored by the players.
train.3375,sports_competition,Show total points of all players.,1,SELECT sum(Points) FROM player,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Points) FROM player,"This virtual table calculates the total points scored by all players from the 'player' table. The query uses the SUM function to aggregate the 'Points' column, providing a single value that represents the cumulative score of all players."
train.3379,sports_competition,what are the name of players who get more than the average points.,1,SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player),"This virtual table describes the names of players from the 'player' table who have scored more points than the average points scored by all players. The subquery calculates the average points, and the main query filters players based on this average."
train.3389,manufacturer,How many furniture components are there in total?,1,SELECT sum(num_of_component) FROM furniture,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(num_of_component) FROM furniture,This virtual table calculates the total number of components across all furniture items from the 'furniture' table. The result will provide a single numeric value representing the sum of all components.
train.3390,manufacturer,Return the name and id of the furniture with the highest market rate.,1,"SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists the names and unique identifiers of furniture items from the 'furniture' table, ordered by their current market price in descending order. The placeholder in the LIMIT clause represents the maximum number of furniture items to be displayed."
train.3392,manufacturer,Find the component amounts and names of all furnitures that have more than 10 components.,1,"SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the number of components and the names of furniture items from the 'furniture' table that have a greater number of components than a specified threshold. The placeholder in the WHERE clause represents the minimum number of components required.
train.3395,manufacturer,Which manufacturer has the most number of shops? List its name and year of opening.,1,"SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of manufacturers along with the year they were established, sorted by the number of shops they operate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of manufacturers to display."
train.3396,manufacturer,Find the average number of factories for the manufacturers that have more than 20 shops.,1,SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average number of factories owned by manufacturers from the 'manufacturer' table who operate more than a specified number of shops. The placeholder in the WHERE clause represents the minimum number of shops that a manufacturer must have to be included in the average calculation.
train.3397,manufacturer,List all manufacturer names and ids ordered by their opening year.,1,"SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year","This virtual table lists the names and unique identifiers of manufacturers from the 'manufacturer' table, sorted by the year they were established. The sorting allows users to see the manufacturers in chronological order of their establishment."
train.3398,manufacturer,Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.,1,"SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  [PLACEHOLDER-TYPE:NUMBER] OR Num_of_Factories  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the names and establishment years of manufacturers from the 'manufacturer' table that either operate more than a specified number of shops or own fewer factories than a specified number. The placeholders in the WHERE clause represent the numeric thresholds for the number of shops and factories.
train.3399,manufacturer,what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.,1,"SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the maximum number of shops and the average number of factories owned by manufacturers that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.
train.3401,manufacturer,Find the number of funiture types produced by each manufacturer as well as the company names.,1,"SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id","This virtual table provides a count of furniture items produced by each manufacturer along with the manufacturer's name. The count is derived from the 'furniture_manufacte' table, which links manufacturers to their furniture items, and the results are grouped by the manufacturer's unique identifier."
train.3402,manufacturer,Give me the names and prices of furnitures which some companies are manufacturing.,1,"SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID","This virtual table describes the names of furniture items along with their selling prices in US dollars. The data is retrieved from the 'furniture' table, which contains details about the furniture items, and the 'furniture_manufacte' table, which links the furniture to its selling price. The join operation connects these two tables based on the unique identifier for each piece of furniture."
train.3403,manufacturer,Find the market shares and names of furnitures which no any company is producing in our records.,1,"SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)","This virtual table provides the market rates and names of furniture items from the 'furniture' table that are not currently associated with any manufacturer in the 'furniture_manufacte' table. The subquery filters out furniture items that have been linked to a manufacturer, ensuring that only unassociated items are displayed."
train.3404,manufacturer,Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,1,SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of furniture items from the 'furniture' table that have a number of components less than a specified value and also greater than another specified value. The placeholders in the WHERE clauses represent the numeric thresholds for the number of components.
train.3405,hr_1,Display the first name and department name for each employee.,1,"SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id","This virtual table describes the first names of employees along with their corresponding department names by joining the 'employees' and 'departments' tables. The join condition links the 'department_id' from the employees table to the 'department_id' in the departments table, allowing for the retrieval of department names associated with each employee."
train.3409,hr_1,"Display the first name, and department number for all employees whose last name is ""McEwen"".",1,"SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  department_id FROM employees WHERE last_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first names and department IDs of employees from the 'employees' table who have a specific last name. The placeholder in the WHERE clause represents the last name of the employee.
train.3411,hr_1,Return all the information for all employees without any department number.,1,SELECT * FROM employees WHERE department_id  =  'null',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM employees WHERE department_id  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a comprehensive view of all employees from the 'employees' table who belong to a specific department. The placeholder in the WHERE clause represents the unique identifier of the department to filter the results accordingly.
train.3413,hr_1,Display all the information about the department Marketing.,1,SELECT * FROM  departments WHERE department_name  =  'Marketing',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM  departments WHERE department_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves all information about departments from the 'departments' table that match a specific department name. The placeholder in the WHERE clause represents the name of the department being queried.
train.3415,hr_1,when is the hire date for those employees whose first name does not containing the letter M?,1,SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT hire_date FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the hire dates of employees from the 'employees' table whose first names do not match a specified pattern. The placeholder in the WHERE clause allows for filtering based on the first name criteria.
train.3421,hr_1,what is the phone number of employees whose salary is in the range of 8000 and 12000?,1,SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT phone_number FROM employees WHERE salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the phone numbers of employees from the 'employees' table whose salaries fall within a specified range. The placeholders in the WHERE clause represent the minimum and maximum salary values.
train.3423,hr_1,display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.,1,SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != 'null' OR  department_id != 40,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM employees WHERE salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER] AND commission_pct != [PLACEHOLDER-TYPE:STRING] OR  department_id != [PLACEHOLDER-TYPE:NUMBER],"This virtual table retrieves all employee records from the 'employees' table where the salary falls within a specified range and the commission percentage is not equal to a certain value, or the department ID is not equal to a specified number. The placeholders in the WHERE clause allow for dynamic input of salary range, commission percentage, and department ID."
train.3425,hr_1,What are the full name (first and last name) and salary for all employees who does not have any value for commission?,1,"SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  'null'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first names, last names, and salaries of employees from the 'employees' table who have a specific commission percentage. The placeholder in the WHERE clause represents the commission percentage value."
train.3427,hr_1,"Display the first and last name, and salary for those employees whose first name is ending with the letter m.",1,"SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first names, last names, and salaries of employees from the 'employees' table whose first names match a specific pattern. The placeholder in the WHERE clause represents the pattern for the first name."
train.3429,hr_1,"Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",1,"SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN [PLACEHOLDER-TYPE:STRING] AND [PLACEHOLDER-TYPE:STRING]",This virtual table provides the job identifiers and hire dates of employees from the 'employees' table who were hired within a specific date range. The placeholders in the WHERE clause represent the start and end dates of the hiring period.
train.3431,hr_1,What are the first and last name for those employees who works either in department 70 or 90?,1,"SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name FROM employees WHERE department_id  =  [PLACEHOLDER-TYPE:NUMBER] OR department_id  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the first and last names of employees from the 'employees' table who belong to specific departments. The placeholders in the WHERE clause represent the identifiers of the departments being queried.
train.3433,hr_1,Find the salary and manager number for those employees who is working under a manager.,1,"SELECT salary ,  manager_id FROM employees WHERE manager_id != 'null'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT salary ,  manager_id FROM employees WHERE manager_id != [PLACEHOLDER-TYPE:STRING]","This virtual table provides the salary and manager ID of employees from the 'employees' table, specifically filtering out those employees who have a specified manager ID. The placeholder in the WHERE clause represents the manager's identifier that should be excluded from the results."
train.3435,hr_1,display all the details from Employees table for those employees who was hired before 2002-06-21.,1,SELECT * FROM employees WHERE hire_date  <  '2002-06-21',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM employees WHERE hire_date  <  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of all employees from the 'employees' table who were hired before a specific date. The placeholder in the WHERE clause represents the hire date to filter the results accordingly.
train.3437,hr_1,display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.,1,SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM employees WHERE first_name LIKE [PLACEHOLDER-TYPE:STRING] OR first_name LIKE [PLACEHOLDER-TYPE:STRING] ORDER BY salary DESC,This virtual table retrieves all information about employees from the 'employees' table whose first names match specific patterns. The results are ordered by the employees' salaries in descending order. The placeholders in the WHERE clause represent the patterns for the first names to be searched.
train.3439,hr_1,"display those employees who joined after 7th September, 1987.",1,SELECT * FROM employees WHERE hire_date  >  '1987-09-07',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM employees WHERE hire_date  >  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of all employees from the 'employees' table who were hired after a specific date. The placeholder in the WHERE clause represents the hire date that will be specified by the user.
train.3441,hr_1,display the job title of jobs which minimum salary is greater than 9000.,1,SELECT job_title FROM jobs WHERE min_salary  >  9000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT job_title FROM jobs WHERE min_salary  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the job titles from the 'jobs' table where the minimum salary exceeds a specified amount. The placeholder in the WHERE clause represents the minimum salary threshold.
train.3443,hr_1,"display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",1,"SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the job titles along with the salary range (calculated as the difference between maximum and minimum salary) for jobs in the 'jobs' table that fall within a specified maximum salary range. The placeholders in the WHERE clause represent the numeric values for the salary limits.
train.3445,hr_1,display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.,1,SELECT email FROM employees WHERE commission_pct  =  'null' AND salary BETWEEN 7000 AND 12000 AND department_id = 50,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT email FROM employees WHERE commission_pct  =  [PLACEHOLDER-TYPE:STRING] AND salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER] AND department_id = [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the email addresses of employees from the 'employees' table who meet specific criteria. The criteria include a specified commission percentage, a salary range defined by minimum and maximum values, and a specific department identifier."
train.3450,hr_1,What are the department ids for which more than 10 employees had a commission?,1,SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the identifiers of departments from the 'employees' table that have more than a specified number of employees receiving a commission. The placeholder in the HAVING clause represents the minimum count of employees with a commission percentage.
train.3452,hr_1,What are department ids for departments with managers managing more than 3 employees?,1,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique department identifiers from the 'employees' table. It groups the results by both 'department_id' and 'manager_id', ensuring that only departments with a specified minimum number of employees are included. The placeholder in the HAVING clause represents the minimum count of employees required for a department to be listed."
train.3459,hr_1,display the ID for those employees who did two or more jobs in the past.,1,SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique identifiers of employees from the 'job_history' table who have held multiple jobs. The placeholder in the HAVING clause represents the minimum number of job records an employee must have to be included in the results.
train.3461,hr_1,Find employee with ID and name of the country presently where (s)he is working.,1,"SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id","This virtual table provides a list of employee IDs along with the corresponding country names where the employees are located. It combines data from the 'employees', 'departments', 'locations', and 'countries' tables, linking them through their respective identifiers to show the relationship between employees and their countries."
train.3467,hr_1,display job title and average salary of employees.,1,"SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title","This virtual table provides the average salary of employees grouped by their job titles. It combines data from the 'employees' and 'jobs' tables, linking them through the job identifier. The placeholder in the SELECT clause represents the job title, while the average salary is calculated for each job title."
train.3469,hr_1,What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?,1,"SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = [PLACEHOLDER-TYPE:NUMBER] )",This virtual table describes the first and last names of employees from the 'employees' table who earn more than a specific employee's salary. The placeholder in the subquery represents the unique identifier of the employee whose salary is being compared.
train.3475,hr_1,Find the employee id for all employees who earn more than the average salary.,1,SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees),1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees),"This virtual table lists the identifiers of employees from the 'employees' table whose salary is above the average salary of all employees. The subquery calculates the average salary, and the placeholder in the WHERE clause represents the condition for filtering employees based on their salary."
train.3477,hr_1,display the employee id and salary of all employees who report to Payam (first name).,1,"SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  [PLACEHOLDER-TYPE:STRING] )",This virtual table provides the employee IDs and salaries of employees who report directly to a specific manager. The placeholder in the subquery represents the first name of the manager whose employees' information is being retrieved.
train.3479,hr_1,find the name of all departments that do actually have one or more employees assigned to them.,1,SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id,"This virtual table provides a list of unique department names from the 'departments' table that employees belong to. The query joins the 'employees' table with the 'departments' table based on the department identifier, ensuring that only distinct department names are returned."
train.3489,hr_1,Find the job ID for those jobs which average salary is above 8000.,1,SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the job identifiers from the 'employees' table where the average salary for each job exceeds a specified amount. The placeholder in the HAVING clause represents the salary threshold.
train.3491,hr_1,display the employee ID and job name for all those jobs in department 80.,1,"SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of employee IDs along with their corresponding job titles from the 'employees' and 'jobs' tables. The placeholder in the WHERE clause represents the specific department ID to filter the results.
train.3493,hr_1,What is the first name and job id for all employees in the Finance department?,1,"SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the first names and job identifiers of employees from the 'employees' table who work in a specific department. The placeholder in the WHERE clause represents the name of the department.
train.3495,hr_1,display all the information of the employees whose salary if within the range of smallest salary and 2500.,1,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of employees from the 'employees' table whose salaries fall within a specified range. The range is defined by the minimum salary of all employees and a placeholder for the maximum salary.
train.3499,hr_1,display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.,1,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  'Clara')",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  [PLACEHOLDER-TYPE:STRING])","This virtual table provides the first names, last names, and hire dates of employees from the 'employees' table who belong to the same department as a specified employee. The placeholder in the subquery represents the first name of the employee whose department is being queried."
train.3501,hr_1,display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.,1,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  'Clara') AND first_name != 'Clara'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  [PLACEHOLDER-TYPE:STRING]) AND first_name != [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names, last names, and hire dates of employees from the 'employees' table who belong to the same department as a specified employee, while excluding a specific employee's first name. The placeholders in the WHERE clause represent the first name of the employee to find the department and the first name to exclude."
train.3505,hr_1,"display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",1,"SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE [PLACEHOLDER-TYPE:STRING])","This virtual table provides a list of employees, including their unique identifier, first name, last name, and salary, from the 'employees' table. It filters the results to show only those employees whose salary is greater than the average salary of all employees, and who belong to departments where at least one employee has a first name matching a specified pattern."
train.3511,hr_1,display the department id and the total salary for those departments which contains at least two employees.,1,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total salary of employees grouped by their department. It includes only those departments that have a minimum number of employees, as specified by the placeholder in the HAVING clause."
train.3513,hr_1,display all the information of those employees who did not have any job in the past.,1,SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history),2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history),"This virtual table lists all employees from the 'employees' table who do not have any recorded job history. The subquery checks for employee IDs in the 'job_history' table, and the placeholder in the WHERE clause represents the employee's unique identifier."
train.3517,hr_1,"display the first and last name, department, city, and state province for each employee.",1,"SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id","This virtual table provides a view of employees along with their department names and the locations of those departments. It combines data from the 'employees', 'departments', and 'locations' tables, linking them through their respective identifiers. The placeholders in the query allow for dynamic filtering or selection based on specific criteria."
train.3519,hr_1,"display those employees who contain a letter z to their first name and also display their last name, city.",1,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first and last names of employees along with the city of their department's location. It combines data from the 'employees', 'departments', and 'locations' tables, filtering the results based on a specified first name."
train.3521,hr_1,"display the department name, city, and state province for each department.",1,"SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",This virtual table provides a view of department names along with their corresponding city and state or province from the 'departments' and 'locations' tables. The join condition links the departments to their respective locations using the location identifier.
train.3533,music_1,Find the names of all English songs.,1,SELECT song_name FROM song WHERE languages  =  'english',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT song_name FROM song WHERE languages  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of songs from the 'song' table that are available in a specific language. The placeholder in the WHERE clause represents the language in which the songs are available.
train.3535,music_1,What are the id of songs whose format is mp3.,1,SELECT f_id FROM files WHERE formats  =  'mp3',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT f_id FROM files WHERE formats  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unique identifiers of audio files from the 'files' table that are available in a specific format. The placeholder in the WHERE clause represents the format of the audio files.
train.3537,music_1,List the name and country of origin for all singers who have produced songs with rating above 9.,1,"SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique artist names and their corresponding countries from the 'artist' table, filtered by the rating of their songs in the 'song' table. The placeholder in the WHERE clause represents a numeric rating threshold that the songs must exceed."
train.3539,music_1,List the file size and format for all songs that have resolution lower than 800.,1,"SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a distinct list of file sizes and formats from the 'files' table for songs that have a resolution lower than a specified value. The placeholder in the WHERE clause represents the maximum resolution to filter the results.
train.3544,music_1,What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?,1,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of artist names and their corresponding countries from the 'artist' table, joined with the 'song' table to include only those artists who have songs. The results are ordered by the rating of the songs in descending order, and the number of results is limited by a placeholder for numeric values."
train.3547,music_1,How many artists are from Bangladesh?,1,SELECT count(*) FROM artist WHERE country  =  'Bangladesh',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of music artists from a specific country in the 'artist' table. The placeholder in the WHERE clause represents the name of the country.
train.3553,music_1,Find the names of the artists who are from UK and have produced English songs.,1,SELECT artist_name FROM artist WHERE country  =  'UK' INTERSECT SELECT artist_name FROM song WHERE languages  =  'english',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT artist_name FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT artist_name FROM song WHERE languages  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the names of artists from the 'artist' table who are from a specific country and also have songs available in a specified language. The placeholders in the WHERE clauses represent the country and language criteria.
train.3555,music_1,Find the id of songs that are available in mp4 format and have resolution lower than 1000.,1,SELECT f_id FROM files WHERE formats  =  'mp4' INTERSECT SELECT f_id FROM song WHERE resolution  <  1000,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT f_id FROM files WHERE formats  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT f_id FROM song WHERE resolution  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the unique file identifiers from the 'files' table that are available in a specific format and also exist in the 'song' table with a resolution lower than a specified value. The placeholders in the WHERE clauses represent the format of the file and the resolution threshold.
train.3559,music_1,What is the average duration of songs that have mp3 format and resolution below 800?,1,SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  'mp3' AND T2.resolution   <  800,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  [PLACEHOLDER-TYPE:STRING] AND T2.resolution   <  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average duration of audio files from the 'files' table that are in a specific format and have a resolution lower than a specified value. The placeholders in the WHERE clause represent the file format and the resolution threshold.
train.3561,music_1,What is the number of artists for each gender?,1,"SELECT count(*) ,  gender FROM artist GROUP BY gender",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  gender FROM artist GROUP BY gender","This virtual table provides a count of artists grouped by their gender from the 'artist' table. The placeholder in the SELECT clause represents the count of artists, while the GROUP BY clause organizes the results based on gender."
train.3563,music_1,What is the average rating of songs for each language?,1,"SELECT avg(rating) ,  languages FROM song GROUP BY languages",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(rating) ,  languages FROM song GROUP BY languages","This virtual table provides the average rating of songs grouped by the languages in which they are available. The placeholder in the SELECT clause represents the average rating, while the languages are grouped to show the distribution of ratings across different languages."
train.3568,music_1,How many songs were released for each format?,1,"SELECT count(*) ,  formats FROM files GROUP BY formats",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  formats FROM files GROUP BY formats",This virtual table provides a count of audio files grouped by their available formats. The placeholder in the SELECT statement represents the total number of files for each format.
train.3571,music_1,What are the names of all songs that have a lower rating than some song of blues genre?,1,SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  'blues'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the titles of songs from the 'song' table that have a rating lower than the maximum rating of songs within a specified genre. The placeholder in the subquery represents the genre of interest.
train.3573,music_1,"What is the name and country of origin of the artist who released a song that has ""love"" in its title?",1,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE '%love%'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and countries of artists from the 'artist' table who have performed a specific song. The placeholder in the WHERE clause represents the title of the song being queried.
train.3577,music_1,"List the names of all genres in alphabetical oder, together with its ratings.",1,"SELECT g_name ,  rating FROM genre ORDER BY g_name",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT g_name ,  rating FROM genre ORDER BY g_name","This virtual table provides a list of music genres along with their ratings from the 'genre' table, sorted alphabetically by genre name."
train.3579,music_1,Give me a list of the names of all songs ordered by their resolution.,1,SELECT song_name FROM song ORDER BY resolution,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT song_name FROM song ORDER BY resolution,"This virtual table lists the titles of songs from the 'song' table, ordered by their audio resolution. The ordering allows users to see the songs arranged from the lowest to the highest resolution, providing a clear view of the available audio quality options."
train.3581,music_1,What are the ids of songs that are available in either mp4 format or have resolution above 720?,1,SELECT f_id FROM files WHERE formats  =  'mp4' UNION SELECT f_id FROM song WHERE resolution  >  720,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT f_id FROM files WHERE formats  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT f_id FROM song WHERE resolution  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique file identifiers from two different sources: the 'files' table and the 'song' table. It retrieves file IDs from the 'files' table where the file formats match a specified format, and it also retrieves file IDs from the 'song' table where the audio resolution exceeds a certain threshold. The placeholders in the query allow users to specify the desired format and resolution criteria."
train.3589,music_1,What are the names of artists who are Male and are from UK?,1,SELECT artist_name FROM artist WHERE country  =  'UK' AND gender  =  'Male',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT artist_name FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING] AND gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of artists from the 'artist' table who are from a specific country and belong to a certain gender. The placeholders in the WHERE clause represent the country and gender of the artists.
train.3592,music_1,What are the names of the songs that are modern or sung in English?,1,SELECT song_name FROM song WHERE genre_is  =  'modern' OR languages  =  'english',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT song_name FROM song WHERE genre_is  =  [PLACEHOLDER-TYPE:STRING] OR languages  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of songs from the 'song' table that belong to a specific genre or are available in a specific language. The placeholders in the WHERE clause represent the genre and language criteria.
train.3593,music_1,Return the names of songs for which format is mp3 and resolution is below 1000.,1,SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  'mp3' INTERSECT SELECT song_name FROM song WHERE resolution  <  1000,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT song_name FROM song WHERE resolution  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the titles of songs that are associated with files of a specific format and also have a resolution lower than a specified value. The placeholders in the WHERE clause represent the file format and the resolution threshold.
train.3595,music_1,Return the names of singers who are from UK and released an English song.,1,SELECT artist_name FROM artist WHERE country  =  'UK' INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  'english',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT artist_name FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies artists from a specific country who also perform songs in a specified language. The first part of the query selects artist names from the 'artist' table filtered by country, while the second part intersects this with artist names from the 'song' table that match the specified language. The placeholders represent the country and language criteria."
train.3597,music_1,What are the average rating and resolution of songs that are in Bangla?,1,"SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  'bangla'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average rating and average resolution of songs from the 'song' table that are available in a specific language. The placeholder in the WHERE clause represents the language of the songs.
train.3605,music_1,Find the names and number of works of all artists who have at least one English songs.,1,"SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  'english' GROUP BY T2.artist_name HAVING count(*)  >=  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.artist_name HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a count of songs by each artist from the 'artist' table who have songs available in a specific language. The placeholders in the WHERE clause represent the language of the songs and the minimum count of songs that an artist must have in that language.
train.3608,music_1,What is the name and country of origin for each artist who has released a song with a resolution higher than 900?,1,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.artist_name HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and countries of artists who have songs with a resolution greater than a specified value. The results are grouped by artist name, ensuring that only those artists with a certain number of songs are included, as indicated by the placeholder in the HAVING clause."
train.3609,music_1,Find the names and number of works of the three artists who have produced the most songs.,1,"SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of music artists along with the count of songs they have performed. The data is sourced from the 'artist' and 'song' tables, where artists are joined with their respective songs based on the artist's name. The results are grouped by artist name and ordered by the number of songs in descending order, with a limit set by a placeholder for numeric values."
train.3611,music_1,Find the country of origin for the artist who made the least number of songs?,1,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries from which artists originate, based on their association with songs. The query joins the 'artist' and 'song' tables on the artist's name, groups the results by artist name to ensure uniqueness, and orders the results by the count of songs associated with each artist. The placeholder in the LIMIT clause allows for specifying the maximum number of countries to return."
train.3613,music_1,What are the names of the songs whose rating is below the rating of all songs in English?,1,SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the titles of songs from the 'song' table that have a rating lower than the minimum rating of songs available in a specific language. The placeholder in the subquery represents the language of the songs.
train.3615,music_1,What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?,1,SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  [PLACEHOLDER-TYPE:NUMBER]),This virtual table retrieves the unique identifiers of songs from the 'song' table that have a resolution greater than the maximum resolution of songs with a rating below a specified threshold. The placeholder in the subquery represents the rating limit.
train.3617,music_1,What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?,1,SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  'modern'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  [PLACEHOLDER-TYPE:STRING]),This virtual table retrieves the unique identifiers of songs from the 'song' table that have a resolution greater than the average resolution of songs belonging to a specific genre. The placeholder in the subquery represents the genre of interest.
train.3621,music_1,"List the id, genre and artist name of English songs ordered by rating.",1,"SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   'english' ORDER BY rating",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   [PLACEHOLDER-TYPE:STRING] ORDER BY rating","This virtual table provides a list of unique identifiers, genres, and artist names from the 'song' table for songs available in a specific language. The placeholder in the WHERE clause represents the language of the songs being queried."
train.3625,music_1,Find the names of the artists who have produced English songs but have never received rating higher than 8.,1,SELECT DISTINCT artist_name FROM song WHERE languages  =  'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT artist_name FROM song WHERE languages  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique names of artists who have songs available in a specific language but excludes those artists whose songs have a rating above a certain threshold. The placeholders in the WHERE clause represent the language and the rating criteria.
train.3627,music_1,Find the names of the artists who are from Bangladesh and have never received rating higher than 7.,1,SELECT DISTINCT artist_name FROM artist WHERE country  =  'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT artist_name FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of artists from a specific country who have not released any songs with a rating above a certain threshold. The placeholders in the WHERE clause represent the country and the rating criteria.
train.3629,baseball_1,what is the full name and id of the college with the largest number of baseball players?,1,"SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of colleges along with their unique identifiers, sorted by the number of players associated with each college. The placeholder in the LIMIT clause allows the user to specify the maximum number of colleges to retrieve based on player associations."
train.3633,baseball_1,What are first and last names of players participating in all star game in 1998?,1,"SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the first and last names of players who participated in the All-Star game during a specific year. The placeholder in the WHERE clause represents the year of the All-Star game.
train.3635,baseball_1,"What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",1,"SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of players along with their first and last names, and their unique identifiers, who have participated in All-Star games. The results are grouped by player ID and ordered by the count of All-Star appearances in descending order, with a limit set by a placeholder for the maximum number of players to display."
train.3637,baseball_1,How many players enter hall of fame each year?,1,"SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;","This virtual table summarizes the number of players inducted into the Hall of Fame for each year. The placeholder in the SELECT statement represents the year of induction, and the count reflects the total number of inductees for that year."
train.3642,baseball_1,Find the id and rank of the team that has the highest average attendance rate in 2014.,1,"SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the team IDs and their ranks for teams that hosted home games in a specific year. The results are grouped by team ID and ordered by the average attendance of the home games in descending order, with a limit on the number of results returned. The placeholders represent the year of the home games and the maximum number of teams to display."
train.3643,baseball_1,"What are the manager's first name, last name and id who won the most manager award?",1,"SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of players' first and last names along with their unique identifiers who have received manager awards. The results are grouped by player ID and ordered by the number of awards received, with a limit set by a placeholder for numeric values."
train.3645,baseball_1,How many parks are there in the state of NY?,1,SELECT count(*) FROM park WHERE state  =  'NY';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM park WHERE state  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of parks located in a specific state. The placeholder in the WHERE clause represents the state name being queried.
train.3648,baseball_1,"Find the first name, last name and id for the top three players won the most player awards.",1,"SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of players along with their first and last names from the 'player' table, who have received awards. The results are grouped by player ID to ensure uniqueness and are ordered by the number of awards received in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of players to return."
train.3653,baseball_1,"How many players born in USA are right-handed batters? That is, have the batter value 'R'.",1,SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM player WHERE birth_country = [PLACEHOLDER-TYPE:STRING] AND bats  =  [PLACEHOLDER-TYPE:STRING];,This virtual table counts the number of players from a specific birth country who bat with a specified hand (left or right). The placeholders in the WHERE clause represent the birth country and batting hand of the players.
train.3655,baseball_1,What is the average height of the players from the college named 'Yale University'?,1,SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the average height of players who attended a specific college. The placeholder in the WHERE clause represents the full name of the college being queried.
train.3660,baseball_1,Which team offers the lowest average salary? Give me the name and id of the team.,1,"SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of team names and their identifiers from the 'team' table, along with the average salary of players from the 'salary' table. The results are grouped by team and ordered by the average salary in ascending order, with a limit on the number of teams returned based on a specified number."
train.3675,baseball_1,"How many games in 1885 postseason resulted in ties (that is, the value of ""ties"" is '1')?",1,SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM postseason WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] AND ties  =  [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides the total count of postseason events for a specific year and the number of ties that occurred in that year. The placeholders represent the year of the postseason and the number of ties, allowing users to specify their desired values."
train.3687,baseball_1,How many parks are there in Atlanta city?,1,SELECT count(*) FROM park WHERE city = 'Atlanta';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM park WHERE city = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of parks located in a specific city. The placeholder in the WHERE clause represents the name of the city being queried.
train.3695,baseball_1,How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?,1,SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  [PLACEHOLDER-TYPE:STRING] AND T2.name_last = [PLACEHOLDER-TYPE:STRING] AND T1.year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];,"This virtual table calculates the total salary earned by a specific player over a range of years. The player is identified by their first and last name, and the salary records are filtered based on the specified year range."
train.3703,baseball_1,List the names of states that have more than 2 parks.,1,SELECT state FROM park GROUP BY state HAVING count(*)  >  2;,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT state FROM park GROUP BY state HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of states where baseball parks are located, specifically those states that have more than a specified number of parks. The placeholder in the HAVING clause represents the minimum count of parks required for a state to be included in the results."
train.3705,baseball_1,"How many team franchises are active, with active value 'Y'?",1,SELECT count(*) FROM team_franchise WHERE active = 'Y';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM team_franchise WHERE active = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of active franchises from the 'team_franchise' table. The placeholder in the WHERE clause represents the status of the franchise's activity.
train.3708,baseball_1,Find all the cities that have 2 to 4 parks.,1,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the cities where parks are located, grouped by city. It filters the results to include only those cities that have a number of parks within a specified range, represented by placeholders for numeric values."
train.3711,mountain_photos,How many camera lenses have a focal length longer than 15 mm?,1,SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of camera lenses from the 'camera_lens' table that have a focal length greater than a specified value. The placeholder in the WHERE clause represents the minimum focal length in millimeters.
train.3712,mountain_photos,"Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",1,"SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC","This virtual table lists the brands and model names of camera lenses from the 'camera_lens' table, ordered by their maximum aperture in descending order. This allows users to see which lenses have the largest maximum aperture first."
train.3713,mountain_photos,"List the id, color scheme, and name for all the photos.",1,"SELECT id ,  color ,  name FROM photos",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT id ,  color ,  name FROM photos","This virtual table describes the unique identifiers, color profiles, and titles of photos from the 'photos' table. The placeholders can be used to filter or modify the selection based on specific criteria."
train.3714,mountain_photos,What are the maximum and average height of the mountains?,1,"SELECT max(height) ,  avg(height) FROM mountain",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(height) ,  avg(height) FROM mountain",This virtual table provides the maximum and average heights of mountains from the 'mountain' table. The query aggregates the height data to give insights into the elevation of mountains.
train.3715,mountain_photos,What are the average prominence of the mountains in country 'Morocco'?,1,SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(prominence) FROM mountain WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average prominence of mountains from the 'mountain' table that are located in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.3716,mountain_photos,"What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",1,"SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  height ,  prominence FROM mountain WHERE range != [PLACEHOLDER-TYPE:STRING]","This virtual table describes the names, heights, and prominences of mountains from the 'mountain' table that do not belong to a specific mountain range. The placeholder in the WHERE clause represents the name of the mountain range to exclude."
train.3718,mountain_photos,What are the id and name of the mountains that have at least 2 photos?,1,"SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of mountains along with their unique identifiers from the 'mountain' table that have been featured in a specified number of photos. The placeholder in the HAVING clause represents the minimum count of photos associated with each mountain.
train.3719,mountain_photos,What are the names of the cameras that have taken picture of the most mountains?,1,SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the model names of camera lenses used in photos, ordered by the frequency of their use. The placeholder in the LIMIT clause allows the user to specify the maximum number of lens models to retrieve."
train.3721,mountain_photos,How many different kinds of lens brands are there?,1,SELECT count(DISTINCT brand) FROM camera_lens,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT brand) FROM camera_lens,This virtual table provides the count of distinct camera lens brands from the 'camera_lens' table. The result will indicate how many unique brands are available in the database.
train.3722,mountain_photos,How many camera lenses are not used in taking any photos?,1,SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos ),This virtual table provides a count of camera lenses from the 'camera_lens' table that have not been used to take any photos. The placeholder in the subquery represents the camera lens identifiers associated with photos.
train.3723,mountain_photos,How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?,1,SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct camera lenses used to take photos of mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.3724,mountain_photos,List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif',1,SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the brands of camera lenses used for photos of mountains that belong to a specific mountain range. The query uses an INTERSECT operation to find common brands from two identical queries, each filtering by the mountain range specified by the placeholder."
train.3726,mountain_photos,"List the camera lens names containing substring ""Digital"".",1,SELECT name FROM camera_lens WHERE name LIKE '%Digital%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM camera_lens WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the model names of camera lenses from the 'camera_lens' table that match a specific pattern. The placeholder in the WHERE clause represents the model name pattern to search for.
train.3728,program_share,Find the names of channels that are not owned by CCTV.,1,SELECT name FROM channel WHERE OWNER != 'CCTV',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM channel WHERE OWNER != [PLACEHOLDER-TYPE:STRING],The virtual table describes the names of channels from the 'channel' table that are not owned by a specific individual or organization. The placeholder in the WHERE clause represents the owner's name.
train.3730,program_share,List all channel names ordered by their rating in percent from big to small.,1,SELECT name FROM channel ORDER BY rating_in_percent DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM channel ORDER BY rating_in_percent DESC,"The virtual table lists the names of channels from the 'channel' table, ordered by their viewer rating percentage in descending order. This allows users to see which channels have the highest ratings."
train.3732,program_share,What is the owner of the channel that has the highest rating ratio?,1,SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of channel owners from the 'channel' table, ordered by their viewer rating percentage in descending order. The placeholder in the LIMIT clause represents the maximum number of owners to be displayed."
train.3734,program_share,how many programs are there?,1,SELECT count(*) FROM program,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM program,This virtual table provides a count of all programs listed in the 'program' table. The query uses the count function to aggregate the total number of entries in the table.
train.3736,program_share,"list all the names of programs, ordering by launch time.",1,SELECT name FROM program ORDER BY launch,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM program ORDER BY launch,"The virtual table describes the names of programs from the 'program' table, ordered by their launch date. This allows users to see the sequence of program launches."
train.3740,program_share,find the name of the program that was launched most recently.,1,SELECT name FROM program ORDER BY launch DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM program ORDER BY launch DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of programs from the 'program' table, ordered by their launch date in descending order. The placeholder in the LIMIT clause represents the maximum number of program names to be returned."
train.3744,program_share,Find the names of the channels that are broadcast in the morning.,1,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of channels that are broadcasting programs at a specific time of day. The placeholder in the WHERE clause represents the time at which the program is being broadcast.
train.3749,program_share,Count the number of programs broadcast for each time section of a day.,1,"SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day","This virtual table provides a count of broadcasts grouped by the time of day from the 'broadcast' table. The result will show how many programs were broadcasted at each specific time, allowing for analysis of broadcasting patterns throughout the day."
train.3750,program_share,find the number of different programs that are broadcast during night time.,1,SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct programs that are broadcasted at a specific time of day. The placeholder in the WHERE clause represents the time of day for which the count is being requested.
train.3756,program_share,List all program origins in the alphabetical order.,1,SELECT origin FROM program ORDER BY origin,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT origin FROM program ORDER BY origin,"This virtual table provides a list of the origins of programs from the 'program' table, sorted in ascending order. The output will show the country or region where each program originates."
train.3760,program_share,find the names of programs whose origin is not in Beijing.,1,SELECT name FROM program WHERE origin != 'Beijing',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM program WHERE origin != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of programs from the 'program' table that do not originate from a specific country or region. The placeholder in the WHERE clause represents the origin's name that is to be excluded.
train.3762,program_share,What are the names of the channels owned by CCTV or HBS?,1,SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM channel WHERE OWNER  =  [PLACEHOLDER-TYPE:STRING] OR OWNER  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of channels from the 'channel' table that are owned by specific individuals or organizations. The placeholders in the WHERE clause represent the names of the owners being queried.
train.3766,program_share,Find the name of the program that is broadcast most frequently.,1,SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of programs from the 'program' table that have been broadcasted, ordered by the frequency of their broadcasts. The placeholder in the LIMIT clause represents the maximum number of program names to return."
train.3768,e_learning,How many courses are there in total?,1,SELECT count(*) FROM COURSES,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM COURSES,This virtual table provides the total number of courses available in the 'Courses' table. The count function is used to aggregate the number of entries in the table.
train.3770,e_learning,"What are the descriptions of the courses with name ""database""?",1,SELECT course_description FROM COURSES WHERE course_name  =  'database',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT course_description FROM COURSES WHERE course_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the detailed description of a specific course from the 'Courses' table based on the course name. The placeholder in the WHERE clause represents the name of the course being queried.
train.3772,e_learning,"What are the addresses of the course authors or tutors with personal name ""Cathrine""",1,SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name	 =  'Cathrine',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name	 =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the primary address line of authors or tutors from the 'Course_Authors_and_Tutors' table who have a specific first name. The placeholder in the WHERE clause represents the first name of the author or tutor.
train.3774,e_learning,List the addresses of all the course authors or tutors.,1,SELECT address_line_1 FROM Course_Authors_and_Tutors,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT address_line_1 FROM Course_Authors_and_Tutors,"This virtual table provides the primary address line of authors or tutors from the 'Course_Authors_and_Tutors' table. There are no filters applied, so it retrieves all entries."
train.3776,e_learning,List all the login names and family names of course author and tutors.,1,"SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT login_name ,  family_name FROM Course_Authors_and_Tutors","This virtual table describes the login names and family names of individuals from the 'Course_Authors_and_Tutors' table, which includes both authors and tutors. The query retrieves these details without any filtering conditions."
train.3778,e_learning,List all the dates of enrollment and completion of students.,1,"SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment","This virtual table provides information about the enrollment dates and completion dates of students in various courses. The data is sourced from the 'Student_Course_Enrolment' table, which tracks each student's registration details for courses they are enrolled in."
train.3780,e_learning,How many distinct students are enrolled in courses?,1,SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment,"This virtual table provides the count of distinct students who have enrolled in courses from the 'Student_Course_Enrolment' table. The query uses the COUNT function to aggregate the unique student identifiers, ensuring that each student is only counted once regardless of how many courses they have enrolled in."
train.3784,e_learning,"Find the dates of the tests taken with result ""Pass"".",1,SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  'Pass',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the dates on which students took tests from the 'Student_Tests_Taken' table, filtered by a specific test result. The placeholder in the WHERE clause represents the result of the test that the user is interested in."
train.3786,e_learning,"How many tests have result ""Fail""?",1,SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  'Fail',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of tests taken by students that resulted in a specific outcome. The placeholder in the WHERE clause represents the result of the test, allowing users to filter based on different test results."
train.3788,e_learning,"What are the login names of the students with family name ""Ward""?",1,SELECT login_name FROM Students WHERE family_name  =  'Ward',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT login_name FROM Students WHERE family_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the login names of students from the 'Students' table who have a specific family name. The placeholder in the WHERE clause represents the family name of the student.
train.3790,e_learning,"What are the dates of the latest logon of the students with family name ""Jaskolski"" or ""Langosh""?",1,SELECT date_of_latest_logon FROM Students WHERE family_name  =  'Jaskolski' OR family_name  =  'Langosh',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_of_latest_logon FROM Students WHERE family_name  =  [PLACEHOLDER-TYPE:STRING] OR family_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the most recent login date of students from the 'Students' table who have a specific family name. The placeholders in the WHERE clause represent the family names of the students being queried.
train.3792,e_learning,"How many students have personal names that contain the word ""son""?",1,SELECT COUNT(*) FROM Students WHERE personal_name LIKE '%son%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(*) FROM Students WHERE personal_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students from the 'Students' table whose first name matches a specified pattern. The placeholder in the WHERE clause allows for flexible searching of student names based on the provided string.
train.3794,e_learning,List all the subject names.,1,SELECT subject_name FROM SUBJECTS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT subject_name FROM SUBJECTS,"This virtual table describes the names of subjects from the 'Subjects' table. The query retrieves the 'subject_name' column, which contains the names of all available subjects."
train.3796,e_learning,List all the information about course authors and tutors in alphabetical order of the personal name.,1,SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name,"This virtual table provides a comprehensive list of all authors and tutors from the 'Course_Authors_and_Tutors' table, sorted by their first names. The data includes their unique identifiers, roles (author or tutor), login credentials, personal names, and gender information."
train.3798,e_learning,List the personal names and family names of all the students in alphabetical order of family name.,1,"SELECT personal_name ,  family_name FROM Students ORDER BY family_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT personal_name ,  family_name FROM Students ORDER BY family_name","This virtual table provides the first and last names of students from the 'Students' table, sorted by their last names. The output will display the names in alphabetical order based on the family name."
train.3800,e_learning,List each test result and its count in descending order of count.,1,"SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC","This virtual table summarizes the results of tests taken by students, showing the test results along with the count of how many times each result was achieved. The results are grouped by the test result and ordered in descending order based on the count of occurrences."
train.3802,e_learning,"Find the login name of the course author that teaches the course with name ""advanced database"".",1,SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  'advanced database',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the login names of authors or tutors from the 'Course_Authors_and_Tutors' table who are associated with a specific course. The placeholder in the WHERE clause represents the name of the course.
train.3804,e_learning,"Find the addresses of the course authors who teach the course with name ""operating system"" or ""data structure"".",1,SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  'operating system' OR T2.course_name  =  'data structure',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  [PLACEHOLDER-TYPE:STRING] OR T2.course_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the primary address line of authors or tutors from the 'Course_Authors_and_Tutors' table who are associated with specific courses. The courses are identified by their names, which are represented by placeholders in the WHERE clause."
train.3806,e_learning,"Find the personal name, family name, and author ID of the course author that teaches the most courses.",1,"SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of authors or tutors along with their personal and family names, specifically those who have authored courses. The results are grouped by the author ID and ordered by the number of courses they have authored, allowing for the identification of the most prolific authors or tutors. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.3808,e_learning,Find the addresses and author IDs of the course authors that teach at least two courses.,1,"SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the primary address lines of authors or tutors from the 'Course_Authors_and_Tutors' table, along with their unique identifiers, for those who have authored a certain number of courses. The placeholder in the HAVING clause represents the minimum count of courses authored by each author or tutor."
train.3810,e_learning,"Find the names of courses taught by the tutor who has personal name ""Julio"".",1,SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  'Julio',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of courses authored by a specific individual from the 'Course_Authors_and_Tutors' table. The placeholder in the WHERE clause represents the first name of the author or tutor.
train.3812,e_learning,"Find the names and descriptions of courses that belong to the subject named ""Computer Science"".",1,"SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  'Computer Science'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and descriptions of courses from the 'Courses' table that are associated with a specific subject. The placeholder in the WHERE clause represents the name of the subject being queried.
train.3814,e_learning,"Find the subject ID, subject name, and the corresponding number of available courses for each subject.",1,"SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",This virtual table provides a summary of the number of courses associated with each subject. It retrieves the subject ID and subject name from the 'Subjects' table and counts the total number of courses linked to each subject from the 'Courses' table. The grouping is done by the subject ID to aggregate the course counts for each subject.
train.3816,e_learning,"Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",1,"SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC","This virtual table provides a summary of the number of courses associated with each subject from the 'Courses' and 'Subjects' tables. It includes the subject ID and the subject name, and it groups the results by subject ID while ordering them by the count of courses in ascending order."
train.3818,e_learning,"What is the date of enrollment of the course named ""Spanish""?",1,SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  'Spanish',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the enrollment dates of students for a specific course from the 'Courses' and 'Student_Course_Enrolment' tables. The placeholder in the WHERE clause represents the name of the course being queried.
train.3820,e_learning,What is the name of the course that has the most student enrollment?,1,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of course names from the 'Courses' table, ordered by the number of students enrolled in each course. The placeholder in the LIMIT clause allows the user to specify the maximum number of course names to retrieve."
train.3822,e_learning,What are the names of the courses that have exactly 1 student enrollment?,1,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of courses from the 'Courses' table that have a specific number of students enrolled. The placeholder in the HAVING clause represents the count of students enrolled in those courses.
train.3824,e_learning,What are the descriptions and names of the courses that have student enrollment bigger than 2?,1,"SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the course descriptions and names from the 'Courses' table for courses that have been enrolled in by more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of student enrollments required to include a course in the results.
train.3829,e_learning,"Find the enrollment date for all the tests that have ""Pass"" result.",1,SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  'Pass',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the enrollment dates of students from the 'Student_Course_Enrolment' table who have taken tests and achieved a specific result. The placeholder in the WHERE clause represents the test result that is being filtered for.
train.3832,e_learning,"List the dates of enrollment and completion of the student with personal name ""Karson"".",1,"SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  'Karson'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the enrollment and completion dates of students from the 'Student_Course_Enrolment' table. It joins with the 'Students' table to filter results based on the student's first name, represented by a placeholder in the WHERE clause."
train.3834,e_learning,"List the dates of enrollment and completion of the student with family name ""Zieme"" and personal name ""Bernie"".",1,"SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  'Zieme' AND T2.personal_name  =  'Bernie'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.personal_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the enrollment and completion dates of courses for students from the 'Student_Course_Enrolment' table. It filters the results based on the student's family and personal names, which are specified using placeholders for string values."
train.3836,e_learning,Find the student ID and login name of the student with the most course enrollments,1,"SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of student IDs along with their corresponding login names from the 'Students' table. The data is filtered to show only those students who are enrolled in courses, and it is grouped by student ID to count the number of courses each student is enrolled in. The results are ordered by the number of courses in descending order, and a placeholder is used to limit the number of results returned."
train.3838,e_learning,Find the student ID and personal name of the student with at least two enrollments.,1,"SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of student IDs and their corresponding personal names from the 'Students' table for those students who have enrolled in a course at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of course enrollments required to be included in the results.
train.3840,e_learning,Find the student ID and middle name for all the students with at most two enrollments.,1,"SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of student IDs along with their middle names from the 'Students' table, filtered by the number of courses they are enrolled in. The placeholder in the HAVING clause represents the maximum number of courses a student can be enrolled in to be included in the results."
train.3842,e_learning,Find the personal names of students not enrolled in any course.,1,SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id,"This virtual table lists the first names of students who are not enrolled in any courses. The query uses the EXCEPT clause to exclude students who have a matching record in the Student_Course_Enrolment table, indicating their enrollment status."
train.3844,e_learning,How many students did not have any course enrollment?,1,SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment),"This virtual table provides the count of students who are not enrolled in any courses from the 'Students' table. The subquery identifies students who have registered for courses, and the main query counts those who are not included in that list."
train.3846,e_learning,Find the common login name of course authors and students.,1,SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students,This virtual table identifies the login names that are shared between authors/tutors and students in the system. The intersection of the two tables ensures that only those login names that exist in both the 'Course_Authors_and_Tutors' and 'Students' tables are returned.
train.3848,e_learning,Find the common personal name of course authors and students.,1,SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students,This virtual table describes the first names of individuals who are either authors or tutors and also registered as students. The intersection of the two sets ensures that only those personal names that appear in both the 'Course_Authors_and_Tutors' and 'Students' tables are included.
train.3850,insurance_policies,Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.,1,"SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )","This virtual table provides a list of claims that have been made, along with their submission dates, from the 'Claims' table. It includes claims that have multiple settlements, as indicated by the count of settlements being greater than a specified number. Additionally, it also retrieves claims that have the maximum amount claimed, ensuring that both frequent and high-value claims are represented. The placeholders in the HAVING clause allow for dynamic filtering based on the number of settlements."
train.3852,insurance_policies,Which customer had at least 2 policies but did not file any claims? List the customer details and id.,1,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id","This virtual table provides a list of customer details and their unique identifiers for customers who have a minimum number of insurance policies, excluding those who have made any claims. The placeholders in the HAVING clause represent the minimum count of policies required."
train.3854,insurance_policies,"List the method, date and amount of all the payments, in ascending order of date.",1,"SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC","This virtual table provides a list of payment transactions from the 'Payments' table, displaying the payment method code, the date the payment was made, and the total amount paid. The results are ordered by the date of payment in ascending order."
train.3860,insurance_policies,"Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",1,"SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",This virtual table provides the dates when claims were made and settled from the 'Claims' table for those claims where the amount claimed exceeds the average amount claimed across all claims. The placeholder in the WHERE clause represents a condition based on the average amount claimed.
train.3865,insurance_policies,Find the number of settlements each claim corresponds to. Show the number together with the claim id.,1,"SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id","This virtual table provides a count of settlements associated with each insurance claim from the 'Claims' table. The placeholder in the SELECT statement represents the unique identifier for each claim, while the count reflects the number of settlements linked to that claim."
train.3866,insurance_policies,"Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",1,"SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of insurance claims from the 'Claims' table, showing the claim ID, the date the claim was made, and the count of settlements associated with each claim. The results are grouped by claim ID and ordered by the number of settlements in descending order, with a limit on the number of records returned based on a specified number."
train.3870,insurance_policies,"Of all the claims, what was the earliest date when any claim was made?",1,SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of claim submission dates from the 'Claims' table, ordered chronologically. The placeholder in the LIMIT clause allows the user to specify the maximum number of dates to retrieve."
train.3872,insurance_policies,What is the total amount of settlement made for all the settlements?,1,SELECT sum(Amount_Settled) FROM Settlements,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Amount_Settled) FROM Settlements,"This virtual table summarizes the total amount settled for all claims recorded in the 'Settlements' table. The query uses the SUM function to aggregate the 'Amount_Settled' values, providing a single total figure for all settlements."
train.3874,insurance_policies,Who are the customers that had more than 1 policy? List the customer details and id.,1,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides detailed information about customers who have more than a specified number of insurance policies. The placeholder in the HAVING clause represents the minimum count of policies a customer must have to be included in the results.
train.3876,insurance_policies,What are the claim dates and settlement dates of all the settlements?,1,"SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",This virtual table provides the dates when claims associated with settlements were made and resolved. The placeholders in the SELECT statement allow for further filtering or modification based on specific criteria related to the claims or settlements.
train.3882,insurance_policies,What is the total amount of payment?,1,SELECT sum(Amount_Payment) FROM Payments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Amount_Payment) FROM Payments,The virtual table summarizes the total amount of payments made in the 'Payments' table. It provides a single value representing the sum of all payment transactions recorded.
train.3884,insurance_policies,What are all the distinct details of the customers?,1,SELECT DISTINCT customer_details FROM Customers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT customer_details FROM Customers,The virtual table describes the distinct details of customers from the 'Customers' table. The placeholder in the SELECT clause represents the unique customer information.
train.3888,insurance_policies,How many settlements are there in total?,1,SELECT count(*) FROM Settlements,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Settlements,This virtual table provides a count of all settlement records from the 'Settlements' table. It serves to give an overview of the total number of settlements processed in the database.
train.3890,insurance_policies,"Which Payments were processed with Visa? List the payment Id, the date and the amount.",1,"SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides details about payment transactions from the 'Payments' table, specifically showing the payment ID, the date the payment was made, and the total amount paid. The placeholder in the WHERE clause represents the payment method code used for filtering the results."
train.3896,insurance_policies,Find the total claimed amount of all the claims.,1,SELECT sum(Amount_Claimed) FROM Claims,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Amount_Claimed) FROM Claims,"The virtual table summarizes the total amount claimed across all insurance claims recorded in the 'Claims' table. The query uses the SUM function to aggregate the 'Amount_Claimed' values, providing a single total figure for all claims."
train.3906,hospital_1,what are name and phone number of patients who had more than one appointment?,1,"SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and phone numbers of patients who have more than a specified number of appointments. The data is retrieved by joining the 'Appointment' table with the 'Patient' table based on the patient's social security number, and it groups the results by patient to count the number of appointments."
train.3908,hospital_1,Find the id of the appointment with the most recent start date?,1,SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of appointment IDs from the 'Appointment' table, sorted by the start time in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of appointment IDs to retrieve."
train.3912,hospital_1,List the name of physicians who never took any appointment.,1,SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID,"This virtual table lists the names of physicians who do not have any scheduled appointments. The query uses an EXCEPT clause to exclude the names of physicians who are present in the appointment table, ensuring that only those without appointments are displayed."
train.3916,hospital_1,What is the name of the patient who made the most recent appointment?,1,SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of patient names from the 'Patient' table who have appointments, ordered by the start time of their appointments in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of patient names to retrieve."
train.3918,hospital_1,How many patients stay in room 112?,1,SELECT count(patient) FROM stay WHERE room  =  112,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(patient) FROM stay WHERE room  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of patients who are currently staying in a specific room from the 'Stay' table. The placeholder in the WHERE clause represents the unique identifier for the room.
train.3920,hospital_1,How many patients' prescriptions are made by physician John Dorian?,1,SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = 'John Dorian',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of patients who have received prescriptions from a specific physician. The placeholder in the WHERE clause represents the physician's name.
train.3922,hospital_1,Find the name of medication used on the patient who stays in room 111?,1,SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of medications prescribed to patients who are currently staying in a specific room. The placeholders in the WHERE clause represent the room number.
train.3925,hospital_1,What is the id of the patient who stayed in room 111 most recently?,1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT patient FROM stay WHERE room  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY staystart DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of patients currently staying in a specific room, ordered by the start date of their stay in descending order. The placeholders represent the room number and the limit on the number of patients to retrieve."
train.3926,hospital_1,What is the name of the nurse has the most appointments?,1,SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of nurses who have prepared patients for appointments, ordered by the number of appointments they have prepared for, showing only the top specified number of nurses. The placeholder in the LIMIT clause represents the maximum number of nurses to display."
train.3932,hospital_1,Find the number of rooms located on each block floor.,1,"SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",This virtual table provides a count of rooms grouped by their blocked floor status from the 'Block' and 'Room' tables. The placeholders represent the conditions for joining the two tables based on the blocked floor and blocked code statuses.
train.3935,hospital_1,How many rooms are located for each block code?,1,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",This virtual table provides a count of rooms grouped by their block code status from the 'Block' and 'Room' tables. The placeholders represent the block floor and block code statuses used for filtering the results.
train.3936,hospital_1,What are the unique block codes that have available rooms?,1,SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT blockcode FROM room WHERE unavailable  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of distinct block codes from the 'Room' table, filtered by the availability status of the rooms. The placeholder in the WHERE clause represents the availability status of the rooms."
train.3938,hospital_1,How many different types of rooms are there?,1,SELECT count(DISTINCT roomtype) FROM room,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT roomtype) FROM room,This virtual table provides the count of distinct room types available in the 'Room' table. The query uses a placeholder to represent the room type count.
train.3942,hospital_1,Find the name and position of physicians who prescribe some medication whose brand is X?,1,"SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  'X'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a list of unique names and positions of physicians who have prescribed medications of a specific brand. The placeholders in the WHERE clause represent the brand name of the medication.
train.3946,hospital_1,Find the name of physicians whose position title contains the word 'senior'.,1,SELECT name FROM physician WHERE POSITION LIKE '%senior%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM physician WHERE POSITION LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of physicians from the 'Physician' table who hold a specific job title or position. The placeholder in the WHERE clause represents the job title being queried.
train.3950,hospital_1,Find the names of all patients who have an undergoing treatment and are staying in room 111.,1,SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of distinct patient names who have undergone procedures while staying in a specific room. The placeholders in the WHERE clause represent the room identifier.
train.3952,hospital_1,List the names of all distinct nurses ordered by alphabetical order?,1,SELECT DISTINCT name FROM nurse ORDER BY name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT name FROM nurse ORDER BY name,"This virtual table provides a distinct list of nurse names from the 'Nurse' table, sorted in alphabetical order. The query ensures that each name appears only once in the result set, regardless of how many times it may appear in the original table."
train.3954,hospital_1,Find the names of nurses who are nursing an undergoing treatment.,1,SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID,"This virtual table provides a list of unique names of nurses who assisted in medical procedures performed on patients. The data is retrieved by joining the 'undergoes' table, which records the procedures, with the 'nurse' table, which contains the details of the nurses, based on the nurse's identifier."
train.3956,hospital_1,"List the names of all distinct medications, ordered in an alphabetical order.",1,SELECT DISTINCT name FROM medication ORDER BY name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT name FROM medication ORDER BY name,"This virtual table provides a distinct list of medication names from the 'Medication' table, sorted in alphabetical order. The query ensures that each medication name appears only once in the results."
train.3965,hospital_1,Find the ids of the nurses who are on call in block floor 1 and block code 1.,1,SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT nurse FROM on_call WHERE blockfloor  =  [PLACEHOLDER-TYPE:NUMBER] AND blockcode  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of nurses who are on call, filtered by specific conditions related to blocked floors and blocked codes. The placeholders in the WHERE clause represent the identifiers for the blocked floor and blocked code statuses."
train.3966,hospital_1,"What are the highest cost, lowest cost and average cost of procedures?",1,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures","This virtual table provides the maximum, minimum, and average costs of medical procedures from the 'Procedures' table. The query aggregates the cost data to give insights into the pricing of procedures."
train.3968,hospital_1,List the name and cost of all procedures sorted by the cost from the highest to the lowest.,1,"SELECT name ,  cost FROM procedures ORDER BY cost DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  cost FROM procedures ORDER BY cost DESC","This virtual table provides a list of medical procedures along with their associated costs, sorted in descending order by cost. The placeholders in the SELECT statement allow for dynamic querying of procedure names and costs."
train.3975,hospital_1,Which physician was trained in the procedure that costs the most.,1,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians who are trained in specific medical procedures, ordered by the cost of those procedures in descending order. The placeholder in the LIMIT clause represents the maximum number of physician names to be returned."
train.3976,hospital_1,What is the average cost of procedures that physician John Wen was trained in?,1,SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average cost of procedures that a specific physician is trained in. The placeholder in the WHERE clause represents the physician's name.
train.3978,hospital_1,Find the names of procedures which physician John Wen was trained in.,1,SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of medical procedures that a specific physician is trained in. The placeholder in the WHERE clause represents the physician's name.
train.3982,hospital_1,Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?,1,SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT name FROM procedures WHERE cost  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of medical procedures from the 'Procedures' table that have a cost greater than a specified amount, excluding those procedures that a specific physician is trained in. The placeholders represent the cost threshold and the physician's name."
train.3984,hospital_1,Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.,1,SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT name FROM procedures WHERE cost  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of medical procedures that are less expensive than a specified cost and are also treatments that a specific physician is certified to perform. The placeholders in the query represent the cost limit and the physician's name.
train.3986,hospital_1,Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.,1,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of physicians who are affiliated with a specific department. The query uses an INTERSECT operation to find physicians that are associated with the same department, ensuring that only those who meet the criteria from both queries are returned. The placeholders in the WHERE clause represent the department's name."
train.3988,hospital_1,Find the name of physicians who are affiliated with Surgery or Psychiatry department.,1,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T3.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of physicians who are affiliated with specific departments in the healthcare system. The query joins the 'Physician' table with the 'Affiliated_With' table to link physicians to their respective departments, and then further joins with the 'Department' table to filter by the names of the departments specified in the placeholders."
train.3990,hospital_1,Find the names of patients who are not using the medication of Procrastin-X.,1,SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of patients who have not been prescribed a specific medication. The query excludes patients who have a record in the 'Prescribes' table for the specified medication name, using a placeholder for the medication's name."
train.3992,hospital_1,Find the number of patients who are not using the medication of Procrastin-X.,1,SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' ),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] ),This virtual table counts the number of patients who have not been prescribed a specific medication. It filters the patients based on their Social Security Number (SSN) and checks against a subquery that retrieves patients who have received the specified medication by joining the 'Prescribes' and 'Medication' tables. The placeholder in the query represents the name of the medication.
train.3994,hospital_1,How many appointments are there?,1,SELECT count(*) FROM appointment,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM appointment,"This virtual table provides the total number of appointments recorded in the 'Appointment' table. The count function is used to aggregate the total number of entries, which gives an overview of the appointment activity."
train.3996,hospital_1,Find the names of nurses who are on call.,1,SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse,This virtual table lists the distinct names of nurses who are currently on call. It retrieves data from the 'nurse' table and joins it with the 'on_call' table based on the nurse's unique identifier. The result will only include unique names to avoid duplicates.
train.3998,ship_mission,How many ships are there?,1,SELECT count(*) FROM ship,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ship,"This virtual table provides the total count of ships recorded in the 'ship' table. It does not filter or specify any conditions, thus returning the overall number of entries present."
train.4000,ship_mission,List the name of ships in ascending order of tonnage.,1,SELECT Name FROM ship ORDER BY Tonnage ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM ship ORDER BY Tonnage ASC,"This virtual table lists the names of ships from the 'ship' table, ordered by their tonnage in ascending order. The placeholder in the ORDER BY clause represents the tonnage of the ships."
train.4004,ship_mission,"List the name of ships whose nationality is not ""United States"".",1,SELECT Name FROM ship WHERE Nationality != 'United States',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM ship WHERE Nationality != [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of ships from the 'ship' table that are not registered under a specific nationality. The placeholder in the WHERE clause represents the nationality to be excluded.
train.4006,ship_mission,Show the name of ships whose nationality is either United States or United Kingdom.,1,SELECT Name FROM ship WHERE Nationality  =  'United States' OR Nationality  =  'United Kingdom',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM ship WHERE Nationality  =  [PLACEHOLDER-TYPE:STRING] OR Nationality  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of ships from the 'ship' table that are registered under specific nationalities. The placeholders in the WHERE clause represent the names of the nationalities being queried.
train.4008,ship_mission,What is the name of the ship with the largest tonnage?,1,SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of ships from the 'ship' table, ordered by their tonnage in descending order. The placeholder in the LIMIT clause represents the maximum number of ship names to be returned."
train.4014,ship_mission,List the nations that have more than two ships.,1,SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of nationalities of ships from the 'ship' table that have more than a specified number of entries. The placeholder in the HAVING clause represents the minimum count of ships required for a nationality to be included in the results.
train.4018,ship_mission,"Show codes and fates of missions, and names of ships involved.",1,"SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID","This virtual table provides information about missions and their associated ships. It includes the mission code, the fate of the mission, and the name of the ship involved. The data is retrieved by joining the 'mission' table with the 'ship' table based on the ship identifier, allowing for a comprehensive view of each mission's outcome alongside the ship's name."
train.4020,ship_mission,Show names of ships involved in a mission launched after 1928.,1,SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of ships from the 'ship' table that were involved in missions launched after a specific year. The placeholder in the WHERE clause represents the year after which the missions were launched.
train.4022,ship_mission,"Show the distinct fate of missions that involve ships with nationality ""United States""",1,SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  'United States',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a distinct list of mission outcomes (Fate) from the 'mission' table, filtered by the nationality of the associated ships from the 'ship' table. The placeholder in the WHERE clause represents the nationality of the ships."
train.4024,ship_mission,List the name of ships that are not involved in any mission,1,SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission),This virtual table lists the names of ships from the 'ship' table that have not been associated with any missions. The placeholder in the WHERE clause represents the condition to filter out ships that have participated in missions.
train.4026,ship_mission,Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.,1,SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT TYPE FROM ship WHERE Tonnage  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the types of ships from the 'ship' table that have a tonnage greater than a specified value and less than another specified value. The placeholders in the query represent the numeric values for tonnage limits.
train.4028,student_1,Find the number of students in total.,1,SELECT count(*) FROM list,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM list,"This virtual table provides the total number of students recorded in the 'list' table. The query uses the count function to aggregate the number of entries, which is useful for understanding the size of the student population."
train.4030,student_1,Find the last names of students studying in room 111.,1,SELECT lastname FROM list WHERE classroom  =  111,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT lastname FROM list WHERE classroom  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the last names of students from the 'list' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.
train.4032,student_1,Find the first names of students studying in room 108.,1,SELECT firstname FROM list WHERE classroom  =  108,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT firstname FROM list WHERE classroom  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students from the 'list' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.
train.4034,student_1,What are the first names of students studying in room 107?,1,SELECT DISTINCT firstname FROM list WHERE classroom  =  107,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT firstname FROM list WHERE classroom  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a distinct list of first names of students from the 'list' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.
train.4036,student_1,For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.,1,"SELECT DISTINCT classroom ,  grade FROM list",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT DISTINCT classroom ,  grade FROM list",This virtual table provides a distinct list of classrooms along with the corresponding academic grade levels from the 'list' table. The placeholders in the SELECT statement allow for further filtering or manipulation of the data as needed.
train.4039,student_1,Find the grade taught in classroom 103.,1,SELECT DISTINCT grade FROM list WHERE classroom  =  103,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT grade FROM list WHERE classroom  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a distinct list of academic grades from the 'list' table for students assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.
train.4042,student_1,Which classrooms are used by grade 4?,1,SELECT DISTINCT classroom FROM list WHERE grade  =  4,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT classroom FROM list WHERE grade  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a distinct list of classrooms from the 'list' table where students are enrolled in a specific academic grade level. The placeholder in the WHERE clause represents the grade level of the students.
train.4044,student_1,Which classrooms are used by grade 5?,1,SELECT DISTINCT classroom FROM list WHERE grade  =  5,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT classroom FROM list WHERE grade  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a distinct list of classrooms from the 'list' table where students are enrolled in a specific academic grade level. The placeholder in the WHERE clause represents the grade level of the students.
train.4050,student_1,Find the first names of all the teachers that teach in classroom 110.,1,SELECT firstname FROM teachers WHERE classroom  =  110,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT firstname FROM teachers WHERE classroom  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of teachers from the 'teachers' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.
train.4052,student_1,Find the last names of teachers teaching in classroom 109.,1,SELECT lastname FROM teachers WHERE classroom  =  109,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT lastname FROM teachers WHERE classroom  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the last names of teachers from the 'teachers' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.
train.4054,student_1,Report the first name and last name of all the teachers.,1,"SELECT DISTINCT firstname ,  lastname FROM teachers",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT DISTINCT firstname ,  lastname FROM teachers",This virtual table provides a distinct list of first and last names of teachers from the 'teachers' table. The absence of any filtering conditions means it retrieves all unique teacher names.
train.4056,student_1,Report the first name and last name of all the students.,1,"SELECT DISTINCT firstname ,  lastname FROM list",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT DISTINCT firstname ,  lastname FROM list",This virtual table provides a distinct list of first and last names of students from the 'list' table. The absence of any filtering conditions means it retrieves all unique student names regardless of their grade or classroom.
train.4058,student_1,Find all students taught by OTHA MOYER. Output the first and last names of the students.,1,"SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'OTHA' AND T2.lastname  =  'MOYER'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lastname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the first and last names of students from the 'list' table who are in the same classroom as a specific teacher. The placeholders in the WHERE clause represent the teacher's first and last names.
train.4060,student_1,Find all students taught by MARROTTE KIRK. Output first and last names of students.,1,"SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'MARROTTE' AND T2.lastname  =  'KIRK'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lastname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the first and last names of students from the 'list' table who are in the same classroom as a specific teacher. The placeholders in the WHERE clause represent the teacher's first and last names.
train.4062,student_1,Find the first and last name of all the teachers that teach EVELINA BROMLEY.,1,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  'EVELINA' AND T1.lastname  =  'BROMLEY'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lastname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of teachers who are assigned to the same classroom as a specific student. The placeholders in the WHERE clause represent the student's first and last names.
train.4064,student_1,Find the last names of all the teachers that teach GELL TAMI.,1,SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  'GELL' AND T1.lastname  =  'TAMI',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of teachers who share the same classroom as a specific student. The placeholders in the WHERE clause represent the student's first and last names.
train.4066,student_1,How many students does LORIA ONDERSMA teaches?,1,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'LORIA' AND T2.lastname  =  'ONDERSMA',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students from the 'list' table who are in the same classroom as a specific teacher. The placeholders in the WHERE clause represent the first and last names of the teacher being queried.
train.4068,student_1,How many students does KAWA GORDON teaches?,1,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'KAWA' AND T2.lastname  =  'GORDON',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students from the 'list' table who are in the same classroom as a specific teacher. The placeholders in the WHERE clause represent the first and last names of the teacher being queried.
train.4070,student_1,Find the number of students taught by TARRING LEIA.,1,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'TARRING' AND T2.lastname  =  'LEIA',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students from the 'list' table who are in the same classroom as a specific teacher. The placeholders in the WHERE clause represent the first and last names of the teacher being queried.
train.4072,student_1,How many teachers does the student named CHRISSY NABOZNY have?,1,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  'CHRISSY' AND T1.lastname  =  'NABOZNY',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students from the 'list' table who are in the same classroom as their respective teachers from the 'teachers' table. The placeholders in the WHERE clause represent the first and last names of the student being queried.
train.4074,student_1,How many teachers does the student named MADLOCK RAY have?,1,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  'MADLOCK' AND T1.lastname  =  'RAY',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students from the 'list' table who are in the same classroom as a specific teacher. The placeholders in the WHERE clause represent the first and last names of the student being queried.
train.4080,student_1,"For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",1,"SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",This virtual table summarizes the number of distinct classrooms and total students for each academic grade level from the 'list' table. The placeholders in the SELECT statement allow for dynamic querying based on the grade level.
train.4082,student_1,"For each classroom, report the classroom number and the number of grades using it.",1,"SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom","This virtual table summarizes the number of distinct academic grade levels present in each classroom from the 'list' table. The query groups the results by the 'classroom' column, allowing for an overview of the diversity of grades in each classroom."
train.4086,student_1,Report the number of students in each classroom.,1,"SELECT classroom ,  count(*) FROM list GROUP BY classroom",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT classroom ,  count(*) FROM list GROUP BY classroom","This virtual table summarizes the number of students in each classroom from the 'list' table. The query groups the results by the 'classroom' column, allowing for a count of students per classroom."
train.4089,student_1,"For each grade 0 classroom, return the classroom number and the count of students.",1,"SELECT classroom ,  count(*) FROM list WHERE grade  =  '0' GROUP BY classroom",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT classroom ,  count(*) FROM list WHERE grade  =  [PLACEHOLDER-TYPE:STRING] GROUP BY classroom","This virtual table provides a count of students in each classroom from the 'list' table, filtered by a specific academic grade level. The placeholder in the WHERE clause represents the grade level of interest."
train.4092,student_1,Find the name of the teacher who teaches the largest number of students.,1,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of teachers' first and last names from the 'teachers' table who share classrooms with students from the 'list' table. The results are grouped by the teachers' names and ordered by the number of students in each classroom, with a limit on the number of results returned based on a specified number."
train.4095,student_1,How many students does one classroom have?,1,"SELECT count(*) ,  classroom FROM list GROUP BY classroom",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  classroom FROM list GROUP BY classroom",This virtual table provides a count of students grouped by their designated classrooms from the 'list' table. The result will show the number of students in each classroom.
train.4097,company_employee,List the names of companies by ascending number of sales.,1,SELECT Name FROM company ORDER BY Sales_in_Billion ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM company ORDER BY Sales_in_Billion ASC,"This virtual table lists the names of companies from the 'company' table, ordered by their total sales revenue in ascending order. This allows users to see which companies have the lowest sales figures at the top of the list."
train.4098,company_employee,What are the headquarters and industries of all companies?,1,"SELECT Headquarters ,  Industry FROM company",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Headquarters ,  Industry FROM company","This virtual table provides information about the headquarters and industry of companies from the 'company' table. The query retrieves the relevant columns without any filtering conditions, allowing for a broad overview of the companies' locations and the sectors they operate in."
train.4100,company_employee,What is the maximum and minimum market value of companies?,1,"SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",This virtual table provides the maximum and minimum market values of companies from the 'company' table. The placeholders in the SELECT statement represent the market values in billions.
train.4101,company_employee,What is the headquarter of the company with the largest sales?,1,SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of company headquarters from the 'company' table, ordered by their total sales revenue in descending order. The placeholder in the LIMIT clause represents the maximum number of headquarters to be returned."
train.4102,company_employee,Show the different headquarters and number of companies at each headquarter.,1,"SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters","This virtual table summarizes the number of companies located in each headquarters from the 'company' table. The query groups the results by the headquarters location, allowing users to see how many companies are based in each area."
train.4104,company_employee,Show the headquarters that have at least two companies.,1,SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of company headquarters from the 'company' table that have a certain number of companies located there. The placeholder in the HAVING clause represents the minimum count of companies required at each headquarters location.
train.4106,company_employee,Show the names of companies and of employees.,1,"SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID","This virtual table provides the names of individuals along with the names of the companies they are employed at. It combines data from the 'people', 'company', and 'employment' tables, linking them through their respective identifiers. The placeholders in the query allow for dynamic filtering based on specific criteria if needed."
train.4108,company_employee,Show the names of employees that work for companies with sales bigger than 200.,1,SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of people who are employed at companies with sales exceeding a specified amount in billions. The placeholders in the WHERE clause represent the sales threshold.
train.4110,company_employee,List the names of people that are not employed by any company,1,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment),"This virtual table lists the names of individuals from the 'people' table who are not currently employed by any company. The subquery identifies the People_IDs of those who are employed, and the main query filters out these IDs to return only those who are not employed."
train.4112,film_rank,How many film are there?,1,SELECT count(*) FROM film,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM film,"This virtual table provides the total count of films available in the 'film' table. It does not filter or group the results, thus returning a single numeric value representing the total number of films."
train.4114,film_rank,List the distinct director of all films.,1,SELECT DISTINCT Director FROM film,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Director FROM film,"This virtual table lists the unique directors of films from the 'film' table. The query uses the DISTINCT keyword to ensure that each director is only listed once, regardless of how many films they have directed."
train.4116,film_rank,What is the average ticket sales gross in dollars of films?,1,SELECT avg(Gross_in_dollar) FROM film,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Gross_in_dollar) FROM film,This virtual table calculates the average gross revenue of films from the 'film' table. The placeholder in the SELECT clause represents the gross revenue in dollars.
train.4118,film_rank,What are the low and high estimates of film markets?,1,"SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",This virtual table provides the lower and upper bounds of revenue estimates for films from the 'film_market_estimation' table. The placeholders represent specific films and markets for which the estimates are made.
train.4122,film_rank,What are the maximum and minimum number of cities in all markets.,1,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",This virtual table provides the maximum and minimum number of cities across all markets from the 'market' table. The query aggregates the 'Number_cities' column to find the highest and lowest values.
train.4124,film_rank,How many markets have number of cities smaller than 300?,1,SELECT count(*) FROM market WHERE Number_cities  <  300,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM market WHERE Number_cities  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of markets from the 'market' table that have a total number of cities less than a specified value. The placeholder in the query represents the maximum number of cities to filter the results.
train.4126,film_rank,List all countries of markets in ascending alphabetical order.,1,SELECT Country FROM market ORDER BY Country ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Country FROM market ORDER BY Country ASC,"This virtual table lists the countries from the 'market' table, sorted in ascending order. The query retrieves the 'Country' column and organizes the results alphabetically."
train.4128,film_rank,List all countries of markets in descending order of number of cities.,1,SELECT Country FROM market ORDER BY Number_cities DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Country FROM market ORDER BY Number_cities DESC,"This virtual table lists the countries from the 'market' table, ordered by the total number of cities in each market in descending order. This allows users to see which countries have the most cities in their respective markets."
train.4130,film_rank,Please show the titles of films and the types of market estimations.,1,"SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID","This virtual table describes the titles of films along with their corresponding estimation types from the 'film' and 'film_market_estimation' tables. The join operation links the films to their market estimations based on the Film_ID, allowing users to see which type of estimation (e.g., box office, streaming) is associated with each film title."
train.4132,film_rank,Show the distinct director of films with market estimation in the year of 1995.,1,SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique directors from the 'film' table who have films associated with market estimations for a specific year. The placeholder in the WHERE clause represents the year for which the estimations are made.
train.4134,film_rank,What is the average number of cities of markets with low film market estimate bigger than 10000?,1,SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average number of cities in markets associated with films that have a low revenue estimate exceeding a specified value. The placeholder in the WHERE clause represents the lower bound of the revenue estimate.
train.4136,film_rank,Please list the countries and years of film market estimations.,1,"SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID","This virtual table provides a list of countries along with the corresponding years for film market estimations. The data is sourced from the 'film_market_estimation' table, which is joined with the 'market' table to associate each estimation with its respective market country."
train.4138,film_rank,"Please list the years of film market estimations when the market is in country ""Japan"" in descending order.",1,SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  'Japan' ORDER BY T1.Year DESC,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Year DESC,"This virtual table provides the years for which film market estimations are available, filtered by a specific country. The placeholder in the WHERE clause represents the country's name."
train.4140,film_rank,List the studios of each film and the number of films produced by that studio.,1,"SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio","This virtual table summarizes the number of films produced by each studio from the 'film' table. The query groups the results by the studio name, allowing users to see how many films each studio has produced."
train.4142,film_rank,List the name of film studio that have the most number of films.,1,SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of film studios from the 'film' table, grouped by the studio name. The studios are ordered by the number of films they have produced, in descending order, and the result is limited to a specified number of studios. The placeholder in the LIMIT clause represents the maximum number of studios to return."
train.4144,film_rank,List the names of studios that have at least two films.,1,SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of studios from the 'film' table that have produced a number of films greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum count of films produced by each studio.
train.4146,film_rank,List the title of films that do not have any market estimation.,1,SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation),"This virtual table lists the titles of films from the 'film' table that do not have any associated estimation records in the 'film_market_estimation' table. The subquery checks for Film_IDs that exist in the estimation records, and the main query filters out those films."
train.4148,film_rank,"Show the studios that have produced films with director ""Nicholas Meyer"" and ""Walter Hill"".",1,SELECT Studio FROM film WHERE Director  =  'Nicholas Meyer' INTERSECT SELECT Studio FROM film WHERE Director  =  'Walter Hill',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Studio FROM film WHERE Director  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Studio FROM film WHERE Director  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the studios that produced films directed by two specific directors. The placeholders in the query represent the names of the directors being compared.
train.4150,film_rank,"Find the titles and studios of the films that are produced by some film studios that contained the word ""Universal"".",1,"SELECT title ,  Studio FROM film WHERE Studio LIKE '%Universal%'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT title ,  Studio FROM film WHERE Studio LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the titles and studios of films from the 'film' table that are produced by a specific studio. The placeholder in the WHERE clause represents the studio's name.
train.4152,film_rank,"Show the studios that have not produced films with director ""Walter Hill"".",1,SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  'Walter Hill',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the studios that produced films, excluding those films directed by a specific director. The placeholder in the WHERE clause represents the name of the director whose films are to be excluded."
train.4154,film_rank,List the studios which average gross is above 4500000.,1,SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of studios from the 'film' table that have an average gross revenue equal to or greater than a specified amount. The placeholder in the HAVING clause represents the minimum average gross revenue threshold.
train.4157,film_rank,Return the title of the film with the highest high estimate?,1,SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the titles of films from the 'film' table, ordered by their highest revenue estimates from the 'film_market_estimation' table. The placeholder in the LIMIT clause represents the maximum number of film titles to return."
train.4158,film_rank,What are the titles and directors of the films were never presented in China?,1,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the titles and directors of films from the 'film' table that are not associated with any market in a specific country. The placeholder in the subquery represents the country's name.
train.4160,cre_Doc_Tracking_DB,How many calendar items do we have?,1,SELECT count(*) FROM Ref_calendar,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Ref_calendar,"This virtual table provides a count of all entries in the 'Ref_Calendar' table, which contains specific dates and their numeric representations in the year."
train.4162,cre_Doc_Tracking_DB,Show all calendar dates and day Numbers.,1,"SELECT calendar_date ,  day_Number FROM Ref_calendar",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT calendar_date ,  day_Number FROM Ref_calendar",This virtual table provides the specific dates and their corresponding numeric representations in the calendar from the 'Ref_Calendar' table. The placeholders in the SELECT statement allow for dynamic querying of calendar dates and day numbers.
train.4164,cre_Doc_Tracking_DB,Show the number of document types.,1,SELECT count(*) FROM Ref_document_types,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Ref_document_types,This virtual table provides a count of all unique document types from the 'Ref_Document_Types' table. The query uses the COUNT function to aggregate the total number of entries in the table.
train.4166,cre_Doc_Tracking_DB,List all document type codes and document type names.,1,"SELECT document_type_code ,  document_type_name FROM Ref_document_types",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT document_type_code ,  document_type_name FROM Ref_document_types",This virtual table provides the unique code and name of document types from the 'Ref_Document_Types' table. The placeholders represent the specific document type code and name that can be filtered or selected as needed.
train.4168,cre_Doc_Tracking_DB,What is the name and description for document type code RV?,1,"SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  'RV'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the name and description of a specific document type from the 'Ref_Document_Types' table. The placeholder in the WHERE clause represents the unique code identifying the document type.
train.4170,cre_Doc_Tracking_DB,"What is the document type code for document type ""Paper""?",1,SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  'Paper',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique code identifying the type of document from the 'Ref_Document_Types' table based on a specific document type name. The placeholder in the WHERE clause represents the name of the document type being queried.
train.4172,cre_Doc_Tracking_DB,Show the number of documents with document type code CV or BK.,1,SELECT count(*) FROM All_documents WHERE document_type_code  =  'CV' OR document_type_code  =  'BK',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM All_documents WHERE document_type_code  =  [PLACEHOLDER-TYPE:STRING] OR document_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of documents from the 'All_Documents' table that match specific document types. The placeholders in the WHERE clause represent the codes of the document types being queried.
train.4174,cre_Doc_Tracking_DB,"What is the date when the document ""Marry CV"" was stored?",1,SELECT date_stored FROM All_documents WHERE Document_name  =  'Marry CV',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_stored FROM All_documents WHERE Document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the storage date of documents from the 'All_Documents' table based on a specific document name. The placeholder in the WHERE clause represents the name of the document being queried.
train.4176,cre_Doc_Tracking_DB,What is the day Number and date of all the documents?,1,"SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date","This virtual table provides a view of the day number and the date when documents were stored. It combines data from the 'All_Documents' table and the 'Ref_Calendar' table, linking them through the stored date and calendar date."
train.4178,cre_Doc_Tracking_DB,"What is the document type name for the document with name ""How to read a book""?",1,SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  'How to read a book',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of document types from the 'Ref_Document_Types' table that correspond to a specific document name in the 'All_Documents' table. The placeholder in the WHERE clause represents the name of the document being queried.
train.4180,cre_Doc_Tracking_DB,Show the number of locations.,1,SELECT count(*) FROM Ref_locations,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Ref_locations,"This virtual table provides the total count of unique locations from the 'Ref_Locations' table. The query counts all entries in the table, which helps in understanding the number of distinct locations available."
train.4182,cre_Doc_Tracking_DB,List all location codes and location names.,1,"SELECT location_code ,  location_name FROM Ref_locations",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT location_code ,  location_name FROM Ref_locations",This virtual table describes the unique codes and names of locations from the 'Ref_Locations' table. The placeholders represent the specific location codes and names that can be filtered or modified as needed.
train.4184,cre_Doc_Tracking_DB,What are the name and description for location code x?,1,"SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  'x'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the name and description of a specific location from the 'Ref_Locations' table based on a unique location code. The placeholder in the WHERE clause represents the specific location code being queried.
train.4186,cre_Doc_Tracking_DB,"What is the location code for the country ""Canada""?",1,SELECT location_code FROM Ref_locations WHERE location_name  =  'Canada',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT location_code FROM Ref_locations WHERE location_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unique location code from the 'Ref_Locations' table for a specific location name. The placeholder in the WHERE clause represents the name of the location being queried.
train.4188,cre_Doc_Tracking_DB,How many roles are there?,1,SELECT count(*) FROM ROLES,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ROLES,"This virtual table provides a count of all unique roles from the 'Roles' table. The query uses the COUNT function to aggregate the total number of entries in the table, which helps in understanding the total number of distinct roles available."
train.4190,cre_Doc_Tracking_DB,"List all role codes, role names, and role descriptions.",1,"SELECT role_code ,  role_name ,  role_description FROM ROLES",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT role_code ,  role_name ,  role_description FROM ROLES","This virtual table provides information about the roles defined in the 'Roles' table, including the unique code for each role, the name of the role, and a description that details the responsibilities or characteristics of the role."
train.4192,cre_Doc_Tracking_DB,"What are the name and description for role code ""MG""?",1,"SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  'MG'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and descriptions of roles from the 'Roles' table that match a specific role code. The placeholder in the WHERE clause represents the unique code for the role.
train.4194,cre_Doc_Tracking_DB,"Show the description for role name ""Proof Reader"".",1,SELECT role_description FROM ROLES WHERE role_name  =  'Proof Reader',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT role_description FROM ROLES WHERE role_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a specific role from the 'Roles' table based on the role's name. The placeholder in the WHERE clause represents the name of the role being queried.
train.4196,cre_Doc_Tracking_DB,How many employees do we have?,1,SELECT count(*) FROM Employees,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Employees,"This virtual table provides the total number of employees recorded in the 'Employees' table. The query counts all entries in the table, giving a quick overview of the workforce size."
train.4198,cre_Doc_Tracking_DB,"Show the name, role code, and date of birth for the employee with name 'Armani'.",1,"SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the names, role codes, and birth dates of employees from the 'Employees' table who match a specific employee name. The placeholder in the WHERE clause represents the name of the employee being queried."
train.4200,cre_Doc_Tracking_DB,What is the id for the employee called Ebba?,1,SELECT employee_ID FROM Employees WHERE employee_name  =  'Ebba',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT employee_ID FROM Employees WHERE employee_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifier of employees from the 'Employees' table who match a specific name. The placeholder in the WHERE clause represents the employee's name.
train.4203,cre_Doc_Tracking_DB,"Which employees have the role with code ""HR""? Find their names.",1,SELECT employee_name FROM Employees WHERE role_code  =  'HR',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT employee_name FROM Employees WHERE role_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of employees from the 'Employees' table who hold a specific role. The placeholder in the WHERE clause represents the role code that can be specified by the user.
train.4204,cre_Doc_Tracking_DB,Show all role codes and the number of employees in each role.,1,"SELECT role_code ,  count(*) FROM Employees GROUP BY role_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT role_code ,  count(*) FROM Employees GROUP BY role_code","This virtual table summarizes the number of employees associated with each role in the 'Employees' table. The placeholder in the SELECT clause represents the role code, while the count function aggregates the total number of employees for each role."
train.4206,cre_Doc_Tracking_DB,What is the role code with the largest number of employees?,1,SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique role codes from the 'Employees' table, grouped by the role code and ordered by the number of employees in each role in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of role codes to retrieve."
train.4208,cre_Doc_Tracking_DB,Show all role codes with at least 3 employees.,1,SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique role codes from the 'Employees' table that have a count of employees greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of employees required for each role code.
train.4210,cre_Doc_Tracking_DB,Show the role code with the least employees.,1,SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique role codes from the 'Employees' table, grouped by the role code and ordered by the count of employees in each role in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of role codes to retrieve."
train.4212,cre_Doc_Tracking_DB,What is the role name and role description for employee called Ebba?,1,"SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  'Ebba'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the role name and role description of an employee from the 'Employees' table based on the employee's name. The placeholder in the WHERE clause represents the specific employee's name.
train.4214,cre_Doc_Tracking_DB,Show the names of employees with role name Editor.,1,SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  'Editor',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of employees from the 'Employees' table who hold a specific role. The placeholder in the WHERE clause represents the name of the role.
train.4216,cre_Doc_Tracking_DB,"Show the employee ids for all employees with role name ""Human Resource"" or ""Manager"".",1,SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  'Human Resource' OR T2.role_name  =  'Manager',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  [PLACEHOLDER-TYPE:STRING] OR T2.role_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the unique identifiers of employees from the 'Employees' table who hold specific roles. The query joins the 'Employees' table with the 'Roles' table to filter employees based on their role names, which are represented by placeholders for string values."
train.4218,cre_Doc_Tracking_DB,What are the different location codes for documents?,1,SELECT DISTINCT location_code FROM Document_locations,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT location_code FROM Document_locations,"This virtual table provides a list of unique location codes from the 'Document_Locations' table, which indicates where documents are stored. The query uses the DISTINCT keyword to ensure that each location code appears only once in the result set."
train.4220,cre_Doc_Tracking_DB,"Show the location name for document ""Robin CV"".",1,SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  'Robin CV',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the names of locations where a specific document is stored. It retrieves data from the 'All_Documents', 'Document_Locations', and 'Ref_Locations' tables, linking them through their respective identifiers. The placeholder in the WHERE clause represents the name of the document being queried."
train.4222,cre_Doc_Tracking_DB,"Show the location code, the starting date and ending data in that location for all the documents.",1,"SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations","This virtual table provides information about the locations of documents, including the unique location code and the dates indicating when the document was placed in and removed from that location. The placeholders in the SELECT statement can be modified to filter or retrieve specific details as needed."
train.4224,cre_Doc_Tracking_DB,"What is ""the date in location from"" and ""the date in location to"" for the document with name ""Robin CV""?",1,"SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Robin CV'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the dates when a specific document was placed in and removed from a location. The placeholder in the WHERE clause represents the name of the document being queried.
train.4226,cre_Doc_Tracking_DB,Show the location codes and the number of documents in each location.,1,"SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",This virtual table summarizes the number of documents stored at each location by grouping the results based on the location code. The placeholder in the SELECT statement allows for dynamic counting of documents per location.
train.4229,cre_Doc_Tracking_DB,Find the code of the location with the largest number of documents.,1,SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique location codes from the 'Document_Locations' table, grouped by the location code and ordered by the count of documents associated with each location in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of location codes to retrieve."
train.4230,cre_Doc_Tracking_DB,Show the location codes with at least 3 documents.,1,SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique location codes from the 'Document_Locations' table where the number of documents stored at each location meets or exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum count of documents required for a location to be included in the results.
train.4232,cre_Doc_Tracking_DB,Show the location name and code with the least documents.,1,"SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of location names and their corresponding codes from the 'Document_Locations' and 'Ref_Locations' tables. The results are grouped by location code and ordered by the count of documents associated with each location in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.
train.4234,cre_Doc_Tracking_DB,What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?,1,"SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;","This virtual table provides the names of employees involved in the destruction of documents. It shows the name of the employee who authorized the destruction and the name of the employee who actually destroyed the document, both sourced from the 'Employees' table. The placeholders represent the relationships between the documents and the employees responsible for their destruction."
train.4236,cre_Doc_Tracking_DB,Show the id of each employee and the number of document destruction authorised by that employee.,1,"SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID","This virtual table summarizes the number of documents scheduled for destruction, grouped by the employee who authorized the destruction. The placeholder in the SELECT clause represents the employee's ID who authorized the destruction of the documents."
train.4238,cre_Doc_Tracking_DB,Show the employee ids and the number of documents destroyed by each employee.,1,"SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",This virtual table summarizes the number of documents destroyed by each employee from the 'Documents_to_be_Destroyed' table. The placeholder in the SELECT clause represents the employee ID of the person who destroyed the documents.
train.4240,cre_Doc_Tracking_DB,Show the ids of the employees who don't authorize destruction for any document.,1,SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,"This virtual table identifies employees who are not authorized to destroy documents. It retrieves the unique identifiers of all employees from the 'Employees' table and excludes those who have been authorized to destroy documents, as indicated by their IDs in the 'Documents_to_be_Destroyed' table."
train.4242,cre_Doc_Tracking_DB,Show the ids of all employees who have authorized destruction.,1,SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,This virtual table provides a list of unique employee IDs who have authorized the destruction of documents from the 'Documents_to_be_Destroyed' table. The placeholder in the SELECT statement allows for the retrieval of distinct values for the authorized employee IDs.
train.4244,cre_Doc_Tracking_DB,Show the ids of all employees who have destroyed a document.,1,SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,This virtual table provides a list of unique employee IDs who have destroyed documents from the 'Documents_to_be_Destroyed' table. The placeholder in the SELECT clause indicates that the query will return distinct values for the employee IDs involved in the destruction process.
train.4246,cre_Doc_Tracking_DB,Show the ids of all employees who don't destroy any document.,1,SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,This virtual table identifies employees who have not destroyed any documents. It retrieves the unique identifiers of all employees from the 'Employees' table and excludes those who have been recorded as having destroyed documents in the 'Documents_to_be_Destroyed' table. The placeholder in the query allows for further customization if needed.
train.4249,cre_Doc_Tracking_DB,Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.,1,SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,"This virtual table provides a list of unique employee IDs who were involved in the destruction of documents, either as the person who authorized the destruction or as the one who actually destroyed the document. The placeholders in the query represent the employee IDs from the 'Documents_to_be_Destroyed' table."
train.4252,club_1,What are the names of all clubs?,1,SELECT clubname FROM club,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clubname FROM club,"This virtual table lists the names of clubs from the 'Club' table. There are no conditions applied, so it retrieves all club names available in the database."
train.4254,club_1,How many students are there?,1,SELECT count(*) FROM student,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM student,"This virtual table provides the total number of students recorded in the 'Student' table. The query uses the count function to aggregate the number of entries, which is useful for understanding the size of the student population."
train.4258,club_1,"Find the last names of the members of the club ""Bootup Baltimore"".",1,SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the last names of students who are members of a specific club from the 'Student', 'Club', and 'Member_of_club' tables. The placeholder in the WHERE clause represents the name of the club."
train.4260,club_1,"Who are the members of the club named ""Hopkins Student Enterprises""? Show the last name.",1,SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the last names of students who are members of a specific club from the 'Student', 'Club', and 'Member_of_club' tables. The placeholder in the WHERE clause represents the name of the club."
train.4262,club_1,"How many members does the club ""Tennis Club"" has?",1,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Tennis Club',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of members in a specific club from the 'Club', 'Member_of_club', and 'Student' tables. The placeholder in the WHERE clause represents the name of the club for which the member count is being queried."
train.4264,club_1,"Find the number of members of club ""Pen and Paper Gaming"".",1,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Pen and Paper Gaming',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of members in a specific club from the 'Club', 'Member_of_club', and 'Student' tables. The placeholder in the WHERE clause represents the name of the club for which the member count is being queried."
train.4266,club_1,"How many clubs does ""Linda Smith"" belong to?",1,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Linda' AND t3.lname  =  'Smith',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  [PLACEHOLDER-TYPE:STRING] AND t3.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of clubs that a specific student is a member of, based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names."
train.4268,club_1,"Find the number of clubs where ""Tracy Kim"" is a member.",1,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Tracy' AND t3.lname  =  'Kim',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  [PLACEHOLDER-TYPE:STRING] AND t3.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of clubs that a specific student is a member of, based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names."
train.4272,club_1,"Find all the male members of club ""Hopkins Student Enterprises"". Show the first name and last name.",1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises' AND t3.sex  =  'M'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t3.sex  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are members of a specific club and belong to a certain gender. The placeholders in the WHERE clause represent the club's name and the student's gender.
train.4274,club_1,"Find all members of ""Bootup Baltimore"" whose major is ""600"". Show the first name and last name.",1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore' AND t3.major  =  '600'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t3.major  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are members of a specific club and are enrolled in a particular major. The placeholders in the WHERE clause represent the club's name and the student's major.
train.4280,club_1,"What is the description of the club named ""Tennis Club""?",1,SELECT clubdesc FROM club WHERE clubname  =  'Tennis Club',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clubdesc FROM club WHERE clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a description of clubs from the 'Club' table based on a specific club name. The placeholder in the WHERE clause represents the name of the club being queried.
train.4282,club_1,"Find the description of the club ""Pen and Paper Gaming"".",1,SELECT clubdesc FROM club WHERE clubname  =  'Pen and Paper Gaming',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clubdesc FROM club WHERE clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a description of clubs from the 'Club' table based on a specific club name. The placeholder in the WHERE clause represents the name of the club being queried.
train.4284,club_1,"What is the location of the club named ""Tennis Club""?",1,SELECT clublocation FROM club WHERE clubname  =  'Tennis Club',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clublocation FROM club WHERE clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the locations of clubs from the 'Club' table based on a specific club name. The placeholder in the WHERE clause represents the name of the club being queried.
train.4286,club_1,"Find the location of the club ""Pen and Paper Gaming"".",1,SELECT clublocation FROM club WHERE clubname  =  'Pen and Paper Gaming',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clublocation FROM club WHERE clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the locations of clubs from the 'Club' table based on a specific club name. The placeholder in the WHERE clause represents the name of the club being queried.
train.4288,club_1,"Where is the club ""Hopkins Student Enterprises"" located?",1,SELECT clublocation FROM club WHERE clubname  =  'Hopkins Student Enterprises',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clublocation FROM club WHERE clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the locations of clubs from the 'Club' table based on a specific club name. The placeholder in the WHERE clause represents the name of the club being queried.
train.4290,club_1,"Find the name of all the clubs at ""AKW"".",1,SELECT clubname FROM club WHERE clublocation  =  'AKW',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT clubname FROM club WHERE clublocation  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of clubs from the 'Club' table that meet in a specific location. The placeholder in the WHERE clause represents the location of the club meetings.
train.4292,club_1,"How many clubs are located at ""HHH""?",1,SELECT count(*) FROM club WHERE clublocation  =  'HHH',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM club WHERE clublocation  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of clubs located in a specific area from the 'Club' table. The placeholder in the WHERE clause represents the location of the clubs.
train.4294,club_1,"What are the first and last name of the president of the club ""Bootup Baltimore""?",1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore' AND t2.position  =  'President'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t2.position  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are members of a specific club and hold a particular position within that club. The placeholders in the WHERE clause represent the club's name and the student's position.
train.4296,club_1,"Who is the ""CTO"" of club ""Hopkins Student Enterprises""? Show the first name and last name.",1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises' AND t2.position  =  'CTO'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t2.position  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are members of a specific club and hold a particular position within that club. The placeholders in the WHERE clause represent the club's name and the student's position.
train.4300,club_1,"How many members of ""Bootup Baltimore"" are older than 18?",1,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore' AND t3.age  >  18,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t3.age  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the count of members in a specific club from the 'Club' table, where the club name is specified and the members are filtered by age from the 'Student' table. The placeholders in the WHERE clause represent the club's name and the age threshold."
train.4302,club_1,"How many members of club ""Bootup Baltimore"" are younger than 18?",1,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore' AND t3.age  <  18,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t3.age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of students who are members of a specific club and are below a certain age. The placeholders in the WHERE clause represent the club's name and the age limit.
train.4304,club_1,"Find the names of all the clubs that have at least a member from the city with city code ""BAL"".",1,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  'BAL',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct names of clubs from the 'Club' table that students from a specific city are members of. The placeholder in the WHERE clause represents the city code where the students reside.
train.4306,club_1,"Find the names of the clubs that have at least a member from the city with city code ""HOU"".",1,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  'HOU',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct names of clubs from the 'Club' table that students from a specific city are members of. The placeholder in the WHERE clause represents the city code where the students reside.
train.4308,club_1,"How many clubs does the student named ""Eric Tai"" belong to?",1,SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Eric' AND t3.lname  =  'Tai',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  [PLACEHOLDER-TYPE:STRING] AND t3.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of distinct clubs that a specific student is a member of, based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names."
train.4310,club_1,"List the clubs having ""Davis Steven"" as a member.",1,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Davis' AND t3.lname  =  'Steven',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  [PLACEHOLDER-TYPE:STRING] AND t3.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the distinct names of clubs that a specific student is a member of, based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names."
train.4313,club_1,"Which clubs have one or more members whose advisor is ""1121""?",1,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the distinct names of clubs that students are members of, filtered by the name of the academic advisor. The placeholders in the WHERE clause represent the advisor's identifier."
train.4314,club_1,"What is the average age of the members of the club ""Bootup Baltimore""?",1,SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students who are members of a specific club. The placeholder in the WHERE clause represents the name of the club.
train.4316,club_1,"Find the average age of members of the club ""Hopkins Student Enterprises"".",1,SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students who are members of a specific club. The placeholder in the WHERE clause represents the name of the club.
train.4318,club_1,"Retrieve the average age of members of the club ""Tennis Club"".",1,SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Tennis Club',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students who are members of a specific club. The placeholder in the WHERE clause represents the name of the club.
train.4320,tracking_grants_for_research,What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?,1,SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the grant amounts from the 'Grants' table for grants associated with documents sent before a specific date and that have not yet ended. The placeholders in the WHERE clause represent the dates for filtering the documents and grants.
train.4329,tracking_grants_for_research,What are the ids and details for all organizations that have grants of more than 6000 dollars?,1,"SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisation IDs and their corresponding details from the 'Organisations' table, which are associated with grants from the 'Grants' table. The results are grouped by organisation ID, and only those organisations that have a total grant amount exceeding a specified threshold are included, as indicated by the placeholder in the HAVING clause."
train.4336,tracking_grants_for_research,What are the response received dates for the documents described as 'Regular' or granted with more than 100?,1,SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  [PLACEHOLDER-TYPE:STRING] OR T3.grant_amount  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the response received dates of documents from the 'Documents' table, filtered by either the description of the document type or the grant amount associated with the document. The placeholders in the WHERE clause represent the document description and the grant amount criteria."
train.4340,tracking_grants_for_research,"What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",1,"SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a comprehensive view of tasks associated with projects in the database. It retrieves task details and identifiers from the 'Tasks' table, linking them to the 'Projects' table based on the project ID. The first part of the query filters projects by a specific project description, while the second part aggregates tasks by project ID, returning only those projects that have more than a specified number of associated tasks. The placeholders allow users to specify the project description and the minimum task count for filtering."
train.4344,tracking_grants_for_research,How many kinds of roles are there for the staff?,1,SELECT count(DISTINCT role_code) FROM Project_Staff,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT role_code) FROM Project_Staff,"This virtual table provides the count of distinct roles represented in the 'Project_Staff' table, indicating the variety of roles associated with projects."
train.4346,tracking_grants_for_research,What is the total amount of grants given by each organisations? Also list the organisation id.,1,"SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id","This virtual table summarizes the total grant amounts received by each organisation from the 'Grants' table. The placeholder in the SELECT clause represents the total grant amount, while the organisation_id groups the results by each organisation."
train.4348,tracking_grants_for_research,List the project details of the projects with the research outcome described with the substring 'Published'.,1,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the details of projects from the 'Projects' table that are associated with specific research outcomes. The query joins the 'Projects' table with the 'Project_Outcomes' table and the 'Research_Outcomes' table to filter projects based on a particular outcome description. The placeholder in the WHERE clause represents the outcome description being searched for.
train.4352,tracking_grants_for_research,What is the complete description of the researcher role.,1,SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT role_description FROM Staff_Roles WHERE role_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the role descriptions of staff members from the 'Staff_Roles' table based on a specific role code. The placeholder in the WHERE clause represents the role code being queried.
train.4354,tracking_grants_for_research,When did the first staff for the projects started working?,1,SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of start dates for staff members involved in various projects, sorted in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to retrieve."
train.4358,tracking_grants_for_research,Which projects have no outcome? List the project details.,1,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ),"This virtual table provides a list of project details from the 'Projects' table for projects that do not have any associated outcomes in the 'Project_Outcomes' table. The placeholder in the WHERE clause indicates that we are filtering projects based on their unique identifiers, ensuring we only retrieve those without outcomes."
train.4362,tracking_grants_for_research,Show the role description and the id of the project staff involved in most number of project outcomes?,1,"SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of staff members along with their role descriptions from the 'Staff_Roles' and 'Project_Staff' tables. It groups the results by staff ID and orders them by the count of associated project outcomes in descending order, allowing for a limit on the number of results returned. The placeholder in the LIMIT clause represents the maximum number of staff members to display."
train.4365,tracking_grants_for_research,What is the type of the document whose description starts with the word 'Initial'?,1,SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_code FROM Document_Types WHERE document_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique document type codes from the 'Document_Types' table based on a specific description of the document type. The placeholder in the WHERE clause allows for filtering the results according to the desired document description.
train.4366,tracking_grants_for_research,"For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",1,SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the start dates of grants from the 'Grants' table that are associated with documents of a specific type. It uses joins to connect the 'Grants', 'Documents', and 'Document_Types' tables based on their foreign key relationships. The placeholder in the WHERE clause represents the description of the document type, allowing users to specify which document type they are interested in. The use of INTERSECT indicates that the query is looking for grant start dates that meet the criteria in both parts of the query."
train.4368,tracking_grants_for_research,How many documents can one grant have at most? List the grant id and number.,1,"SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the number of documents associated with each grant from the 'Documents' table. It groups the results by 'grant_id' and orders them in descending order based on the count of documents, allowing the user to specify a limit on the number of results returned."
train.4370,tracking_grants_for_research,Find the organisation type description of the organisation detailed as 'quo'.,1,SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the descriptions of organisation types from the 'Organisation_Types' table for organisations that have specific details. The placeholder in the WHERE clause represents the details of the organisation being queried.
train.4375,tracking_grants_for_research,How many patents outcomes were listed for all the projects?,1,SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of project outcomes from the 'Project_Outcomes' table that match a specific outcome code. The placeholder in the WHERE clause represents the outcome code being queried.
train.4378,tracking_grants_for_research,What is the last date of the staff leaving the projects?,1,SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the end dates of staff involvement in various projects from the 'Project_Staff' table. The placeholder in the LIMIT clause allows the user to specify the number of records to retrieve, sorted by the most recent end date."
train.4382,tracking_grants_for_research,"List the organisation id with the maximum outcome count, and the count.",1,"SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of projects grouped by organisation, showing how many outcomes each organisation has. The placeholder in the LIMIT clause allows the user to specify the maximum number of organisations to display based on their project outcomes."
train.4388,tracking_grants_for_research,How many tasks are there in total?,1,SELECT count(*) FROM Tasks,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Tasks,This virtual table provides a count of all tasks associated with various projects in the 'Tasks' table. The query aggregates the total number of tasks without any specific filtering criteria.
train.4390,tracking_grants_for_research,How many tasks does each project have? List the task count and the project detail.,1,"SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id","This virtual table provides a count of tasks associated with each project along with the project details from the 'Projects' table. The count is grouped by the unique project identifier, allowing users to see how many tasks are linked to each project."
train.4395,tracking_grants_for_research,List the description of the outcomes for all projects.,1,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code,This virtual table describes the outcome descriptions of research outcomes associated with specific project outcomes. The join condition links the research outcomes to the project outcomes based on their unique outcome codes.
train.4398,network_2,How many friends does Dan have?,1,SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of friends for a specific person from the 'Person' and 'PersonFriend' tables. The placeholder in the WHERE clause represents the name of the person whose friends are being counted.
train.4400,network_2,How many females does this network has?,1,SELECT count(*) FROM Person WHERE gender  =  'female',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Person WHERE gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of individuals from the 'Person' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the individuals being counted.
train.4402,network_2,What is the average age for all person?,1,SELECT avg(age) FROM Person,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(age) FROM Person,This virtual table calculates the average age of individuals from the 'Person' table. The result provides insight into the overall age demographic of the population represented in the table.
train.4404,network_2,How many different cities are they from?,1,SELECT count(DISTINCT city) FROM Person,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT city) FROM Person,"This virtual table provides the count of distinct cities from the 'Person' table, indicating how many unique cities the individuals in the database reside in."
train.4406,network_2,How many type of jobs do they have?,1,SELECT count(DISTINCT job) FROM Person,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT job) FROM Person,This virtual table provides the count of distinct job titles from the 'Person' table. The result will indicate how many unique occupations are represented among the individuals listed in the table.
train.4409,network_2,What is the name of the person who is the oldest?,1,SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person),This virtual table describes the names of the oldest person from the 'Person' table. The placeholder in the WHERE clause represents the maximum age derived from the same table.
train.4412,network_2,Who is the youngest male?,1,SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' ),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM Person WHERE gender  =  [PLACEHOLDER-TYPE:STRING] AND age  =  (SELECT min(age) FROM person WHERE gender  =  [PLACEHOLDER-TYPE:STRING] ),This virtual table describes the names of individuals from the 'Person' table who match a specific gender and are the youngest among that gender. The placeholders in the WHERE clause represent the gender of the individuals being queried.
train.4414,network_2,How old is the doctor named Zach?,1,SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT age FROM Person WHERE job  =  [PLACEHOLDER-TYPE:STRING] AND name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the ages of individuals from the 'Person' table who have a specific job title and whose name matches a given name. The placeholders in the WHERE clause represent the job title and the person's name.
train.4416,network_2,Who is the person whose age is below 30?,1,SELECT name FROM Person WHERE age  <  30,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM Person WHERE age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of individuals from the 'Person' table who are younger than a specified age. The placeholder in the WHERE clause represents the age limit.
train.4418,network_2,How many people whose age is greater 30 and job is engineer?,1,SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Person WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND job  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of individuals from the 'Person' table who are older than a specified age and have a specific job title. The placeholders in the query represent the age threshold and the job title to filter the results accordingly.
train.4420,network_2,What is the average age for each gender?,1,"SELECT avg(age) ,  gender FROM Person GROUP BY gender",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  gender FROM Person GROUP BY gender","This virtual table provides the average age of individuals grouped by their gender from the 'Person' table. The query calculates the average age for each gender category, allowing for demographic analysis based on gender."
train.4422,network_2,What is average age for different job title?,1,"SELECT avg(age) ,  job FROM Person GROUP BY job",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  job FROM Person GROUP BY job","This virtual table provides the average age of individuals grouped by their job titles from the 'Person' table. The query calculates the average age for each unique job, allowing for insights into the age distribution across different occupations."
train.4424,network_2,What is average age of male for different job title?,1,"SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  job FROM Person WHERE gender  =  [PLACEHOLDER-TYPE:STRING] GROUP BY job","This virtual table calculates the average age of individuals from the 'Person' table, grouped by their job titles. The placeholder in the WHERE clause represents the gender of the individuals being queried."
train.4426,network_2,What is minimum age for different job title?,1,"SELECT min(age) ,  job FROM Person GROUP BY job",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT min(age) ,  job FROM Person GROUP BY job","This virtual table provides the minimum age of individuals grouped by their job titles from the 'Person' table. The query aggregates the ages and categorizes them based on the occupation, allowing for an analysis of the youngest individuals in each job category."
train.4428,network_2,Find the number of people who is under 40 for each gender.,1,"SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  gender FROM Person WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY gender","This virtual table provides a count of individuals grouped by gender from the 'Person' table, specifically for those whose age is below a certain threshold. The placeholder in the WHERE clause represents the age limit."
train.4430,network_2,Find the name of people whose age is greater than any engineer sorted by their age.,1,SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  [PLACEHOLDER-TYPE:STRING]) ORDER BY age,This virtual table lists the names of individuals from the 'Person' table who are older than the minimum age of individuals with a specific job title. The placeholder in the subquery represents the job title being queried.
train.4432,network_2,Find the number of people whose age is greater than all engineers.,1,SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of persons from the 'Person' table who are older than the maximum age of persons with a specific job title. The placeholder in the subquery represents the job title being queried.
train.4434,network_2,"list the name, job title of all people ordered by their names.",1,"SELECT name ,  job FROM Person ORDER BY name",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  job FROM Person ORDER BY name","This virtual table provides a list of names and job titles of individuals from the 'Person' table, sorted alphabetically by their names."
train.4436,network_2,Find the names of all person sorted in the descending order using age.,1,SELECT name FROM Person ORDER BY age DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM Person ORDER BY age DESC,"This virtual table lists the names of individuals from the 'Person' table, sorted by their age in descending order. This allows users to see the names of people starting from the oldest to the youngest."
train.4450,network_2,Find the person who has exactly one friend.,1,SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of individuals from the 'PersonFriend' table who have a specific number of friends. The placeholder in the HAVING clause represents the count of friends that the individual must have.
train.4452,network_2,Who are the friends of Bob?,1,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the friends of a specific person from the 'Person' and 'PersonFriend' tables. The placeholder in the WHERE clause represents the name of the person whose friends are being queried.
train.4458,network_2,Find the female friends of Alice.,1,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] AND T1.gender  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the friends of a specific person from the 'PersonFriend' table, filtered by the person's name and gender from the 'Person' table. The placeholders in the WHERE clause represent the person's name and gender."
train.4460,network_2,Find the male friend of Alice whose job is a doctor?,1,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] AND T1.gender  =  [PLACEHOLDER-TYPE:STRING] AND T1.job  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the friends of a specific person from the 'PersonFriend' table, filtered by the person's name, gender, and job title. The placeholders in the WHERE clause represent the person's name, gender, and job title."
train.4462,network_2,Who has a friend that is from new york city?,1,SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of friends of persons who reside in a specific city. The query joins the 'Person' table with the 'PersonFriend' table to find friends based on the city of residence. The placeholder in the WHERE clause represents the city name.
train.4464,network_2,Who has friends that are younger than the average age?,1,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),This virtual table lists the distinct names of friends of persons who are younger than the average age of all persons in the 'Person' table. The placeholder in the WHERE clause represents the age condition based on the average age.
train.4468,network_2,Who is the friend of Zach with longest year relationship?,1,SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT friend FROM PersonFriend WHERE name =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  [PLACEHOLDER-TYPE:STRING]),"This virtual table lists the friends of a specific person from the 'PersonFriend' table, filtered by the person's name and the year when the friendship was established. The placeholder in the WHERE clause represents the person's name, and the subquery retrieves the most recent year of friendship for that person."
train.4470,network_2,What is the age of the friend of Zach with longest year relationship?,1,SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach'),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  [PLACEHOLDER-TYPE:STRING] AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  [PLACEHOLDER-TYPE:STRING]),This virtual table provides the ages of friends of a specific person from the 'Person' table. The query joins the 'Person' and 'PersonFriend' tables to find the age of friends based on the person's name and the most recent year of friendship established. The placeholders in the WHERE clause represent the person's name and the year of friendship.
train.4472,network_2,Find the name of persons who are friends with Alice for the shortest years.,1,SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM PersonFriend WHERE friend =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  [PLACEHOLDER-TYPE:STRING]),"This virtual table lists the names of individuals from the 'PersonFriend' table who have a specific friend, along with the year when the friendship was first established. The placeholders in the WHERE clause represent the friend's name and the year of the friendship."
train.4476,network_2,Who is the person that has no friend?,1,SELECT name FROM person EXCEPT SELECT name FROM PersonFriend,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT name FROM person EXCEPT SELECT name FROM PersonFriend,"This virtual table lists the names of individuals from the 'Person' table who do not have any recorded friendships in the 'PersonFriend' table. The query uses the EXCEPT clause to exclude names that appear in the 'PersonFriend' table, effectively identifying those who are not friends with anyone."
train.4479,network_2,"What is the name of the person who has the oldest average age for their friends, and what is that average age?",1,"SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of friends along with the average age of their respective friends from the 'Person' table. The results are grouped by the friend's name and ordered by the average age in descending order, with a limit on the number of results returned."
train.4482,network_2,Find Alice's friends of friends.,1,SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] AND T4.name != [PLACEHOLDER-TYPE:STRING],This virtual table identifies distinct friends of friends for a specific person from the 'Person' and 'PersonFriend' tables. The placeholders in the WHERE clause represent the name of the person and the name of the friend to exclude.
train.4484,decoration_competition,How many members are there?,1,SELECT count(*) FROM member,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM member,"This virtual table provides the total count of members from the 'member' table. It does not filter or group the results, simply returning the overall number of entries in the member table."
train.4485,decoration_competition,List the names of members in ascending alphabetical order.,1,SELECT Name FROM member ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM member ORDER BY Name ASC,"This virtual table lists the names of all members from the 'member' table, sorted in ascending order. The query retrieves the 'Name' column and organizes the results alphabetically."
train.4486,decoration_competition,What are the names and countries of members?,1,"SELECT Name ,  Country FROM member",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Name ,  Country FROM member","This virtual table describes the names and countries of members from the 'member' table. The query retrieves the 'Name' and 'Country' columns for all members, without any filtering conditions."
train.4487,decoration_competition,"Show the names of members whose country is ""United States"" or ""Canada"".",1,SELECT Name FROM member WHERE Country  =  'United States' OR Country  =  'Canada',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM member WHERE Country  =  [PLACEHOLDER-TYPE:STRING] OR Country  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of members from the 'member' table who reside in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.
train.4488,decoration_competition,Show the different countries and the number of members from each.,1,"SELECT Country ,  COUNT(*) FROM member GROUP BY Country",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Country ,  COUNT(*) FROM member GROUP BY Country","This virtual table summarizes the number of members from each country in the 'member' table. The placeholder in the SELECT clause represents the country, and the COUNT function is used to aggregate the total number of members per country."
train.4490,decoration_competition,Which countries have more than two members?,1,SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries from which members originate, specifically those countries that have more than a specified number of members. The placeholder in the HAVING clause represents the minimum count of members required for a country to be included in the results."
train.4491,decoration_competition,Show the leader names and locations of colleges.,1,"SELECT Leader_Name ,  College_Location FROM college",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Leader_Name ,  College_Location FROM college","This virtual table describes the names of college leaders and their geographical locations from the 'college' table. There are no filters applied, so it retrieves all records."
train.4492,decoration_competition,Show the names of members and names of colleges they go to.,1,"SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID","This virtual table describes the names of members along with the names of their respective colleges. The query joins the 'college' table and the 'member' table based on the College_ID, allowing us to see which member belongs to which college."
train.4493,decoration_competition,Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.,1,"SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC","This virtual table provides a list of member names along with their corresponding college locations. The data is retrieved from the 'college' and 'member' tables, where the college ID serves as the linking key. The results are sorted in ascending order by the member's name."
train.4494,decoration_competition,"Show the distinct leader names of colleges associated with members from country ""Canada"".",1,SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  'Canada',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of unique leaders' names from the 'college' table, specifically for colleges that have members residing in a specified country. The placeholder in the WHERE clause represents the country of residence."
train.4495,decoration_competition,Show the names of members and the decoration themes they have.,1,"SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",This virtual table describes the names of members along with the decoration themes they participated in during rounds of competition. The data is retrieved by joining the 'member' table with the 'round' table based on the member's unique identifier.
train.4497,decoration_competition,Show the names of members in ascending order of their rank in rounds.,1,SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC,"This virtual table lists the names of members from the 'member' table who have participated in rounds of competition, ordered by their rank in ascending order. The query joins the 'member' and 'round' tables based on the member's unique identifier, allowing for the retrieval of member names alongside their competition ranks."
train.4498,decoration_competition,List the names of members who did not participate in any round.,1,SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round),"This virtual table lists the names of members from the 'member' table who have not participated in any rounds of competition. The subquery identifies members who have entries in the 'round' table, and the main query filters out those members from the results."
train.4499,document_management,"Find the name and access counts of all documents, in alphabetic order of the document name.",1,"SELECT document_name ,  access_count FROM documents ORDER BY document_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_name ,  access_count FROM documents ORDER BY document_name","This virtual table provides a list of document names along with their access counts from the 'Documents' table, sorted in alphabetical order by document name."
train.4501,document_management,"Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",1,"SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of document names along with their access counts from the 'Documents' table, sorted in descending order based on the number of times each document has been accessed. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.4506,document_management,What is the total access count of documents that are of the most common document type?,1,SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the total access counts of documents grouped by their type. The placeholder in the LIMIT clause allows the user to specify the maximum number of document types to retrieve based on their access counts.
train.4507,document_management,What is the average access count of documents?,1,SELECT avg(access_count) FROM documents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(access_count) FROM documents,"This virtual table calculates the average access count of documents from the 'Documents' table. The result provides insight into how frequently documents are accessed, which can be useful for understanding user engagement and document popularity."
train.4510,document_management,Return the structure description of the document that has been accessed the fewest number of times.,1,SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of document structure descriptions from the 'Document_Structures' table, which are associated with documents in the 'Documents' table. The results are grouped by the document structure code and ordered by the count of documents associated with each structure, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of descriptions to return."
train.4511,document_management,"What is the type of the document named ""David CV""?",1,SELECT document_type_code FROM documents WHERE document_name  =  'David CV',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_code FROM documents WHERE document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the document type code from the 'Documents' table based on a specific document name. The placeholder in the WHERE clause represents the name of the document being queried.
train.4515,document_management,What document types do have more than 10000 total access number.,1,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the unique document types from the 'Documents' table that have been accessed more than a specified number of times. The placeholder in the HAVING clause represents the minimum access count threshold.
train.4517,document_management,"What are all the section titles of the document named ""David CV""?",1,SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  'David CV',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of sections from documents in the 'Documents' table that match a specific document name. The placeholder in the WHERE clause represents the name of the document being queried.
train.4519,document_management,Find all the name of documents without any sections.,1,SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections),This virtual table lists the names of documents from the 'Documents' table that do not have any associated sections. The placeholder in the WHERE clause represents the document code that is being filtered out based on the absence of sections.
train.4523,document_management,"Find the average access counts of documents with functional area ""Acknowledgement"".",1,SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  'Acknowledgement',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average access count of documents associated with a specific functional area. It joins the 'documents' table with the 'document_functional_areas' table to link documents to their respective functional areas, and then filters the results based on the description of the functional area provided as a placeholder."
train.4527,document_management,What is the name of the document with the most number of sections?,1,SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of document names from the 'Documents' table, which are grouped by their unique document codes. The results are ordered by the number of sections associated with each document in descending order, allowing users to see the most sectioned documents at the top. The placeholder in the LIMIT clause represents the maximum number of document names to return."
train.4529,document_management,"List all the document names which contains ""CV"".",1,SELECT document_name FROM documents WHERE document_name LIKE '%CV%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_name FROM documents WHERE document_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of documents from the 'Documents' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the document names.
train.4533,document_management,Find the description of the most popular role among the users that have logged in.,1,SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY role_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table retrieves the description of a role from the 'Roles' table based on the role code associated with a specific user login. The placeholders in the query allow for specifying the user login and limiting the number of results based on the frequency of role codes associated with users.
train.4536,document_management,What is the average access count of documents that have the least common structure?,1,SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table calculates the average access count of documents grouped by their document structure code. The placeholder in the LIMIT clause allows the user to specify the maximum number of groups to return, based on the ascending order of the count of documents for each structure."
train.4537,document_management,List all the image name and URLs in the order of their names.,1,"SELECT image_name ,  image_url FROM images ORDER BY image_name",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT image_name ,  image_url FROM images ORDER BY image_name","This virtual table provides a list of image names and their corresponding URLs from the 'Images' table, sorted by the name of the image. The query retrieves all images available in the database."
train.4539,document_management,Find the number of users in each role.,1,"SELECT count(*) ,  role_code FROM users GROUP BY role_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  role_code FROM users GROUP BY role_code",This virtual table provides a count of users grouped by their role codes from the 'Users' table. The placeholder in the SELECT clause represents the count of users for each unique role code.
train.4541,document_management,What document types have more than 2 corresponding documents?,1,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of documents stored in the 'Documents' table. It groups the documents by their type and filters the results to only include those types that have been accessed more than a specified number of times, represented by a placeholder for numeric values."
train.4543,company_office,How many companies are there?,1,SELECT count(*) FROM Companies,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Companies,"This virtual table provides the total count of companies from the 'Companies' table. It does not filter or group the results, thus returning a single numeric value representing the total number of companies in the database."
train.4545,company_office,List the names of companies in descending order of market value.,1,SELECT name FROM Companies ORDER BY Market_Value_billion DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM Companies ORDER BY Market_Value_billion DESC,"This virtual table lists the names of companies from the 'Companies' table, ordered by their market value in descending order. This allows users to see which companies have the highest market value at a glance."
train.4547,company_office,"What are the names of companies whose headquarters are not ""USA""?",1,SELECT name FROM Companies WHERE Headquarters != 'USA',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM Companies WHERE Headquarters != [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of companies from the 'Companies' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the location of the headquarters.
train.4549,company_office,"What are the name and assets of each company, sorted in ascending order of company name?",1,"SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC","This virtual table provides a list of company names along with their total assets in billions from the 'Companies' table, sorted in ascending order by the company name."
train.4551,company_office,What are the average profits of companies?,1,SELECT avg(Profits_billion) FROM Companies,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Profits_billion) FROM Companies,This virtual table calculates the average annual profits of companies from the 'Companies' table. The result provides insight into the overall profitability of the companies listed.
train.4553,company_office,"What are the maximum and minimum sales of the companies whose industries are not ""Banking"".",1,"SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != 'Banking'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != [PLACEHOLDER-TYPE:STRING]",This virtual table provides the maximum and minimum annual sales revenue of companies from the 'Companies' table that operate in industries other than a specified one. The placeholder in the WHERE clause represents the industry to be excluded from the results.
train.4555,company_office,How many different industries are the companies in?,1,SELECT count(DISTINCT Industry) FROM Companies,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Industry) FROM Companies,"This virtual table provides the count of distinct industries represented in the 'Companies' table. The query counts unique entries in the 'Industry' column, which indicates the variety of sectors in which companies operate."
train.4557,company_office,List the names of buildings in descending order of building height.,1,SELECT name FROM buildings ORDER BY Height DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM buildings ORDER BY Height DESC,"This virtual table lists the names of buildings from the 'buildings' table, ordered by their height in descending order. This allows users to easily identify the tallest buildings first."
train.4559,company_office,Find the stories of the building with the largest height.,1,SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Stories FROM buildings ORDER BY Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the number of stories of buildings from the 'buildings' table, sorted by their height in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.4561,company_office,List the name of a building along with the name of a company whose office is in the building.,1,"SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id","This virtual table describes the names of companies and the names of buildings they occupy. It combines data from the 'Office_locations', 'buildings', and 'Companies' tables, linking them through their respective identifiers. The result will show which companies are located in which buildings."
train.4563,company_office,Show the names of the buildings that have more than one company offices.,1,SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of buildings that have more than a specified number of companies occupying their office spaces. The placeholder in the HAVING clause represents the minimum count of companies required for a building to be included in the results.
train.4565,company_office,Show the name of the building that has the most company offices.,1,SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of buildings that host the most companies, based on the number of companies occupying each building. The placeholder in the LIMIT clause represents the maximum number of building names to return."
train.4567,company_office,"Please show the names of the buildings whose status is ""on-hold"", in ascending order of stories.",1,SELECT name FROM buildings WHERE Status  =  'on-hold' ORDER BY Stories ASC,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM buildings WHERE Status  =  [PLACEHOLDER-TYPE:STRING] ORDER BY Stories ASC,"This virtual table describes the names of buildings from the 'buildings' table that are currently in a specific status. The placeholder in the WHERE clause represents the status of the building, and the results are ordered by the number of stories in ascending order."
train.4569,company_office,Please show each industry and the corresponding number of companies in that industry.,1,"SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry","This virtual table summarizes the number of companies operating in each industry sector from the 'Companies' table. The query groups the results by the 'Industry' column, allowing users to see how many companies are present in each industry."
train.4575,company_office,List the names of buildings that have no company office.,1,SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations),"This virtual table lists the names of buildings from the 'buildings' table that are currently not occupied by any company. The subquery checks the 'Office_locations' table to find all building IDs that are in use, and the main query filters out those buildings from the results."
train.4577,company_office,"Show the industries shared by companies whose headquarters are ""USA"" and companies whose headquarters are ""China"".",1,SELECT Industry FROM Companies WHERE Headquarters  =  'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  'China',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Industry FROM Companies WHERE Headquarters  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  [PLACEHOLDER-TYPE:STRING],The virtual table describes the industries of companies that have headquarters in two specified locations. The placeholders in the WHERE clause represent the names of the headquarters locations.
train.4579,company_office,"Find the number of companies whose industry is ""Banking"" or ""Conglomerate"",",1,SELECT count(*) FROM Companies WHERE Industry  =  'Banking' OR Industry  =  'Conglomerate',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Companies WHERE Industry  =  [PLACEHOLDER-TYPE:STRING] OR Industry  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of companies from the 'Companies' table that belong to specific industries. The placeholders in the WHERE clause represent the names of the industries being queried.
train.4581,company_office,Show the headquarters shared by more than two companies.,1,SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the headquarters locations of companies from the 'Companies' table that have more than a specified number of offices. The placeholder in the HAVING clause represents the minimum count of offices required for a headquarters to be included in the results.
train.4583,solvency_ii,How many products are there?,1,SELECT count(*) FROM Products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Products,This virtual table provides a count of all products available in the 'Products' table. The query uses the count function to aggregate the total number of product entries.
train.4584,solvency_ii,List the name of products in ascending order of price.,1,SELECT Product_Name FROM Products ORDER BY Product_Price ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Product_Name FROM Products ORDER BY Product_Price ASC,"This virtual table lists the names of products from the 'Products' table, sorted in ascending order based on their price. The query retrieves all product names and organizes them from the lowest to the highest price."
train.4585,solvency_ii,What are the names and type codes of products?,1,"SELECT Product_Name ,  Product_Type_Code FROM Products",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Product_Name ,  Product_Type_Code FROM Products",This virtual table describes the names and types of products from the 'Products' table. The placeholders represent the specific product details that can be filtered or modified as needed.
train.4586,solvency_ii,"Show the prices of the products named ""Dining"" or ""Trading Policy"".",1,SELECT Product_Price FROM Products WHERE Product_Name  =  'Dining' OR Product_Name  =  'Trading Policy',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Product_Price FROM Products WHERE Product_Name  =  [PLACEHOLDER-TYPE:STRING] OR Product_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the prices of products from the 'Products' table based on specific product names. The placeholders in the WHERE clause represent the names of the products being queried.
train.4587,solvency_ii,What is the average price for products?,1,SELECT avg(Product_Price) FROM Products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Product_Price) FROM Products,"This virtual table calculates the average price of products from the 'Products' table. The placeholder in the SELECT clause represents the product price, which is aggregated to provide the average value."
train.4588,solvency_ii,What is the name of the product with the highest price?,1,SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of products from the 'Products' table, ordered by their price in descending order. The placeholder in the LIMIT clause represents the maximum number of product names to be displayed."
train.4589,solvency_ii,Show different type codes of products and the number of products with each type code.,1,"SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code","This virtual table summarizes the count of products grouped by their type from the 'Products' table. The placeholder in the SELECT clause represents the product type code, while the COUNT function aggregates the number of products for each type."
train.4591,solvency_ii,Show the product type codes that have at least two products.,1,SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the distinct product types from the 'Products' table that have a count greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of products required for each type.
train.4592,solvency_ii,Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.,1,SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Product_Type_Code FROM Products WHERE Product_Price  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the product types from the 'Products' table that have a price greater than a specified value and less than another specified value. The placeholders in the query represent the price thresholds.
train.4593,solvency_ii,Show the names of products and the number of events they are in.,1,"SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name","This virtual table summarizes the count of each product name from the 'Products' table that is associated with events in the 'Products_in_Events' table. The placeholder in the SELECT statement represents the product names, and the COUNT function aggregates the number of occurrences for each product name."
train.4594,solvency_ii,"Show the names of products and the number of events they are in, sorted by the number of events in descending order.",1,"SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",This virtual table summarizes the count of each product's occurrence in events from the 'Products' table. It joins the 'Products' table with the 'Products_in_Events' table to aggregate the data based on product names. The results are grouped by product name and ordered by the count in descending order.
train.4595,solvency_ii,Show the names of products that are in at least two events.,1,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of products from the 'Products' table that are associated with events in the 'Products_in_Events' table. The placeholder in the HAVING clause represents the minimum count of events that a product must be associated with to be included in the results.
train.4596,solvency_ii,Show the names of products that are in at least two events in ascending alphabetical order of product name.,1,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.Product_Name,"This virtual table lists the names of products from the 'Products' table that are associated with events in the 'Products_in_Events' table. The results are grouped by product name, and only those products that are linked to a specified minimum number of events are included. The placeholder in the HAVING clause represents the minimum count of events for which the product should be listed."
train.4597,solvency_ii,List the names of products that are not in any event.,1,SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events),"This virtual table lists the names of products from the 'Products' table that are not associated with any events. The subquery checks for product IDs that are linked to events, and the main query filters out those products using a placeholder for the product ID."
train.4598,entertainment_awards,How many artworks are there?,1,SELECT count(*) FROM artwork,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM artwork,"This virtual table provides the total count of artworks from the 'artwork' table. The query uses the count function to aggregate the number of entries in the table, which helps in understanding the total volume of artworks available."
train.4599,entertainment_awards,List the name of artworks in ascending alphabetical order.,1,SELECT Name FROM artwork ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM artwork ORDER BY Name ASC,"This virtual table lists the names of artworks from the 'artwork' table, sorted in ascending order. The query retrieves all artwork names without any filtering, ensuring a comprehensive view of the available artworks."
train.4602,entertainment_awards,"What are the names of the chairs of festivals, sorted in ascending order of the year held?",1,SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC,"This virtual table provides the names of chairpersons overseeing festivals from the 'festival_detail' table, sorted by the year in which the festivals take place. The ordering is done in ascending order based on the year."
train.4603,entertainment_awards,What is the location of the festival with the largest number of audience?,1,SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of festival locations from the 'festival_detail' table, ordered by the estimated number of attendees in descending order. The placeholder in the LIMIT clause represents the maximum number of locations to be returned."
train.4604,entertainment_awards,What are the names of festivals held in year 2007?,1,SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Festival_Name FROM festival_detail WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of festivals from the 'festival_detail' table that take place in a specific year. The placeholder in the WHERE clause represents the year of interest.
train.4605,entertainment_awards,What is the average number of audience for festivals?,1,SELECT avg(Num_of_Audience) FROM festival_detail,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Num_of_Audience) FROM festival_detail,This virtual table calculates the average number of attendees at festivals from the 'festival_detail' table. The result provides insight into the typical audience size for festivals held in various locations and years.
train.4606,entertainment_awards,Show the names of the three most recent festivals.,1,SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of festivals from the 'festival_detail' table, ordered by the year in descending order. The placeholder in the LIMIT clause represents the maximum number of festival names to be displayed."
train.4607,entertainment_awards,"For each nomination, show the name of the artwork and name of the festival where it is nominated.",1,"SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",This virtual table provides a list of artwork names along with the corresponding festival names from the nominations. The query joins the 'nomination' table with the 'artwork' table to retrieve the names of the artworks and then joins with the 'festival_detail' table to get the names of the festivals associated with those nominations.
train.4608,entertainment_awards,Show distinct types of artworks that are nominated in festivals in 2007.,1,SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a distinct list of artwork types associated with nominations made in festivals that occurred in a specific year. The placeholders in the WHERE clause represent the year of the festival.
train.4609,entertainment_awards,Show the names of artworks in ascending order of the year they are nominated in.,1,SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year,"This virtual table provides the names of artworks that have been nominated for festivals, ordered by the year in which the festival takes place. The placeholders in the query represent the necessary identifiers for linking the nominations to their respective artworks and festivals."
train.4611,entertainment_awards,Show the ids and names of festivals that have at least two nominations for artworks.,1,"SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of festival IDs and their corresponding names from the 'festival_detail' table, specifically for festivals that have received a certain number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required for a festival to be included in the results."
train.4615,entertainment_awards,List the year in which there are more than one festivals.,1,SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of years in which a significant number of festivals were held, specifically those years that have more than a specified number of festivals. The placeholder in the HAVING clause represents the minimum count of festivals required for a year to be included in the results."
train.4616,entertainment_awards,List the name of artworks that are not nominated.,1,SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination),"This virtual table lists the names of artworks from the 'Artwork' table that have not been nominated for any festival. The subquery checks for artwork IDs that exist in the 'nomination' table, and the placeholder in the main query allows for filtering based on specific criteria if needed."
train.4617,entertainment_awards,Show the number of audience in year 2008 or 2010.,1,SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the estimated number of attendees at festivals from the 'festival_detail' table for specific years. The placeholders in the WHERE clause represent the years of interest.
train.4618,entertainment_awards,What are the total number of the audiences who visited any of the festivals?,1,SELECT sum(Num_of_Audience) FROM festival_detail,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Num_of_Audience) FROM festival_detail,"This virtual table summarizes the total estimated number of attendees across all festivals recorded in the 'festival_detail' table. The query uses the SUM function to aggregate the 'Num_of_Audience' values, providing a single total figure for audience attendance."
train.4620,customers_campaigns_ecommerce,How many premises are there?,1,SELECT count(*) FROM premises,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM premises,"This virtual table provides a count of all premises recorded in the 'Premises' table. The query uses the COUNT function to aggregate the total number of entries, which is useful for understanding the scale of premises available."
train.4621,customers_campaigns_ecommerce,What are all the distinct premise types?,1,SELECT DISTINCT premises_type FROM premises,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT premises_type FROM premises,The virtual table provides a list of unique types of premises from the 'Premises' table. The placeholder in the SELECT statement allows for the retrieval of distinct premise types without specifying any particular type.
train.4622,customers_campaigns_ecommerce,Find the types and details for all premises and order by the premise type.,1,"SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type","This virtual table provides a list of premises types along with their detailed descriptions from the 'Premises' table, sorted by the type of premise."
train.4623,customers_campaigns_ecommerce,Show each premise type and the number of premises in that type.,1,"SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",This virtual table summarizes the count of premises grouped by their type from the 'Premises' table. The placeholder in the SELECT statement allows for the retrieval of the type of premises and the total count for each type.
train.4624,customers_campaigns_ecommerce,Show all distinct product categories along with the number of mailshots in each category.,1,"SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category","This virtual table summarizes the number of mailshot campaigns grouped by product category. The placeholder in the SELECT statement represents the product category, and the count function provides the total number of campaigns for each category."
train.4625,customers_campaigns_ecommerce,Show the name and phone of the customer without any mailshot.,1,"SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)","This virtual table provides the names and phone numbers of customers from the 'Customers' table who have not received any mailshot campaigns. The subquery filters out customers that are linked to the 'Mailshot_Customers' table, ensuring only those without any mailshot interactions are included."
train.4626,customers_campaigns_ecommerce,Show the name and phone for customers with a mailshot with outcome code 'No Response'.,1,"SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names and phone numbers of customers from the 'Customers' table who have received a specific mailshot campaign. The placeholder in the WHERE clause represents the outcome code of the mailshot, allowing users to filter customers based on their response to the campaign."
train.4627,customers_campaigns_ecommerce,Show the outcome code of mailshots along with the number of mailshots in each outcome code.,1,"SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code",This virtual table summarizes the outcomes of mailshot campaigns by counting the number of customers associated with each outcome code. The placeholder in the SELECT statement allows for dynamic querying of the outcome codes.
train.4628,customers_campaigns_ecommerce,Show the names of customers who have at least 2 mailshots with outcome code 'Order'.,1,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of customers who received a specific mailshot campaign and had a particular outcome. The query filters customers based on the outcome code of the mailshot and groups the results by customer ID, ensuring that only those customers who received the mailshot a specified number of times are included. The placeholders in the WHERE clause represent the outcome code and the minimum count of mailshots received."
train.4629,customers_campaigns_ecommerce,Show the names of customers who have the most mailshots.,1,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names who have received mailshot campaigns, grouped by customer to avoid duplicates. The results are ordered by the number of mailshots received in descending order, allowing users to see which customers have engaged the most with the campaigns. The placeholder in the LIMIT clause represents the maximum number of customer names to return."
train.4630,customers_campaigns_ecommerce,What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.,1,"SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and payment methods of customers who have received a specific mailshot campaign and had a particular outcome. The placeholders in the WHERE clause represent the outcome codes for filtering the results.
train.4631,customers_campaigns_ecommerce,Show the premise type and address type code for all customer addresses.,1,"SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id","This virtual table describes the types of premises associated with different address types from the 'Customer_Addresses' and 'Premises' tables. The join operation links the two tables based on the premise identifier, allowing for a comprehensive view of the address types and their corresponding premises types."
train.4632,customers_campaigns_ecommerce,What are the distinct address type codes for all customer addresses?,1,SELECT DISTINCT address_type_code FROM customer_addresses,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT address_type_code FROM customer_addresses,"This virtual table provides a list of unique address type codes from the 'Customer_Addresses' table, which indicates the different types of addresses associated with customers, such as billing or shipping addresses. The placeholder in the SELECT statement allows for the retrieval of distinct values for address types."
train.4633,customers_campaigns_ecommerce,Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.,1,"SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  [PLACEHOLDER-TYPE:STRING] OR order_status_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the shipping charges and customer identifiers from the 'Customer_Orders' table for orders that have a specific status. The placeholders in the WHERE clause represent the order status codes that the user can specify.
train.4634,customers_campaigns_ecommerce,Show the names of customers having an order with shipping method FedEx and order status Paid.,1,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  [PLACEHOLDER-TYPE:STRING] AND order_status_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers from the 'Customers' table who have placed orders with a specific shipping method and order status. The placeholders in the WHERE clause represent the shipping method and order status codes.
train.4635,college_3,How many courses are there in total?,1,SELECT count(*) FROM COURSE,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM COURSE,"This virtual table provides the total number of courses available in the 'Course' table. The query counts all entries in the table, which represents the total course offerings."
train.4637,college_3,How many courses have more than 2 credits?,1,SELECT count(*) FROM COURSE WHERE Credits  >  2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM COURSE WHERE Credits  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of courses from the 'Course' table that have a credit value greater than a specified number. The placeholder in the WHERE clause represents the minimum number of credits to filter the courses.
train.4639,college_3,List all names of courses with 1 credit?,1,SELECT CName FROM COURSE WHERE Credits  =  1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT CName FROM COURSE WHERE Credits  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of courses from the 'Course' table that have a specific number of credits. The placeholder in the WHERE clause represents the number of credits for the courses.
train.4641,college_3,Which courses are taught on days MTW?,1,SELECT CName FROM COURSE WHERE Days  =  'MTW',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT CName FROM COURSE WHERE Days  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of courses from the 'Course' table that are scheduled on specific days of the week. The placeholder in the WHERE clause represents the days when the courses are held.
train.4643,college_3,"What is the number of departments in Division ""AS""?",1,SELECT count(*) FROM DEPARTMENT WHERE Division  =  'AS',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM DEPARTMENT WHERE Division  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of departments from the 'Department' table that belong to a specific division. The placeholder in the WHERE clause represents the division's name.
train.4645,college_3,What are the phones of departments in Room 268?,1,SELECT DPhone FROM DEPARTMENT WHERE Room  =  268,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DPhone FROM DEPARTMENT WHERE Room  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the contact phone number for a specific department from the 'Department' table, filtered by the room number assigned to that department. The placeholder in the WHERE clause represents the room number."
train.4647,college_3,"Find the number of students that have at least one grade ""B"".",1,SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  'B',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct students who have received a specific grade in their enrolled courses. The placeholder in the WHERE clause represents the letter grade being queried.
train.4649,college_3,Find the max and min grade point for all letter grade.,1,"SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION","This virtual table provides the maximum and minimum grade points from the 'Gradeconversion' table, which is used to convert letter grades into grade points. The query does not require any filtering conditions, as it aggregates the grade points across all records."
train.4653,college_3,Find the first names and last names of male (sex is M) faculties who live in building NEB.,1,"SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  'M' AND Building  =  'NEB'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  [PLACEHOLDER-TYPE:STRING] AND Building  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of faculty members from the 'Faculty' table who belong to a specific gender and are located in a particular building. The placeholders in the WHERE clause represent the gender and building name.
train.4656,college_3,What are the rooms for members of the faculty who are professors and who live in building NEB?,1,SELECT Room FROM FACULTY WHERE Rank  =  'Professor' AND Building  =  'NEB',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Room FROM FACULTY WHERE Rank  =  [PLACEHOLDER-TYPE:STRING] AND Building  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the room numbers of faculty members from the 'Faculty' table who hold a specific rank and are located in a particular building. The placeholders in the WHERE clause represent the rank and building names.
train.4657,college_3,"Find the department name that is in Building ""Mergenthaler"".",1,SELECT DName FROM DEPARTMENT WHERE Building  =  'Mergenthaler',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DName FROM DEPARTMENT WHERE Building  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of departments from the 'Department' table that are located in a specific building. The placeholder in the WHERE clause represents the name of the building.
train.4659,college_3,List all information about courses sorted by credits in the ascending order.,1,SELECT * FROM COURSE ORDER BY Credits,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM COURSE ORDER BY Credits,"This virtual table provides a comprehensive view of all courses available in the 'Course' table, sorted by the number of credits each course offers. The sorting allows users to easily identify courses based on their credit value."
train.4661,college_3,List the course name of courses sorted by credits.,1,SELECT CName FROM COURSE ORDER BY Credits,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT CName FROM COURSE ORDER BY Credits,"This virtual table lists the names of courses from the 'Course' table, ordered by the number of credits each course offers. The ordering allows users to easily identify courses based on their credit value."
train.4663,college_3,Find the first name of students in the descending order of age.,1,SELECT Fname FROM STUDENT ORDER BY Age DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Fname FROM STUDENT ORDER BY Age DESC,"This virtual table describes the first names of students from the 'Student' table, ordered by their age in descending order. The query retrieves the names of students, allowing for an easy view of who the oldest students are."
train.4665,college_3,Find the last name of female (sex is F) students in the descending order of age.,1,SELECT LName FROM STUDENT WHERE Sex  =  'F' ORDER BY Age DESC,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT LName FROM STUDENT WHERE Sex  =  [PLACEHOLDER-TYPE:STRING] ORDER BY Age DESC,"This virtual table describes the last names of students from the 'Student' table who are of a specific gender. The placeholder in the WHERE clause represents the gender of the students, and the results are ordered by age in descending order."
train.4667,college_3,Find the last names of faculties in building Barton in alphabetic order.,1,SELECT Lname FROM FACULTY WHERE Building  =  'Barton' ORDER BY Lname,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Lname FROM FACULTY WHERE Building  =  [PLACEHOLDER-TYPE:STRING] ORDER BY Lname,This virtual table describes the last names of faculty members from the 'Faculty' table who are located in a specific building. The placeholder in the WHERE clause represents the name of the building.
train.4669,college_3,Find the first names of faculties of rank Professor in alphabetic order.,1,SELECT Fname FROM FACULTY WHERE Rank  =  'Professor' ORDER BY Fname,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Fname FROM FACULTY WHERE Rank  =  [PLACEHOLDER-TYPE:STRING] ORDER BY Fname,This virtual table describes the first names of faculty members from the 'Faculty' table who hold a specific rank. The placeholder in the WHERE clause represents the rank of the faculty member.
train.4671,college_3,Find the name of the department that has the biggest number of students minored in?,1,SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of departments from the 'Department' table that offer minors, grouped by the department identifier. The results are ordered by the number of students enrolled in each minor, in descending order, and limited to a specified number of departments. The placeholder in the LIMIT clause represents the maximum number of departments to return."
train.4673,college_3,Find the name of the department that has no students minored in?,1,SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO,"This virtual table lists the names of departments from the 'Department' table that do not offer a minor program. The query uses an EXCEPT clause to exclude departments that are associated with any student pursuing a minor, as indicated by the join with the 'Minor_in' table."
train.4675,college_3,Find the name of the department that has the fewest members.,1,SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'Department' table, which are associated with faculty members in the 'Member_of' table. The results are grouped by department and ordered by the count of faculty members in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to retrieve."
train.4677,college_3,Find the rank of the faculty that the fewest faculties belong to.,1,SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of faculty ranks from the 'Faculty' table, grouped by rank and ordered by the count of faculty members in each rank in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ranks to retrieve."
train.4681,college_3,Which building does the instructor who teaches the most number of courses live in?,1,SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of buildings where the most frequently assigned instructors teach courses. The placeholder in the LIMIT clause allows the user to specify the number of top buildings to retrieve based on instructor assignments.
train.4683,college_3,What are the name of courses that have at least five enrollments?,1,SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of courses from the 'Course' table that have a minimum number of students enrolled. The placeholder in the HAVING clause represents the minimum count of students required for a course to be included in the results.
train.4687,college_3,Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.,1,"SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  'INTRODUCTION TO COMPUTER SCIENCE'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and room numbers of departments that offer a specific course. The placeholder in the WHERE clause represents the name of the course being queried.
train.4689,college_3,Find the student first and last names and grade points of all enrollments.,1,"SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID","This virtual table provides the first and last names of students along with their corresponding grade points for the courses they are enrolled in. The placeholders in the query represent the relationships between the enrolled students, their grades, and the grade point values assigned to those grades."
train.4691,college_3,Find the distinct student first names of all students that have grade point at least 3.8 in one course.,1,SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students who have received grades that correspond to a grade point value above a specified threshold. The placeholders in the WHERE clause represent the minimum grade point value for filtering the results.
train.4693,college_3,Find the full names of faculties who are members of department with department number 520.,1,"SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first and last names of faculty members from the 'Faculty' table who are associated with a specific department. The placeholder in the WHERE clause represents the unique identifier of the department.
train.4695,college_3,What are the first names and last names of the students that minor in the department with DNO 140.,1,"SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first and last names of students who are pursuing a minor in a specific department. The placeholder in the WHERE clause represents the unique identifier for the department offering the minor.
train.4697,college_3,Find the last names of faculties who are members of computer science department.,1,SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  'Computer Science',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the last names of faculty members from the 'Faculty' table who are part of a specific department. The query joins the 'Department' and 'Member_of' tables to filter faculty based on the department's name provided as a placeholder.
train.4699,college_3,Find the average grade point of student whose last name is Smith.,1,SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average grade point for students from the 'Student' table based on their last name. The average is derived from the 'Enrolled_in' table, which links students to their grades, and the 'Gradeconversion' table, which provides the corresponding grade points for those grades. The placeholder in the WHERE clause represents the last name of the student."
train.4701,college_3,What is the maximum and minimum grade point of students who live in NYC?,1,"SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  'NYC'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table calculates the maximum and minimum grade points for students enrolled in courses, filtered by the city code of their residence. The placeholders in the WHERE clause represent the city code of the students."
train.4706,college_3,"What are the names of departments either in division AS, or in division EN and in building NEB?",1,SELECT DName FROM DEPARTMENT WHERE Division  =  'AS' UNION SELECT DName FROM DEPARTMENT WHERE Division  =  'EN' AND Building  =  'NEB',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DName FROM DEPARTMENT WHERE Division  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT DName FROM DEPARTMENT WHERE Division  =  [PLACEHOLDER-TYPE:STRING] AND Building  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of department names from the 'Department' table based on specific criteria. It retrieves department names that belong to a certain division and also includes departments from the same division located in a specific building. The placeholders in the WHERE clauses represent the division and building names.
train.4707,college_3,Find the first name of students not enrolled in any course.,1,SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN),This virtual table lists the first names of students from the 'Student' table who are not currently enrolled in any courses. The subquery checks the 'Enrolled_in' table to find students who have not been assigned any course identifiers.
train.4710,department_store,Give the ids of the three products purchased in the largest amounts.,1,SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the product IDs from the 'Product_Suppliers' table, ordered by the total amount purchased in descending order. The placeholder in the LIMIT clause allows the user to specify the number of top products to retrieve based on their purchase quantity."
train.4711,department_store,What are the product id and product type of the cheapest product?,1,"SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of product identifiers and their corresponding type codes from the 'Products' table, ordered by the price of the products. The placeholder in the LIMIT clause allows the user to specify the maximum number of products to retrieve."
train.4713,department_store,Find the number of different product types.,1,SELECT count(DISTINCT product_type_code) FROM products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT product_type_code) FROM products,The virtual table provides a count of distinct product types available in the 'Products' table. This count helps in understanding the variety of products offered.
train.4715,department_store,Return the address of customer 10.,1,SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the detailed addresses associated with a specific customer from the 'Addresses' table. The placeholder in the WHERE clause represents the unique identifier of the customer whose addresses are being queried.
train.4718,department_store,Return the staff ids and genders for any staff with the title Department Manager.,1,"SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Department Manager'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the staff IDs and genders of staff members from the 'Staff' table who are assigned to a specific job title. The placeholder in the WHERE clause represents the job title code that is being queried.
train.4719,department_store,"For each payment method, return how many customers use it.",1,"SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code","This virtual table summarizes the number of customers grouped by their payment method codes from the 'Customers' table. The placeholder in the SELECT clause represents the payment method code, while the count function aggregates the total number of customers for each payment method."
train.4721,department_store,What is the id of the product that was ordered the most often?,1,SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of product IDs from the 'Order_Items' table, grouped by product ID and ordered by the count of orders in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of product IDs to retrieve."
train.4723,department_store,"What are the name, phone number and email address of the customer who made the largest number of orders?",1,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer names, phone numbers, and email addresses from the 'Customers' table. It joins with the 'Customer_Orders' table to associate each customer with their orders. The results are grouped by customer ID to aggregate the order counts, allowing for the identification of the most frequent customers. The placeholder in the LIMIT clause represents the maximum number of customers to be returned."
train.4725,department_store,What is the average price for each type of product?,1,"SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code","This virtual table provides the average price of products grouped by their type from the 'Products' table. The placeholder in the SELECT clause represents the product type code, while the average price is calculated for each type."
train.4727,department_store,How many department stores does the store chain South have?,1,SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  'South',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of department stores that belong to a specific department store chain. The placeholder in the WHERE clause represents the name of the department store chain.
train.4731,department_store,"Give me the product type, name and price for all the products supplied by supplier id 3.",1,"SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the product type code, product name, and product price from the 'Products' table that are supplied by a specific supplier. The placeholder in the WHERE clause represents the unique identifier of the supplier."
train.4734,department_store,"What are the distinct names of customers with an order status of Pending, sorted by customer id?",1,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Pending' ORDER BY T2.customer_id,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T2.customer_id,This virtual table provides a list of distinct customer names from the 'Customers' table who have placed orders with a specific status. The placeholder in the WHERE clause represents the order status code that is being filtered.
train.4737,department_store,Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.,1,SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.product_price  >  (SELECT avg(product_price) FROM products),"This virtual table lists the product IDs of products supplied by a specific supplier, where the product's price is greater than the average price of all products. The placeholders in the WHERE clause represent the supplier's ID and the average product price condition."
train.4741,department_store,What are the ids of the two department store chains with the largest number of department stores?,1,SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department store chain identifiers from the 'Department_Stores' table, grouped by the chain ID. The results are ordered by the number of stores associated with each chain in descending order, and the number of results returned is limited by a specified placeholder for numeric values."
train.4743,department_store,What is the id of the department with the least number of staff?,1,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique department IDs from the 'Staff_Department_Assignments' table, grouped by department. The results are ordered by the number of staff assigned to each department, and the number of results returned is limited by a specified placeholder value."
train.4745,department_store,"For each product type, return the maximum and minimum price.",1,"SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",This virtual table summarizes the maximum and minimum prices of products grouped by their type from the 'Products' table. The placeholders represent the product type code and the price values.
train.4747,department_store,Find the product type whose average price is higher than the average price of all products.,1,SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products),The virtual table summarizes the product types from the 'Products' table that have an average price greater than the overall average price of all products. The placeholder in the HAVING clause represents the average product price calculated from the entire 'Products' table.
train.4751,department_store,Return the names and ids of all products whose price is between 600 and 700.,1,"SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and unique identifiers of products from the 'Products' table that fall within a specified price range. The placeholders in the WHERE clause represent the minimum and maximum price values.
train.4757,department_store,What are the names and ids of customers whose address contains TN?,1,"SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE '%TN%'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and unique identifiers of customers from the 'Customers' table whose addresses match a specific pattern. The placeholder in the WHERE clause represents the address pattern to filter the results.
train.4761,department_store,List the name of staff who has been assigned multiple jobs.,1,SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of staff members from the 'Staff' table who are assigned to departments, filtered to include only those with more than a specified number of assignments. The placeholder in the HAVING clause represents the minimum count of assignments required."
train.4763,department_store,List the name and phone number of all suppliers in the alphabetical order of their addresses.,1,"SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details","The virtual table provides a list of supplier names and their corresponding phone numbers, ordered by the detailed description of their addresses. It combines data from the 'Suppliers', 'Supplier_Addresses', and 'Addresses' tables to achieve this."
train.4767,department_store,Return the ids of all products that were ordered more than three times or supplied more than 80000.,1,SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies products that have been ordered more than a specified number of times or have been supplied in quantities exceeding a certain threshold. The placeholders in the HAVING clauses represent the minimum counts for orders and total amounts purchased, respectively."
train.4769,department_store,What are id and name of the products whose price is lower than 600 or higher than 900?,1,"SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT product_id ,  product_name FROM products WHERE product_price  <  [PLACEHOLDER-TYPE:NUMBER] OR product_price  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the product IDs and names of products from the 'Products' table that have a price either below or above specified thresholds. The placeholders in the WHERE clause represent the price limits.
train.4771,department_store,Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.,1,SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  [PLACEHOLDER-TYPE:NUMBER] OR avg(total_amount_purchased)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies suppliers from the 'Product_Suppliers' table whose average total amount purchased exceeds or falls below a specified threshold. The placeholders in the HAVING clause represent numeric values for the average total amount purchased.
train.4773,department_store,What are the average amount purchased and value purchased for the supplier who supplies the most products.,1,"SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])",This virtual table calculates the average total amount and average total value of products purchased from the most frequently supplying supplier in the 'Product_Suppliers' table. The placeholder in the subquery represents the limit for selecting the top supplier based on the number of products supplied.
train.4775,department_store,What is the largest and smallest customer codes?,1,"SELECT max(customer_code) ,  min(customer_code) FROM Customers",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(customer_code) ,  min(customer_code) FROM Customers",This virtual table provides the maximum and minimum customer codes from the 'Customers' table. The placeholders in the SELECT statement represent the aggregation functions applied to the customer codes.
train.4777,department_store,List the names of all the distinct customers who bought a keyboard.,1,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  'keyboard',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of unique customer names from the 'Customers' table who have placed orders for a specific product. The query joins the 'Customers', 'Customer_Orders', 'Order_Items', and 'Products' tables to filter customers based on the product name specified in the placeholder."
train.4779,department_store,List the names and phone numbers of all the distinct suppliers who supply red jeans.,1,"SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'red jeans'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides a distinct list of supplier names and their contact phone numbers from the 'Suppliers' table. It filters the results based on the product name from the 'Products' table, ensuring that only suppliers associated with a specific product are included. The placeholder in the WHERE clause represents the name of the product being queried."
train.4781,department_store,"What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",1,"SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",This virtual table summarizes the maximum and minimum prices of products grouped by their type from the 'Products' table. The placeholders in the query allow for dynamic adjustments to the product type code if needed.
train.4783,department_store,"List the order id, customer id for orders in Cancelled status, ordered by their order dates.",1,"SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   'Cancelled' ORDER BY order_date",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   [PLACEHOLDER-TYPE:STRING] ORDER BY order_date","This virtual table provides a list of order IDs and customer IDs from the 'Customer_Orders' table for orders that have a specific status. The placeholder in the WHERE clause represents the order status code, allowing users to filter the results based on their needs."
train.4785,department_store,Find the names of products that were bought by at least two distinct customers.,1,SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of distinct product names from the 'Products' table that have been ordered by a specified minimum number of different customers. The placeholders in the HAVING clause represent the minimum count of unique customers who have ordered each product.
train.4787,department_store,Find the names of customers who have bought by at least three distinct products.,1,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of distinct customer names from the 'Customers' table who have placed orders containing a specified minimum number of different products. The placeholders in the HAVING clause represent the minimum count of distinct products ordered by the customers.
train.4789,department_store,Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.,1,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Sales Person' EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Clerical Staff'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the names and genders of staff members from the 'Staff' table who are assigned to a specific job title, excluding those who are assigned to another specified job title. The placeholders in the WHERE clause represent the job titles being filtered."
train.4796,department_store,What is the name of the hardware product with the greatest price?,1,SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_name FROM products WHERE product_type_code  =  [PLACEHOLDER-TYPE:STRING] ORDER BY product_price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of products from the 'Products' table that match a specific product type code. The results are ordered by the product price in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.4797,aircraft,How many aircrafts are there?,1,SELECT count(*) FROM aircraft,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM aircraft,This virtual table provides the total count of aircraft entries in the 'aircraft' table. The query uses the count function to aggregate the number of records present in the table.
train.4799,aircraft,List the description of all aircrafts.,1,SELECT Description FROM aircraft,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Description FROM aircraft,The virtual table describes the detailed descriptions of aircraft from the 'aircraft' table. This allows users to retrieve information about the aircraft models and their specifications.
train.4801,aircraft,What is the average number of international passengers of all airports?,1,SELECT avg(International_Passengers) FROM airport,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(International_Passengers) FROM airport,This virtual table calculates the average number of international passengers handled by all airports in the 'airport' table. The result provides insight into the overall international passenger traffic across different airports.
train.4803,aircraft,"What are the number of international and domestic passengers of the airport named London ""Heathrow""?",1,"SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  'London Heathrow'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the number of international and domestic passengers handled by a specific airport from the 'airport' table. The placeholder in the WHERE clause represents the name of the airport being queried.
train.4805,aircraft,"What are the total number of Domestic Passengers of airports that contain the word ""London"".",1,SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE '%London%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total number of domestic passengers from a specific airport in the 'airport' table. The placeholder in the WHERE clause allows for filtering by the airport's name.
train.4807,aircraft,What are the maximum and minimum number of transit passengers of all aiports.,1,"SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",This virtual table provides the maximum and minimum number of transit passengers recorded at various airports from the 'airport' table. The placeholders in the SELECT statement represent the aggregate values of transit passengers.
train.4809,aircraft,What are the name of pilots aged 25 or older?,1,SELECT Name FROM pilot WHERE Age  >=  25,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM pilot WHERE Age  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of pilots from the 'pilot' table who are of a certain age or older. The placeholder in the WHERE clause represents the minimum age of the pilots.
train.4811,aircraft,List all pilot names in ascending alphabetical order.,1,SELECT Name FROM pilot ORDER BY Name ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM pilot ORDER BY Name ASC,"This virtual table lists the names of pilots from the 'pilot' table, sorted in ascending order. The query retrieves the 'Name' column and organizes the results alphabetically."
train.4813,aircraft,List names of all pilot aged 30 or younger in descending alphabetical order.,1,SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM pilot WHERE Age  <=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY Name DESC,This virtual table describes the names of pilots from the 'pilot' table who are of a certain age or younger. The placeholder in the WHERE clause represents the maximum age limit for filtering the pilots.
train.4815,aircraft,"Please show the names of aircrafts associated with airport with name ""London Gatwick"".",1,SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Gatwick',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the models of aircraft that are associated with a specific airport. The placeholder in the WHERE clause represents the name of the airport being queried.
train.4818,aircraft,What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?,1,"SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the models and descriptions of aircraft that are associated with airports handling a specific number of passengers. The placeholder in the WHERE clause represents the minimum total number of passengers at the airport.
train.4819,aircraft,"What is the average total number of passengers of airports that are associated with aircraft ""Robinson R-22""?",1,SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  'Robinson R-22',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average number of passengers handled by airports that operate a specific type of aircraft. The placeholder in the WHERE clause represents the model or type of the aircraft.
train.4826,aircraft,"For each aircraft that has won an award, what is its name and how many time has it won?",1,"SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft","This virtual table summarizes the count of matches won by each aircraft model from the 'aircraft' table. The placeholder in the SELECT statement represents the aircraft model, while the COUNT function aggregates the number of wins for each aircraft."
train.4827,aircraft,List names of all pilot in descending order of age.,1,SELECT Name FROM pilot ORDER BY Age DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM pilot ORDER BY Age DESC,"This virtual table lists the names of pilots from the 'pilot' table, ordered by their age in descending order. This allows users to see the oldest pilots first."
train.4830,aircraft,What are the names of all aircrafts that have won a match at least twice?,1,SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the models of aircraft that have been used by winning pilots in matches, specifically those that have won a number of matches equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum number of wins required for the aircraft to be included in the results."
train.4831,aircraft,List the names of aircrafts and that did not win any match.,1,SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH),This virtual table lists the models of aircraft from the 'aircraft' table that have not been used as winning aircraft in any match. The placeholder in the subquery represents the winning aircraft IDs that are being excluded from the selection.
train.4833,aircraft,"Show the names of aircrafts that are associated with both an airport named ""London Heathrow"" and an airport named ""London Gatwick""",1,SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Gatwick',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies aircraft that are associated with two different airports, allowing for a comparison of aircraft used at both locations. The placeholders in the WHERE clause represent the names of the airports being compared."
train.4835,aircraft,Show all information on the airport that has the largest number of international passengers.,1,SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of airports sorted by the number of international passengers they handle, displaying all relevant details for each airport. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.4837,aircraft,find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.,1,"SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and ages of pilots who have won matches, filtered by a specified maximum age. The results are grouped by the winning pilot's identifier and ordered by the number of wins in descending order, with a limit on the number of results returned."
train.4840,aircraft,How old is the youngest winning pilot and what is their name?,1,"SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the names and ages of pilots who have won matches, sourced from the 'pilot' table. The results are ordered by the age of the pilots, and the placeholder in the LIMIT clause represents the maximum number of records to return."
train.4841,aircraft,find the name of pilots who did not win the matches held in the country of Australia.,1,SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of pilots from the 'pilot' table who did not win any matches held in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.4843,local_govt_and_lot,How many residents does each property have? List property id and resident count.,1,"SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id","This virtual table provides a count of residents for each property from the 'Properties' table. The placeholder in the SELECT statement represents the property identifier, while the count function aggregates the number of residents associated with each property."
train.4844,local_govt_and_lot,What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?,1,SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of service type codes from the 'Services' table that are associated with a specific organization. The placeholder in the WHERE clause represents the detailed information about the organization.
train.4847,local_govt_and_lot,"List the id and type of each thing, and the details of the organization that owns it.",1,"SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id",This virtual table provides a list of items or things along with their associated type codes and the details of the organizations they are linked to. The placeholders represent the identifiers for the things and organizations involved.
train.4848,local_govt_and_lot,What are the id and details of the customers who have at least 3 events?,1,"SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of customers along with their details from the 'Customers' table who have been involved in a certain number of customer events. The placeholder in the HAVING clause represents the minimum count of events a customer must have participated in to be included in the results.
train.4850,local_govt_and_lot,Which events have the number of notes between one and three? List the event id and the property id.,1,"SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer event IDs and their associated property IDs from the 'Customer_Events' table, filtered by the number of related notes in the 'Customer_Event_Notes' table. The placeholders in the HAVING clause represent the minimum and maximum counts of notes associated with each customer event."
train.4851,local_govt_and_lot,What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21',1,"SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  [PLACEHOLDER-TYPE:STRING] OR T1.Date_and_Date  <  [PLACEHOLDER-TYPE:STRING]","This virtual table provides a distinct list of things along with their type codes from the 'Things' table, filtered by the status of the thing or the date when the status was recorded. The placeholders in the WHERE clause represent the status code and the date criteria for filtering the results."
train.4852,local_govt_and_lot,How many distinct locations have the things with service detail 'Unsatisfied' been located in?,1,SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of distinct location codes for items associated with a specific service detail from the 'Things' table. The placeholder in the WHERE clause represents the specific service detail being queried.
train.4853,local_govt_and_lot,How many different status codes of things are there?,1,SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things,This virtual table provides the count of distinct status codes for things tracked in the 'Timed_Status_of_Things' table. The placeholder in the SELECT statement allows for the retrieval of unique status codes without specifying exact values.
train.4855,local_govt_and_lot,When is the last day any resident moved in?,1,SELECT max(date_moved_in) FROM Residents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(date_moved_in) FROM Residents,This virtual table provides the most recent date when any resident moved into their property from the 'Residents' table. The placeholder in the SELECT clause represents the maximum date of move-in recorded.
train.4857,local_govt_and_lot,List the customer event id and the corresponding move in date and property id.,1,"SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events","This virtual table provides information about customer events, specifically the unique identifier for each event, the date when the customer moved into the associated property, and the identifier for that property. The placeholders in the SELECT statement can be modified to filter or retrieve specific customer events based on various criteria."
train.4858,local_govt_and_lot,How many customers did not have any event?,1,SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events ),"This virtual table provides a count of customers from the 'Customers' table who do not have any associated events in the 'Customer_Events' table. The query uses a subquery to filter out customer IDs that are present in the 'Customer_Events' table, ensuring that only those customers without events are counted."
train.4859,local_govt_and_lot,What are the distinct move in dates of the residents?,1,SELECT DISTINCT date_moved_in FROM residents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT date_moved_in FROM residents,This virtual table provides a list of unique move-in dates for residents from the 'Residents' table. The placeholder in the SELECT statement allows for the retrieval of distinct dates when residents moved into their respective properties.
train.4862,school_player,List the locations of schools in ascending order of enrollment.,1,SELECT LOCATION FROM school ORDER BY Enrollment ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM school ORDER BY Enrollment ASC,"This virtual table provides a list of school locations from the 'school' table, ordered by the total number of students enrolled in ascending order. The query allows users to see which schools have the least enrollment first."
train.4864,school_player,List the locations of schools in descending order of founded year.,1,SELECT LOCATION FROM school ORDER BY Founded DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM school ORDER BY Founded DESC,"This virtual table provides a list of school locations from the 'school' table, ordered by the year each school was founded in descending order. This allows users to see the most recently established schools first."
train.4868,school_player,What is the average enrollment of schools?,1,SELECT avg(Enrollment) FROM school,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Enrollment) FROM school,This virtual table calculates the average enrollment of students across all schools listed in the 'school' table. The result provides insight into the overall student population in these educational institutions.
train.4871,school_player,Find the team of each player and sort them in ascending alphabetical order.,1,SELECT Team FROM player ORDER BY Team ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Team FROM player ORDER BY Team ASC,"This virtual table lists the teams associated with players from the 'player' table, sorted in ascending order. The query retrieves the 'Team' column and organizes the results alphabetically."
train.4874,school_player,Find the team of the player of the highest age.,1,SELECT Team FROM player ORDER BY Age DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Team FROM player ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the teams associated with players, ordered by the players' ages in descending order. The placeholder in the LIMIT clause represents the maximum number of teams to be displayed."
train.4878,school_player,"For each player, show the team and the location of school they belong to.",1,"SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",This virtual table provides a list of teams along with their corresponding school locations. The placeholder in the JOIN clause represents the relationship between players and their respective schools.
train.4880,school_player,Show the locations of schools that have more than 1 player.,1,SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the geographical locations of schools that have a certain number of players associated with them. The placeholder in the HAVING clause represents the minimum count of players required for a school to be included in the results.
train.4882,school_player,Show the denomination of the school that has the most players.,1,SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of religious affiliations of schools associated with players, grouped by the school. The results are ordered by the number of players in each school, with a limit on the number of results returned, specified by a placeholder for numeric values."
train.4884,school_player,Show locations and nicknames of schools.,1,"SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID","This virtual table provides the geographical locations of schools along with their commonly used nicknames. The data is retrieved by joining the 'school' table, which contains information about each school's location, with the 'school_details' table, which includes the nicknames associated with those schools. The join is performed on the 'School_ID' to ensure that the correct nickname corresponds to the respective school location."
train.4886,school_player,Please show different denominations and the corresponding number of schools.,1,"SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination","This virtual table summarizes the number of schools grouped by their religious affiliation from the 'school' table. The query counts the total number of schools for each denomination, providing insights into the distribution of religious affiliations among schools."
train.4888,school_player,Please show different denominations and the corresponding number of schools in descending order.,1,"SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC","This virtual table summarizes the number of schools grouped by their religious affiliation, if any. The placeholder in the SELECT statement allows for counting the number of schools for each denomination, and the results are ordered by the count in descending order."
train.4890,school_player,List the school color of the school that has the largest enrollment.,1,SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the official colors of schools from the 'school' table, ordered by the total number of students enrolled in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.4892,school_player,List the locations of schools that do not have any player.,1,SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player),"This virtual table lists the geographical locations of schools from the 'school' table that do not have any associated players in the 'player' table. The subquery identifies schools that have players, and the main query filters out these schools to show only those without players."
train.4894,school_player,Show the denomination shared by schools founded before 1890 and schools founded after 1900,1,SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Denomination FROM school WHERE Founded  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Denomination FROM school WHERE Founded  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of denominations for schools that were established before a certain year and after another specified year. The placeholders in the query represent the years used to filter the schools based on their founding dates.
train.4898,school_player,Show the denomination shared by more than one school.,1,SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of religious affiliations of schools from the 'school' table that have a number of schools exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of schools required for each denomination to be included in the results.
train.4900,store_product,Find all the distinct district names ordered by city area in descending.,1,SELECT DISTINCT District_name FROM district ORDER BY city_area DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT District_name FROM district ORDER BY city_area DESC,"This virtual table provides a list of unique district names from the 'district' table, sorted by the total area of the cities within those districts in descending order. The placeholder in the ORDER BY clause represents the city area for sorting."
train.4904,store_product,Find the name and population of district with population between 200000 and 2000000,1,"SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of districts along with their respective city populations from the 'district' table, filtered to show only those districts where the city population falls within a specified range. The placeholders in the WHERE clause represent the lower and upper limits of the population range."
train.4906,store_product,Find the name all districts with city area greater than 10 or population larger than 100000,1,SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT district_name FROM district WHERE city_area  >  [PLACEHOLDER-TYPE:NUMBER] OR City_Population  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of districts from the 'district' table where the area of the city exceeds a specified size or the population of the city surpasses a certain number. The placeholders in the WHERE clause represent the criteria for city area and population.
train.4908,store_product,Which district has the largest population?,1,SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT district_name FROM district ORDER BY city_population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of district names from the 'district' table, ordered by the population of the cities within those districts in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of districts to retrieve."
train.4910,store_product,Which district has the least area?,1,SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT district_name FROM district ORDER BY city_area ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of district names from the 'district' table, ordered by the total area of the city within each district in ascending order. The placeholder in the LIMIT clause represents the maximum number of district names to return."
train.4912,store_product,Find the total population of the top 3 districts with the largest area.,1,SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table calculates the total population of cities within districts from the 'district' table, ordered by the area of the cities in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.4918,store_product,Find all the stores in the district with the most population.,1,SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"This virtual table lists the names of stores located in a specific district, where the district is determined by the highest city population. The placeholder in the subquery represents the limit for the number of districts to consider based on their population."
train.4920,store_product,"Which city is the headquarter of the store named ""Blackville"" in?",1,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  'Blackville',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the headquarters city of a specific store from the 'store' table by joining it with the 'store_district' and 'district' tables. The placeholder in the WHERE clause represents the name of the store being queried.
train.4923,store_product,How many stores are headquarted in each city?,1,"SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",This virtual table provides a count of stores grouped by the city where their respective districts are headquartered. The placeholders in the query represent the necessary identifiers for the stores and districts involved in the join operations.
train.4926,store_product,What is the average pages per minute color?,1,SELECT avg(pages_per_minute_color) FROM product,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(pages_per_minute_color) FROM product,This virtual table calculates the average print speed in pages per minute for color output from the 'product' table. The result provides insights into the performance of products based on their printing capabilities.
train.4929,store_product,What products are sold at the store named Miramichi?,1,SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  'Miramichi',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the products available in a specific store. The placeholder in the WHERE clause represents the name of the store for which the products are being queried.
train.4936,store_product,Find the most prominent max page size among all the products.,1,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of maximum page sizes from the 'product' table, grouped by the maximum page size and ordered by the frequency of each size in descending order. The placeholder in the LIMIT clause represents the number of results to return."
train.4940,store_product,Find the total population of the districts where the area is bigger than the average city area.,1,SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district),This virtual table calculates the total population of cities in the 'district' table where the area of the city exceeds the average area of all cities. The placeholder in the WHERE clause represents the condition based on the average city area.
train.4944,soccer_2,What is the total enrollment number of all colleges?,1,SELECT sum(enr) FROM College,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(enr) FROM College,This virtual table summarizes the total enrollment numbers from the 'College' table. The query uses the SUM function to aggregate the enrollment figures across all colleges listed in the database.
train.4946,soccer_2,What is the average enrollment number?,1,SELECT avg(enr) FROM College,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(enr) FROM College,This virtual table calculates the average enrollment number of students from the 'College' table. The result provides insight into the overall student population across different colleges.
train.4948,soccer_2,How many colleges in total?,1,SELECT count(*) FROM College,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM College,"This virtual table provides the total number of colleges listed in the 'College' table. The query uses the count function to aggregate the data, returning a single numeric value representing the count of colleges."
train.4952,soccer_2,How many colleges has more than 15000 students?,1,SELECT count(*) FROM College WHERE enr  >  15000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM College WHERE enr  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of colleges from the 'College' table that have an enrollment number exceeding a specified threshold. The placeholder in the WHERE clause represents the minimum enrollment number.
train.4958,soccer_2,How many different colleges do attend the tryout test?,1,SELECT count(DISTINCT cName) FROM tryout,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT cName) FROM tryout,This virtual table provides the count of distinct colleges from the 'Tryout' table where players have participated in tryouts. The result will indicate how many unique colleges are involved in the tryout process.
train.4963,soccer_2,How many students received a yes from tryouts?,1,SELECT count(*) FROM tryout WHERE decision  =  'yes',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM tryout WHERE decision  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of players who received a specific decision regarding their tryout from the 'Tryout' table. The placeholder in the WHERE clause represents the decision made about the player's tryout.
train.4968,soccer_2,What is average enrollment of colleges in the state FL?,1,SELECT avg(enr) FROM College WHERE state  =  'FL',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(enr) FROM College WHERE state  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average enrollment number of colleges located in a specific state. The placeholder in the WHERE clause represents the name of the state.
train.4973,soccer_2,Who are the players that have names containing the letter a?,1,SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT pName FROM Player WHERE pName LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct player names from the 'Player' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering player names based on a given string pattern.
train.4974,soccer_2,"Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",1,"SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = 'LA'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT cName ,  enr FROM College WHERE enr  >  [PLACEHOLDER-TYPE:NUMBER] AND state = [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and enrollment numbers of colleges from the 'College' table that have an enrollment greater than a specified number and are located in a specific state. The placeholders in the WHERE clause represent the minimum enrollment number and the state name.
train.4976,soccer_2,List all information about college sorted by enrollment number in the ascending order.,1,SELECT * FROM College ORDER BY enr,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM College ORDER BY enr,"This virtual table provides a list of all colleges from the 'College' table, sorted by the enrollment number of students in ascending order. The output includes all columns from the 'College' table."
train.4978,soccer_2,List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.,1,SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT cName FROM College WHERE enr  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY cName,This virtual table lists the names of colleges from the 'College' table that have an enrollment number exceeding a specified threshold. The placeholder in the WHERE clause represents the minimum enrollment number.
train.4982,soccer_2,Find the name of different colleges involved in the tryout in alphabetical order.,1,SELECT DISTINCT cName FROM tryout ORDER BY cName,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT cName FROM tryout ORDER BY cName,"This virtual table lists the distinct names of colleges from the 'Tryout' table, sorted in alphabetical order. The placeholder in the SELECT statement indicates that the output will only include unique college names."
train.4986,soccer_2,Find the number of students who participate in the tryout for each college ordered by descending count.,1,"SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",This virtual table summarizes the number of players participating in tryouts for each college from the 'Tryout' table. The results are grouped by college name and ordered by the count of participants in descending order.
train.4990,soccer_2,What are the names of schools with the top 3 largest size?,1,SELECT cName FROM college ORDER BY enr DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT cName FROM college ORDER BY enr DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of colleges from the 'College' table, ordered by the enrollment number in descending order. The placeholder in the LIMIT clause represents the maximum number of college names to be returned."
train.4994,soccer_2,Find the states where have some college students in tryout.,1,SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName,"This virtual table provides a distinct list of states where colleges are located, based on the tryouts that players are participating in. The placeholder in the SELECT statement indicates that the result will include unique state names from the colleges involved in the tryout process."
train.4996,soccer_2,Find the states where have some college students in tryout and their decisions are yes.,1,SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct states where colleges are located, based on the tryout decisions made for players. The placeholder in the WHERE clause represents the specific decision regarding the player's tryout."
train.4998,soccer_2,Find the name and college of students whose decisions are yes in the tryout.,1,"SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the names of players and the colleges where they participated in tryouts, filtered by the decision made regarding their tryout. The placeholder in the WHERE clause represents the specific decision outcome."
train.5004,soccer_2,Find the states of the colleges that have students in the tryout who played in striker position.,1,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the states of colleges where players are trying out for a specific position. The placeholder in the WHERE clause represents the position the player is trying out for.
train.5006,soccer_2,Find the names of the students who are in the position of striker and got a yes tryout decision.,1,SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING] AND T2.pPos  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of players from the 'Player' table who have participated in tryouts and received a specific decision for a particular position. The placeholders in the WHERE clause represent the decision made regarding the player's tryout and the position they are trying out for.
train.5008,soccer_2,Find the state of the college which player Charles is attending.,1,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the states of colleges where a specific player has participated in tryouts. The placeholder in the WHERE clause represents the player's name.
train.5016,soccer_2,Which colleges do the tryout players whose name starts with letter D go to?,1,SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of colleges where players have participated in tryouts, filtered by a specific player's name. The placeholder in the WHERE clause represents the player's name."
train.5020,soccer_2,Find the name of the tryout players who are from the college with largest size.,1,SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table describes the names of players who participated in tryouts at the college with the highest enrollment number. The placeholder in the subquery represents the limit for selecting the college based on enrollment.
train.5025,soccer_2,"What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",1,SELECT cName FROM College WHERE enr  <  13000 AND state = 'AZ' UNION SELECT cName FROM College WHERE enr  >  15000 AND state = 'LA',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT cName FROM College WHERE enr  <  [PLACEHOLDER-TYPE:NUMBER] AND state = [PLACEHOLDER-TYPE:STRING] UNION SELECT cName FROM College WHERE enr  >  [PLACEHOLDER-TYPE:NUMBER] AND state = [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of colleges located in a specific state that have an enrollment number either less than or greater than a specified value. The placeholders in the WHERE clauses represent the enrollment numbers and the state name.
train.5032,soccer_2,Find the names of schools that have some players in the mid position but not in the goalie position.,1,SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT cName FROM  tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT cName FROM  tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of colleges where players are trying out for a specific position, excluding those colleges where players are trying out for another specified position. The placeholders in the query represent the positions of interest."
train.5034,soccer_2,Find the names of states that have some college students playing in the mid position but not in the goalie position.,1,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of states where colleges are located, specifically for those colleges that have hosted tryouts for a particular position. The query also excludes states where colleges have hosted tryouts for the same position, allowing for a comparison of locations. The placeholders in the WHERE clause represent the position for which the player is trying out."
train.5036,soccer_2,How many states that have some college students playing in the mid position but not in the goalie position.,1,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table counts the number of unique states where colleges are located that have hosted tryouts for a specific position, excluding those states that have hosted tryouts for the same position. The placeholders in the query represent the position for which the tryouts are being considered."
train.5038,soccer_2,Find the states where have the colleges whose enrollments are less than the largest size.,1,SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college),"This virtual table provides a list of distinct states where colleges are located, specifically filtering for those colleges that have an enrollment number less than the maximum enrollment number found in the 'College' table. The placeholder in the WHERE clause represents the enrollment number for comparison."
train.5040,soccer_2,Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.,1,SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL'),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the distinct names of colleges from the 'College' table that have an enrollment number greater than the minimum enrollment number of colleges located in a specific state. The placeholder in the WHERE clause represents the state name.
train.5042,soccer_2,Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.,1,SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of colleges from the 'College' table that have an enrollment number greater than the maximum enrollment number of colleges located in a specific state. The placeholder in the WHERE clause represents the state name.
train.5044,soccer_2,What is the total number of enrollment of schools that do not have any goalie player?,1,SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  'goalie'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the total enrollment number of students from colleges that are not hosting tryouts for a specific position. The placeholder in the subquery represents the position for which players are trying out.
train.5046,soccer_2,What is the number of states that has some college whose enrollment is larger than the average enrollment?,1,SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college),This virtual table provides the count of distinct states where colleges have an enrollment number greater than the average enrollment across all colleges. The placeholder in the WHERE clause represents the enrollment number condition.
train.5048,soccer_2,What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?,1,SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college),This virtual table provides the count of distinct states where colleges have an enrollment number below the average enrollment across all colleges. The placeholder in the WHERE clause represents the average enrollment value.
train.5050,device,How many devices are there?,1,SELECT count(*) FROM device,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM device,"This virtual table provides a count of all devices listed in the 'device' table. It does not filter or group the results, thus returning the total number of devices available."
train.5052,device,List the carriers of devices in ascending alphabetical order.,1,SELECT Carrier FROM device ORDER BY Carrier ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Carrier FROM device ORDER BY Carrier ASC,"This virtual table provides a list of carriers associated with devices from the 'device' table, sorted in ascending order. The query retrieves the 'Carrier' column and organizes the results alphabetically."
train.5054,device,"What are the carriers of devices whose software platforms are not ""Android""?",1,SELECT Carrier FROM device WHERE Software_Platform != 'Android',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Carrier FROM device WHERE Software_Platform != [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of carriers associated with devices from the 'device' table that do not run on a specific software platform. The placeholder in the WHERE clause represents the name of the software platform to be excluded.
train.5056,device,What are the names of shops in ascending order of open year?,1,SELECT Shop_Name FROM shop ORDER BY Open_Year ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Shop_Name FROM shop ORDER BY Open_Year ASC,"This virtual table lists the names of shops from the 'shop' table, ordered by the year they were opened. This allows users to see the sequence of shop openings over time."
train.5058,device,What is the average quantity of stocks?,1,SELECT avg(Quantity) FROM stock,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Quantity) FROM stock,This virtual table calculates the average quantity of devices available in stock across all shops. The placeholder in the SELECT clause represents the average quantity of devices.
train.5062,device,How many different software platforms are there for devices?,1,SELECT count(DISTINCT Software_Platform) FROM device,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Software_Platform) FROM device,This virtual table provides the count of distinct software platforms from the 'device' table. The result will indicate how many unique operating systems or platforms are represented among the devices.
train.5064,device,"List the open date of open year of the shop named ""Apple"".",1,"SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  'Apple'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the opening date and year of shops from the 'shop' table that match a specific shop name. The placeholder in the WHERE clause represents the name of the shop being queried.
train.5066,device,List the name of the shop with the latest open year.,1,SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of shops from the 'shop' table, ordered by the year they opened in descending order. The placeholder in the LIMIT clause represents the maximum number of shop names to be returned."
train.5068,device,Show names of shops and the carriers of devices they have in stock.,1,"SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID","This virtual table provides a list of shop names along with the corresponding carriers for devices that are in stock. The data is retrieved by joining the 'stock', 'device', and 'shop' tables based on their relationships, allowing us to see which devices are available at which shops and their associated carriers."
train.5070,device,Show names of shops that have more than one kind of device in stock.,1,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of shops that have a stock of devices exceeding a specified quantity. The placeholder in the HAVING clause represents the minimum number of devices that must be in stock for a shop to be included in the results.
train.5072,device,Show the name of the shop that has the most kind of devices in stock.,1,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of shops that have devices in stock, sorted by the number of different devices available. The placeholder in the LIMIT clause allows the user to specify the maximum number of shop names to retrieve."
train.5074,device,Show the name of the shop that have the largest quantity of devices in stock.,1,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of shops that have devices in stock, sorted by the total quantity of devices available in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of shop names to retrieve."
train.5076,device,Please show different software platforms and the corresponding number of devices using each.,1,"SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",This virtual table summarizes the count of devices grouped by their software platform from the 'device' table. The placeholder in the COUNT function represents the number of devices for each unique software platform.
train.5080,device,List the software platform shared by the greatest number of devices.,1,SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different software platforms used by devices in the 'device' table. It groups the devices by their software platform and orders them by the number of devices using each platform, limiting the results to a specified number of top platforms."
train.5082,device,List the names of shops that have no devices in stock.,1,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),"This virtual table lists the names of shops from the 'shop' table that do not have any devices in stock. The placeholder in the WHERE clause represents the shop's identifier, which is used to filter out shops that have stock entries."
train.5084,device,Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.,1,SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT LOCATION FROM shop WHERE Open_Year  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the geographical locations of shops that were opened after a certain year and also those that were opened before another specified year. The placeholders in the WHERE clauses represent the years for filtering the shops based on their opening year.
train.5086,device,List the carriers of devices that have no devices in stock.,1,SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock),"This virtual table lists the carriers associated with devices that are not currently in stock. The placeholder in the WHERE clause represents the device identifier, ensuring that only devices not present in the stock table are selected."
train.5088,device,Show the carriers of devices in stock at more than one shop.,1,SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the carriers associated with devices that are in stock at various shops. The query groups the results by device identifier and filters the groups to include only those with a quantity greater than a specified number. The placeholder in the HAVING clause represents the minimum quantity of devices required to be included in the results.
train.5090,cre_Drama_Workshop_Groups,How many bookings do we have?,1,SELECT count(*) FROM BOOKINGS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM BOOKINGS,"This virtual table provides a count of all bookings recorded in the 'Bookings' table. The query uses the COUNT function to aggregate the total number of entries, which is useful for understanding the volume of bookings made."
train.5092,cre_Drama_Workshop_Groups,List the order dates of all the bookings.,1,SELECT Order_Date FROM BOOKINGS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Order_Date FROM BOOKINGS,This virtual table provides the order dates of bookings from the 'Bookings' table. The placeholder in the SELECT statement can be modified to filter or join with other tables as needed.
train.5094,cre_Drama_Workshop_Groups,Show all the planned delivery dates and actual delivery dates of bookings.,1,"SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",This virtual table provides information about the planned and actual delivery dates for bookings from the 'Bookings' table. The placeholders in the SELECT statement can be modified to filter or retrieve specific booking records based on user-defined criteria.
train.5096,cre_Drama_Workshop_Groups,How many customers do we have?,1,SELECT count(*) FROM CUSTOMERS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM CUSTOMERS,This virtual table provides a count of all unique customers from the 'Customers' table. The query uses the COUNT function to aggregate the total number of customer records.
train.5098,cre_Drama_Workshop_Groups,What are the phone and email for customer Harold?,1,"SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  'Harold'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the phone number and email address of customers from the 'Customers' table who have a specific name. The placeholder in the WHERE clause represents the customer's name.
train.5100,cre_Drama_Workshop_Groups,Show all the Store_Name of drama workshop groups.,1,SELECT Store_Name FROM Drama_Workshop_Groups,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Store_Name FROM Drama_Workshop_Groups,"This virtual table provides the names of stores associated with various drama workshop groups. The query retrieves the 'Store_Name' from the 'Drama_Workshop_Groups' table, allowing users to see which stores are linked to these groups."
train.5104,cre_Drama_Workshop_Groups,What are the distinct payment method codes in all the invoices?,1,SELECT DISTINCT payment_method_code FROM INVOICES,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT payment_method_code FROM INVOICES,This virtual table provides a list of unique payment method codes used in the invoices from the 'Invoices' table. The placeholder in the SELECT statement allows for the retrieval of distinct payment method codes without specifying any particular value.
train.5106,cre_Drama_Workshop_Groups,What is the description of the marketing region China?,1,SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  'China',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a specific marketing region from the 'Marketing_Regions' table based on its name. The placeholder in the WHERE clause represents the name of the marketing region being queried.
train.5108,cre_Drama_Workshop_Groups,Show all the distinct product names with price higher than the average.,1,SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS),The virtual table lists distinct product names from the 'Products' table where the product price is greater than the average price of all products. The placeholder in the WHERE clause represents the condition for filtering products based on their price relative to the average.
train.5110,cre_Drama_Workshop_Groups,What is the name of the most expensive product?,1,SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table displays the names of products from the 'Products' table, sorted by their price in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of product names to retrieve."
train.5114,cre_Drama_Workshop_Groups,What is the phone number of the performer Ashley?,1,SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  'Ashley',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the phone numbers of performers from the 'Performers' table who have a specific name. The placeholder in the WHERE clause represents the name of the performer.
train.5116,cre_Drama_Workshop_Groups,Show all payment method codes and the number of orders for each code.,1,"SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",This virtual table summarizes the count of invoices grouped by payment method from the 'Invoices' table. The placeholder in the SELECT clause represents the unique payment method code used for each invoice.
train.5119,cre_Drama_Workshop_Groups,Find the payment method that is used the most often in all the invoices. Give me its code.,1,SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table summarizes the unique payment methods used in the invoices, displaying the payment method codes. The results are grouped by the payment method code and ordered by the frequency of their occurrence, allowing users to see the most commonly used payment methods up to a specified limit."
train.5120,cre_Drama_Workshop_Groups,"Which city is the address of the store named ""FJA Filming"" located in?",1,SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  'FJA Filming',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the city or town of stores from the 'Stores' table based on a specific store name. The placeholder in the WHERE clause represents the name of the store being queried.
train.5122,cre_Drama_Workshop_Groups,"What are the states or counties of the address of the stores with marketing region code ""CA""?",1,SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  'CA',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the state or county information of addresses associated with stores that belong to a specific marketing region. The placeholder in the WHERE clause represents the marketing region code.
train.5124,cre_Drama_Workshop_Groups,What is the name of the marketing region that the store Rob Dinning belongs to?,1,SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  'Rob Dinning',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of marketing regions associated with a specific store. The placeholder in the WHERE clause represents the name of the store for which the marketing region is being queried.
train.5128,cre_Drama_Workshop_Groups,"What is the description, code and the corresponding count of each service type?",1,"SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code","This virtual table summarizes the descriptions and codes of service types from the 'Ref_Service_Types' table, along with the count of services associated with each service type. The placeholders in the query allow for dynamic filtering or modification based on specific service type codes or descriptions."
train.5130,cre_Drama_Workshop_Groups,What is the description and code of the type of service that is performed the most often?,1,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of service types from the 'Ref_Service_Types' table that are associated with services in the 'Services' table. It displays the service type description and code, grouped by the service type code, and ordered by the count of services associated with each type in descending order. The placeholder in the LIMIT clause represents the maximum number of service types to return."
train.5136,cre_Drama_Workshop_Groups,What are the different product names? What is the average product price for each of them?,1,"SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name","This virtual table provides the average price of each product from the 'Products' table, grouped by the product name. The placeholder in the SELECT clause represents the product name, while the average price is calculated for each unique product."
train.5138,cre_Drama_Workshop_Groups,What are the product names with average product price smaller than 1000000?,1,SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of products from the 'Products' table that have an average price below a specified threshold. The placeholder in the HAVING clause represents the maximum average price allowed for the products listed.
train.5140,cre_Drama_Workshop_Groups,What are the total order quantities of photo products?,1,SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  'photo',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total quantity of a specific product ordered from the 'Order_Items' table. It joins the 'Order_Items' table with the 'Products' table to filter the results based on the product's name, represented by a placeholder for string values."
train.5144,cre_Drama_Workshop_Groups,What are the actual delivery dates of orders with quantity 1?,1,SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the actual delivery dates of customer orders from the 'Customer_Orders' table, filtered by the quantity of items ordered. The placeholder in the WHERE clause represents the specific quantity of items that the user is interested in."
train.5146,cre_Drama_Workshop_Groups,What are the order dates of orders with price higher than 1000?,1,SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the order dates from the 'Customer_Orders' table for orders that include products priced above a specified amount. The placeholders in the WHERE clause represent the price threshold for filtering the products.
train.5148,cre_Drama_Workshop_Groups,How many distinct currency codes are there for all drama workshop groups?,1,SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups,The virtual table provides a count of distinct currency codes used in the 'Drama_Workshop_Groups' table. This allows users to understand how many different currencies are represented across all workshop groups.
train.5150,cre_Drama_Workshop_Groups,What are the names of the drama workshop groups with address in Feliciaberg city?,1,SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  'Feliciaberg',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of stores associated with drama workshop groups located in a specific city or town. The placeholder in the WHERE clause represents the name of the city or town.
train.5152,cre_Drama_Workshop_Groups,What are the email addresses of the drama workshop groups with address in Alaska state?,1,SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  'Alaska',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the email addresses of stores associated with drama workshop groups located in a specific state or county. The placeholder in the WHERE clause represents the state or county name.
train.5154,cre_Drama_Workshop_Groups,Show all cities along with the number of drama workshop groups in each city.,1,"SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town","This virtual table provides a count of workshop groups organized by city or town from the 'Addresses' table. The placeholder in the SELECT statement represents the city or town names, while the count reflects the number of workshop groups associated with each location."
train.5156,cre_Drama_Workshop_Groups,What is the marketing region code that has the most drama workshop groups?,1,SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of marketing region codes from the 'Drama_Workshop_Groups' table, grouped by the marketing region code. The results are ordered by the count of workshop groups in each region in descending order, allowing users to see which marketing regions have the most workshop groups. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.5158,cre_Drama_Workshop_Groups,Show all cities where at least one customer lives in but no performer lives in.,1,SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID,"This virtual table lists the cities or towns of customers from the 'Addresses' table, excluding those that are also associated with performers. The query uses a JOIN to link the 'Addresses' table with the 'Customers' table and another JOIN to link the 'Addresses' table with the 'Performers' table, ensuring that only unique cities or towns for customers are selected."
train.5163,cre_Drama_Workshop_Groups,"Which workshop groups have bookings with status code ""stop""? Give me the names.",1,SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  'stop',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of stores associated with bookings that have a specific status. The placeholder in the WHERE clause represents the status code of the booking.
train.5164,cre_Drama_Workshop_Groups,Show the names of all the clients with no booking.,1,SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID,"This virtual table provides a list of client names from the 'Clients' table who have not made any bookings. The query uses an EXCEPT clause to exclude those clients who are present in the 'Bookings' table, ensuring that only clients without bookings are displayed."
train.5172,music_2,How many bands are there?,1,SELECT count(*) FROM Band,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Band,This virtual table provides a count of all band members from the 'Band' table. The query uses the COUNT function to aggregate the total number of entries in the Band table.
train.5174,music_2,What are all the labels?,1,SELECT DISTINCT label FROM Albums,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT label FROM Albums,"This virtual table provides a list of unique record labels from the 'Albums' table. The query uses the DISTINCT keyword to ensure that each label is only listed once, regardless of how many albums are associated with it."
train.5176,music_2,Find all the albums in 2012.,1,SELECT * FROM Albums WHERE YEAR  =  2012,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM Albums WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table retrieves all information about albums from the 'Albums' table that were released in a specific year. The placeholder in the WHERE clause represents the year of release.
train.5178,music_2,"Find all the stage positions of the musicians with first name ""Solveig""",1,SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  'Solveig',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct stage positions for band members from the 'Performance' table who have a specific first name. The placeholder in the WHERE clause represents the first name of the band member.
train.5180,music_2,How many songs are there?,1,SELECT count(*) FROM Songs,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Songs,"This virtual table provides the total number of songs available in the 'Songs' table. The count function is used to aggregate the number of entries, giving a single numeric result representing the total songs."
train.5182,music_2,"Find all the songs performed by artist with last name ""Heilo""",1,SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  'Heilo',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of songs performed by a specific band member from the 'Performance' table. The placeholder in the WHERE clause represents the last name of the band member.
train.5184,music_2,"Hom many musicians performed in the song ""Flash""?",1,SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  'Flash',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of performances for a specific song title from the 'Songs' table. It joins the 'Performance' table to identify the band members performing the song and the 'Band' table to get the details of the band members. The placeholder in the WHERE clause represents the title of the song being queried.
train.5186,music_2,"Find all the songs produced by artists with first name ""Marianne"".",1,SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  'Marianne',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of songs performed by band members whose first name matches a specific value. The placeholders in the WHERE clause represent the first name of the band member.
train.5188,music_2,"Who performed the song named ""Badlands""? Show the first name and the last name.",1,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  'Badlands'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of band members who performed a specific song. The placeholders in the WHERE clause represent the title of the song being queried.
train.5190,music_2,"Who is performing in the back stage position for the song ""Badlands""? Show the first name and the last name.",1,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  'Badlands' AND T1.StagePosition  =  'back'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  [PLACEHOLDER-TYPE:STRING] AND T1.StagePosition  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of band members who performed a specific song at a designated stage position. The placeholders in the WHERE clause represent the song's title and the stage position of the band member.
train.5192,music_2,How many unique labels are there for albums?,1,SELECT count(DISTINCT label) FROM albums,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT label) FROM albums,"This virtual table provides the count of distinct record labels associated with albums in the 'Albums' table. The query uses a placeholder to represent the label count, ensuring that the result reflects the unique labels present."
train.5194,music_2,What is the label that has the most albums?,1,SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of record labels from the 'Albums' table, grouped by the label name. The results are ordered by the number of albums associated with each label in descending order, and the placeholder allows for limiting the number of results returned."
train.5196,music_2,What is the last name of the musician that have produced the most number of songs?,1,SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of band members' last names who have performed songs, ordered by the frequency of their performances. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.5198,music_2,What is the last name of the musician that has been at the back position the most?,1,SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  'back' GROUP BY lastname ORDER BY count(*) DESC LIMIT 1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  [PLACEHOLDER-TYPE:STRING] GROUP BY lastname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of band members' last names who performed at a specific stage position. The query joins the 'Performance' table with the 'Band' table to match band members with their performances. The results are grouped by last name and ordered by the count of performances in descending order, with a limit on the number of results returned."
train.5200,music_2,"Find all the songs whose name contains the word ""the"".",1,SELECT title FROM songs WHERE title LIKE '% the %',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT title FROM songs WHERE title LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of songs from the 'Songs' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the song titles.
train.5202,music_2,What are all the instruments used?,1,SELECT DISTINCT instrument FROM Instruments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT instrument FROM Instruments,"This virtual table lists all unique instruments played by band members from the 'Instruments' table. The query uses the DISTINCT keyword to ensure that each instrument is only represented once, regardless of how many times it appears in the table."
train.5204,music_2,"What instrument did the musician with last name ""Heilo"" use in the song ""Le Pop""?",1,SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  'Heilo' AND T3.title  =  'Le Pop',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  [PLACEHOLDER-TYPE:STRING] AND T3.title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the instruments played by a specific band member during a performance of a particular song. The placeholders in the WHERE clause represent the last name of the band member and the title of the song.
train.5206,music_2,What is the most used instrument?,1,SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of instruments used in songs, grouped by the type of instrument and ordered by the frequency of their usage. The placeholder in the LIMIT clause allows the user to specify the maximum number of instrument types to retrieve."
train.5208,music_2,"How many songs have used the instrument ""drums""?",1,SELECT count(*) FROM instruments WHERE instrument  =  'drums',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM instruments WHERE instrument  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of instruments played for a specific type of instrument from the 'Instruments' table. The placeholder in the WHERE clause represents the type of instrument being queried.
train.5210,music_2,"What instruments does the the song ""Le Pop"" use?",1,SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  'Le Pop',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the instruments used in songs from the 'Songs' table that match a specific title. The placeholder in the WHERE clause represents the title of the song.
train.5212,music_2,"How many instruments does the song ""Le Pop"" use?",1,SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  'Le Pop',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct instruments used in a specific song from the 'Songs' table. The placeholder in the WHERE clause represents the title of the song for which the instrument count is being queried.
train.5214,music_2,"How many instrument does the musician with last name ""Heilo"" use?",1,SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  'Heilo',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct instruments played by band members with a specific last name from the 'Band' table. The placeholder in the WHERE clause represents the last name of the band member.
train.5216,music_2,"Find all the instruments ever used by the musician with last name ""Heilo""?",1,SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  'Heilo',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the instruments played by band members from the 'Instruments' table, specifically filtering for those whose last name matches a specified value. The placeholder in the WHERE clause represents the last name of the band member."
train.5218,music_2,Which song has the most vocals?,1,SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of song titles from the 'Songs' table that feature vocals, grouped by the song identifier. The results are ordered by the number of vocal contributions in descending order, allowing users to see which songs have the most vocal participation. The placeholder in the LIMIT clause represents the maximum number of song titles to return."
train.5224,music_2,"What are the vocal types used in song ""Le Pop""?",1,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  'Le Pop',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the type of vocals featured in songs from the 'Vocals' table, specifically for a song with a given title. The placeholder in the WHERE clause represents the title of the song."
train.5228,music_2,How many songs have a lead vocal?,1,SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  'lead',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct song titles from the 'Songs' table that feature a specific type of vocals. The placeholder in the WHERE clause represents the type of vocals being queried.
train.5230,music_2,"Which vocal type did the musician with first name ""Solveig"" played in the song with title ""A Bar in Amsterdam""?",1,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  'Solveig' AND T2.title  =  'A Bar In Amsterdam',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  [PLACEHOLDER-TYPE:STRING] AND T2.title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the types of vocals provided by band members for specific songs. It retrieves the vocal type from the 'Vocals' table, joining it with the 'Songs' table to match the song identifiers, and also joining with the 'Band' table to filter by the first name of the band member. The placeholders in the WHERE clause represent the first name of the band member and the title of the song."
train.5232,music_2,Find all the songs that do not have a lead vocal.,1,SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'lead',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the distinct titles of songs from the 'Songs' table that feature vocals, excluding those that fall under a specific type of vocals. The placeholder in the WHERE clause represents the type of vocals to be excluded."
train.5236,music_2,What are the albums produced in year 2010?,1,SELECT * FROM Albums WHERE YEAR  =  2010,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM Albums WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table retrieves all information about albums from the 'Albums' table that were released in a specific year. The placeholder in the WHERE clause represents the year of release.
train.5238,music_2,"Who performed the song named ""Le Pop""?",1,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  'Le Pop'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of band members who performed a specific song. The placeholders in the WHERE clause represent the title of the song being queried.
train.5242,music_2,"What instrument did the musician with last name ""Heilo"" use in the song ""Badlands""?",1,SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  'Heilo' AND T3.title  =  'Badlands',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  [PLACEHOLDER-TYPE:STRING] AND T3.title  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the instruments played by a specific band member during the performance of a particular song. The placeholders in the WHERE clause represent the last name of the band member and the title of the song.
train.5244,music_2,"How many instruments does the song ""Badlands"" use?",1,SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  'Badlands',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct instruments used in a specific song from the 'Songs' table. The placeholder in the WHERE clause represents the title of the song.
train.5246,music_2,"What are the vocal types used in song ""Badlands""?",1,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  'Badlands',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the type of vocals featured in songs from the 'Songs' table, filtered by a specific song title. The placeholder in the WHERE clause represents the title of the song."
train.5250,music_2,How many songs have a shared vocal?,1,SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  'shared',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct song titles from the 'Songs' table that feature a specific type of vocals. The placeholder in the WHERE clause represents the type of vocals being queried.
train.5252,music_2,Find all the songs that do not have a back vocal.,1,SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the distinct titles of songs from the 'Songs' table that feature vocals, excluding those that are of a specific vocal type. The placeholder in the EXCEPT clause represents the type of vocals to be excluded."
train.5256,music_2,"Which vocal type did the musician with last name ""Heilo"" played in the song with title ""Der Kapitan""?",1,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  'Heilo' AND T2.title  =  'Der Kapitan',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  [PLACEHOLDER-TYPE:STRING] AND T2.title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the types of vocals provided by band members for specific songs. It retrieves the vocal type from the 'Vocals' table, joining it with the 'Songs' table to match the song identifiers, and further joining with the 'Band' table to filter by the last name of the band member. The placeholders in the WHERE clause represent the last name of the band member and the title of the song."
train.5258,music_2,Find the first name of the band mate that has performed in most songs.,1,SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of band members' first names who have performed songs, ordered by the frequency of their performances. The placeholder in the LIMIT clause allows for specifying the maximum number of band members to display."
train.5261,music_2,"What is the vocal type of the band mate whose first name is ""Marianne"" played the most?",1,SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Marianne' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  [PLACEHOLDER-TYPE:STRING] GROUP BY TYPE ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of vocal types performed by a specific band member from the 'Vocals' table. The query joins the 'Vocals' table with the 'Band' table to filter results based on the first name of the band member. The results are grouped by the type of vocals and ordered by the count of occurrences in descending order, with a limit on the number of results returned."
train.5262,music_2,"Who is performing in the back stage position for the song ""Der Kapitan""? Show the first name and last name.",1,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  'Der Kapitan' AND T1.StagePosition  =  'back'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  [PLACEHOLDER-TYPE:STRING] AND T1.StagePosition  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of band members who performed a specific song at a particular stage position. The placeholders in the WHERE clause represent the song's title and the stage position of the band member.
train.5266,music_2,"What are the songs in album ""A Kiss Before You Go: Live in Hamburg""?",1,SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  'A Kiss Before You Go: Live in Hamburg',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the titles of songs from a specific album in the 'Albums' table. The query joins the 'Albums', 'Tracklists', and 'Songs' tables to retrieve the song titles associated with a given album title. The placeholder in the WHERE clause represents the album's title."
train.5268,music_2,"What are all the songs in albums under label ""Universal Music Group""?",1,SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  'Universal Music Group',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of songs from the 'Albums' table that are associated with a specific record label. The placeholder in the WHERE clause represents the name of the record label.
train.5270,music_2,Find the number of songs in all the studio albums.,1,SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  'Studio',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of distinct song titles from the 'Songs' table that are associated with albums of a specific type. The query joins the 'Albums', 'Tracklists', and 'Songs' tables to filter the results based on the album type specified by the placeholder."
train.5272,manufactory_1,Who is the founder of Sony?,1,SELECT founder FROM manufacturers WHERE name  =  'Sony',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT founder FROM manufacturers WHERE name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the founder of a manufacturer from the 'Manufacturers' table based on the manufacturer's name. The placeholder in the WHERE clause represents the name of the manufacturer.
train.5274,manufactory_1,Where is the headquarter of the company founded by James?,1,SELECT headquarter FROM manufacturers WHERE founder  =  'James',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT headquarter FROM manufacturers WHERE founder  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the headquarters locations of manufacturers from the 'Manufacturers' table who were founded by a specific individual. The placeholder in the WHERE clause represents the founder's name.
train.5276,manufactory_1,"Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",1,"SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC","This virtual table provides the names and headquarters of manufacturers from the 'Manufacturers' table, sorted by their annual revenue in descending order. This allows users to see which manufacturers are the most financially successful, with the placeholder indicating the sorting criteria."
train.5278,manufactory_1,"What are the average, maximum and total revenues of all companies?",1,"SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers","This virtual table provides the average, maximum, and total annual revenue generated by manufacturers from the 'Manufacturers' table. The placeholders in the SELECT clause represent the calculated revenue metrics."
train.5280,manufactory_1,How many companies were created by Andy?,1,SELECT count(*) FROM manufacturers WHERE founder  =  'Andy',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM manufacturers WHERE founder  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of manufacturers from the 'Manufacturers' table who have a specific founder. The placeholder in the WHERE clause represents the name of the founder.
train.5282,manufactory_1,Find the total revenue created by the companies whose headquarter is located at Austin.,1,SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total annual revenue generated by manufacturers located in a specific headquarters. The placeholder in the WHERE clause represents the location of the headquarters.
train.5284,manufactory_1,What are the different cities listed?,1,SELECT DISTINCT headquarter FROM manufacturers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT headquarter FROM manufacturers,This virtual table provides a list of unique headquarters locations of manufacturers from the 'Manufacturers' table. The query uses the DISTINCT keyword to ensure that each location is only listed once.
train.5286,manufactory_1,Find the number of manufactures that are based in Tokyo or Beijing.,1,SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM manufacturers WHERE headquarter  =  [PLACEHOLDER-TYPE:STRING] OR headquarter  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of manufacturers based on their headquarters' locations. The placeholders in the WHERE clause represent the specific locations being queried.
train.5288,manufactory_1,Find the founder of the company whose name begins with the letter 'S'.,1,SELECT founder FROM manufacturers WHERE name LIKE 'S%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT founder FROM manufacturers WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of founders from the 'Manufacturers' table based on a specific manufacturer name. The placeholder in the WHERE clause allows for filtering by the manufacturer's name.
train.5290,manufactory_1,Find the name of companies whose revenue is between 100 and 150.,1,SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM manufacturers WHERE revenue BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of manufacturers from the 'Manufacturers' table whose annual revenue falls within a specified range. The placeholders in the WHERE clause represent the lower and upper bounds of the revenue range.
train.5292,manufactory_1,What is the total revenue of all companies whose main office is at Tokyo or Taiwan?,1,SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  [PLACEHOLDER-TYPE:STRING] OR Headquarter  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total annual revenue generated by manufacturers located in specific headquarters. The placeholders in the WHERE clause represent the names of the headquarters being queried.
train.5294,manufactory_1,Find the name of product that is produced by both companies Creative Labs and Sony.,1,SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of products from the 'Products' table that are manufactured by a specific manufacturer. The query uses an INTERSECT operation to find products that are associated with two different manufacturers, as specified by the placeholders in the WHERE clause."
train.5296,manufactory_1,"Find the name, headquarter and founder of the manufacturer that has the highest revenue.",1,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of manufacturer names, their headquarters, and founders from the 'Manufacturers' table, ordered by their annual revenue in descending order. The placeholder in the LIMIT clause represents the maximum number of manufacturers to display."
train.5298,manufactory_1,"Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",1,"SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC","This virtual table provides the names, headquarters, and annual revenues of manufacturers from the 'Manufacturers' table, sorted in descending order by revenue. This allows users to easily identify the top manufacturers based on their revenue figures."
train.5300,manufactory_1,Find the name of companies whose revenue is greater than the average revenue of all companies.,1,SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers),"This virtual table lists the names of manufacturers from the 'Manufacturers' table whose annual revenue exceeds the average revenue of all manufacturers. The query uses a subquery to calculate the average revenue, and the placeholder in the WHERE clause represents the revenue threshold."
train.5302,manufactory_1,Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.,1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of manufacturers from the 'Manufacturers' table whose annual revenue is less than the minimum revenue of manufacturers located in a specific headquarters. The placeholder in the subquery represents the location of the headquarters.
train.5304,manufactory_1,Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.,1,SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the total revenue of manufacturers from the 'Manufacturers' table whose revenue exceeds the minimum revenue of manufacturers located in a specific headquarters. The placeholder in the subquery represents the name of the headquarters.
train.5306,manufactory_1,Find the total revenue of companies of each founder.,1,"SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder","This virtual table summarizes the total revenue generated by manufacturers, grouped by the founder's name. The placeholder in the SELECT clause represents the total revenue, while the grouping is done based on the founder's name."
train.5312,manufactory_1,"Find the average prices of all products from each manufacture, and list each company's name.",1,"SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name","This virtual table provides the average price of products grouped by the manufacturer name. The placeholder in the SELECT clause represents the average price of the products, while the manufacturer name is retrieved from the 'Manufacturers' table."
train.5314,manufactory_1,Find the number of different products that are produced by companies at different headquarter cities.,1,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",This virtual table provides the count of distinct product names grouped by the headquarters of their respective manufacturers. The placeholders in the query allow for dynamic filtering based on the manufacturer and product details.
train.5318,manufactory_1,Find the name of companies that do not make DVD drive.,1,SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of manufacturers that do not produce a specific product. The placeholder in the query represents the name of the product for which we want to find manufacturers that do not offer it.
train.5320,manufactory_1,"Find the number of products for each manufacturer, showing the name of each company.",1,"SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name","This virtual table provides a count of products grouped by their respective manufacturers. It joins the 'Products' table with the 'Manufacturers' table based on the manufacturer code, allowing us to see how many products each manufacturer has."
train.5322,manufactory_1,Select the names of all the products in the store.,1,SELECT Name FROM Products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM Products,This virtual table describes the names of products from the 'Products' table. The placeholder in the SELECT statement allows for the retrieval of product names based on specific criteria that can be defined later.
train.5324,manufactory_1,Select the names and the prices of all the products in the store.,1,"SELECT name ,  price FROM products",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  price FROM products",This virtual table describes the names and prices of products from the 'Products' table. The query retrieves the relevant columns to provide information about the products available in the database.
train.5326,manufactory_1,Select the name of the products with a price less than or equal to $200.,1,SELECT name FROM products WHERE price  <=  200,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM products WHERE price  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of products from the 'Products' table that are priced at or below a specified amount. The placeholder in the WHERE clause represents the maximum price limit.
train.5328,manufactory_1,Find all information of all the products with a price between $60 and $120.,1,SELECT * FROM products WHERE price BETWEEN 60 AND 120,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM products WHERE price BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of products from the 'Products' table that fall within a specified price range. The placeholders in the WHERE clause represent the minimum and maximum price values.
train.5330,manufactory_1,Compute the average price of all the products.,1,SELECT avg(price) FROM products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(price) FROM products,This virtual table calculates the average retail price of products from the 'Products' table. The result provides insight into the pricing strategy of the products offered by various manufacturers.
train.5332,manufactory_1,Compute the average price of all products with manufacturer code equal to 2.,1,SELECT avg(price) FROM products WHERE Manufacturer  =  2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(price) FROM products WHERE Manufacturer  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average price of products from the 'Products' table that are manufactured by a specific manufacturer. The placeholder in the WHERE clause represents the unique identifier for the manufacturer.
train.5334,manufactory_1,Compute the number of products with a price larger than or equal to $180.,1,SELECT count(*) FROM products WHERE price >= 180,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM products WHERE price >= [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of products from the 'Products' table that have a price greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum price threshold.
train.5336,manufactory_1,"Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",1,"SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  price FROM products WHERE price  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY price DESC ,  name ASC",This virtual table describes the names and prices of products from the 'Products' table that have a price greater than or equal to a specified value. The results are ordered by price in descending order and then by name in ascending order.
train.5338,manufactory_1,Select all the data from the products and each product's manufacturer.,1,SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code,This virtual table provides a comprehensive view of products along with their corresponding manufacturers. It combines data from the 'Products' table and the 'Manufacturers' table by matching the manufacturer identifier in the 'Products' table with the unique code of the manufacturer in the 'Manufacturers' table. This allows users to see all details of products alongside the information about their manufacturers.
train.5340,manufactory_1,"Select the average price of each manufacturer's products, showing only the manufacturer's code.",1,"SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer","This virtual table provides the average price of products grouped by their respective manufacturers. The placeholder in the SELECT statement represents the average price, while the grouping is done based on the manufacturer's unique identifier."
train.5342,manufactory_1,"Select the average price of each manufacturer's products, showing the manufacturer's name.",1,"SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name","This virtual table provides the average price of products grouped by the manufacturer name. It combines data from the 'Products' and 'Manufacturers' tables, using the manufacturer's code to link the two tables. The placeholder in the SELECT clause represents the average price of the products, while the manufacturer name is displayed alongside it."
train.5345,manufactory_1,What are the names and average prices of products for manufacturers whose products cost on average 150 or more?,1,"SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the average price of products grouped by the manufacturer name from the 'Products' and 'Manufacturers' tables. The placeholder in the HAVING clause represents the minimum average price that the user wants to filter by.
train.5346,manufactory_1,Select the name and price of the cheapest product.,1,"SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  price FROM Products ORDER BY price ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of product names and their corresponding prices from the 'Products' table, sorted in ascending order by price. The placeholder in the LIMIT clause indicates the maximum number of products to return."
train.5352,tracking_software_problems,What is the id of the problem log that is created most recently?,1,SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of problem log entries from the 'Problem_Log' table, specifically the unique identifiers for each log entry. The results are ordered by the date of the log entry in descending order, and the number of entries returned is limited by a placeholder for numeric values."
train.5354,tracking_software_problems,What is the oldest log id and its corresponding problem id?,1,"SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of problem log entries, specifically showing the unique identifiers for each log entry and the associated problem ID. The results are ordered by the date of the log entry, and the number of entries returned can be specified using a placeholder for numeric values."
train.5356,tracking_software_problems,Find all the ids and dates of the logs for the problem whose id is 10.,1,"SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the unique identifiers and log entry dates of problem logs from the 'Problem_Log' table that are associated with a specific problem. The placeholder in the WHERE clause represents the identifier of the problem.
train.5358,tracking_software_problems,List all the log ids and their descriptions from the problem logs.,1,"SELECT problem_log_id ,  log_entry_description FROM problem_log",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT problem_log_id ,  log_entry_description FROM problem_log",This virtual table describes the unique identifiers and log entry descriptions of problem logs from the 'Problem_Log' table. The query retrieves all entries without any filtering conditions.
train.5360,tracking_software_problems,List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.,1,"SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of distinct first and last names of staff members who are assigned to a specific problem log entry. The placeholder in the WHERE clause represents the unique identifier of the problem associated with the log entry.
train.5362,tracking_software_problems,List the problem id and log id which are assigned to the staff named Rylan Homenick.,1,"SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = 'Rylan' AND T1.staff_last_name = 'Homenick'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = [PLACEHOLDER-TYPE:STRING] AND T1.staff_last_name = [PLACEHOLDER-TYPE:STRING]","This virtual table provides a distinct list of problem IDs and their corresponding log IDs from the 'problem_log' table, specifically for entries assigned to a staff member identified by their first and last name. The placeholders in the WHERE clause represent the staff member's first and last names."
train.5364,tracking_software_problems,How many problems are there for product voluptatem?,1,SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'voluptatem',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of problems associated with a specific product from the 'Product' and 'Problems' tables. The placeholder in the WHERE clause represents the name of the product for which the count of related problems is being queried.
train.5366,tracking_software_problems,How many problems does the product with the most problems have? List the number of the problems and product name.,1,"SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of problems associated with each product from the 'Product' table, along with the product names. The results are grouped by product name and ordered by the count of problems in descending order, with a limit specified by a placeholder for numeric values."
train.5368,tracking_software_problems,Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.,1,SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = [PLACEHOLDER-TYPE:STRING],This virtual table describes the problem descriptions from the 'Problems' table that were reported by a specific staff member. The placeholder in the WHERE clause represents the first name of the staff member who reported the problems.
train.5370,tracking_software_problems,Find the ids of the problems that are reported by the staff whose last name is Bosco.,1,SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = 'Bosco',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of problem IDs from the 'Problems' table that were reported by staff members with a specific last name. The placeholder in the WHERE clause represents the last name of the staff member.
train.5372,tracking_software_problems,What are the ids of the problems which are reported after 1978-06-26?,1,SELECT problem_id FROM problems WHERE date_problem_reported > '1978-06-26',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT problem_id FROM problems WHERE date_problem_reported > [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of problems from the 'Problems' table that were reported after a specific date. The placeholder in the WHERE clause represents the date when the problems were reported.
train.5374,tracking_software_problems,What are the ids of the problems which are reported before 1978-06-26?,1,SELECT problem_id FROM problems WHERE date_problem_reported < '1978-06-26',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT problem_id FROM problems WHERE date_problem_reported < [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of problems from the 'Problems' table that were reported before a specific date. The placeholder in the WHERE clause represents the date when the problems were reported.
train.5376,tracking_software_problems,"For each product which has problems, what are the number of problems and the product id?",1,"SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id","This virtual table provides a count of problems associated with each product from the 'Problems' and 'Product' tables. The result is grouped by the product identifier, allowing users to see how many problems are linked to each product."
train.5378,tracking_software_problems,"For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",1,"SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > '1986-11-13' GROUP BY T2.product_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > [PLACEHOLDER-TYPE:STRING] GROUP BY T2.product_id","This virtual table provides a count of problems reported for each product from the 'Problems' table, filtered by a specific date. The placeholder in the WHERE clause represents the date after which the problems were reported, and the results are grouped by product ID."
train.5380,tracking_software_problems,List the names of all the distinct product names in alphabetical order?,1,SELECT DISTINCT product_name FROM product ORDER BY product_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT product_name FROM product ORDER BY product_name,"This virtual table provides a distinct list of product names from the 'Product' table, sorted in alphabetical order. The absence of any filtering conditions means it retrieves all unique product names available in the database."
train.5382,tracking_software_problems,List all the distinct product names ordered by product id?,1,SELECT DISTINCT product_name FROM product ORDER BY product_id,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT product_name FROM product ORDER BY product_id,"This virtual table lists the distinct product names from the 'Product' table, ordered by their unique product identifiers. The query ensures that each product name appears only once in the result set, providing a clear overview of available products."
train.5386,tracking_software_problems,What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?,1,SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge' INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Ashley' AND T2.staff_last_name = 'Medhurst',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = [PLACEHOLDER-TYPE:STRING] AND T2.staff_last_name = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = [PLACEHOLDER-TYPE:STRING] AND T2.staff_last_name = [PLACEHOLDER-TYPE:STRING],This virtual table identifies the product IDs associated with problems that were both reported by and closed by a specific staff member. The placeholders in the WHERE clauses represent the first and last names of the staff member.
train.5388,tracking_software_problems,What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?,1,SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Lysanne' AND T4.staff_last_name = 'Turcotte' ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = [PLACEHOLDER-TYPE:STRING] AND T4.staff_last_name = [PLACEHOLDER-TYPE:STRING] ),"This virtual table identifies the problem IDs from the 'problems' table that were reported by staff members. It filters the results to include only those problems that were reported before the earliest reported date of a specific staff member, whose first and last names are provided as placeholders."
train.5390,tracking_software_problems,What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?,1,SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick' ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = [PLACEHOLDER-TYPE:STRING] AND T4.staff_last_name = [PLACEHOLDER-TYPE:STRING] ),"This virtual table identifies the problem IDs from the 'problems' table that were reported by a specific staff member. It filters the results to include only those problems reported after the most recent problem reported by the same staff member, whose first and last names are provided as placeholders."
train.5394,tracking_software_problems,"List the ids of the problems from the product ""voluptatem"" that are reported after 1995?",1,SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' AND T1.date_problem_reported > '1995',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = [PLACEHOLDER-TYPE:STRING] AND T1.date_problem_reported > [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the unique problem IDs from the 'Problems' table that are associated with a specific product name from the 'Product' table. The placeholders in the WHERE clause represent the product's name and the date when the problem was reported, allowing users to filter results based on these criteria."
train.5396,tracking_software_problems,"Find the first and last name of the staff members who reported problems from the product ""rem"" but not ""aut""?",1,"SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'rem' EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'aut'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first and last names of staff members who reported problems related to a specific product, excluding those who reported problems for the same product in a different context. The placeholders in the WHERE clause represent the product's name."
train.5400,shop_membership,How many branches where have more than average number of memberships are there?,1,SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch),1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch),This virtual table provides the count of branches that have a total number of memberships exceeding the average number of memberships across all branches. The placeholder in the query represents the average membership amount calculated from the 'branch' table.
train.5402,shop_membership,"Show name, address road, and city for all branches sorted by open year.",1,"SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  address_road ,  city FROM branch ORDER BY open_year","This virtual table provides the names, street addresses, and cities of all branches from the 'branch' table, sorted by the year each branch was opened. The ordering allows users to see the branches in chronological order of their establishment."
train.5404,shop_membership,What are names for top three branches with most number of membership?,1,SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM branch ORDER BY membership_amount DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of branches from the 'branch' table, ordered by the total number of memberships in descending order. The placeholder in the LIMIT clause represents the maximum number of branch names to be returned."
train.5406,shop_membership,Show all distinct city where branches with at least 100 memberships are located.,1,SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT city FROM branch WHERE membership_amount  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of distinct cities from the 'branch' table where the total number of memberships at the branch meets or exceeds a specified amount. The placeholder in the WHERE clause represents the minimum membership amount required to filter the branches.
train.5408,shop_membership,List all open years when at least two shops are opened.,1,SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of years in which multiple branches were opened, specifically those years where the count of branches opened is greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of branches that must have been opened in that year."
train.5410,shop_membership,Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.,1,"SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  [PLACEHOLDER-TYPE:NUMBER] OR city  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the minimum and maximum number of memberships at branches from the 'branch' table, filtered by the year the branch was opened or the city where the branch is located. The placeholders in the WHERE clause represent the specific year and city to filter the results accordingly."
train.5412,shop_membership,Show the city and the number of branches opened before 2010 for each city.,1,"SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT city ,  count(*) FROM branch WHERE open_year  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY city","This virtual table provides a count of branches grouped by city, specifically for branches that were opened before a certain year. The placeholder in the WHERE clause represents the year of interest."
train.5416,shop_membership,"Show card number, name, and hometown for all members in a descending order of level.",1,"SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC","This virtual table provides a list of membership card numbers, names, and hometowns of members from the 'member' table, sorted by their membership level in descending order. The sorting allows for easy identification of members with higher levels of membership."
train.5420,shop_membership,Show all member names and registered branch names sorted by register year.,1,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year","This virtual table provides a list of member names along with the names of the branches where they registered. The data is sourced from the 'membership_register_branch', 'branch', and 'member' tables, and is ordered by the year of registration. The placeholders in the query represent the relationships between the members and branches based on their IDs."
train.5422,shop_membership,Show all branch names with the number of members in each branch registered after 2015.,1,"SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.branch_id",This virtual table provides the names of branches along with the count of members who registered at each branch after a specific year. The placeholder in the WHERE clause represents the year after which the registrations are considered.
train.5424,shop_membership,Show member names without any registered branch.,1,SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch),2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch),"This virtual table lists the names of members from the 'member' table who have not registered at any branch. The subquery checks for member IDs that exist in the 'membership_register_branch' table, and the placeholder in the WHERE clause represents the condition for filtering members who are not registered."
train.5426,shop_membership,List the branch name and city without any registered members.,1,"SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",This virtual table lists the names and cities of branches from the 'branch' table that do not have any registered members. The placeholder in the subquery represents the branch identifiers that are associated with registered members.
train.5428,shop_membership,What is the name and open year for the branch with most number of memberships registered in 2016?,1,"SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and opening years of branches from the 'branch' table where members registered in a specific year. The query groups the results by branch ID and orders them by the number of registrations in descending order, with a limit on the number of results returned. The placeholders represent the registration year and the limit on the number of branches to display."
train.5430,shop_membership,Show the member name and hometown who registered a branch in 2016.,1,"SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and hometowns of members who registered at a branch during a specific year. The placeholder in the WHERE clause represents the registration year.
train.5432,shop_membership,Show all city with a branch opened in 2001 and a branch with more than 100 membership.,1,SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT city FROM branch WHERE open_year  =  [PLACEHOLDER-TYPE:NUMBER] AND membership_amount  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of cities where branches were opened in a specific year and have a certain number of memberships. The placeholders in the WHERE clause represent the year of opening and the minimum number of memberships required.
train.5434,shop_membership,Show all cities without a branch having more than 100 memberships.,1,SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies the cities where branches are located that do not have a high number of memberships. The placeholder in the EXCEPT clause represents the threshold for the membership amount, allowing users to specify a numeric value to filter out cities with branches exceeding that membership count."
train.5436,shop_membership,What is the sum of total pounds of purchase in year 2018 for all branches in London?,1,SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  [PLACEHOLDER-TYPE:STRING] AND T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the total amount spent by members in pounds at branches located in a specific city during a particular year. The placeholders in the WHERE clause represent the city name and the year of the purchase.
train.5438,shop_membership,What is the total number of purchases for members with level 6?,1,SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of purchases made by members from the 'purchase' table who have a specific membership level. The placeholder in the WHERE clause represents the membership level of the members.
train.5442,shop_membership,"list the card number of all members whose hometown address includes word ""Kentucky"".",1,SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT card_number FROM member WHERE Hometown LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the membership card numbers of members from the 'member' table who are from a specific hometown. The placeholder in the WHERE clause represents the hometown's name.
train.5444,voter_2,Find the number of students in total.,1,SELECT count(*) FROM STUDENT,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM STUDENT,"This virtual table provides a count of all students from the 'Student' table. It does not filter or group the data, thus returning the total number of student records available."
train.5446,voter_2,Find the number of voting records in total.,1,SELECT count(*) FROM VOTING_RECORD,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM VOTING_RECORD,"This virtual table provides a count of all voting records from the 'Voting_record' table. It aggregates the total number of entries, which represents the total number of students who have participated in voting activities."
train.5448,voter_2,Find the distinct number of president votes.,1,SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD,"This virtual table provides the count of distinct presidential votes recorded in the 'Voting_record' table. The query counts unique entries in the 'President_Vote' column, which represents the votes cast for presidential candidates."
train.5450,voter_2,Find the maximum age of all the students.,1,SELECT max(Age) FROM STUDENT,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(Age) FROM STUDENT,"This virtual table provides the maximum age of students from the 'Student' table. The query retrieves the highest value from the 'Age' column, which is represented as a placeholder for numeric values."
train.5452,voter_2,Find the last names of students with major 50.,1,SELECT LName FROM STUDENT WHERE Major  =  50,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LName FROM STUDENT WHERE Major  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the last names of students from the 'Student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major's identifier.
train.5454,voter_2,Find the first names of students with age above 22.,1,SELECT Fname FROM STUDENT WHERE Age  >  22,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Fname FROM STUDENT WHERE Age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.
train.5456,voter_2,What are the majors of male (sex is M) students?,1,SELECT Major FROM STUDENT WHERE Sex  =  'M',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Major FROM STUDENT WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the field of study (Major) of students from the 'Student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students.
train.5458,voter_2,What is the average age of female (sex is F) students?,1,SELECT avg(Age) FROM STUDENT WHERE Sex  =  'F',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Age) FROM STUDENT WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students from the 'Student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students.
train.5460,voter_2,What are the maximum and minimum age of students with major 600?,1,"SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the maximum and minimum ages of students from the 'Student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major of study.
train.5462,voter_2,"Who are the advisors for students that live in a city with city code ""BAL""?",1,SELECT Advisor FROM STUDENT WHERE city_code  =  'BAL',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Advisor FROM STUDENT WHERE city_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the academic advisors of students from the 'Student' table who reside in a specific city, as indicated by the city code. The placeholder in the WHERE clause represents the city code."
train.5468,voter_2,Report the distinct registration date and the election cycle.,1,"SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",This virtual table provides a distinct list of registration dates and election cycles from the 'Voting_record' table. The placeholders represent the specific values for registration dates and election cycles that can be filtered or modified as needed.
train.5470,voter_2,Report the distinct president vote and the vice president vote.,1,"SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",This virtual table provides a distinct list of votes cast for presidential and vice presidential candidates from the 'Voting_record' table. The placeholders represent the voting records for these positions.
train.5472,voter_2,Find the distinct last names of the students who have class president votes.,1,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE,"This virtual table provides a list of distinct last names of students who have cast their votes for the class president. It combines data from the 'Student' table and the 'Voting_record' table, linking them through the student identifier. The placeholder in the JOIN clause represents the voting record for the class president."
train.5474,voter_2,Find the distinct first names of the students who have class senator votes.,1,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE,"This virtual table describes the distinct first names of students who have voted for the class senator. The query joins the 'Student' table with the 'Voting_record' table based on the student identifier, ensuring that only those students who participated in the voting for class senator are included."
train.5480,voter_2,Find the distinct majors of students who have treasurer votes.,1,SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote,"This virtual table provides a distinct list of majors from the 'Student' table for students who have voted for the treasurer candidate in the 'Voting_record' table. The join condition links the 'StuID' from the 'Student' table with the 'Treasurer_Vote' in the 'Voting_record' table, ensuring that only those students who participated in the voting for treasurer are included."
train.5488,voter_2,Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.,1,SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  'NYC' AND T2.Election_Cycle  =  'Spring',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  [PLACEHOLDER-TYPE:STRING] AND T2.Election_Cycle  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of students from the 'Student' table who have voted for the class senator in a specific election cycle and reside in a particular city. The placeholders in the WHERE clause represent the city code and the election cycle identifier.
train.5500,voter_2,"For each advisor, report the total number of students advised by him or her.",1,"SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor","This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor."
train.5502,voter_2,Report all advisors that advise more than 2 students.,1,SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of academic advisors from the 'Student' table who have more than a specified number of students assigned to them. The placeholder in the HAVING clause represents the minimum number of students an advisor must have to be included in the results.
train.5504,voter_2,Report all majors that have less than 3 students.,1,SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the majors of students from the 'Student' table, specifically those majors that have fewer students than a specified number. The placeholder in the HAVING clause represents the maximum number of students allowed for each major."
train.5506,voter_2,"For each election cycle, report the number of voting records.",1,"SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle","This virtual table summarizes the number of voting records for each election cycle from the 'Voting_record' table. The placeholder in the SELECT statement represents the election cycle identifier, while the count function aggregates the total number of records for each cycle."
train.5509,voter_2,Find the major that is studied by the largest number of students.,1,SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the majors of students from the 'Student' table, grouping them to count the number of students in each major. The results are ordered by the count in descending order, and a placeholder is used to limit the number of results returned."
train.5512,voter_2,What is the city_code of the city that the most students live in?,1,SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of city codes from the 'Student' table, grouped by the city code and ordered by the number of students residing in each city. The placeholder in the LIMIT clause allows the user to specify the maximum number of city codes to return."
train.5514,voter_2,Report the distinct advisors who have more than 2 students.,1,SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of academic advisors from the 'Student' table who have more than a specified number of students assigned to them. The placeholder in the HAVING clause represents the minimum number of students required for an advisor to be included in the results.
train.5516,products_gen_characteristics,How many products are there?,1,SELECT count(*) FROM products,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM products,This virtual table provides a count of all products available in the 'Products' table. The query uses the COUNT function to aggregate the total number of product entries.
train.5518,products_gen_characteristics,How many colors are there?,1,SELECT count(*) FROM ref_colors,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ref_colors,This virtual table provides a count of all unique color entries from the 'Ref_Colors' table. The query uses the COUNT function to aggregate the total number of records present in the table.
train.5520,products_gen_characteristics,How many characteristics are there?,1,SELECT count(*) FROM CHARACTERISTICS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM CHARACTERISTICS,This virtual table provides a count of all characteristics recorded in the 'Characteristics' table. It serves to give an overview of the total number of unique characteristics available in the database.
train.5522,products_gen_characteristics,What are the names and buying prices of all the products?,1,"SELECT product_name ,  typical_buying_price FROM products",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT product_name ,  typical_buying_price FROM products",This virtual table describes the product names and their typical buying prices from the 'Products' table. The placeholders can be used to filter or modify the query as needed.
train.5524,products_gen_characteristics,List the description of all the colors.,1,SELECT color_description FROM ref_colors,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT color_description FROM ref_colors,This virtual table describes the color descriptions of products from the 'Ref_Colors' table. The query retrieves all available color descriptions without any filtering conditions.
train.5527,products_gen_characteristics,What are the different names of the product characteristics?,1,SELECT DISTINCT characteristic_name FROM CHARACTERISTICS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT characteristic_name FROM CHARACTERISTICS,The virtual table describes the distinct names of characteristics from the 'Characteristics' table. This allows users to retrieve unique characteristic names without duplicates.
train.5528,products_gen_characteristics,"What are the names of products with category ""Spices""?",1,SELECT product_name FROM products WHERE product_category_code  =  'Spices',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_name FROM products WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of products from the 'Products' table that belong to a specific product category. The placeholder in the WHERE clause represents the product category code.
train.5530,products_gen_characteristics,"List the names, color descriptions and product descriptions of products with category ""Herbs"".",1,"SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  'Herbs'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names, descriptions, and colors of products from the 'Products' table that belong to a specific product category. The placeholder in the WHERE clause represents the product category code."
train.5532,products_gen_characteristics,"How many products are there under the category ""Seeds""?",1,SELECT count(*) FROM products WHERE product_category_code  =  'Seeds',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM products WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of products from the 'Products' table that belong to a specific product category. The placeholder in the WHERE clause represents the product category code.
train.5536,products_gen_characteristics,"What is the category and typical buying price  of the product with name ""cumin""?",1,"SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  'cumin'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the product category code and typical buying price of products from the 'Products' table that match a specific product name. The placeholder in the WHERE clause represents the name of the product being queried.
train.5538,products_gen_characteristics,"Which category does the product named ""flax"" belong to?",1,SELECT product_category_code FROM products WHERE product_name  =  'flax',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_category_code FROM products WHERE product_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the product category code from the 'Products' table for a specific product name. The placeholder in the WHERE clause represents the name of the product being queried.
train.5540,products_gen_characteristics,What is the name of the product with the color description 'yellow'?,1,SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of products from the 'Products' table that are associated with a specific color. The placeholder in the WHERE clause represents the description of the color.
train.5544,products_gen_characteristics,"What is the color description of the product with name ""catnip""?",1,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  'catnip',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the color description of a specific product from the 'Products' table by joining it with the 'Ref_Colors' table. The placeholder in the WHERE clause represents the name of the product for which the color description is being queried.
train.5546,products_gen_characteristics,"What is the color code and description of the product named ""chervil""?",1,"SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  'chervil'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the color code and color description of products from the 'Products' table that match a specific product name. The placeholder in the WHERE clause represents the name of the product.
train.5548,products_gen_characteristics,Find the id and color description of the products with at least 2 characteristics.,1,"SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of product IDs along with their corresponding color descriptions from the 'Products' and 'Ref_Colors' tables. It filters the results to include only those products that have a specified minimum number of associated characteristics, as indicated by the placeholder in the HAVING clause."
train.5550,products_gen_characteristics,"List all the product names with the color description ""white"".",1,SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  'white',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of products from the 'Products' table that are associated with a specific color. The placeholder in the WHERE clause represents the description of the color.
train.5552,products_gen_characteristics,"What are the name and typical buying and selling prices of the products that have color described as ""yellow""?",1,"SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  'yellow'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and typical buying and selling prices of products from the 'Products' table that match a specific color description. The placeholder in the WHERE clause represents the color description being queried.
train.5554,products_gen_characteristics,"How many characteristics does the product named ""sesame"" have?",1,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  'sesame',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of product characteristics for a specific product based on its name. The query joins the 'Products' table with the 'Product_Characteristics' table using the product ID, and filters the results to include only the specified product name."
train.5558,products_gen_characteristics,"What are all the characteristic names of product ""sesame""?",1,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of characteristics associated with a specific product from the 'Products' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.5560,products_gen_characteristics,"List all the characteristic names and data types of product ""cumin"".",1,"SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'cumin'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and data types of characteristics associated with a specific product from the 'Products' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.5563,products_gen_characteristics,What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?,1,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame' AND t3.characteristic_type_code  =  'Grade',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING] AND t3.characteristic_type_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of characteristics associated with a specific product from the 'Products' table. The query joins the 'Products', 'Product_Characteristics', and 'Characteristics' tables to filter characteristics based on the product's name and the type of characteristic. The placeholders in the WHERE clause represent the product's name and the characteristic type code."
train.5564,products_gen_characteristics,"How many characteristics does the product named ""laurel"" have?",1,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'laurel',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of characteristics associated with a specific product from the 'Products' table. The query joins the 'Products', 'Product_Characteristics', and 'Characteristics' tables to filter the results based on the product's name, represented by a placeholder for string values."
train.5566,products_gen_characteristics,"Find the number of characteristics that the product ""flax"" has.",1,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'flax',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of characteristics associated with a specific product from the 'Products' table. The query joins the 'Products', 'Product_Characteristics', and 'Characteristics' tables to filter the results based on the product's name, represented by a placeholder for string values."
train.5568,products_gen_characteristics,"Find the name of the products that have the color description ""red"" and have the characteristic name ""fast"".",1,SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'red' AND t3.characteristic_name  =  'fast',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  [PLACEHOLDER-TYPE:STRING] AND t3.characteristic_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of products from the 'Products' table that have specific characteristics and colors. The placeholders in the WHERE clause represent the color description and the characteristic name that the user can specify.
train.5570,products_gen_characteristics,"How many products have the characteristic named ""hot""?",1,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  'hot',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of products that have a specific characteristic name. It joins the 'Products' table with the 'Product_Characteristics' table to link products with their characteristics, and further joins with the 'Characteristics' table to filter based on the characteristic name. The placeholder in the WHERE clause represents the name of the characteristic being queried."
train.5572,products_gen_characteristics,List the all the distinct names of the products with the characteristic name 'warm'.,1,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  'warm',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct product names from the 'Products' table that are associated with a specific characteristic name. The placeholders in the WHERE clause represent the characteristic name being queried.
train.5574,products_gen_characteristics,"Find the number of the products that have their color described as ""red"" and have a characteristic named ""slow"".",1,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'red' AND t3.characteristic_name  =  'slow',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  [PLACEHOLDER-TYPE:STRING] AND t3.characteristic_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of products that have specific characteristics based on their color and characteristic name. The placeholders in the WHERE clause represent the color description and the characteristic name that the user can specify.
train.5578,products_gen_characteristics,"What is the unit of measuerment of the product category code ""Herbs""?",1,SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unit of measure for a specific product category from the 'Ref_Product_Categories' table. The placeholder in the WHERE clause represents the unique code for the product category.
train.5580,products_gen_characteristics,"Find the product category description of the product category with code ""Spices"".",1,SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  'Spices',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the product category description from the 'Ref_Product_Categories' table for a specific product category code. The placeholder in the WHERE clause represents the product category code.
train.5582,products_gen_characteristics,"What is the product category description and unit of measurement of category ""Herbs""?",1,"SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the description and unit of measure for a specific product category from the 'Ref_Product_Categories' table. The placeholder in the WHERE clause represents the unique code for the product category.
train.5584,products_gen_characteristics,"What is the unit of measurement of product named ""cumin""?",1,SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unit of measure for a specific product from the 'Products' table by joining it with the 'Ref_Product_Categories' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.5587,products_gen_characteristics,What are the unit of measure and category code for the 'chervil' product?,1,"SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the unit of measure and product category code for a specific product from the 'Products' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.5588,products_gen_characteristics,"Find the product names that are colored 'white' but do not have unit of measurement ""Handful"".",1,SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  [PLACEHOLDER-TYPE:STRING] AND t2.unit_of_measure != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of products from the 'Products' table that are associated with a specific color and do not belong to a certain unit of measure. The placeholders in the WHERE clause represent the color description and the unit of measure that should be excluded.
train.5591,products_gen_characteristics,Return the color description that is most common across all products.,1,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table describes the color descriptions of products from the 'Products' table, grouped by color and ordered by the frequency of each color's occurrence. The placeholder in the LIMIT clause represents the maximum number of color descriptions to return."
train.5594,products_gen_characteristics,What is the characteristic name used by most number of the products?,1,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of characteristic names associated with products from the 'Products' table. It joins the 'Products' table with the 'Product_Characteristics' table to link products with their respective characteristics, and then further joins with the 'Characteristics' table to retrieve the characteristic names. The results are grouped by characteristic name and ordered by the count of occurrences in descending order, with a limit specified by a placeholder for numeric values."
train.5596,products_gen_characteristics,"What are the names, details and data types of the characteristics which are never used by any product?",1,"SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id","This virtual table provides a list of characteristic names, their additional details, and data types from the 'Characteristics' table that are not associated with any products in the 'Product_Characteristics' table. The use of the EXCEPT clause ensures that only unique characteristics that do not have corresponding entries in the product characteristics are displayed."
train.5598,products_gen_characteristics,What are characteristic names used at least twice across all products?,1,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of characteristics associated with products from the 'Products' table. It retrieves characteristic names by joining the 'Products', 'Product_Characteristics', and 'Characteristics' tables. The results are grouped by characteristic name, and only those with a count of associated products greater than or equal to a specified number are included. The placeholder in the HAVING clause represents the minimum count of products for the characteristic."
train.5600,products_gen_characteristics,How many colors are never used by any product?,1,SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products ),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products ),"This virtual table counts the number of colors from the 'Ref_Colors' table that are not associated with any products in the 'Products' table. The subquery checks for color codes that exist in the 'Products' table, and the placeholder in the NOT IN clause represents the color codes that are being filtered out."
train.5602,swimming,How many events are there?,1,SELECT count(*) FROM event,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM event,"This virtual table provides the total number of events recorded in the 'event' table. The count function is used to aggregate the number of entries, giving a summary of all events without specifying any particular details about them."
train.5604,swimming,What is the name of the event that happened in the most recent year?,1,SELECT name FROM event ORDER BY YEAR DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM event ORDER BY YEAR DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of events from the 'event' table, ordered by the year in descending order. The placeholder in the LIMIT clause represents the maximum number of events to be displayed."
train.5605,swimming,How many stadiums are there?,1,SELECT count(*) FROM stadium,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM stadium,"This virtual table provides the total number of stadiums recorded in the 'stadium' table. The count function is used to aggregate the number of entries, giving a quick overview of the stadiums available."
train.5606,swimming,Find the name of the stadium that has the maximum capacity.,1,SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM stadium ORDER BY capacity DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of stadiums from the 'stadium' table, ordered by their capacity in descending order. The placeholder in the LIMIT clause represents the maximum number of stadium names to be returned."
train.5607,swimming,Find the names of stadiums whose capacity is smaller than the average capacity.,1,SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium),"This virtual table lists the names of stadiums from the 'stadium' table that have a capacity less than the average capacity of all stadiums. The query uses a subquery to calculate the average capacity, and the placeholder in the WHERE clause represents the comparison value for capacity."
train.5609,swimming,Which country has at most 3 stadiums listed?,1,SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the countries that have a limited number of stadiums, specifically those with a count of stadiums less than or equal to a specified number. The placeholder in the HAVING clause represents the maximum number of stadiums allowed per country."
train.5610,swimming,Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?,1,SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT country FROM stadium WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT country FROM stadium WHERE capacity  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the countries where stadiums have a capacity that falls between two specified numeric values. The placeholders in the query represent the minimum and maximum capacity limits.
train.5611,swimming,How many cities have a stadium that was opened before the year of 2006?,1,SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table counts the distinct cities from the 'stadium' table where the stadiums were opened before a specific year. The placeholder in the WHERE clause represents the year of interest.
train.5612,swimming,How many stadiums does each country have?,1,"SELECT country ,  count(*) FROM stadium GROUP BY country",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT country ,  count(*) FROM stadium GROUP BY country","This virtual table summarizes the number of stadiums located in each country from the 'stadium' table. The placeholder in the SELECT clause represents the country, and the count function aggregates the total number of stadiums per country."
train.5614,swimming,"How many stadiums are not in country ""Russia""?",1,SELECT count(*) FROM stadium WHERE country != 'Russia',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM stadium WHERE country != [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of stadiums located in countries other than a specified country. The placeholder in the WHERE clause represents the name of the country to be excluded from the count.
train.5615,swimming,"Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",1,SELECT name FROM swimmer ORDER BY meter_100,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM swimmer ORDER BY meter_100,"This virtual table lists the names of swimmers from the 'swimmer' table, ordered by their performance time in the 100 meter swim event. The ordering allows for easy identification of the fastest swimmers based on their recorded times."
train.5616,swimming,How many different countries are all the swimmers from?,1,SELECT count(DISTINCT nationality) FROM swimmer,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT nationality) FROM swimmer,"This virtual table provides the count of distinct nationalities represented by swimmers in the 'swimmer' table. The query uses the COUNT function to aggregate unique nationalities, ensuring that each nationality is only counted once."
train.5620,swimming,What is the name of the stadium which held the most events?,1,SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of stadiums that have hosted the most events, ordered by the number of events in descending order. The placeholder in the LIMIT clause represents the maximum number of stadium names to return."
train.5621,swimming,"Find the name and capacity of the stadium where the event named ""World Junior"" happened.",1,"SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and capacities of stadiums from the 'stadium' table that host a specific event. The placeholder in the WHERE clause represents the name of the event.
train.5622,swimming,Find the names of stadiums which have never had any event.,1,SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event),This virtual table lists the names of stadiums from the 'stadium' table that do not host any events. The placeholder in the WHERE clause represents the stadium identifiers that are excluded based on their participation in the 'event' table.
train.5623,swimming,Find the name of the swimmer who has the most records.,1,SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of swimmers who have achieved records, ordered by the number of records they hold. The placeholder in the LIMIT clause allows the user to specify the maximum number of swimmers to display."
train.5624,swimming,Find the name of the swimmer who has at least 2 records.,1,SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of swimmers who have achieved a certain number of records. The query joins the 'swimmer' table with the 'record' table based on the swimmer's ID, groups the results by swimmer ID, and filters the groups to include only those swimmers who have set a specified minimum number of records. The placeholder in the HAVING clause represents the minimum count of records a swimmer must have achieved."
train.5626,swimming,Find the names of the swimmers who have no record.,1,SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record),"This virtual table lists the names of swimmers from the 'swimmer' table who have not set any records in the 'record' table. The subquery identifies swimmers who have achieved records, and the main query filters out those swimmers from the list."
train.5629,swimming,Find the names of stadiums that the most swimmers have been to.,1,SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of stadiums that have hosted the most events, based on the records set by swimmers. The placeholder in the LIMIT clause allows the user to specify the number of stadiums to retrieve, sorted by the count of events in descending order."
train.5630,swimming,Find all details for each swimmer.,1,SELECT * FROM swimmer,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM swimmer,"This virtual table provides a comprehensive view of all swimmers from the 'swimmer' table, including their unique identifiers, names, nationalities, and performance times across various distances. The data can be filtered or modified to focus on specific swimmers or performance metrics as needed."
train.5631,swimming,What is the average capacity of the stadiums that were opened in year 2005?,1,SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(capacity) FROM stadium WHERE opening_year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average capacity of stadiums that were opened in a specific year. The placeholder in the WHERE clause represents the year of opening for the stadiums.
train.5632,railway,How many railways are there?,1,SELECT count(*) FROM railway,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM railway,"This virtual table provides a count of all entries in the 'railway' table, which includes various details about different railways. The result will indicate the total number of railways recorded in the database."
train.5636,railway,What is the average age for all managers?,1,SELECT avg(Age) FROM manager,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Age) FROM manager,This virtual table calculates the average age of managers from the 'manager' table. The result provides insights into the age demographics of the management team.
train.5637,railway,What are the names of managers in ascending order of level?,1,SELECT Name FROM manager ORDER BY LEVEL ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM manager ORDER BY LEVEL ASC,"This virtual table lists the names of managers from the 'manager' table, ordered by their management level in ascending order. The ordering allows for easy identification of managers based on their level of responsibility."
train.5638,railway,What are the names and arrival times of trains?,1,"SELECT Name ,  Arrival FROM train",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Name ,  Arrival FROM train",This virtual table provides the names and arrival locations of trains from the 'train' table. The placeholder in the SELECT statement allows for the specification of the desired train names and their corresponding arrival locations.
train.5640,railway,Show the names of trains and locations of railways they are in.,1,"SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID","This virtual table provides the names of trains along with their corresponding geographical locations from the 'railway' and 'train' tables. The join operation links the two tables based on the Railway_ID, ensuring that the train names are associated with the correct railway locations."
train.5641,railway,"Show the builder of railways associated with the trains named ""Andaman Exp"".",1,SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  'Andaman Exp',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of builders for railways associated with a specific train name. The placeholder in the WHERE clause represents the name of the train being queried.
train.5642,railway,Show id and location of railways that are associated with more than one train.,1,"SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of railway IDs and their corresponding geographical locations from the 'railway' table, specifically for railways that have more than a specified number of trains associated with them. The placeholder in the HAVING clause represents the minimum count of trains required for the railway to be included in the results."
train.5644,railway,"Show different builders of railways, along with the corresponding number of railways using each builder.",1,"SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",This virtual table summarizes the number of railways built by each builder from the 'railway' table. The placeholder in the COUNT function represents the count of railways associated with each builder.
train.5647,railway,Show the locations that have more than one railways.,1,SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of geographical locations of railways from the 'railway' table that have more than a specified number of railways associated with them. The placeholder in the HAVING clause represents the minimum count of railways required for a location to be included in the results.
train.5648,railway,List the object number of railways that do not have any trains.,1,SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train),This virtual table lists the unique object numbers of railways from the 'railway' table that do not have any associated trains. The placeholder in the subquery represents the railway identifiers that are linked to trains.
train.5649,railway,Show the countries that have both managers of age above 50 and managers of age below 46.,1,SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Country FROM manager WHERE Age  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Country FROM manager WHERE Age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the countries of managers whose ages are both greater than a specified minimum and less than a specified maximum. The placeholders in the WHERE clauses represent the age limits for filtering the managers.
train.5650,railway,Show the distinct countries of managers.,1,SELECT DISTINCT Country FROM manager,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Country FROM manager,"This virtual table provides a list of unique countries from the 'manager' table, representing the various countries where managers are based. The query uses the DISTINCT keyword to ensure that each country is listed only once."
train.5653,customers_and_products_contacts,How many addresses are there in country USA?,1,SELECT count(*) FROM addresses WHERE country  =  'USA',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM addresses WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of addresses from the 'Addresses' table that are located in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.5654,customers_and_products_contacts,Show all distinct cities in the address record.,1,SELECT DISTINCT city FROM addresses,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT city FROM addresses,"This virtual table provides a list of unique cities from the 'Addresses' table. The query uses the DISTINCT keyword to ensure that each city is only listed once, regardless of how many addresses exist in that city."
train.5655,customers_and_products_contacts,Show each state and the number of addresses in each state.,1,"SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county","This virtual table summarizes the number of addresses grouped by state, province, or county from the 'Addresses' table. The placeholder in the SELECT clause represents the state, province, or county name, and the count function provides the total number of addresses in each group."
train.5657,customers_and_products_contacts,Show the name of the customer who has the most orders.,1,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have placed orders, sorted by the number of orders in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of customer names to retrieve."
train.5658,customers_and_products_contacts,Show the product type codes which have at least two products.,1,SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of product type codes from the 'Products' table that have a count of occurrences greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of products for each type code.
train.5660,customers_and_products_contacts,"Show the name, phone, and payment method code for all customers in descending order of customer number.",1,"SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC","This virtual table provides a list of customer names, their phone numbers, and the payment method codes from the 'Customers' table, sorted in descending order by the unique customer number. The placeholders in the SELECT statement represent the specific columns being retrieved."
train.5662,customers_and_products_contacts,"Show the minimum, maximum, average price for all products.",1,"SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products","This virtual table provides the minimum, maximum, and average prices of products from the 'Products' table. The query aggregates the 'product_price' column to give insights into the pricing range and average price of the products available."
train.5663,customers_and_products_contacts,How many products have a price higher than the average?,1,SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products),"This virtual table provides the count of products from the 'Products' table that have a price greater than the average price of all products. The subquery calculates the average product price, and the main query counts the number of products exceeding this average price."
train.5664,customers_and_products_contacts,"Show the customer name, customer address city, date from, and date to for each customer address history.",1,"SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id","This virtual table provides a view of customer address history, including the customer's name, the city of the address, and the date range during which the address was valid. The placeholders in the query represent the necessary identifiers for customers and addresses."
train.5665,customers_and_products_contacts,Show the names of customers who use Credit Card payment method and have more than 2 orders.,1,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.customer_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of customers from the 'Customers' table who have placed more than a specified number of orders using a specific payment method. The placeholders in the WHERE clause represent the payment method code and the minimum order count.
train.5666,customers_and_products_contacts,What are the name and phone of the customer with the most ordered product quantity?,1,"SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and phone numbers of customers from the 'Customers' table who have placed orders. It aggregates the order items to determine the total quantity ordered by each customer, allowing for the identification of the top customers based on their order quantities. The placeholder in the LIMIT clause represents the maximum number of customers to be returned."
train.5667,customers_and_products_contacts,Show the product type and name for the products with price higher than 1000 or lower than 500.,1,"SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT product_type_code ,  product_name FROM products WHERE product_price  >  [PLACEHOLDER-TYPE:NUMBER] OR product_price  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the product type codes and names of products from the 'Products' table that have a price either greater than or less than a specified value. The placeholders in the WHERE clause represent the price thresholds for filtering the products.
train.5668,dorm_1,Find the name of dorms only for female (F gender).,1,SELECT dorm_name FROM dorm WHERE gender  =  'F',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dorm_name FROM dorm WHERE gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of dormitories from the 'Dorm' table that are designated for a specific gender. The placeholder in the WHERE clause represents the gender designation for the dormitory.
train.5670,dorm_1,Find the name of dorms that can accommodate more than 300 students.,1,SELECT dorm_name FROM dorm WHERE student_capacity  >  300,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dorm_name FROM dorm WHERE student_capacity  >  [PLACEHOLDER-TYPE:NUMBER],The virtual table describes the names of dormitories from the 'Dorm' table that have a student capacity greater than a specified number. The placeholder in the WHERE clause represents the minimum student capacity.
train.5672,dorm_1,How many female students (sex is F) whose age is below 25?,1,SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] AND age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of students from the 'Student' table who are of a specific gender and below a certain age. The placeholders in the WHERE clause represent the gender and age criteria for filtering the students.
train.5674,dorm_1,Find the first name of students who is older than 20.,1,SELECT fname FROM student WHERE age  >  20,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT fname FROM student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.
train.5676,dorm_1,Find the first name of students living in city PHL whose age is between 20 and 25.,1,SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT fname FROM student WHERE city_code  =  [PLACEHOLDER-TYPE:STRING] AND age BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students from the 'Student' table who reside in a specific city and fall within a certain age range. The placeholders in the WHERE clause represent the city code and the age range limits.
train.5678,dorm_1,How many dorms are there?,1,SELECT count(*) FROM dorm,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM dorm,"This virtual table provides the total number of dormitories available in the 'Dorm' table. The query counts all entries in the dormitory table, which helps in understanding the overall capacity and availability of dormitory facilities."
train.5680,dorm_1,Find the number of distinct amenities.,1,SELECT count(*) FROM dorm_amenity,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM dorm_amenity,This virtual table provides a count of all amenities available in the 'Dorm_amenity' table. It allows users to understand the total number of different amenities that can be found in the dormitories.
train.5682,dorm_1,Find the total capacity of all dorms.,1,SELECT sum(student_capacity) FROM dorm,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(student_capacity) FROM dorm,This virtual table calculates the total student capacity of all dormitories from the 'Dorm' table. The result will provide a single numeric value representing the sum of the maximum number of students that can reside in each dormitory.
train.5686,dorm_1,Find the average age of all students living in the each city.,1,"SELECT avg(age) ,  city_code FROM student GROUP BY city_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  city_code FROM student GROUP BY city_code","This virtual table provides the average age of students grouped by their city of residence. The placeholder in the SELECT clause represents the average age, while the city_code indicates the specific city each group belongs to."
train.5689,dorm_1,What is the average and total capacity for all dorms who are of gender X?,1,"SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the average and total student capacity of dormitories filtered by a specific gender designation. The placeholder in the WHERE clause represents the gender of the dormitory.
train.5690,dorm_1,Find the number of dorms that have some amenity.,1,SELECT count(DISTINCT dormid) FROM has_amenity,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT dormid) FROM has_amenity,"This virtual table provides the count of distinct dormitories that have amenities available. The query counts unique dormitory identifiers from the 'has_amenity' table, which links dormitories to their respective amenities."
train.5692,dorm_1,Find the name of dorms that do not have any amenity,1,SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity),"This virtual table lists the names of dormitories from the 'Dorm' table that do not have any amenities associated with them. The subquery checks for dormitory IDs in the 'Has_amenity' table, ensuring that only those dormitories without amenities are selected."
train.5694,dorm_1,Find the number of distinct gender for dorms.,1,SELECT count(DISTINCT gender) FROM dorm,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT gender) FROM dorm,The virtual table counts the distinct gender designations available in the 'Dorm' table. The placeholder in the SELECT clause represents the count of unique gender values.
train.5696,dorm_1,Find the capacity and gender type of the dorm whose name has substring ‘Donor’.,1,"SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table provides information about the student capacity and gender designation of a specific dormitory from the 'Dorm' table. The placeholder in the WHERE clause allows for filtering based on the dormitory's name.
train.5698,dorm_1,Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.,1,"SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  [PLACEHOLDER-TYPE:NUMBER] OR student_capacity  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and gender designations of dormitories from the 'Dorm' table that have a student capacity exceeding or falling below a specified number. The placeholders in the WHERE clause represent the capacity limits.
train.5700,dorm_1,Find the numbers of different majors and cities.,1,"SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",This virtual table provides a count of distinct majors and distinct city codes from the 'Student' table. The placeholders represent the unique values for majors and city codes among the students.
train.5702,dorm_1,Find the name of dorms which have both TV Lounge and Study Room as amenities.,1,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies dormitories that offer specific amenities. It retrieves the names of dormitories that have two specified amenities, ensuring that both amenities are available in the same dormitory. The placeholders in the WHERE clause represent the names of the amenities being queried."
train.5704,dorm_1,Find the name of dorms which have TV Lounge but no Study Room as amenity.,1,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies dormitories that offer a specific amenity while excluding those that provide another specified amenity. The placeholders in the WHERE clause represent the names of the amenities being queried.
train.5708,dorm_1,Find the name of the dorm with the largest capacity.,1,SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of dormitories from the 'Dorm' table, ordered by their student capacity in descending order. The placeholder in the LIMIT clause represents the maximum number of dormitory names to be returned."
train.5710,dorm_1,List in alphabetic order all different amenities.,1,SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name,"This virtual table lists the names of amenities available in the dormitories from the 'dorm_amenity' table, sorted in alphabetical order. There are no filters applied, so all amenities will be displayed."
train.5712,dorm_1,Find the code of city where most of students are living in.,1,SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of city codes representing the locations of students, grouped by city code and ordered by the number of students residing in each city. The placeholder in the LIMIT clause indicates the maximum number of city codes to return."
train.5714,dorm_1,Find the first and last name of students whose age is younger than the average age.,1,"SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)",This virtual table describes the first and last names of students from the 'Student' table who are younger than the average age of all students. The placeholder in the WHERE clause represents the average age calculated from the 'Student' table.
train.5716,dorm_1,"List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",1,"SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT fname ,  lname FROM student WHERE city_code != [PLACEHOLDER-TYPE:STRING] ORDER BY age",This virtual table describes the first and last names of students from the 'Student' table who do not reside in a specific city. The placeholder in the WHERE clause represents the city code that is being excluded. The results are ordered by the students' age.
train.5718,dorm_1,"List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",1,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.amenity_name,"This virtual table lists the names of amenities available in a specific dormitory from the 'dorm_amenity' table. The query joins the 'has_amenity' and 'dorm' tables to filter amenities based on the dormitory's name, represented by a placeholder."
train.5720,dorm_1,Find the number of dorms and total capacity for each gender.,1,"SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender","This virtual table provides a summary of the total number of dormitories and the total student capacity grouped by gender designation. The placeholders in the SELECT clause represent the count of dormitories and the sum of their capacities, while the GROUP BY clause organizes the results based on the gender of the dormitories."
train.5722,dorm_1,Find the average and oldest age for students with different sex.,1,"SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",This virtual table provides the average and maximum age of students grouped by their gender. The placeholders in the SELECT statement represent the calculated values for age and the gender of the students.
train.5724,dorm_1,Find the number of students in each major.,1,"SELECT count(*) ,  major FROM student GROUP BY major",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  major FROM student GROUP BY major","This virtual table provides a count of students grouped by their major from the 'Student' table. The placeholder in the SELECT clause represents the number of students, while the 'major' column indicates the field of study."
train.5726,dorm_1,Find the number and average age of students living in each city.,1,"SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code","This virtual table provides a summary of the number of students and their average age, grouped by the city code of their residence. The placeholders in the SELECT statement represent the aggregated values for the count of students and the average age, while the city_code indicates the grouping criteria."
train.5728,dorm_1,Find the average age and number of male students (with sex M) from each city.,1,"SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] GROUP BY city_code","This virtual table provides a summary of the number of students and their average age, grouped by the city code, specifically for students of a certain gender. The placeholder in the WHERE clause represents the gender of the students being queried."
train.5730,dorm_1,Find the number of students for the cities where have more than one student.,1,"SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a count of students grouped by their city of residence from the 'Student' table. The placeholder in the HAVING clause represents the minimum number of students required in each city to be included in the results.
train.5732,dorm_1,Find the first and last name of students who are not in the largest major.,1,"SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])",This virtual table describes the first and last names of students from the 'Student' table who are not enrolled in the most popular major. The placeholder in the subquery represents the limit for the number of majors to consider when determining the most popular one.
train.5734,dorm_1,Find the number of students whose age is older than the average age for each gender.,1,"SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",This virtual table provides a count of students grouped by gender who are older than the average age of all students. The placeholder in the WHERE clause represents the average age calculated from the student records.
train.5736,dorm_1,Find the average age of students living in each dorm and the name of dorm.,1,"SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name","This virtual table calculates the average age of students residing in each dormitory. It joins the 'Student' table with the 'Lives_in' table to associate students with their respective dorms, and then joins with the 'Dorm' table to retrieve the dormitory names. The result is grouped by dormitory name to provide the average age for each dorm."
train.5740,dorm_1,Find the number of students who is older than 20 in each dorm.,1,"SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T3.dorm_name",This virtual table provides a count of students older than a specified age grouped by the dormitory name. The placeholders in the query allow for dynamic input of the age value to filter the results accordingly.
train.5742,dorm_1,Find the first name of students who are living in the Smith Hall.,1,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students who reside in a specific dormitory. The query joins the 'Student', 'Lives_in', and 'Dorm' tables to filter students based on the dormitory name provided as a placeholder."
train.5744,dorm_1,Find the average age of students who are living in the dorm with the largest capacity.,1,SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm),3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm),This virtual table calculates the average age of students residing in the dormitory with the maximum student capacity. The placeholders in the query represent the necessary identifiers and values to filter and compute the average age based on the dormitory's capacity.
train.5746,dorm_1,Find the total number of students living in the male dorm (with gender M).,1,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students residing in dormitories based on gender designation. The placeholders in the WHERE clause represent the gender of the dormitory.
train.5748,dorm_1,Find the number of female students (with F sex) living in Smith Hall,1,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.sex  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of students residing in a specific dormitory, filtered by their gender. The placeholders in the WHERE clause represent the dormitory's name and the gender of the students."
train.5750,dorm_1,Find the name of amenities Smith Hall dorm have.,1,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the amenities available in a specific dormitory from the 'Dorm' table. The query joins the 'Dorm', 'Has_amenity', and 'Dorm_amenity' tables to retrieve the names of amenities associated with a dormitory specified by its name. The placeholder in the WHERE clause represents the name of the dormitory."
train.5752,dorm_1,Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.,1,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.amenity_name,"This virtual table lists the names of amenities available in a specific dormitory from the 'Dorm' table. The query joins the 'Dorm', 'Has_amenity', and 'Dorm_amenity' tables to retrieve the amenities associated with the specified dormitory name. The placeholder in the WHERE clause represents the dormitory's name."
train.5754,dorm_1,Find the name of amenity that is most common in all dorms.,1,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of amenities available in dormitories, sorted by their popularity. The placeholder in the LIMIT clause represents the maximum number of amenities to display."
train.5758,dorm_1,Find the name and capacity of the dorm with least number of amenities.,1,"SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of dormitories along with their student capacities, specifically focusing on those that have amenities available. The query joins the 'dorm' table with the 'has_amenity' table to filter dormitories that offer certain amenities, and then it groups the results by dormitory to count the number of amenities available. The results are ordered by the count of amenities, and a placeholder is included to limit the number of results returned."
train.5760,dorm_1,Find the name of dorms that do not have amenity TV Lounge.,1,SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of dormitories from the 'Dorm' table that do not have a specific amenity. The placeholder in the query represents the name of the amenity that is being checked for absence in the dormitories.
train.5762,dorm_1,Find the first and last name of students who are living in the dorms that have amenity TV Lounge.,1,"SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  [PLACEHOLDER-TYPE:STRING])",This virtual table describes the first and last names of students who reside in dormitories that offer a specific amenity. The placeholder in the subquery represents the name of the amenity being queried.
train.5764,dorm_1,Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.,1,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  [PLACEHOLDER-TYPE:STRING])","This virtual table provides the first names and ages of students who live in dormitories that do not have a specific amenity. The query joins the 'Student' and 'Lives_in' tables to find students and their corresponding dormitory information, while filtering out dormitories that offer the specified amenity using a subquery."
train.5766,dorm_1,Find the name of amenities of the dorm where the student with last name Smith is living in.,1,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the amenities available in dormitories for students with a specific last name. The placeholders in the WHERE clause represent the last name of the student.
train.5770,customer_complaints,"Find the emails and phone numbers of all the customers, ordered by email address and phone number.",1,"SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number","This virtual table provides the email addresses and phone numbers of customers from the 'Customers' table, sorted in ascending order by email address and then by phone number."
train.5773,customer_complaints,"Return the city with the customer type code ""Good Credit Rating"" that had the fewest customers.",1,SELECT town_city FROM customers WHERE customer_type_code  =  'Good Credit Rating' GROUP BY town_city ORDER BY count(*) LIMIT 1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT town_city FROM customers WHERE customer_type_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY town_city ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique town or city names from the 'Customers' table, filtered by a specific customer type code. The results are grouped by town or city and ordered by the count of occurrences, with a limit on the number of results returned. The placeholders in the WHERE clause and LIMIT clause allow for dynamic input of the customer type code and the maximum number of results to display."
train.5774,customer_complaints,List the name of all products along with the number of complaints that they have received.,1,"SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name","This virtual table summarizes the number of complaints associated with each product from the 'Products' table. The placeholder in the SELECT statement represents the product's name, and the count reflects the total complaints for each product."
train.5780,customer_complaints,What is the phone number of the customer who has filed the most recent complaint?,1,SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of phone numbers of customers who have raised complaints, ordered by the date the complaints were raised in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of phone numbers to retrieve."
train.5782,customer_complaints,Find the email and phone number of the customers who have never filed a complaint before.,1,"SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",This virtual table provides the email addresses and phone numbers of customers from the 'Customers' table who have not made any complaints. The subquery filters out customers based on their identifiers found in the 'Complaints' table.
train.5784,customer_complaints,Find the phone number of all the customers and staff.,1,SELECT phone_number FROM customers UNION SELECT phone_number FROM staff,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT phone_number FROM customers UNION SELECT phone_number FROM staff,"This virtual table provides a combined list of contact phone numbers from both the 'Customers' and 'Staff' tables. The use of the UNION operator ensures that any duplicate phone numbers are removed, resulting in a unique set of phone numbers from both sources."
train.5786,customer_complaints,"What is the description of the product named ""Chocolate""?",1,SELECT product_description FROM products WHERE product_name  =  'Chocolate',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT product_description FROM products WHERE product_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a product from the 'Products' table based on a specific product name. The placeholder in the WHERE clause represents the name of the product being queried.
train.5788,customer_complaints,Find the name and category of the most expensive product.,1,"SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of product names and their corresponding category codes from the 'Products' table, sorted by price in descending order. The placeholder in the LIMIT clause indicates the maximum number of products to be displayed."
train.5790,customer_complaints,Find the prices of products which has never received a single complaint.,1,SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints),The virtual table describes the prices of products from the 'Products' table that have not received any complaints. The placeholder in the subquery represents the product identifiers that are associated with complaints.
train.5792,customer_complaints,What is the average price of the products for each category?,1,"SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code","This virtual table provides the average price of products grouped by their respective categories from the 'Products' table. The placeholder in the SELECT clause represents the average price of the products, while the grouping is done based on the product category code."
train.5797,customer_complaints,Return complaint status codes have more than 3 corresponding complaints?,1,SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"The virtual table summarizes the different complaint status codes from the 'Complaints' table, grouping them by their status and filtering to show only those statuses that have a count exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of complaints required to display a status code."
train.5798,customer_complaints,"Find the last name of the staff whose email address contains ""wrau"".",1,SELECT last_name FROM staff WHERE email_address LIKE '%wrau%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT last_name FROM staff WHERE email_address LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of staff members from the 'Staff' table who have an email address matching a specific pattern. The placeholder in the WHERE clause represents the email address pattern to filter the results.
train.5803,customer_complaints,Return the last name of the staff member who handled the complaint with the earliest date raised.,1,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the last names of staff members from the 'Staff' table who are handling complaints, ordered by the date the complaints were raised. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.5804,customer_complaints,How many distinct complaint type codes are there in the database?,1,SELECT count(DISTINCT complaint_type_code) FROM complaints,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT complaint_type_code) FROM complaints,This virtual table provides the count of distinct complaint types recorded in the 'Complaints' table. The result will indicate how many unique types of complaints have been raised.
train.5806,customer_complaints,"Find the address line 1 and 2 of the customer with email ""vbogisich@example.org"".",1,"SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the first and second lines of the address for customers from the 'Customers' table who have a specific email address. The placeholder in the WHERE clause represents the customer's email address.
train.5808,customer_complaints,Find the number of complaints with Product Failure type for each complaint status.,1,"SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  'Product Failure' GROUP BY complaint_status_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY complaint_status_code",This virtual table summarizes the count of complaints grouped by their status for a specific type of complaint. The placeholder in the WHERE clause represents the type of complaint being queried.
train.5814,workshop_paper,How many submissions are there?,1,SELECT count(*) FROM submission,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM submission,This virtual table provides the total number of submissions recorded in the 'submission' table. The count function is used to aggregate the total submissions without any specific filtering conditions.
train.5816,workshop_paper,List the authors of submissions in ascending order of scores.,1,SELECT Author FROM submission ORDER BY Scores ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Author FROM submission ORDER BY Scores ASC,"This virtual table lists the authors of submissions from the 'submission' table, ordered by their scores in ascending order. The placeholder in the ORDER BY clause represents the scores of the submissions."
train.5818,workshop_paper,What are the authors of submissions and their colleges?,1,"SELECT Author ,  College FROM submission",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Author ,  College FROM submission",This virtual table describes the authors and their associated colleges from the 'submission' table. The placeholders represent the specific values for filtering or further processing if needed.
train.5822,workshop_paper,What is the average score of submissions?,1,SELECT avg(Scores) FROM submission,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Scores) FROM submission,This virtual table calculates the average score of submissions from the 'submission' table. The result provides insight into the overall performance of submissions without filtering by any specific criteria.
train.5824,workshop_paper,What is the author of the submission with the highest score?,1,SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Author FROM submission ORDER BY Scores DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the authors of submissions from the 'submission' table, ordered by their scores in descending order. The placeholder in the LIMIT clause represents the maximum number of authors to be retrieved."
train.5826,workshop_paper,Show different colleges along with the number of authors of submission from each college.,1,"SELECT College ,  COUNT(*) FROM submission GROUP BY College",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT College ,  COUNT(*) FROM submission GROUP BY College","This virtual table summarizes the number of submissions received from each college. The placeholder in the SELECT statement represents the college identifier, and the COUNT function aggregates the total submissions per college."
train.5830,workshop_paper,Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.,1,SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT College FROM submission WHERE Scores  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT College FROM submission WHERE Scores  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the colleges associated with submissions that have scores both greater than and less than specified numeric thresholds. The placeholders in the query represent the score limits for filtering the submissions.
train.5832,workshop_paper,Show the authors of submissions and the acceptance results of their submissions.,1,"SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID","This virtual table provides the authors of submissions along with the evaluation results from the acceptance process. The data is sourced from the 'acceptance' table, which links to the 'submission' table through the Submission_ID. The placeholder in the SELECT statement allows for the retrieval of specific authors and their corresponding results."
train.5836,workshop_paper,Show each author and the number of workshops they submitted to.,1,"SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",This virtual table summarizes the number of distinct workshops associated with each author based on their submissions. The placeholders in the query allow for dynamic filtering and counting of workshops linked to specific authors.
train.5838,workshop_paper,Show the authors who have submissions to more than one workshop.,1,SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the authors of submissions that have been evaluated in multiple workshops. The placeholder in the HAVING clause represents the minimum number of distinct workshops an author must have submissions evaluated in to be included in the results.
train.5840,workshop_paper,Show the date and venue of each workshop in ascending alphabetical order of the venue.,1,"SELECT Date ,  Venue FROM workshop ORDER BY Venue",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Date ,  Venue FROM workshop ORDER BY Venue","This virtual table provides a list of workshop dates and their corresponding venues from the 'workshop' table, ordered by the venue name. The query retrieves all workshops scheduled, allowing users to see when and where each workshop will take place."
train.5842,workshop_paper,List the authors who do not have submission to any workshop.,1,SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance),This virtual table lists the authors of submissions that have not been evaluated for acceptance in any workshop. The placeholder in the WHERE clause represents the unique identifier for submissions that are excluded from the results.
train.5844,tracking_share_transactions,Find the number of investors in total.,1,SELECT count(*) FROM INVESTORS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM INVESTORS,"This virtual table provides a count of all unique investors from the 'Investors' table. The query uses the COUNT function to aggregate the total number of records in the table, which represents the total number of investors."
train.5846,tracking_share_transactions,Show all distinct lot details.,1,SELECT DISTINCT lot_details FROM LOTS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT lot_details FROM LOTS,This virtual table provides a unique list of details pertaining to lots from the 'Lots' table. The absence of any filtering conditions means it retrieves all distinct lot details available.
train.5847,tracking_share_transactions,Show the maximum amount of transaction.,1,SELECT max(amount_of_transaction) FROM TRANSACTIONS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(amount_of_transaction) FROM TRANSACTIONS,"This virtual table provides the maximum amount of transactions recorded in the 'Transactions' table. The query retrieves the highest monetary value from the 'amount_of_transaction' column, which represents the financial amounts involved in various transactions."
train.5848,tracking_share_transactions,Show all date and share count of transactions.,1,"SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",This virtual table provides the date and share count of transactions recorded in the 'Transactions' table. The placeholders in the SELECT statement can be modified to filter or specify additional criteria as needed.
train.5849,tracking_share_transactions,What is the total share of transactions?,1,SELECT sum(share_count) FROM TRANSACTIONS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(share_count) FROM TRANSACTIONS,"This virtual table summarizes the total number of shares involved in all transactions recorded in the 'Transactions' table. The query uses the SUM function to aggregate the 'share_count' column, providing a single total value for all shares across transactions."
train.5850,tracking_share_transactions,Show all transaction ids with transaction code 'PUR'.,1,SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of transaction IDs from the 'Transactions' table that correspond to a specific type of transaction. The placeholder in the WHERE clause represents the unique code for the transaction type.
train.5852,tracking_share_transactions,"Show the average amount of transactions with type code ""SALE"".",1,SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  'SALE',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average amount of transactions from the 'Transactions' table for a specific type of transaction. The placeholder in the WHERE clause represents the transaction type code.
train.5853,tracking_share_transactions,"Show the description of transaction type with code ""PUR"".",1,SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code	  =  'PUR',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code	  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the transaction type description from the 'Ref_Transaction_Types' table based on a specific transaction type code. The placeholder in the WHERE clause represents the unique code for the transaction type.
train.5854,tracking_share_transactions,"Show the minimum amount of transactions whose type code is ""PUR"" and whose share count is bigger than 50.",1,SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR' AND share_count  >  50,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  [PLACEHOLDER-TYPE:STRING] AND share_count  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the minimum amount of transactions from the 'Transactions' table that match a specific transaction type and have a share count greater than a specified number. The placeholders in the WHERE clause represent the transaction type code and the minimum share count.
train.5855,tracking_share_transactions,Show the maximum share count of transactions where the amount is smaller than 10000,1,SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the maximum number of shares involved in transactions from the 'Transactions' table where the monetary amount of the transaction is less than a specified value. The placeholder in the WHERE clause represents the upper limit for the transaction amount.
train.5856,tracking_share_transactions,Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.,1,SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  [PLACEHOLDER-TYPE:NUMBER] OR amount_of_transaction  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates of transactions from the 'Transactions' table where the number of shares involved exceeds a specified threshold or the monetary amount of the transaction exceeds a specified limit. The placeholders in the WHERE clause represent the numeric values for share count and transaction amount.
train.5857,tracking_share_transactions,Show the transaction type descriptions and dates if the share count is smaller than 10.,1,"SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a description of transaction types along with their corresponding transaction dates from the 'Transactions' table, filtered to show only those transactions where the share count is below a specified threshold. The placeholder in the WHERE clause represents the maximum share count allowed for the transactions displayed."
train.5859,tracking_share_transactions,How many distinct transaction types are used in the transactions?,1,SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS,This virtual table provides the count of distinct transaction types recorded in the 'Transactions' table. The placeholder in the SELECT statement indicates that the result will be a numeric value representing the number of unique transaction types.
train.5860,tracking_share_transactions,Return the lot details and investor ids.,1,"SELECT lot_details ,  investor_id FROM LOTS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT lot_details ,  investor_id FROM LOTS","This virtual table describes the details of lots along with the associated investor identifiers from the 'Lots' table. The placeholder in the SELECT clause represents the specific details of the lot, while the investor_id links each lot to its respective investor."
train.5861,tracking_share_transactions,"Return the lot details of lots that belong to investors with details ""l""?",1,SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  'l',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the details of lots associated with a specific investor from the 'Investors' and 'Lots' tables. The placeholder in the WHERE clause represents the detailed information about the investor.
train.5862,tracking_share_transactions,What are the purchase details of transactions with amount bigger than 10000?,1,SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the purchase details from the 'Purchases' table for transactions where the amount of the transaction exceeds a specified value. The placeholder in the WHERE clause represents the monetary amount involved in the transaction.
train.5863,tracking_share_transactions,What are the sale details and dates of transactions with amount smaller than 3000?,1,"SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides details of sales transactions along with their corresponding transaction dates from the 'Sales' and 'Transactions' tables. The placeholder in the WHERE clause represents a monetary threshold, filtering transactions that have an amount less than the specified value."
train.5868,tracking_share_transactions,Show the average share count of transactions for different investors.,1,"SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id","This virtual table provides the average number of shares involved in transactions for each investor from the 'Transactions' table. The placeholder in the SELECT clause represents the investor's unique identifier, while the average share count is calculated for each investor."
train.5869,tracking_share_transactions,"Show the average share count of transactions each each investor, ordered by average share count.",1,"SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",This virtual table provides the average number of shares involved in transactions for each investor from the 'Transactions' table. The results are grouped by the investor's unique identifier and ordered by the average share count.
train.5870,tracking_share_transactions,Show the average amount of transactions for different investors.,1,"SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id","This virtual table provides the average transaction amount for each investor from the 'Transactions' table. The placeholder in the SELECT statement represents the investor's unique identifier, while the average amount is calculated for all transactions associated with each investor."
train.5871,tracking_share_transactions,Show the average amount of transactions for different lots.,1,"SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id","This virtual table provides the average transaction amount for each lot by joining the 'Transactions' and 'Transactions_Lots' tables. The placeholder in the SELECT statement represents the lot identifier, while the average transaction amount is calculated for each lot based on the associated transactions."
train.5872,tracking_share_transactions,"Show the average amount of transactions for different lots, ordered by average amount of transactions.",1,"SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)","This virtual table provides the average transaction amount for each lot from the 'Transactions' and 'Transactions_Lots' tables. The placeholder in the SELECT statement represents the lot identifier, while the average transaction amount is calculated for each lot, grouped accordingly."
train.5874,tracking_share_transactions,Show the number of transactions for different investors.,1,"SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id","This virtual table summarizes the number of transactions associated with each investor from the 'Transactions' table. The placeholder in the SELECT statement represents the unique identifier for each investor, while the COUNT function aggregates the total number of transactions per investor."
train.5875,tracking_share_transactions,Show the transaction type code that occurs the fewest times.,1,SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the unique transaction types from the 'Transactions' table, grouping them by their transaction type code and ordering them by the count of occurrences in ascending order. The placeholder in the LIMIT clause represents the maximum number of transaction types to return."
train.5877,tracking_share_transactions,Show the description of the transaction type that occurs most frequently.,1,SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of transaction types from the 'Ref_Transaction_Types' table, showing the descriptions of transaction types that are linked to transactions in the 'Transactions' table. The results are grouped by transaction type and ordered by the count of transactions for each type, with a limit on the number of results returned based on a specified number."
train.5878,tracking_share_transactions,Show the id and details of the investor that has the largest number of transactions.,1,"SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of investors along with their details from the 'Investors' table, specifically focusing on those who have made transactions. The results are grouped by investor ID and ordered by the number of transactions in descending order, with a limit set by a placeholder for numeric values."
train.5879,tracking_share_transactions,Show the id and details for the investors who have the top 3 number of transactions.,1,"SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of investors along with their details from the 'Investors' table, specifically focusing on those who have made transactions. The results are grouped by investor ID and ordered by the number of transactions in descending order, with a limit set by a placeholder for numeric values."
train.5880,tracking_share_transactions,Show the ids of the investors who have at least two transactions.,1,SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies investors from the 'Investors' table who have made a minimum number of transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an investor to be included in the results.
train.5881,tracking_share_transactions,"Show the ids and details of the investors who have at least two transactions with type code ""SALE"".",1,"SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  'SALE' GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.investor_id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of investors along with their details from the 'Investors' table who have made a specific type of transaction. The placeholder in the WHERE clause represents the transaction type code, and the HAVING clause ensures that only those investors with a minimum number of transactions are included."
train.5882,tracking_share_transactions,What are the dates of transactions with at least 100 share count or amount bigger than 100?,1,SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  [PLACEHOLDER-TYPE:NUMBER] OR amount_of_transaction  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates of transactions from the 'Transactions' table where the number of shares involved is greater than or equal to a specified value or the monetary amount of the transaction is greater than or equal to a specified value. The placeholders in the WHERE clause represent the minimum share count and the minimum transaction amount.
train.5885,cre_Theme_park,How many available hotels are there in total?,1,SELECT count(*) FROM HOTELS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM HOTELS,"This virtual table provides the total number of hotels recorded in the 'Hotels' table. The query counts all entries in the table, giving a quick overview of the hotel count available."
train.5889,cre_Theme_park,Show all distinct location names.,1,SELECT DISTINCT Location_Name FROM LOCATIONS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Location_Name FROM LOCATIONS,This virtual table provides a list of unique location names from the 'Locations' table. The query uses the DISTINCT keyword to ensure that each location name appears only once in the result set.
train.5891,cre_Theme_park,Show the names and details of all the staff members.,1,"SELECT Name ,  Other_Details FROM Staff",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Name ,  Other_Details FROM Staff",This virtual table provides the names and additional details of staff members associated with various tourist attractions. The placeholders allow for further filtering or modification based on specific criteria related to the staff or attractions.
train.5895,cre_Theme_park,Show the price ranges of hotels with 5 star ratings.,1,SELECT price_range FROM HOTELS WHERE star_rating_code  =  '5',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT price_range FROM HOTELS WHERE star_rating_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the price range of hotels from the 'Hotels' table that are associated with a specific star rating. The placeholder in the WHERE clause represents the star rating code used to filter the results.
train.5899,cre_Theme_park,"What is the address of the location ""UK Gallery""?",1,SELECT Address FROM LOCATIONS WHERE Location_Name  =  'UK Gallery',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Address FROM LOCATIONS WHERE Location_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the physical address of a specific location from the 'Locations' table based on the location's name. The placeholder in the WHERE clause represents the name of the location being queried.
train.5903,cre_Theme_park,"Which location names contain the word ""film""?",1,SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of locations from the 'Locations' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the location names.
train.5905,cre_Theme_park,How many distinct names are associated with all the photos?,1,SELECT count(DISTINCT Name) FROM PHOTOS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Name) FROM PHOTOS,The virtual table counts the distinct names of photos associated with tourist attractions from the 'Photos' table. The result will provide the number of unique photo names available.
train.5907,cre_Theme_park,What are the distinct visit dates?,1,SELECT DISTINCT Visit_Date FROM VISITS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Visit_Date FROM VISITS,"This virtual table provides a list of unique visit dates from the 'Visits' table, which records the dates when tourists visited various attractions. The query uses the DISTINCT keyword to ensure that each date appears only once in the result set."
train.5909,cre_Theme_park,What are the names of the tourist attractions that can be accessed by bus?,1,SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  'bus',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of tourist attractions based on specific directions on how to reach them. The placeholder in the WHERE clause represents the instructions for accessing the attraction.
train.5911,cre_Theme_park,What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?,1,"SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  'bus' OR How_to_Get_There  =  'walk'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING] OR How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and opening hours of tourist attractions based on specific directions to reach them. The placeholders in the WHERE clause represent the different sets of instructions for getting to the attractions.
train.5913,cre_Theme_park,What are the star rating descriptions of the hotels with price above 10000?,1,SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the descriptions of star ratings for hotels that fall within a specified price range. The placeholder in the WHERE clause represents the price range threshold for filtering the hotels.
train.5917,cre_Theme_park,"What is the name of the tourist attraction that is associated with the photo ""game1""?",1,SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  'game1',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of tourist attractions associated with a specific photo from the 'Photos' table. The placeholder in the WHERE clause represents the name of the photo being queried.
train.5919,cre_Theme_park,"What are the names and descriptions of the photos taken at the tourist attraction ""film festival""?",1,"SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  'film festival'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and descriptions of photos associated with a specific tourist attraction. The placeholder in the WHERE clause represents the name of the tourist attraction being queried.
train.5925,cre_Theme_park,"What is the name of the staff that is in charge of the attraction named ""US museum""?",1,SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  'US museum',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of staff members working at a specific tourist attraction. The placeholder in the WHERE clause represents the name of the tourist attraction being queried.
train.5929,cre_Theme_park,What are the visit date and details of the visitor whose detail is 'Vincent'?,1,"SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  'Vincent'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the visit dates and details of visits made by a specific tourist from the 'Visitors' table. The placeholder in the WHERE clause represents the details related to the tourist.
train.5933,cre_Theme_park,What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?,1,"SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' OR T2.Tourist_Details  =  'Vivian'",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING] OR T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names of tourist attractions along with the dates of visits made by specific tourists. The placeholders in the WHERE clause represent the details of the tourists being queried, allowing for filtering based on their specific information."
train.5935,cre_Theme_park,Show the average price of hotels for each star rating code.,1,"SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code","This virtual table summarizes the average price range of hotels categorized by their star rating codes. The placeholder in the SELECT statement represents the star rating code, while the average price range is calculated for each category."
train.5937,cre_Theme_park,Show the average price of hotels for different pet policy.,1,"SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn","This virtual table provides information about hotels, specifically indicating whether pets are allowed and the average price range of hotels grouped by their pet policy. The placeholder in the SELECT clause represents the pet policy status, while the average price range is calculated for each group."
train.5939,cre_Theme_park,"Show the id and star rating of each hotel, ordered by its price from low to high.",1,"SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC","This virtual table provides a list of hotels along with their star rating codes from the 'Hotels' table, sorted by the price range of the hotels in ascending order. The placeholders in the SELECT statement represent the hotel identifier and the star rating code."
train.5947,cre_Theme_park,Show the description and code of the attraction type most tourist attractions belong to.,1,"SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of attraction types and their corresponding codes from the 'Ref_Attraction_Types' and 'Tourist_Attractions' tables. The results are grouped by attraction type code and ordered by the number of attractions of each type, allowing users to see the most popular types of attractions based on a specified limit."
train.5949,cre_Theme_park,Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.,1,"SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There","This virtual table provides a summary of the different ways to reach various tourist attractions, along with the count of attractions associated with each method. The placeholder in the SELECT statement allows for the retrieval of specific instructions on how to get to the attractions, while the COUNT function aggregates the number of attractions for each unique instruction."
train.5953,cre_Theme_park,Show the names and ids of tourist attractions that are visited at least two times.,1,"SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of tourist attractions along with their unique identifiers that have been visited by tourists at least a specified number of times. The placeholder in the HAVING clause represents the minimum visit count required to filter the attractions.
train.5957,cre_Theme_park,What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?,1,SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  [PLACEHOLDER-TYPE:STRING] OR T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of tourist attractions located in a specific area or accessible via specific directions. The placeholders in the WHERE clause represent the address of the location and the instructions on how to get to the attraction.
train.5961,cre_Theme_park,What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?,1,SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '254 Ottilie Junction' OR T2.How_to_Get_There  =  'bus',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  [PLACEHOLDER-TYPE:STRING] OR T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of tourist attractions located in a specific area or accessible via particular directions. The placeholders in the WHERE clause represent the address of the location and the instructions on how to get to the attraction.
train.5966,cre_Theme_park,Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.,1,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Rosalind',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that a specific tourist has visited, excluding those that the same tourist has also visited under a different set of details. The placeholders in the WHERE clause represent the tourist's details."
train.5967,cre_Theme_park,How many tourists did not make any visit?,1,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),"This virtual table provides a count of visitors who have not made any visits to tourist attractions. The placeholder in the subquery represents the Tourist_IDs of those who have visited, allowing for the identification of tourists who are yet to explore any attractions."
train.5969,game_1,How many video games exist?,1,SELECT count(*) FROM Video_games,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Video_games,This virtual table provides the total count of video games available in the 'Video_Games' table. The query uses the COUNT function to aggregate the number of entries in the table.
train.5971,game_1,How many video game types exist?,1,SELECT count(DISTINCT gtype) FROM Video_games,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT gtype) FROM Video_games,This virtual table provides the count of distinct game types available in the 'Video_Games' table. The result will indicate how many unique genres of video games are present.
train.5973,game_1,Show all video game types.,1,SELECT DISTINCT gtype FROM Video_games,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT gtype FROM Video_games,"This virtual table provides a list of distinct game types from the 'Video_Games' table. The query retrieves unique values from the 'GType' column, which represents the genre of the video games available."
train.5975,game_1,Show all video games and their types in the order of their names.,1,"SELECT gname ,  gtype FROM Video_games ORDER BY gname",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT gname ,  gtype FROM Video_games ORDER BY gname","This virtual table provides a list of video games along with their types, sorted by the name of the game. The query retrieves the 'GName' and 'GType' columns from the 'Video_Games' table and orders the results alphabetically by the game name."
train.5979,game_1,What is the type of video game Call of Destiny.,1,SELECT gtype FROM Video_games WHERE gname  =  'Call of Destiny',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT gtype FROM Video_games WHERE gname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the type or genre of a specific video game from the 'Video_Games' table based on its name. The placeholder in the WHERE clause represents the name of the video game.
train.5981,game_1,How many video games have type Massively multiplayer online game?,1,SELECT count(*) FROM Video_games WHERE gtype  =  'Massively multiplayer online game',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Video_games WHERE gtype  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of video games from the 'Video_Games' table that belong to a specific genre. The placeholder in the WHERE clause represents the type of the video game.
train.5983,game_1,Show all video game types and the number of video games in each type.,1,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype","This virtual table summarizes the count of video games grouped by their genre from the 'Video_Games' table. The placeholder in the SELECT clause represents the type of the video game, while the count function aggregates the total number of games for each genre."
train.5987,game_1,Which game type has least number of games?,1,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the types of video games from the 'Video_Games' table, grouping them by their genre. The placeholder in the LIMIT clause represents the maximum number of genres to be displayed."
train.5989,game_1,Show ids for all students who live in CHI.,1,SELECT StuID FROM Student WHERE city_code  =  'CHI',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT StuID FROM Student WHERE city_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the unique identifiers of students from the 'Student' table who reside in a specific city, as indicated by the city code. The placeholder in the WHERE clause represents the city code being queried."
train.5991,game_1,Show ids for all students who have advisor 1121.,1,SELECT StuID FROM Student WHERE Advisor  =  1121,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT StuID FROM Student WHERE Advisor  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the unique identifiers of students from the 'Student' table who have a specific academic advisor. The placeholder in the WHERE clause represents the advisor's identifier.
train.5993,game_1,Show first name for all students with major 600.,1,SELECT Fname FROM Student WHERE Major  =  600,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Fname FROM Student WHERE Major  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the first names of students from the 'Student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major's name.
train.5995,game_1,"Show the average, minimum, and maximum age for different majors.",1,"SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major","This virtual table summarizes the average, minimum, and maximum ages of students grouped by their major from the 'Student' table. The placeholders represent the major field of study for which the statistics are calculated."
train.5997,game_1,Show all advisors who have at least two students.,1,SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic advisors from the 'Student' table who have a minimum number of students assigned to them, as specified by the placeholder. The placeholder in the HAVING clause represents the minimum count of students per advisor."
train.5999,game_1,How many sports do we have?,1,SELECT count(DISTINCT sportname) FROM Sportsinfo,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT sportname) FROM Sportsinfo,This virtual table provides the count of distinct sports that students are involved in from the 'SportsInfo' table. The query uses a placeholder to represent the specific criteria for counting unique sports names.
train.6002,game_1,How many different students are involved in sports?,1,SELECT count(DISTINCT StuID) FROM Sportsinfo,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT StuID) FROM Sportsinfo,"This virtual table provides the count of distinct students from the 'SportsInfo' table, indicating how many unique students are participating in sports activities. The query uses the COUNT function to aggregate the unique student identifiers."
train.6007,game_1,How many games are played for all students?,1,SELECT sum(gamesplayed) FROM Sportsinfo,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(gamesplayed) FROM Sportsinfo,"The virtual table summarizes the total number of games played by students from the 'SportsInfo' table. The query uses an aggregate function to calculate the sum of the 'GamesPlayed' column, which represents the total games played by all students involved in sports."
train.6011,game_1,Show all sport name and the number of students.,1,"SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname","This virtual table summarizes the number of students participating in each sport from the 'SportsInfo' table. The query groups the results by the sport name, allowing for a count of participants in each sport."
train.6015,game_1,Show all student IDs with more than total 10 hours per week on all sports played.,1,SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies students from the 'SportsInfo' table who dedicate a significant amount of time to sports activities. The placeholder in the HAVING clause represents the minimum total hours per week that a student must commit to qualify for this selection.
train.6021,game_1,Show student ids who don't have any sports.,1,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo,This virtual table lists the unique identifiers of students from the 'Student' table who are not participating in any sports activities. The query uses the EXCEPT clause to exclude those students who are found in the 'SportsInfo' table.
train.6030,game_1,What is the total number of hours per work and number of games played by David Shieber?,1,"SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  'David' AND T2.Lname  =  'Shieber'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  [PLACEHOLDER-TYPE:STRING] AND T2.Lname  =  [PLACEHOLDER-TYPE:STRING]","This virtual table summarizes the total hours per week and total games played by students in sports, filtered by the first and last names of the students. The placeholders in the WHERE clause represent the student's first and last names."
train.6032,game_1,What is the total number of hours per week and number of games played by students under 20?,1,"SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total hours per week and total games played by students from the 'SportsInfo' table who are younger than a specified age. The placeholders in the SELECT statement represent the aggregated values for hours and games, while the placeholder in the WHERE clause represents the age limit."
train.6033,game_1,How many students play video games?,1,SELECT count(DISTINCT StuID) FROM Plays_games,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT StuID) FROM Plays_games,"This virtual table provides the count of distinct students who have played video games from the 'Plays_Games' table. The query uses the DISTINCT keyword to ensure that each student is only counted once, regardless of how many games they have played."
train.6035,game_1,Show ids of students who don't play video game.,1,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games,This virtual table identifies students who are not participating in any video games by selecting their unique identifiers from the 'Student' table and excluding those who are found in the 'Plays_Games' table. The result will show only those students who have not played any games.
train.6037,game_1,Show ids of students who play video game and play sports.,1,SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games,This virtual table identifies students who are both participating in sports and playing video games. The intersection of the two sets of student IDs ensures that only those students who are involved in both activities are included.
train.6039,game_1,Show all game ids and the number of hours played.,1,"SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid","This virtual table summarizes the total hours played for each video game by aggregating the data from the 'Plays_Games' table. The placeholder in the SELECT clause represents the unique identifier for each video game, while the sum of hours played is calculated for each game."
train.6041,game_1,Show all student ids and the number of hours played.,1,"SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid","This virtual table summarizes the total hours played by each student from the 'Plays_Games' table. The placeholder in the SELECT clause represents the unique identifier for each student, while the aggregation function calculates the sum of hours played for each student."
train.6043,game_1,Show the game name that has most number of hours played.,1,SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of video games from the 'Video_Games' table that have been played by students, ordered by the total hours played in descending order. The placeholder in the LIMIT clause represents the maximum number of game names to be returned."
train.6045,game_1,Show all game names played by at least 1000 hours.,1,SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of video games from the 'Video_Games' table that have been played for a total of hours equal to or greater than a specified amount. The placeholder in the HAVING clause represents the minimum total hours played across all students.
train.6047,game_1,Show all game names played by Linda Smith,1,SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  'Smith' AND T3.Fname  =  'Linda',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  [PLACEHOLDER-TYPE:STRING] AND T3.Fname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of video games played by a specific student identified by their first and last names. The placeholders in the WHERE clause represent the student's last and first names.
train.6049,game_1,Find the last and first name of students who are playing Football or Lacrosse.,1,"SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  'Football' OR T1.SportName  =  'Lacrosse'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  [PLACEHOLDER-TYPE:STRING] OR T1.SportName  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the last and first names of students from the 'Student' table who are participating in specific sports. The placeholders in the WHERE clause represent the names of the sports being queried.
train.6051,game_1,Find the first name and age of the students who are playing both Football and Lacrosse.,1,"SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  'Lacrosse')",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the first names and ages of students from the 'Student' table who participate in two specific sports. The placeholders in the query represent the names of the sports that the students are involved in.
train.6053,game_1,Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.,1,"SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Works of Widenius')",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  [PLACEHOLDER-TYPE:STRING])","This virtual table describes the last names and genders of students from the 'Student' table who have played a specific video game, identified by its name. The query uses a subquery to find students who have played the specified game, ensuring that only those who meet the criteria are included in the results. The placeholders in the subquery represent the name of the video game."
train.6055,customers_and_addresses,Find the name of all customers.,1,SELECT customer_name FROM customers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_name FROM customers,The virtual table describes the names of customers from the 'Customers' table. This table provides a list of customer names without any filtering conditions.
train.6061,customers_and_addresses,"What are the names of customers who use payment method ""Cash""?",1,SELECT customer_name FROM customers WHERE payment_method  =  'Cash',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_name FROM customers WHERE payment_method  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers from the 'Customers' table who prefer a specific payment method. The placeholder in the WHERE clause represents the payment method used by the customers.
train.6063,customers_and_addresses,"Find the ""date became customers"" of the customers whose ID is between 10 and 20.",1,SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_became_customer FROM customers WHERE customer_id BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the registration dates of customers from the 'Customers' table whose IDs fall within a specified range. The placeholders in the WHERE clause represent the range of customer IDs.
train.6067,customers_and_addresses,What are the names of customers using the most popular payment method?,1,SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"This virtual table provides the names of customers from the 'Customers' table who use the most popular payment method. The placeholder in the subquery represents the limit for the number of payment methods to consider, allowing for flexibility in determining which payment method is the most frequently used."
train.6069,customers_and_addresses,What are all the payment methods?,1,SELECT DISTINCT payment_method FROM customers,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT payment_method FROM customers,"The virtual table describes the distinct payment methods used by customers from the 'Customers' table. The query retrieves unique values from the 'payment_method' column, ensuring that each payment method is listed only once."
train.6073,customers_and_addresses,"Find the name of all customers whose name contains ""Alex"".",1,SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_name FROM customers WHERE customer_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers from the 'Customers' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the customer names.
train.6076,customers_and_addresses,"Which product's detail contains the word ""Latte"" or ""Americano""? Return the full detail.",1,SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT product_details FROM products WHERE product_details LIKE [PLACEHOLDER-TYPE:STRING] OR product_details LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the product details from the 'Products' table that match specific criteria. The placeholders in the WHERE clause represent the patterns to search for in the product details.
train.6077,customers_and_addresses,"What is the address content of the customer named ""Maudie Kertzmann""?",1,SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  'Maudie Kertzmann',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the detailed address content of customers from the 'Customers' table based on a specific customer's name. The placeholders in the JOIN clauses link the relevant tables, and the WHERE clause filters the results to match the specified customer's name."
train.6079,customers_and_addresses,"How many customers are living in city ""Lake Geovannyton""?",1,SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  'Lake Geovannyton',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of customers who have addresses in a specific city. It joins the 'Customers' table with the 'Customer_Addresses' table to link customers to their addresses, and then further joins with the 'Addresses' table to filter by city. The placeholder in the WHERE clause represents the name of the city being queried."
train.6081,customers_and_addresses,Find the name of customers who are living in Colorado?,1,SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'Colorado',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of customers from the 'Customers' table who have addresses in a specific state, province, or county. The placeholders in the WHERE clause represent the state, province, or county name."
train.6083,customers_and_addresses,Find the list of cities that no customer is living in.,1,SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id),"This virtual table lists the cities from the 'Addresses' table that are not associated with any customers. The subquery identifies cities linked to customers through their addresses, and the main query filters out these cities from the results."
train.6089,customers_and_addresses,Find the city with post code 255.,1,SELECT city FROM addresses WHERE zip_postcode  =  255,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT city FROM addresses WHERE zip_postcode  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the city names from the 'Addresses' table that correspond to a specific postal code. The placeholder in the WHERE clause represents the postal code being queried.
train.6091,customers_and_addresses,Find the state and country of all cities with post code starting with 4.,1,"SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE '4%'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides the state, province, or county and the country associated with addresses from the 'Addresses' table that match a specific postal code pattern. The placeholder in the WHERE clause represents the postal code to filter the results."
train.6093,customers_and_addresses,List the countries having more than 4 addresses listed.,1,SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of countries from the 'Addresses' table that have more than a specified number of addresses associated with them. The placeholder in the HAVING clause represents the minimum count of addresses required for a country to be included in the results.
train.6095,customers_and_addresses,List all the contact channel codes that were used less than 5 times.,1,SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of contact channel codes from the 'Customer_Contact_Channels' table that are associated with fewer customers than a specified number. The placeholder in the HAVING clause represents the maximum count of customers for which the channel code should be included.
train.6107,customers_and_addresses,What is the name of the customer that made the order with the largest quantity?,1,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items),This virtual table provides the names of customers who have placed orders containing the maximum quantity of any product. It joins the 'Customers' table with the 'Customer_Orders' and 'Order_Items' tables to filter based on the highest order quantity recorded.
train.6109,customers_and_addresses,What is the name of the customer that has purchased the most items?,1,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have placed orders. It joins the 'Customer_Orders' table to link customers with their orders and the 'Order_Items' table to aggregate the total quantity of items ordered by each customer. The results are grouped by customer name and ordered by the total quantity in descending order, with a limit on the number of results returned based on a specified number."
train.6111,customers_and_addresses,What is the payment method of the customer that has purchased the least quantity of items?,1,SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of payment methods used by customers from the 'Customers' table. It joins the 'Customer_Orders' and 'Order_Items' tables to aggregate the total quantity of items ordered by each customer. The results are grouped by customer name and ordered by the total quantity of items ordered, with a limit on the number of results returned based on a specified number."
train.6113,customers_and_addresses,How many types of products have Rodrick Heaney bought in total?,1,SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  'Rodrick Heaney',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of distinct products ordered by a specific customer from the 'Customers', 'Customer_Orders', and 'Order_Items' tables. The placeholder in the WHERE clause represents the customer's name."
train.6115,customers_and_addresses,"What is the total quantity of products purchased by ""Rodrick Heaney""?",1,SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  'Rodrick Heaney',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total quantity of products ordered by a specific customer from the 'Customers', 'Customer_Orders', and 'Order_Items' tables. The placeholder in the WHERE clause represents the customer's name."
train.6117,customers_and_addresses,"How many customers have at least one order with status ""Cancelled""?",1,SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  'Cancelled',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of unique customers who have placed orders with a specific status from the 'customer_orders' table. The placeholder in the WHERE clause represents the order status being queried.
train.6119,customers_and_addresses,"How many orders have detail ""Second time""?",1,SELECT count(*) FROM customer_orders WHERE order_details  =  'Second time',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM customer_orders WHERE order_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of customer orders from the 'Customer_Orders' table that match a specific order detail description. The placeholder in the WHERE clause represents the details of the order being queried.
train.6121,customers_and_addresses,"Find the customer name and date of the orders that have the status ""Delivered"".",1,"SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  'Delivered'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names of customers along with the dates of their orders from the 'Customers' and 'Customer_Orders' tables. The placeholder in the WHERE clause represents the status of the order, allowing users to filter results based on specific order statuses."
train.6124,customers_and_addresses,"Find the total quantity of products associated with the orders in the ""Cancelled"" status.",1,SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  'Cancelled',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total quantity of products ordered from the 'Customer_Orders' table, filtered by a specific order status. The placeholder in the WHERE clause represents the order status to be specified by the user."
train.6125,customers_and_addresses,Find the total amount of products ordered before 2018-03-17 07:13:53.,1,SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total quantity of products ordered from the 'Customer_Orders' and 'Order_Items' tables for orders placed before a specific date. The placeholder in the WHERE clause represents the cutoff date for the orders.
train.6128,customers_and_addresses,Find the name of the customer who made an order most recently.,1,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have placed orders, sorted by the most recent order date. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to retrieve."
train.6135,customers_and_addresses,Find the name of customers who did not pay with Cash.,1,SELECT customer_name FROM customers WHERE payment_method != 'Cash',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT customer_name FROM customers WHERE payment_method != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of customers from the 'Customers' table who do not use a specific payment method. The placeholder in the WHERE clause represents the payment method that is being excluded.
train.6137,customers_and_addresses,Find the names of customers who never ordered product Latte.,1,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of customers who have not ordered a specific product based on its details. The placeholder in the WHERE clause represents the product specifications that are being filtered out.
train.6139,customers_and_addresses,Find the names of customers who never placed an order.,1,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id,This virtual table lists the names of customers from the 'Customers' table who have not placed any orders. The query uses an EXCEPT clause to exclude customers who are linked to any orders in the 'Customer_Orders' table.
train.6141,customers_and_addresses,Find the names of customers who ordered both products Latte and Americano.,1,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of customers who have ordered a specific product, ensuring that the product details match the specified criteria. The query uses an INTERSECT operation to find customers who have ordered the same product twice, with placeholders representing the product details."
train.6145,music_4,List the age of all music artists.,1,SELECT Age FROM artist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Age FROM artist,"This virtual table provides the ages of artists from the 'artist' table. There are no conditions applied, so it retrieves the age of all artists listed."
train.6147,music_4,What is the average age of all artists?,1,SELECT avg(Age) FROM artist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Age) FROM artist,This virtual table calculates the average age of artists from the 'artist' table. The result provides insight into the general age demographic of the artists represented in the database.
train.6149,music_4,"What are the famous titles of the artist ""Triumfall""?",1,SELECT Famous_Title FROM artist WHERE Artist  =  'Triumfall',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Famous_Title FROM artist WHERE Artist  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the most recognized song title by a specific artist from the 'artist' table. The placeholder in the WHERE clause represents the name of the artist.
train.6151,music_4,What are the distinct Famous release dates?,1,SELECT distinct(Famous_Release_date) FROM artist,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT distinct(Famous_Release_date) FROM artist,"This virtual table provides a list of unique release dates for the most recognized songs by various artists from the 'artist' table. The query uses the DISTINCT keyword to ensure that each release date is only listed once, regardless of how many artists share the same release date."
train.6157,music_4,What are the maximum and minimum week on top of all volumes?,1,"SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",This virtual table provides the maximum and minimum number of weeks that songs have stayed at the top from the 'volume' table. The placeholders in the SELECT statement allow for potential filtering or additional calculations if needed.
train.6159,music_4,What are the songs in volumes with more than 1 week on top?,1,SELECT Song FROM volume WHERE Weeks_on_Top  >  1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Song FROM volume WHERE Weeks_on_Top  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the songs from the 'volume' table that have spent more than a specified number of weeks at the top of the charts. The placeholder in the WHERE clause represents the minimum number of weeks the song has been at the top.
train.6161,music_4,Please list all songs in volumes in ascending alphabetical order.,1,SELECT Song FROM volume ORDER BY Song,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Song FROM volume ORDER BY Song,"This virtual table lists the identifiers of songs from the 'volume' table, ordered by the song identifier. The placeholder in the ORDER BY clause allows for dynamic sorting based on the song identifier."
train.6163,music_4,How many distinct artists do the volumes associate to?,1,SELECT COUNT(DISTINCT Artist_ID) FROM volume,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(DISTINCT Artist_ID) FROM volume,This virtual table provides the count of distinct artists who have had their songs featured in various volumes. The placeholder in the SELECT statement allows for the dynamic retrieval of the number of unique artists based on the data in the 'volume' table.
train.6166,music_4,What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?,1,SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates of ceremonies from the 'music_festival' table for volumes that have songs which stayed at the top for a specified number of weeks. The placeholder in the WHERE clause represents the minimum number of weeks a song must have been on top to be included in the results.
train.6168,music_4,What are the songs in volumes that have resulted in a nomination at music festivals?,1,SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  'Nominated',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the songs associated with music festivals where the outcome of the festival participation is specified. The placeholder in the WHERE clause represents the result of the festival participation.
train.6169,music_4,"What are the issue dates of volumes associated with the artist ""Gorgoroth""?",1,SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  'Gorgoroth',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the issue dates of volumes associated with a specific artist from the 'artist' and 'volume' tables. The placeholder in the WHERE clause represents the name of the artist.
train.6171,music_4,What are the songs in volumes associated with the artist aged 32 or older?,1,SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table retrieves the song identifiers from the 'volume' table for artists who are of a certain age or older. The placeholder in the WHERE clause represents the minimum age of the artists.
train.6173,music_4,What is the average weeks on top of volumes associated with the artist aged 25 or younger?,1,SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average number of weeks that songs by artists aged below or equal to a specific age have spent at the top of the charts. The placeholder in the WHERE clause represents the age limit for filtering the artists.
train.6175,music_4,What are the famous title of the artists associated with volumes with more than 2 weeks on top?,1,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the famous titles of songs by artists who have had a significant number of weeks at the top of the charts. The placeholder in the WHERE clause represents the minimum number of weeks the song must have stayed at the top.
train.6177,music_4,Please list the age and famous title of artists in descending order of age.,1,"SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC","This virtual table provides the famous titles and ages of artists from the 'artist' table, sorted in descending order by age. The query retrieves the relevant columns and organizes the results based on the age of the artists."
train.6179,music_4,What is the famous release date of the artist with the oldest age?,1,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the release dates of the most recognized songs by artists from the 'artist' table, ordered by the age of the artists in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.6181,music_4,Please show the categories of the music festivals and the count.,1,"SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category","This virtual table summarizes the number of music festivals by category from the 'music_festival' table. The query groups the results by the 'Category' column, allowing users to see how many festivals fall under each category."
train.6186,music_4,What are the categories of music festivals for which there have been more than 1 music festival?,1,SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the categories of music festivals from the 'music_festival' table that have received a number of entries exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of entries required for a category to be included in the results.
train.6189,music_4,Find the famous titles of artists that do not have any volume.,1,SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume),"This virtual table lists the famous titles of artists from the 'artist' table who have not been featured in any volume. The subquery checks for artists that are linked to the 'volume' table, ensuring that only those without any associated volume entries are selected."
train.6192,music_4,What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?,1,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the famous titles of songs by artists who have had varying success on the charts. It retrieves titles of songs that have spent more than a specified number of weeks at the top of the charts and also those that have spent less than another specified number of weeks. The placeholders in the WHERE clause represent the numeric values for the weeks spent at the top.
train.6193,music_4,"What are the date of ceremony of music festivals with category ""Best Song"" and result ""Awarded""?",1,SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Date_of_ceremony FROM music_festival WHERE Category  =  [PLACEHOLDER-TYPE:STRING] AND RESULT  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the dates of ceremonies from the 'music_festival' table for a specific category and result. The placeholders in the WHERE clause represent the category of the award and the outcome of the festival participation.
train.6196,music_4,Return the issue date of the volume that has spent the fewest weeks on top.,1,SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of issue release dates from the 'volume' table, ordered by the number of weeks the associated song stayed at the top, allowing users to retrieve a specified number of results. The placeholder in the LIMIT clause represents the maximum number of issue dates to return."
train.6201,music_4,What are the issue dates of volumes associated with the artist aged 23 or younger?,1,SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the release dates of issues from the 'volume' table for artists from the 'artist' table who are of a certain age or younger. The placeholder in the WHERE clause represents the maximum age of the artists being queried.
train.6203,roller_coaster,How many roller coasters are there?,1,SELECT count(*) FROM roller_coaster,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM roller_coaster,"This virtual table provides the total count of roller coasters from the 'roller_coaster' table. It does not filter or group the data, thus giving a simple aggregate count of all entries in the table."
train.6204,roller_coaster,List the names of roller coasters by ascending order of length.,1,SELECT Name FROM roller_coaster ORDER BY LENGTH ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM roller_coaster ORDER BY LENGTH ASC,"This virtual table lists the names of roller coasters from the 'roller_coaster' table, sorted by their track length in ascending order. The query retrieves the names of the roller coasters without any filtering, allowing users to see all available roller coasters sorted by their length."
train.6206,roller_coaster,"List the names of countries whose language is not ""German"".",1,SELECT Name FROM country WHERE Languages != 'German',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM country WHERE Languages != [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of countries from the 'country' table that have a different number of official languages than a specified value. The placeholder in the WHERE clause represents the number of languages.
train.6207,roller_coaster,Show the statuses of roller coasters longer than 3300 or higher than 100.,1,SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Status FROM roller_coaster WHERE LENGTH  >  [PLACEHOLDER-TYPE:NUMBER] OR Height  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the operational status of roller coasters from the 'roller_coaster' table that exceed a specified length or height. The placeholders in the WHERE clause represent the minimum length and height criteria for filtering the roller coasters.
train.6208,roller_coaster,What are the speeds of the longest roller coaster?,1,SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the maximum speed of roller coasters from the 'roller_coaster' table, sorted by the length of the roller coaster track in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.6209,roller_coaster,What is the average speed of roller coasters?,1,SELECT avg(Speed) FROM roller_coaster,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Speed) FROM roller_coaster,This virtual table calculates the average speed of roller coasters from the 'roller_coaster' table. The result provides insight into the overall performance of roller coasters in terms of speed.
train.6210,roller_coaster,Show the different statuses and the numbers of roller coasters for each status.,1,"SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status","This virtual table summarizes the operational status of roller coasters from the 'roller_coaster' table, providing a count of how many roller coasters fall under each status category. The result will show the different statuses along with the corresponding number of roller coasters for each status."
train.6212,roller_coaster,List the status shared by more than two roller coaster.,1,SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the operational statuses of roller coasters from the 'roller_coaster' table, grouped by their status. The placeholder in the HAVING clause represents the minimum count of roller coasters required for each status to be included in the results."
train.6213,roller_coaster,Show the park of the roller coaster with the highest speed.,1,SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the amusement parks that feature roller coasters, sorted by the maximum speed of the roller coasters in descending order. The placeholder in the LIMIT clause represents the maximum number of parks to be displayed."
train.6214,roller_coaster,Show the names of roller coasters and names of country they are in.,1,"SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID","This virtual table describes the names of countries and their corresponding roller coasters from the 'country' and 'roller_coaster' tables. The join operation links the two tables based on the country identifier, allowing for a comprehensive view of roller coasters by their respective countries."
train.6215,roller_coaster,Show the names of countries that have more than one roller coaster.,1,SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of countries that have more than a specified number of roller coasters. It combines data from the 'country' table and the 'roller_coaster' table, using the country identifier to link them. The placeholder in the HAVING clause represents the minimum count of roller coasters required for a country to be included in the results."
train.6216,roller_coaster,Show the name and population of the country that has the highest roller coaster.,1,"SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of countries along with their populations, specifically for countries that have roller coasters. The data is sourced from the 'country' table and is joined with the 'roller_coaster' table based on the country identifier. The results are ordered by the height of the roller coasters in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.6217,roller_coaster,Show the names of countries and the average speed of roller coasters from each country.,1,"SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name","This virtual table provides the average speed of roller coasters grouped by the name of the country from the 'country' table. The placeholder in the SELECT statement represents the country names, while the average speed is calculated from the 'roller_coaster' table."
train.6218,roller_coaster,How many countries do not have an roller coaster longer than 3000?,1,SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 ),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  [PLACEHOLDER-TYPE:NUMBER] ),This virtual table provides the count of countries from the 'country' table that do not have any roller coasters exceeding a specified length. The placeholder in the subquery represents the length threshold for filtering roller coasters.
train.6220,ship_1,How many different captain ranks are there?,1,SELECT count(DISTINCT rank) FROM captain,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT rank) FROM captain,"This virtual table provides the count of distinct ranks held by captains in the 'captain' table. The query uses the DISTINCT keyword to ensure that each rank is only counted once, regardless of how many captains hold that rank."
train.6222,ship_1,How many captains are in each rank?,1,"SELECT count(*) ,  rank FROM captain GROUP BY rank",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  rank FROM captain GROUP BY rank",This virtual table provides a count of captains grouped by their rank from the 'captain' table. The placeholder in the SELECT clause represents the rank of the captains.
train.6224,ship_1,How many captains with younger than 50 are in each rank?,1,"SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  rank FROM captain WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY rank","This virtual table provides a count of captains grouped by their rank from the 'captain' table, specifically for those captains who are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the captains."
train.6226,ship_1,Sort all captain names by their ages from old to young.,1,SELECT name FROM captain ORDER BY age DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM captain ORDER BY age DESC,"This virtual table lists the names of captains from the 'captain' table, ordered by their age in descending order. This allows users to see the captains ranked from oldest to youngest."
train.6232,ship_1,Which classes have more than two captains?,1,SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the classes of captains from the 'captain' table, grouping them by class designation. The placeholder in the HAVING clause represents the minimum count of captains required in each class for it to be included in the results."
train.6234,ship_1,Find the name of captains whose rank are either Midshipman or Lieutenant.,1,SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM captain WHERE rank  =  [PLACEHOLDER-TYPE:STRING] OR rank  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of captains from the 'captain' table who hold a specific rank or another specified rank. The placeholders in the WHERE clause represent the ranks of the captains.
train.6242,ship_1,What is the name of the youngest captain?,1,SELECT name FROM captain ORDER BY age LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM captain ORDER BY age LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of captains from the 'captain' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of captain names to retrieve."
train.6248,ship_1,"Group by ships by flag, and return number of ships that have each flag.",1,"SELECT count(*) ,  flag FROM ship GROUP BY flag",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  flag FROM ship GROUP BY flag","This virtual table provides a count of ships grouped by their registration flag from the 'Ship' table. The placeholder in the SELECT clause represents the count of ships, while the 'flag' column indicates the country under which the ships are registered."
train.6251,ship_1,Return the flag that is most common among all ships.,1,SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of ship flags from the 'Ship' table, grouped by the flag type and ordered by the number of ships registered under each flag. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
train.6252,ship_1,List all ship names in the order of built year and class.,1,"SELECT name FROM ship ORDER BY built_year ,  CLASS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name FROM ship ORDER BY built_year ,  CLASS","This virtual table lists the names of ships from the 'Ship' table, ordered by the year they were built and their class designation. The ordering criteria help in understanding the chronological development and classification of the ships."
train.6254,ship_1,Find the ship type that are used by both ships with Panama and Malta flags.,1,SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT TYPE FROM ship WHERE flag  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT TYPE FROM ship WHERE flag  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the types of ships that are registered under two specific country flags. The placeholders in the WHERE clause represent the names of the flags being compared.
train.6258,ship_1,Find the name of the ships that have more than one captain.,1,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the names of ships from the 'Ship' table that have more than a specified number of captains associated with them. The placeholder in the HAVING clause represents the minimum count of captains required for a ship to be included in the results.
train.6262,ship_1,Find the name of the ship that is steered by the youngest captain.,1,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of ships from the 'Ship' table, along with a join to the 'captain' table to associate each ship with its captain. The results are ordered by the age of the captains, and the number of results returned is limited by a placeholder for numeric values."
train.6266,ship_1,Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.,1,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of ships commanded by captains who hold a specific rank. The query uses an INTERSECT operation to find ships that are commanded by captains of the same specified rank, ensuring that only those ships are returned. The placeholders in the WHERE clause represent the rank of the captains."
train.6268,city_record,What is id of the city that hosted events in the most recent year?,1,SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of host cities from the 'hosting_city' table, ordered by the year in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.6270,city_record,"Find the match ids of the cities that hosted competition ""1994 FIFA World Cup qualification""?",1,SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT match_id FROM MATCH WHERE competition = [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of matches from the 'match' table that are part of a specific competition. The placeholder in the WHERE clause represents the competition's identifier.
train.6272,city_record,Find the cities which were once a host city after 2010?,1,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the cities that hosted matches in a specific year or later. The placeholder in the WHERE clause represents the year from which we want to find the hosting cities.
train.6277,city_record,"Find the venue of the competition ""1994 FIFA World Cup qualification"" which was hosted by ""Nanjing ( Jiangsu )"".",1,SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu )' AND T3.competition = '1994 FIFA World Cup qualification',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = [PLACEHOLDER-TYPE:STRING] AND T3.competition = [PLACEHOLDER-TYPE:STRING],This virtual table provides the venue information for matches hosted in a specific city during a particular competition. The placeholders in the WHERE clause represent the city's name and the competition's identifier.
train.6278,city_record,Give me the temperature of Shanghai in January.,1,SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = [PLACEHOLDER-TYPE:STRING],This virtual table provides the average temperature in January for a specific city from the 'city' and 'temperature' tables. The placeholder in the WHERE clause represents the name of the city for which the temperature data is being queried.
train.6280,city_record,"What is the host year of city ""Taizhou ( Zhejiang )""?",1,SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  'Taizhou ( Zhejiang )',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the years in which matches were hosted in a specific city. The query joins the 'city' table with the 'hosting_city' table to filter the results based on the city's name provided as a placeholder.
train.6284,city_record,Which city has the lowest GDP? Please list the city name and its GDP.,1,"SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT city ,  GDP FROM city ORDER BY GDP LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of cities along with their Gross Domestic Product (GDP) from the 'city' table, ordered by GDP in ascending order. The placeholder in the LIMIT clause indicates the maximum number of cities to be returned."
train.6294,city_record,Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?,1,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"This virtual table provides a list of cities based on specific temperature conditions and hosting events. It includes cities where the average temperature in February is greater than in June, and also lists cities that have hosted matches. The placeholders in the query represent the necessary identifiers for the cities and their temperature data."
train.6296,city_record,Please give me a list of cities whose regional population is over 10000000.,1,SELECT city FROM city WHERE regional_population  >  10000000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT city FROM city WHERE regional_population  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of cities from the 'city' table that have a regional population exceeding a specified number. The placeholder in the WHERE clause represents the population threshold.
train.6300,city_record,Find the number of matches in different competitions.,1,"SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition","This virtual table summarizes the number of matches held for each competition from the 'match' table. The placeholder in the SELECT clause represents the count of matches, while the GROUP BY clause organizes the results by competition."
train.6302,city_record,List venues of all matches in the order of their dates starting from the most recent one.,1,SELECT venue FROM MATCH ORDER BY date DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT venue FROM MATCH ORDER BY date DESC,"This virtual table provides a list of venues from the 'match' table, ordered by the date of the matches in descending order. The query retrieves the venue identifiers for all matches, allowing users to see the most recent matches first."
train.6304,city_record,what is the GDP of the city with the largest population.,1,SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the GDP values of cities from the 'city' table, ordered by their regional population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned."
train.6306,city_record,What are the GDP and population of the city that already served as a host more than once?,1,"SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the GDP and regional population of cities that have hosted a certain number of matches. The placeholder in the HAVING clause represents the minimum count of matches that must have been hosted in the city.
train.6308,e_government,"List every individual's first name, middle name and last name in alphabetical order by last name.",1,"SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name","This virtual table describes the first, middle, and last names of individuals from the 'Individuals' table, sorted by their last names. The query retrieves the names of all individuals, allowing for easy identification and organization based on their last names."
train.6310,e_government,List all the types of forms.,1,SELECT DISTINCT form_type_code FROM forms,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT form_type_code FROM forms,"This virtual table provides a list of unique form type codes from the 'Forms' table. The placeholder in the SELECT statement allows for the retrieval of distinct values for the form type code, which can be useful for understanding the different types of forms available."
train.6312,e_government,Find the name of the most popular party form.,1,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of form names from the 'Forms' table that are associated with parties through the 'Party_Forms' table. The results are grouped by form ID and ordered by the count of associations in descending order, allowing users to see the most frequently used forms. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.6314,e_government,"Find the payment method and phone of the party with email ""enrico09@example.com"".",1,"SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  'enrico09@example.com'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the payment method code and phone number of parties from the 'Parties' table who have a specific email address. The placeholder in the WHERE clause represents the party's email address.
train.6316,e_government,Find the emails of parties with the most popular party form.,1,SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"This virtual table retrieves the email addresses of parties from the 'Parties' table who have completed a specific form. The query joins the 'Parties' table with the 'Party_Forms' table to filter based on the form ID, which is determined by selecting the most frequently completed form. The placeholder in the LIMIT clause allows for specifying how many of the most completed forms to consider."
train.6318,e_government,List all the name of organizations in order of the date formed.,1,SELECT organization_name FROM organizations ORDER BY date_formed ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT organization_name FROM organizations ORDER BY date_formed ASC,"This virtual table lists the names of organizations from the 'Organizations' table, ordered by the date they were formed, from the earliest to the most recent. The query retrieves the 'organization_name' column and sorts the results based on the 'date_formed' column."
train.6320,e_government,Find the name of the youngest organization.,1,SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of organizations from the 'Organizations' table, ordered by the date they were formed in descending order. The placeholder in the LIMIT clause represents the maximum number of organization names to retrieve."
train.6322,e_government,"Find the last name of the latest contact individual of the organization ""Labour Party"".",1,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY t2.date_contact_to DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the last names of individuals who have contacted a specific organization. The organization is identified by its name, and the results are ordered by the end date of the contact period, with a limit on the number of results returned."
train.6325,e_government,What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?,1,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table retrieves the last names of individuals who have contacted the organization with the highest VAT registration number. The results are ordered by the end date of the contact period, and a placeholder is included to limit the number of results returned."
train.6332,e_government,"How many cities are there in state ""Colorado""?",1,SELECT count(*) FROM addresses WHERE state_province_county  =  'Colorado',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM addresses WHERE state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of addresses from the 'Addresses' table that are located in a specific state, province, or county. The placeholder in the WHERE clause represents the name of the state, province, or county being queried."
train.6334,e_government,Find the payment method code used by more than 3 parties.,1,SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique payment method codes used by parties in the 'Parties' table, filtered to include only those payment methods that have been used more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of occurrences for the payment method codes."
train.6336,e_government,"Find the name of organizations whose names contain ""Party"".",1,SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT organization_name FROM organizations WHERE organization_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of organizations from the 'Organizations' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the organization names.
train.6338,e_government,How many distinct payment methods are used by parties?,1,SELECT count(DISTINCT payment_method_code) FROM parties,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT payment_method_code) FROM parties,This virtual table provides the count of distinct payment methods used by parties in the 'Parties' table. The placeholder in the SELECT statement allows for the retrieval of unique payment method codes.
train.6340,e_government,Which is the email of the party that has used the services the most number of times?,1,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique party emails from the 'Parties' table that have booked services, along with a count of how many services each email is associated with. The results are grouped by email and ordered by the number of services in descending order, with a limit on the number of results returned based on a specified number."
train.6344,e_government,What is the name of organization that has the greatest number of contact individuals?,1,SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of organizations from the 'Organizations' table that have been contacted by individuals. The results are grouped by organization name and ordered by the number of contacts in descending order, with a limit on the number of organizations returned based on a specified number."
train.6347,e_government,What are the last names of individuals who have been contact individuals for an organization?,1,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,"This virtual table provides a list of unique last names of individuals who have contacted organizations. It combines data from the 'Individuals' table and the 'Organization_Contact_Individuals' table, ensuring that only distinct last names are displayed."
train.6348,school_bus,How many drivers are there?,1,SELECT count(*) FROM driver,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM driver,"This virtual table provides a count of all drivers from the 'driver' table. It does not filter or group the results, thus returning the total number of drivers present in the database."
train.6349,school_bus,"Show the name, home city, and age for all drivers.",1,"SELECT name ,  home_city ,  age FROM driver",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  home_city ,  age FROM driver","This virtual table describes the names, home cities, and ages of drivers from the 'driver' table. The query retrieves information about all drivers without any filtering conditions."
train.6350,school_bus,Show the party and the number of drivers in each party.,1,"SELECT party ,  count(*) FROM driver GROUP BY party",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT party ,  count(*) FROM driver GROUP BY party","This virtual table summarizes the number of drivers affiliated with each political party from the 'driver' table. The query groups the results by the 'party' column, allowing for a count of drivers per party affiliation."
train.6351,school_bus,Show the name of drivers in descending order of age.,1,SELECT name FROM driver ORDER BY age DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM driver ORDER BY age DESC,"This virtual table provides a list of driver names from the 'driver' table, sorted by their age in descending order. The query retrieves the names of all drivers, allowing users to see who the oldest drivers are at a glance."
train.6352,school_bus,Show all different home cities.,1,SELECT DISTINCT home_city FROM driver,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT home_city FROM driver,"This virtual table provides a list of unique home cities of drivers from the 'driver' table. The query uses the DISTINCT keyword to ensure that each city is only listed once, regardless of how many drivers reside there."
train.6355,school_bus,Show home city where at least two drivers older than 40 are from.,1,SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT home_city FROM driver WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY home_city HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique home cities of drivers from the 'driver' table who are older than a specified age. The results are grouped by home city, and only those cities with a certain minimum number of drivers are included, as indicated by the placeholders in the HAVING clause."
train.6357,school_bus,Show the names of the drivers without a school bus.,1,SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus),"This virtual table lists the names of drivers from the 'driver' table who are not currently assigned to any school bus. The placeholder in the WHERE clause represents the unique identifier of the driver, ensuring that only those drivers without a corresponding entry in the 'school_bus' table are selected."
train.6359,school_bus,Show the school name and driver name for all school buses.,1,"SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id","This virtual table provides a list of schools along with the names of the drivers associated with the school buses. It combines data from the 'school', 'driver', and 'school_bus' tables, linking them through their respective identifiers."
train.6360,school_bus,"What is the maximum, minimum and average years spent working on a school bus?",1,"SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus","This virtual table provides statistical information about the years drivers have worked with school buses. It calculates the maximum, minimum, and average years of service from the 'school_bus' table, which links drivers to schools."
train.6363,school_bus,How many drivers are from Hartford city or younger than 40?,1,SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM driver WHERE home_city  =  [PLACEHOLDER-TYPE:STRING] OR age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a count of drivers from the 'driver' table who either reside in a specific home city or are younger than a specified age. The placeholders in the WHERE clause represent the home city name and the age limit.
train.6364,school_bus,List names for drivers from Hartford city and younger than 40.,1,SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM driver WHERE home_city  =  [PLACEHOLDER-TYPE:STRING] AND age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of drivers from the 'driver' table who reside in a specific home city and are younger than a specified age. The placeholders in the WHERE clause represent the home city and the age limit.
train.6365,school_bus,find the name of driver who is driving the school bus with the longest working history.,1,SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of driver names from the 'driver' table who are associated with school buses, ordered by their years of service in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of driver names to return."
train.6366,flight_company,How many flights have a velocity larger than 200?,1,SELECT count(*) FROM flight WHERE velocity  >  200,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM flight WHERE velocity  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of flights from the 'flight' table where the speed of the flight exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum velocity value to filter the results.
train.6367,flight_company,"List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",1,"SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC","This virtual table provides a list of flight details, specifically the flight number, scheduled date, and pilot's name from the 'flight' table. The results are ordered by the altitude of the flights in ascending order."
train.6368,flight_company,"List the id, country, city and name of the airports ordered alphabetically by the name.",1,"SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT id ,  country ,  city ,  name FROM airport ORDER BY name","This virtual table provides a list of airports, displaying their unique identifiers, the country they are located in, the city they serve, and their official names. The results are ordered by the airport names for easier reference."
train.6369,flight_company,What is maximum group equity shareholding of the companies?,1,SELECT max(group_equity_shareholding) FROM operate_company,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(group_equity_shareholding) FROM operate_company,This virtual table provides the maximum percentage of equity shareholding among operating companies from the 'operate_company' table. The placeholder in the SELECT clause represents the maximum value of the equity shareholding.
train.6372,flight_company,What are the names of the airports which are not in the country 'Iceland'?,1,SELECT name FROM airport WHERE country != 'Iceland',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM airport WHERE country != [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of airports from the 'airport' table that are located in countries other than a specified country. The placeholder in the WHERE clause represents the name of the country to exclude.
train.6373,flight_company,What are the distinct types of the companies that have operated any flights with velocity less than 200?,1,SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of distinct types of operating companies that manage flights with a velocity below a specified threshold. The placeholder in the WHERE clause represents the maximum velocity limit for filtering the results.
train.6374,flight_company,What are the ids and names of the companies that operated more than one flight?,1,"SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of operating companies along with their unique identifiers that have conducted more than a specified number of flights. The placeholder in the HAVING clause represents the minimum number of flights that an operating company must have to be included in the results.
train.6376,flight_company,What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?,1,SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct pilots who operate flights from airports located in a specific country or with a specific name. The placeholders in the WHERE clause represent the country and airport name criteria for filtering the results.
train.6378,flight_company,How many airports haven't the pilot 'Thompson' driven an aircraft?,1,SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  [PLACEHOLDER-TYPE:STRING] );,This virtual table provides the count of airports that have not been used for any flights operated by a specific pilot. The placeholder in the WHERE clause represents the name of the pilot.
train.6380,flight_company,Which of the airport names contains the word 'international'?,1,SELECT name FROM airport WHERE name LIKE '%international%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM airport WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of airports from the 'airport' table that match a specific pattern. The placeholder in the WHERE clause represents a part of the airport's name that the user wants to search for.
train.6382,flight_company,how many airports are there in each country?,1,"SELECT count(*) ,  country FROM airport GROUP BY country",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  country FROM airport GROUP BY country",This virtual table provides a count of airports grouped by their respective countries. The placeholder in the SELECT statement represents the total number of airports in each country.
train.6383,flight_company,which countries have more than 2 airports?,1,SELECT country FROM airport GROUP BY country HAVING count(*)  >  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT country FROM airport GROUP BY country HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of countries that have more than a specified number of airports. The placeholder in the HAVING clause represents the minimum count of airports required for a country to be included in the results.
train.6387,cre_Docs_and_Epenses,Show all account ids and account details.,1,"SELECT account_id ,  account_details FROM Accounts",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT account_id ,  account_details FROM Accounts",This virtual table describes the account IDs and their corresponding details from the 'Accounts' table. The placeholder in the SELECT clause represents the account's unique identifier and its associated information.
train.6389,cre_Docs_and_Epenses,How many statements do we have?,1,SELECT count(*) FROM Statements,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Statements,This virtual table provides a count of all statements recorded in the 'Statements' table. The query uses the count function to aggregate the total number of entries without filtering by any specific criteria.
train.6393,cre_Docs_and_Epenses,"Show statement id, statement detail, account detail for accounts.",1,"SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id","This virtual table presents the statement IDs, details of the statements, and account details from the 'Accounts' and 'Statements' tables. The join condition links accounts to their corresponding statements using the statement ID."
train.6397,cre_Docs_and_Epenses,Show the statement id and the statement detail for the statement with most number of accounts.,1,"SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of statements linked to accounts, displaying the statement ID and details. The results are grouped by statement ID and ordered by the count of associated accounts in descending order, with a limit on the number of results specified by a placeholder for numeric values."
train.6399,cre_Docs_and_Epenses,Show the number of documents.,1,SELECT count(*) FROM Documents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Documents,This virtual table provides a count of all documents recorded in the 'Documents' table. It serves to give an overview of the total number of documents without specifying any particular criteria.
train.6401,cre_Docs_and_Epenses,"List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",1,"SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  [PLACEHOLDER-TYPE:STRING] OR document_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides information about documents from the 'Documents' table, specifically the document type code, name, and description. The placeholders in the WHERE clause allow for filtering the results based on specific document names, enabling users to retrieve details for one or more documents of interest."
train.6403,cre_Docs_and_Epenses,Show the ids and names of all documents.,1,"SELECT document_id ,  document_name FROM Documents",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT document_id ,  document_name FROM Documents","This virtual table describes the unique identifiers and names of documents from the 'Documents' table. The query retrieves the 'document_id' and 'document_name' columns, which provide essential information about each document stored in the database."
train.6405,cre_Docs_and_Epenses,Find names and ids of all documents with document type code BK.,1,"SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  'BK'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and unique identifiers of documents from the 'Documents' table that correspond to a specific type of document. The placeholder in the WHERE clause represents the document type code.
train.6407,cre_Docs_and_Epenses,How many documents are with document type code BK for each product id?,1,"SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  'BK' GROUP BY project_id",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY project_id","This virtual table provides a count of documents grouped by project ID from the 'Documents' table, filtered by a specific document type. The placeholder in the WHERE clause represents the document type code."
train.6409,cre_Docs_and_Epenses,Show the document name and the document date for all documents on project with details 'Graph Database project'.,1,"SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and creation dates of documents from the 'Documents' table that are associated with a specific project. The placeholder in the WHERE clause represents the details of the project.
train.6411,cre_Docs_and_Epenses,Show project ids and the number of documents in each project.,1,"SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT project_id ,  count(*) FROM Documents GROUP BY project_id","This virtual table summarizes the number of documents associated with each project from the 'Documents' table. The placeholder in the SELECT clause represents the project identifier, and the count function aggregates the total number of documents per project."
train.6413,cre_Docs_and_Epenses,What is the id of the project with least number of documents?,1,SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of project IDs from the 'Documents' table, grouped by project ID and ordered by the count of documents associated with each project in ascending order. The placeholder in the LIMIT clause represents the maximum number of project IDs to return."
train.6415,cre_Docs_and_Epenses,Show the ids for projects with at least 2 documents.,1,SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique project identifiers from the 'Documents' table that have a specified minimum number of associated documents. The placeholder in the HAVING clause represents the minimum count of documents required for each project.
train.6417,cre_Docs_and_Epenses,List document type codes and the number of documents in each code.,1,"SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code","This virtual table summarizes the count of documents grouped by their type from the 'Documents' table. The placeholder in the SELECT clause represents the document type code, which is used to categorize the documents."
train.6419,cre_Docs_and_Epenses,What is the document type code with most number of documents?,1,SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of document type codes from the 'Documents' table, grouped by the document type code. The results are ordered by the count of documents for each type in descending order, allowing users to see the most common document types. The placeholder in the LIMIT clause represents the maximum number of document types to return."
train.6421,cre_Docs_and_Epenses,Show the document type code with fewer than 3 documents.,1,SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of document type codes from the 'Documents' table that have been created or received fewer times than a specified threshold. The placeholder in the HAVING clause represents the maximum count of documents for each type that is allowed.
train.6423,cre_Docs_and_Epenses,Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,1,"SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  [PLACEHOLDER-TYPE:STRING]",This virtual table presents the details of statements along with the corresponding document names from the 'Statements' and 'Documents' tables. The placeholder in the WHERE clause represents the specific details of the statement being queried.
train.6425,cre_Docs_and_Epenses,"Show all document type codes, document type names, document type descriptions.",1,"SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types","This virtual table describes the document type codes, names, and descriptions from the 'Ref_Document_Types' table. The placeholders represent the specific values for filtering or displaying document types."
train.6427,cre_Docs_and_Epenses,What is the document type description for document type named Film?,1,SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  'Film',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the document type description from the 'Ref_Document_Types' table for a specific document type name. The placeholder in the WHERE clause represents the name of the document type.
train.6429,cre_Docs_and_Epenses,What is the document type name and the document type description and creation date for all the documents?,1,"SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",This virtual table provides the names and descriptions of document types along with the corresponding document creation dates from the 'Ref_Document_Types' and 'Documents' tables. The placeholders in the JOIN clause represent the relationship between document types and documents based on their unique codes.
train.6431,cre_Docs_and_Epenses,Show the number of projects.,1,SELECT count(*) FROM Projects,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Projects,This virtual table provides a count of all projects from the 'Projects' table. The query uses the COUNT function to aggregate the total number of project entries.
train.6433,cre_Docs_and_Epenses,List ids and details for all projects.,1,"SELECT project_id ,  project_details FROM Projects",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT project_id ,  project_details FROM Projects",This virtual table describes the project ID and details of projects from the 'Projects' table. The placeholder in the SELECT clause represents the specific project information being queried.
train.6435,cre_Docs_and_Epenses,What is the project id and detail for the project with at least two documents?,1,"SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of project IDs and their corresponding details from the 'Projects' table, specifically for projects that have more documents associated with them than a specified number. The placeholder in the HAVING clause represents the minimum count of documents required for a project to be included in the results."
train.6437,cre_Docs_and_Epenses,"What is the project detail for the project with document ""King Book""?",1,SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  'King Book',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the project details from the 'Projects' table that are associated with a specific document name. The placeholder in the WHERE clause represents the name of the document being queried.
train.6439,cre_Docs_and_Epenses,How many budget types do we have?,1,SELECT count(*) FROM Ref_budget_codes,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Ref_budget_codes,The virtual table provides a count of all unique budget types from the 'Ref_Budget_Codes' table. This count helps in understanding the total number of distinct budget types available in the database.
train.6441,cre_Docs_and_Epenses,List all budget type codes and descriptions.,1,"SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",This virtual table describes the budget type codes and their corresponding descriptions from the 'Ref_Budget_Codes' table. The placeholders represent the specific budget type code and description that can be filtered or selected as needed.
train.6443,cre_Docs_and_Epenses,What is the description for the budget type with code ORG?,1,SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  'ORG',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the description of a specific budget type from the 'Ref_Budget_Codes' table based on a provided budget type code. The placeholder in the WHERE clause represents the unique code for the budget type.
train.6445,cre_Docs_and_Epenses,How many documents have expenses?,1,SELECT count(*) FROM Documents_with_expenses,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Documents_with_expenses,"This virtual table provides a count of all documents that are associated with expenses from the 'Documents_with_Expenses' table. The query aggregates the total number of entries, which can be useful for understanding the volume of documents linked to financial aspects."
train.6447,cre_Docs_and_Epenses,What are the document ids for the budget type code 'SF'?,1,SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of documents associated with expenses from the 'Documents_with_Expenses' table that correspond to a specific budget type. The placeholder in the WHERE clause represents the budget type code.
train.6449,cre_Docs_and_Epenses,Show the budget type code and description and the corresponding document id.,1,"SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code","This virtual table provides a view of documents associated with expenses along with their corresponding budget type codes and descriptions. The placeholders in the SELECT statement represent the budget type code and description from the budget codes table, and the document ID from the documents with expenses table."
train.6451,cre_Docs_and_Epenses,Show ids for all documents with budget types described as 'Government'.,1,SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  'Government',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the unique identifiers of documents associated with expenses from the 'Documents_with_Expenses' table, filtered by a specific budget type description. The placeholder in the WHERE clause represents the budget type description that the user wants to filter by."
train.6453,cre_Docs_and_Epenses,Show budget type codes and the number of documents in each budget type.,1,"SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code","This virtual table summarizes the count of documents associated with each budget type from the 'Documents_with_Expenses' table. The placeholder in the SELECT clause represents the budget type code, and the count function aggregates the number of documents for each budget type."
train.6457,cre_Docs_and_Epenses,What are the ids of documents which don't have expense budgets?,1,SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses,This virtual table lists the unique identifiers of documents from the 'Documents' table that are not associated with any expenses in the 'Documents_with_Expenses' table. The query uses the EXCEPT operator to filter out document IDs that appear in the expenses table.
train.6459,cre_Docs_and_Epenses,Show ids for all documents in type CV without expense budgets.,1,SELECT document_id FROM Documents WHERE document_type_code  =  'CV' EXCEPT SELECT document_id FROM Documents_with_expenses,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT document_id FROM Documents WHERE document_type_code  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT document_id FROM Documents_with_expenses,"This virtual table identifies the unique document IDs from the 'Documents' table that correspond to a specific document type, excluding those documents that are associated with expenses. The placeholder in the WHERE clause represents the document type code."
train.6461,cre_Docs_and_Epenses,What are the ids of documents with letter 's' in the name with any expense budgets.,1,SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique identifiers of documents from the 'Documents' table that are associated with expenses in the 'Documents_with_Expenses' table. The placeholder in the WHERE clause allows for filtering documents based on a specific name or title.
train.6463,cre_Docs_and_Epenses,How many documents do not have any expense?,1,SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses ),"This virtual table counts the number of documents from the 'Documents' table that do not have any associated expenses. The subquery filters out documents that are linked to the 'Documents_with_Expenses' table, ensuring only those without expenses are counted."
train.6465,cre_Docs_and_Epenses,What are the dates for the documents with both 'GV' type and 'SF' type expenses?,1,SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the document dates from the 'Documents' table that are associated with two different budget types. The placeholders in the WHERE clause represent the specific budget type codes being queried.
train.6469,scientist_1,Find the total number of scientists.,1,SELECT count(*) FROM scientists,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM scientists,"This virtual table provides the total number of scientists recorded in the 'Scientists' table. The query uses the count function to aggregate the data, resulting in a single numeric value representing the total count of scientists."
train.6471,scientist_1,Find the total hours of all projects.,1,SELECT sum(hours) FROM projects,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(hours) FROM projects,"This virtual table summarizes the total hours allocated for all projects from the 'Projects' table. The query uses the SUM function to calculate the total hours, providing a single numeric value as output."
train.6473,scientist_1,How many different scientists are assigned to any project?,1,SELECT count(DISTINCT scientist) FROM assignedto,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT scientist) FROM assignedto,"This virtual table provides the count of unique scientists from the 'AssignedTo' table, indicating how many distinct scientists are assigned to various projects. The query uses a placeholder to represent the count of unique entries in the 'Scientist' column."
train.6475,scientist_1,Find the number of distinct projects.,1,SELECT count(DISTINCT name) FROM projects,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT name) FROM projects,"This virtual table provides the count of distinct project names from the 'Projects' table. The query uses a placeholder to represent the project name, allowing for flexibility in filtering specific projects if needed."
train.6477,scientist_1,Find the average hours of all projects.,1,SELECT avg(hours) FROM projects,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(hours) FROM projects,This virtual table calculates the average hours allocated for all projects from the 'Projects' table. The result will provide a single numeric value representing the average hours across all projects.
train.6479,scientist_1,Find the name of project that continues for the longest time.,1,SELECT name FROM projects ORDER BY hours DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM projects ORDER BY hours DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of projects from the 'Projects' table, ordered by the total hours allocated to each project in descending order. The placeholder in the LIMIT clause represents the maximum number of project names to return."
train.6481,scientist_1,List the name of all projects that are operated longer than the average working hours of all projects.,1,SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects),"This virtual table lists the names of projects from the 'Projects' table that have a total allocated hours greater than the average hours of all projects. The query uses a subquery to calculate the average hours, ensuring that only projects exceeding this average are included."
train.6483,scientist_1,Find the name and hours of project that has the most number of scientists.,1,"SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of projects along with the total hours allocated for each project, sorted by the number of scientists assigned to them. The placeholder in the LIMIT clause allows for specifying the maximum number of projects to display."
train.6485,scientist_1,Find the name of the project for which a scientist whose name contains ‘Smith’ is assigned to.,1,SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of projects that a specific scientist is assigned to from the 'Projects' table. The placeholder in the WHERE clause represents the scientist's name, allowing for a search based on partial matches."
train.6487,scientist_1,Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.,1,SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T3.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total hours allocated to projects for specific scientists from the 'AssignedTo', 'Projects', and 'Scientists' tables. The placeholders in the WHERE clause represent the names of the scientists for whom the total hours are being summed."
train.6489,scientist_1,Find the name of projects that require between 100 and 300 hours of work.,1,SELECT name FROM projects WHERE hours BETWEEN 100 AND 300,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM projects WHERE hours BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of projects from the 'Projects' table that have a total allocated hours falling within a specified range. The placeholders in the WHERE clause represent the minimum and maximum hours for filtering the projects.
train.6491,scientist_1,Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.,1,SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of scientists who are assigned to two different projects, both identified by their project names. The placeholders in the WHERE clause represent the names of the projects being queried."
train.6493,scientist_1,List the names of all scientists sorted in alphabetical order.,1,SELECT name FROM scientists ORDER BY name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM scientists ORDER BY name,"This virtual table lists the names of scientists from the 'Scientists' table, sorted in alphabetical order. There are no filters applied, so all scientists will be included in the result set."
train.6499,scientist_1,Find the number of projects which each scientist is working on and scientist's name.,1,"SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name","This virtual table provides a count of the number of projects each scientist is assigned to, along with their names. The placeholder in the SELECT clause represents the count of projects, while the names of the scientists are retrieved from the 'Scientists' table. The JOIN operation links the 'Scientists' table with the 'AssignedTo' table based on the social security number of the scientists, allowing for the aggregation of project assignments by scientist name."
train.6501,scientist_1,Find the SSN and name of scientists who are assigned to the project with the longest hours.,1,"SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",This virtual table describes the social security numbers and names of scientists who are assigned to the project that has the maximum total hours allocated. The placeholders in the query represent the relevant project and scientist identifiers.
train.6503,scientist_1,Find the name of scientists who are assigned to some project.,1,SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn,"This virtual table describes the names of scientists who are assigned to various projects. The query joins the 'AssignedTo' table with the 'Scientists' table based on the social security number of the scientist, allowing us to retrieve the full names of the scientists associated with their respective project assignments."
train.6505,scientist_1,Select the project names which are not assigned yet.,1,SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo),"This virtual table lists the names of projects from the 'Projects' table that are not currently assigned to any scientist. The query uses a subquery to filter out projects that have entries in the 'AssignedTo' table, ensuring only unassigned projects are displayed."
train.6507,scientist_1,Find the name of scientists who are not assigned to any project.,1,SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo),This virtual table lists the names of scientists from the 'Scientists' table who are not currently assigned to any projects. The placeholder in the subquery represents the SSNs of scientists that are assigned to projects.
train.6509,scientist_1,Find the number of scientists who are not assigned to any project.,1,SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo),"This virtual table provides the count of scientists from the 'Scientists' table who are not assigned to any project. The query uses a subquery to filter out scientists whose SSN appears in the 'AssignedTo' table, indicating their assignment to projects."
train.6511,scientist_1,Find the names of scientists who are not working on the project with the highest hours.,1,SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects),This virtual table lists the names of scientists who are not assigned to the project that has the maximum total hours allocated. The query uses a subquery to find the maximum hours from the 'Projects' table and excludes the names of scientists associated with that project.
train.6513,scientist_1,"List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",1,"SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name","This virtual table provides a list of scientists along with the projects they are assigned to, including the total hours allocated for each project. The data is retrieved by joining the 'Scientists', 'AssignedTo', and 'Projects' tables based on their relationships, and it is ordered by the project name and the scientist's name."
train.6515,scientist_1,Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.,1,"SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)","This virtual table describes the names of scientists and the names of projects they are assigned to, specifically focusing on the projects that have the minimum total hours allocated. The placeholders in the query represent the project hours condition."
train.6521,wine_1,Find the names of all wines produced in 2008.,1,SELECT Name FROM WINE WHERE YEAR  =  '2008',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM WINE WHERE YEAR  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of wines from the 'wine' table that were produced in a specific year. The placeholder in the WHERE clause represents the year of production.
train.6523,wine_1,List the grapes and appelations of all wines.,1,"SELECT Grape ,  Appelation FROM WINE",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Grape ,  Appelation FROM WINE",This virtual table describes the grape varieties and their corresponding appellations from the 'wine' table. The placeholders represent the specific grape and appellation names that can be filtered or modified as needed.
train.6525,wine_1,List the names and scores of all wines.,1,"SELECT Name ,  Score FROM WINE",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Name ,  Score FROM WINE",This virtual table provides the names and scores of wines from the 'wine' table. The placeholder in the SELECT statement allows for the retrieval of specific wine names and their corresponding rating scores.
train.6527,wine_1,List the area and county of all appelations.,1,"SELECT Area ,  County FROM APPELLATIONS",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Area ,  County FROM APPELLATIONS","This virtual table provides information about the geographical area and county of each appellation from the 'appellations' table. The query selects the 'Area' and 'County' columns, which are essential for understanding the location characteristics of different wine appellations."
train.6529,wine_1,What are the prices of wines produced before the year of 2010?,1,SELECT Price FROM WINE WHERE YEAR  <  2010,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Price FROM WINE WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the retail prices of wines from the 'wine' table that were produced before a specific year. The placeholder in the WHERE clause represents the year of production.
train.6532,wine_1,What are the names of wines with scores higher than 90?,1,SELECT Name FROM WINE WHERE score  >  90,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM WINE WHERE score  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of wines from the 'wine' table that have a score higher than a specified value. The placeholder in the WHERE clause represents the minimum score threshold for filtering the wines.
train.6535,wine_1,Find the names of all distinct wines that have appellations in North Coast area.,1,SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  'North Coast',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct names of wines produced in appellations that are located in a specific geographical area. The placeholder in the WHERE clause represents the area of the appellation.
train.6537,wine_1,How many wines are produced at Robert Biale winery?,1,SELECT count(*) FROM WINE WHERE Winery  =  'Robert Biale',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM WINE WHERE Winery  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total count of wine entries produced by a specific winery from the 'wine' table. The placeholder in the WHERE clause represents the name of the winery.
train.6539,wine_1,How many appelations are in Napa Country?,1,SELECT count(*) FROM APPELLATIONS WHERE County  =  'Napa',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM APPELLATIONS WHERE County  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of appellations from the 'appellations' table that are located in a specific county. The placeholder in the WHERE clause represents the name of the county.
train.6541,wine_1,Give me the average prices of wines that are produced by appelations in Sonoma County.,1,SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average price of wines produced in a specific county. It joins the 'appellations' table with the 'wine' table based on the appellation name, filtering the results to include only those wines from the specified county. The placeholder in the WHERE clause represents the county's name."
train.6545,wine_1,Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.,1,SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  'Central Coast' AND T2.year  <  2005,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  [PLACEHOLDER-TYPE:STRING] AND T2.year  <  [PLACEHOLDER-TYPE:NUMBER],"This virtual table calculates the maximum retail price of wines produced in a specific geographical area of an appellation, filtered by the year of production. The placeholders represent the area of the appellation and the year of production."
train.6552,wine_1,Give the neames of wines with prices below 50 and with appelations in Monterey county.,1,SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Monterey' AND T2.price  <  50,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  [PLACEHOLDER-TYPE:STRING] AND T2.price  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of wines produced in a specific county that are priced below a certain amount. The placeholders in the WHERE clause represent the county's name and the price limit.
train.6553,wine_1,What are the numbers of wines for different grapes?,1,"SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",This virtual table provides a count of wines grouped by grape variety from the 'wine' table. The placeholder in the SELECT statement represents the grape variety used in the wine.
train.6557,wine_1,Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.,1,SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  'John Anthony'),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the distinct names of wines from the 'wine' table that are priced higher than the minimum price of wines produced by a specific winery. The placeholder in the subquery represents the name of the winery.
train.6559,wine_1,List the names of all distinct wines in alphabetical order.,1,SELECT DISTINCT Name FROM WINE ORDER BY Name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Name FROM WINE ORDER BY Name,"This virtual table lists the distinct names of wines from the 'wine' table, sorted in alphabetical order. The query ensures that each wine name appears only once in the results."
train.6561,wine_1,List the names of all distinct wines ordered by price.,1,SELECT DISTINCT Name FROM WINE ORDER BY price,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT Name FROM WINE ORDER BY price,"This virtual table lists the distinct names of wines from the 'wine' table, ordered by their retail price. The placeholder in the ORDER BY clause represents the price of the wines, allowing for dynamic sorting based on user input."
train.6563,wine_1,What is the area of the appelation that produces the highest number of wines before the year of 2010?,1,SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  [PLACEHOLDER-TYPE:NUMBER] ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the geographical area of appellations from the 'appellations' table that are associated with wines produced before a specific year. The results are grouped by appellation and ordered by the count of wines, with a limit on the number of results returned. The placeholders in the HAVING clause and LIMIT clause represent the year and the maximum number of results, respectively."
train.6565,wine_1,What is the color of the grape whose wine products has the highest average price?,1,SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the colors of grape varieties from the 'grapes' table, which are associated with wines in the 'wine' table. The results are grouped by grape variety and ordered by the average price of the wines produced from each grape, with a limit on the number of results returned based on a specified number."
train.6567,wine_1,Find the distinct names of wines produced before the year of 2000 or after the year of 2010.,1,SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT Name FROM WINE WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct names of wines from the 'wine' table that were produced either before or after a specified year. The placeholders in the WHERE clause represent the years to filter the wine entries.
train.6569,wine_1,Find the distinct winery of wines having price between 50 and 100.,1,SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct wineries from the 'wine' table that produce wines within a specified price range. The placeholders in the WHERE clause represent the minimum and maximum price values.
train.6571,wine_1,What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?,1,"SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  'Zinfandel'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] AND Grape  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the average retail price and average number of cases available for wines produced in a specific year and made from a particular grape variety. The placeholders in the WHERE clause represent the year of production and the grape variety used.
train.6573,wine_1,What are the maximum price and score of wines produced by St. Helena appelation?,1,"SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  'St. Helena'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the maximum retail price and maximum rating score of wines produced in a specific appellation from the 'wine' table. The placeholder in the WHERE clause represents the name of the appellation.
train.6577,wine_1,What are the average price and score of wines grouped by appelation?,1,"SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation","This virtual table provides the average price and average score of wines grouped by their respective appellations from the 'wine' table. The placeholders in the SELECT statement represent the aggregated values for price and score, while the grouping is done based on the appellation name."
train.6579,wine_1,Find the wineries that have at least four wines.,1,SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of wineries from the 'wine' table that have produced a specified number of wine entries. The placeholder in the HAVING clause represents the minimum count of wine entries required for a winery to be included in the results.
train.6581,wine_1,Find the country of all appelations who have at most three wines.,1,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of counties from the 'appellations' table that are associated with a specific number of wines produced, as indicated by the placeholder. The query joins the 'appellations' and 'wine' tables on the appellation name, groups the results by appellation, and filters the groups to include only those with a count of wines less than or equal to the specified number."
train.6583,wine_1,What are the names of wines whose production year are before the year of all wines by Brander winery?,1,SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander'),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of wines from the 'wine' table that were produced before the earliest year of production for a specific winery. The placeholder in the subquery represents the name of the winery being queried.
train.6585,wine_1,What are the names of wines that are more expensive then all wines made in the year 2006?,1,SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]),This virtual table lists the names of wines from the 'wine' table that have a price greater than the maximum price of wines produced in a specific year. The placeholder in the subquery represents the year for which the maximum price is being compared.
train.6591,wine_1,"List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",1,"SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY Name","This virtual table describes the grape varieties, appellations, and names of wines from the 'wine' table that have a score higher than a specified threshold. The placeholder in the WHERE clause represents the minimum score for filtering the wines."
train.6593,wine_1,Find the appelations that produce wines after the year of 2008 but not in Central Coast area.,1,SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  'Central Coast',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Appelation FROM WINE WHERE YEAR  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of appellations from the 'wine' table that were produced after a specific year, excluding those that belong to a particular geographical area defined in the 'appellations' table. The placeholders represent the year and the area name respectively."
train.6595,wine_1,Find the average price of wines that are not produced from Sonoma county.,1,SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the average price of wines from the 'wine' table that are not produced in a specific county as defined in the 'appellations' table. The placeholder in the WHERE clause represents the county's name.
train.6599,train_station,How many train stations are there?,1,SELECT count(*) FROM station,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM station,"This virtual table provides the total count of stations from the 'station' table. It does not filter or specify any conditions, thus returning the overall number of stations available in the database."
train.6602,train_station,Show the names and total passengers for all train stations not in London.,1,"SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  total_passengers FROM station WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and total number of passengers of stations from the 'station' table that are not located in a specific geographical location. The placeholder in the WHERE clause represents the location to be excluded.
train.6603,train_station,Show the names and main services for train stations that have the top three total number of passengers.,1,"SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and main services of stations from the 'station' table, ordered by the total number of passengers in descending order. The placeholder in the LIMIT clause represents the maximum number of stations to display."
train.6604,train_station,What is the average and maximum number of total passengers for train stations in London or Glasgow?,1,"SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING] OR LOCATION  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the average and maximum total number of passengers from the 'station' table for stations located in specific geographical areas. The placeholders in the WHERE clause represent the names of the locations being queried.
train.6610,train_station,Show the number of trains,1,SELECT count(*) FROM train,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM train,This virtual table provides the total count of trains available in the 'train' table. The query uses the count function to aggregate the number of entries in the table.
train.6611,train_station,Show the name and service for all trains in order by time.,1,"SELECT name ,  service FROM train ORDER BY TIME",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  service FROM train ORDER BY TIME","This virtual table provides a list of train names along with their corresponding service types, ordered by the scheduled time of the trains. The placeholders in the SELECT statement represent the columns being retrieved from the 'train' table."
train.6613,train_station,show the train name and station name for each train.,1,"SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",This virtual table describes the names of stations and the names of trains that stop at those stations. The query joins the 'train_station' table with the 'station' and 'train' tables to retrieve the relevant names based on their identifiers.
train.6614,train_station,Show all train names and times in stations in London in descending order by train time.,1,"SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.time DESC",This virtual table provides the names and scheduled times of trains that stop at stations located in a specific geographical area. The placeholder in the WHERE clause represents the location of the station.
train.6615,train_station,Show the station name with greatest number of trains.,1,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of stations that are linked to trains, ordered by the number of train connections, with a limit on the number of results returned. The placeholder in the LIMIT clause represents the maximum number of station names to display."
train.6616,train_station,Show the station name with at least two trains.,1,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of stations from the 'station' table that have a certain number of associated train services. The placeholder in the HAVING clause represents the minimum count of train services that must be linked to each station.
train.6617,train_station,Show all locations with only 1 station.,1,SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of geographical locations of stations from the 'station' table that have a specific number of stations. The placeholder in the HAVING clause represents the count of stations at each location.
train.6618,train_station,Show station names without any trains.,1,SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station),"This virtual table lists the names of stations from the 'station' table that do not have any associated trains, indicating that these stations are not currently served by any train services. The placeholder in the WHERE clause is used to filter out stations that are linked to any train in the 'train_station' table."
train.6619,train_station,"What are the names of the stations which serve both ""Ananthapuri Express"" and ""Guruvayur Express"" trains?",1,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Guruvayur Express',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of stations that are served by a specific train. The query uses an intersection to find common stations for two instances of the same train name, represented by placeholders in the WHERE clause."
train.6620,train_station,Find the names of the trains that do not pass any station located in London.,1,SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  'London'),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of trains that do not stop at stations located in a specific geographical area. The placeholder in the WHERE clause represents the location of the stations.
train.6622,driving_school,List all vehicle id,1,SELECT vehicle_id FROM Vehicles;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT vehicle_id FROM Vehicles;,This virtual table describes the unique identifiers of vehicles from the 'Vehicles' table. It provides a list of all vehicle IDs available in the database.
train.6624,driving_school,How many vehicle in total?,1,SELECT count(*) FROM Vehicles;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Vehicles;,"This virtual table provides the total count of vehicles recorded in the 'Vehicles' table. The query uses the COUNT function to aggregate the number of entries, which is useful for understanding the size of the vehicle inventory."
train.6628,driving_school,List the first name middle name and last name of all staff.,1,"SELECT first_name ,  middle_name ,  last_name FROM Staff;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT first_name ,  middle_name ,  last_name FROM Staff;","This virtual table describes the first, middle, and last names of staff members from the 'Staff' table. The query retrieves these names without any filtering conditions, allowing for a complete list of staff names."
train.6630,driving_school,What is the birthday of the staff member with first name as Janessa and last name as Sawayn?,1,SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_of_birth FROM Staff WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,The virtual table describes the birth dates of staff members from the 'Staff' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the staff member.
train.6632,driving_school,When did the staff member with first name as Janessa and last name as Sawayn join the company?,1,SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_joined_staff FROM Staff WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the joining dates of staff members from the 'Staff' table based on their first and last names. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.
train.6634,driving_school,When did the staff member with first name as Janessa and last name as Sawayn leave the company?,1,SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_left_staff FROM Staff WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the date when a specific staff member left the organization, based on their first and last names. The placeholders in the WHERE clause represent the staff member's first and last names."
train.6636,driving_school,How many staff have the first name Ludie?,1,SELECT count(*) FROM Staff WHERE first_name = 'Ludie';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Staff WHERE first_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total number of staff members from the 'Staff' table who have a specific first name. The placeholder in the WHERE clause represents the first name of the staff member.
train.6638,driving_school,What is the nickname of staff with first name as Janessa and last name as Sawayn?,1,SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT nickname FROM Staff WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the nicknames of staff members from the 'Staff' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the staff member.
train.6640,driving_school,How many staff in total?,1,SELECT count(*) FROM Staff;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Staff;,"This virtual table provides the total number of staff members from the 'Staff' table. The query counts all entries in the table, which helps in understanding the size of the staff team."
train.6642,driving_school,Which city does staff with first name as Janessa and last name as Sawayn live?,1,SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the cities of staff members from the 'Addresses' table based on their first and last names. The placeholders in the WHERE clause represent the staff member's first and last names.
train.6644,driving_school,Which country and state does staff with first name as Janessa and last name as Sawayn lived?,1,"SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING];","This virtual table provides the country and state, province, or county of staff members from the 'Addresses' table based on their first and last names. The placeholders in the WHERE clause represent the first and last names of the staff member being queried."
train.6646,driving_school,How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?,1,SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the total lesson time for a specific customer identified by their first and last name. It joins the 'Lessons' table with the 'Customers' table to aggregate the lesson times based on the customer's name provided in the placeholders.
train.6648,driving_school,What is the zip code of staff with first name as Janessa and last name as Sawayn lived?,1,SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table retrieves the postal code of staff members from the 'Addresses' table based on their first and last names. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.
train.6652,driving_school,Find out the first name and last name of staff lived in city Damianfort.,1,"SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort';",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the first and last names of staff members from the 'Staff' table who are located in a specific city. The placeholder in the WHERE clause represents the city's name.
train.6655,driving_school,In which city do the most employees live and how many of them live there?,1,"SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a summary of the number of staff members located in each city, derived from the 'Addresses' and 'Staff' tables. The placeholder in the LIMIT clause allows the user to specify the maximum number of cities to return, sorted by the number of staff members in descending order."
train.6656,driving_school,List the states which have between 2 to 4 staffs living there.,1,SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of states, provinces, or counties from the 'Addresses' table where staff members are located. It groups the results by the state, province, or county and filters the groups based on a specified range of staff count using placeholders for numeric values."
train.6658,driving_school,List the first name and last name of all customers.,1,"SELECT first_name ,  last_name FROM Customers;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT first_name ,  last_name FROM Customers;",This virtual table describes the first and last names of customers from the 'Customers' table. The query retrieves the names of all customers without any filtering conditions.
train.6660,driving_school,List email address and birthday of customer whose first name as Carole.,1,"SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = 'Carole'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = [PLACEHOLDER-TYPE:STRING]",This virtual table describes the email addresses and birth dates of customers from the 'Customers' table who have a specific first name. The placeholder in the WHERE clause represents the customer's first name.
train.6662,driving_school,List phone number and email address of customer with more than 2000 outstanding balance.,1,"SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  [PLACEHOLDER-TYPE:NUMBER];",This virtual table describes the phone numbers and email addresses of customers from the 'Customers' table who have an outstanding amount greater than a specified value. The placeholder in the WHERE clause represents the amount that the outstanding balance must exceed.
train.6664,driving_school,"What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",1,"SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = 'Marina' OR last_name  =  'Kohler'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] OR last_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the status code, mobile phone number, and email address of customers from the 'Customers' table who have a specific first name or last name. The placeholders in the WHERE clause represent the customer's first and last names."
train.6666,driving_school,When are the birthdays of customer who are classified as 'Good Customer' status?,1,SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT date_of_birth FROM Customers WHERE customer_status_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the birth dates of customers from the 'Customers' table who have a specific status. The placeholder in the WHERE clause represents the customer's status code.
train.6668,driving_school,When did customer with first name as Carole and last name as Bernhard became a customer?,1,SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT date_became_customer FROM Customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table describes the date when a customer became a customer from the 'Customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the customer's first and last names."
train.6670,driving_school,How many customers in total?,1,SELECT count(*) FROM Customers;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Customers;,"This virtual table provides the total number of customers recorded in the 'Customers' table. The query counts all entries in the table, which helps in understanding the customer base size."
train.6672,driving_school,List all customer status codes and the number of customers having each status code.,1,"SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;","This virtual table summarizes the number of customers grouped by their current status from the 'Customers' table. The placeholder in the SELECT clause represents the customer status code, while the count function aggregates the total number of customers for each status."
train.6674,driving_school,Which customer status code has least number of customers?,1,SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table summarizes the distinct customer status codes from the 'Customers' table, grouping them to show how many customers fall under each status. The placeholder in the LIMIT clause allows for specifying the maximum number of status codes to retrieve, based on user preference."
train.6678,driving_school,"What is maximum, minimum and average amount of outstanding of customer?",1,"SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;","This virtual table provides the maximum, minimum, and average outstanding amounts owed by customers from the 'Customers' table. The placeholders in the SELECT statement represent the calculations for the outstanding amounts."
train.6680,driving_school,List the first name and last name of customers have the amount of outstanding between 1000 and 3000.,1,"SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];",This virtual table describes the first and last names of customers from the 'Customers' table who have an outstanding amount within a specified range. The placeholders in the BETWEEN clause represent the minimum and maximum amounts owed by the customers.
train.6682,driving_school,List first name and last name of customers lived in city Lockmanfurt.,1,"SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt';",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the first and last names of customers from the 'Customers' table who reside in a specific city. The placeholder in the WHERE clause represents the city's name.
train.6684,driving_school,Which country does customer with first name as Carole and last name as Bernhard lived in?,1,SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the country of customers from the 'Customers' table based on their first and last names. The query joins the 'Customers' table with the 'Addresses' table using the customer address identifier. The placeholders in the WHERE clause represent the first and last names of the customer.
train.6686,driving_school,What is zip code of customer with first name as Carole and last name as Bernhard?,1,SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the postal code of customers from the 'Customers' table based on their first and last names. The query joins the 'Customers' table with the 'Addresses' table using the customer address identifier, allowing access to the postal code associated with the customer's address. The placeholders in the WHERE clause represent the customer's first and last names."
train.6690,driving_school,How much in total does customer with first name as Carole and last name as Bernhard paid?,1,SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total amount of payments made by a specific customer identified by their first and last name. The query joins the 'Customer_Payments' table with the 'Customers' table to access the payment records associated with the customer. The placeholders in the WHERE clause represent the customer's first and last names.
train.6692,driving_school,List the number of customers that did not have any payment history.,1,SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );,"This virtual table provides a count of customers from the 'Customers' table who have not made any payments. The query uses a subquery to filter out customers who have records in the 'Customer_Payments' table, ensuring that only those without payment history are counted."
train.6694,driving_school,List first name and last name of customers that have more than 2 payments.,1,"SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the first and last names of customers who have made more than a specified number of payments. The data is retrieved from the 'Customer_Payments' table, which is joined with the 'Customers' table based on the customer identifier. The placeholder in the HAVING clause represents the minimum number of payments a customer must have made to be included in the results."
train.6696,driving_school,List all payment methods and number of payments using each payment methods.,1,"SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;","This virtual table summarizes the different payment methods used by customers and the count of payments made for each method. The placeholder in the SELECT clause represents the payment method code, while the count function aggregates the total number of payments for each method."
train.6700,driving_school,"List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",1,SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING] AND nickname LIKE [PLACEHOLDER-TYPE:STRING];,"This virtual table retrieves the lesson IDs from the 'Lessons' table for lessons conducted by a specific staff member. The staff member is identified by their first name, last name, and a nickname, with placeholders used for these values."
train.6702,driving_school,How many lessons taught by staff whose first name has letter 'a' in it?,1,SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of lessons conducted by staff members whose first name matches a specified value. The query joins the 'Lessons' table with the 'Staff' table based on the staff identifier, filtering the results to include only those staff members with a first name that meets the given criteria."
train.6704,driving_school,How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?,1,SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table calculates the total duration of lessons conducted by a specific staff member from the 'Lessons' table. It joins the 'Lessons' table with the 'Staff' table to filter the results based on the staff member's first and last name, represented by placeholders."
train.6706,driving_school,What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?,1,SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the average price of lessons conducted by staff members with a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the staff member.
train.6708,driving_school,How many lesson does customer with first name Ray took?,1,SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Ray',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING],"This virtual table provides the total number of lessons attended by customers with a specific first name. The query joins the 'Lessons' table with the 'Customers' table based on the customer ID, and filters the results using a placeholder for the customer's first name."
train.6710,driving_school,Which last names are both used by customers and by staff?,1,SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff,This virtual table provides a list of last names that are common to both customers and staff members. The query uses the INTERSECT operator to find last names that appear in both the 'Customers' and 'Staff' tables.
train.6712,driving_school,What is the first name of the staff who did not give any lesson?,1,SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id,"This virtual table describes the first names of staff members from the 'Staff' table who are not conducting any lessons. The query uses an EXCEPT clause to filter out those staff members who are linked to any lessons, ensuring that only those not involved in teaching are selected."
train.6715,activity_1,How many faculty do we have?,1,SELECT count(*) FROM Faculty,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Faculty,"This virtual table provides the total number of faculty members from the 'Faculty' table. The query counts all entries in the table, which represents the faculty members."
train.6717,activity_1,What ranks do we have for faculty?,1,SELECT DISTINCT rank FROM Faculty,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT rank FROM Faculty,"This virtual table provides a list of unique academic ranks from the 'Faculty' table. The query uses the DISTINCT keyword to ensure that each rank is only listed once, regardless of how many faculty members hold that rank."
train.6719,activity_1,Show all the distinct buildings that have faculty rooms.,1,SELECT DISTINCT building FROM Faculty,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT building FROM Faculty,"This virtual table provides a list of unique buildings where faculty members have their offices, sourced from the 'Faculty' table. The query uses the DISTINCT keyword to ensure that each building is only listed once."
train.6721,activity_1,"Show the rank, first name, and last name for all the faculty.",1,"SELECT rank ,  Fname ,  Lname FROM Faculty",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT rank ,  Fname ,  Lname FROM Faculty","This virtual table describes the academic rank, first name, and last name of faculty members from the 'Faculty' table. There are no conditions applied, so it retrieves all faculty members' details."
train.6727,activity_1,How many female Professors do we have?,1,SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  'Professor',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Faculty WHERE Sex  =  [PLACEHOLDER-TYPE:STRING] AND Rank  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of faculty members from the 'Faculty' table who match specific criteria based on gender and academic rank. The placeholders in the WHERE clause represent the gender and rank of the faculty members being queried.
train.6729,activity_1,"Show the phone, room, and building for the faculty named Jerry Prince.",1,"SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  'Jerry' AND Lname  =  'Prince'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  [PLACEHOLDER-TYPE:STRING] AND Lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the contact information and office location of faculty members from the 'Faculty' table based on their first and last names. The placeholders in the WHERE clause represent the faculty member's first and last names.
train.6731,activity_1,How many Professors are in building NEB?,1,SELECT count(*) FROM Faculty WHERE Rank  =  'Professor' AND building  =  'NEB',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Faculty WHERE Rank  =  [PLACEHOLDER-TYPE:STRING] AND building  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of faculty members from the 'Faculty' table who hold a specific academic rank and are located in a particular building. The placeholders in the WHERE clause represent the rank and building names.
train.6735,activity_1,Show all the buildings along with the number of faculty members the buildings have.,1,"SELECT building ,  count(*) FROM Faculty GROUP BY building",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT building ,  count(*) FROM Faculty GROUP BY building","This virtual table summarizes the number of faculty members located in each building. The placeholder in the SELECT statement represents the building's name, and the count function aggregates the total number of faculty members per building."
train.6741,activity_1,"For each faculty rank, show the number of faculty members who have it.",1,"SELECT rank ,  count(*) FROM Faculty GROUP BY rank",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT rank ,  count(*) FROM Faculty GROUP BY rank","This virtual table summarizes the number of faculty members grouped by their academic rank from the 'Faculty' table. The query counts the number of faculty for each distinct rank, providing insights into the distribution of faculty ranks within the institution."
train.6743,activity_1,Show all the ranks and the number of male and female faculty for each rank.,1,"SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex","This virtual table summarizes the number of faculty members grouped by their academic rank and gender. The placeholders in the SELECT statement represent the rank and sex of the faculty members, while the count function provides the total number of faculty in each group."
train.6745,activity_1,Which rank has the smallest number of faculty members?,1,SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic ranks from the 'Faculty' table, grouped by rank and ordered by the number of faculty members in each rank in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ranks to display."
train.6749,activity_1,What are the first name and last name of Linda Smith's advisor?,1,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  'Linda' AND T2.lname  =  'Smith'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of faculty members who are academic advisors to a specific student. The placeholders in the WHERE clause represent the first and last names of the student.
train.6754,activity_1,Which students are advised by Michael Goodrich? Give me their first and last names.,1,"SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  'Michael' AND T1.lname  =  'Goodrich'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are advised by a specific faculty member. The placeholders in the WHERE clause represent the first and last names of the faculty member being queried.
train.6760,activity_1,Give me the the first and last name of the faculty who advises the most students.,1,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first and last names of faculty members who serve as advisors to students. The results are grouped by faculty ID and ordered by the number of students they advise, with a limit on the number of faculty members returned based on a specified number."
train.6762,activity_1,Which faculty members advise two ore more students? Give me their faculty ids.,1,SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies faculty members who serve as advisors to students. It retrieves the unique identifiers of faculty members from the 'Faculty' table, joining it with the 'Student' table based on the advisor relationship. The results are grouped by faculty ID, and only those faculty members who have advised a specified minimum number of students are included, as indicated by the placeholder in the HAVING clause."
train.6763,activity_1,Show ids for the faculty members who don't advise any student.,1,SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student,"This virtual table identifies faculty members who are not serving as advisors to any students. The placeholder in the SELECT clause represents the unique identifier for faculty members, while the EXCEPT clause filters out those who are advisors based on the student data."
train.6767,activity_1,How many activities do we have?,1,SELECT count(*) FROM Activity,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Activity,"This virtual table provides the total number of activities recorded in the 'Activity' table. The query counts all entries in the table, which helps in understanding the scale of activities available."
train.6769,activity_1,How many faculty members participate in an activity?,1,SELECT count(DISTINCT FacID) FROM Faculty_participates_in,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT FacID) FROM Faculty_participates_in,This virtual table provides the count of distinct faculty members who participate in various activities from the 'Faculty_Participates_in' table. The query uses a placeholder to allow for potential filtering or additional conditions in the future.
train.6771,activity_1,Show the ids of the faculty who don't participate in any activity.,1,SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in,This virtual table lists the unique identifiers of faculty members from the 'Faculty' table who are not participating in any activities. The query uses the EXCEPT clause to exclude those faculty members who are found in the 'Faculty_Participates_in' table.
train.6773,activity_1,Show the ids of all the faculty members who participate in an activity and advise a student.,1,SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student,This virtual table identifies faculty members who are also academic advisors for students. The intersection of the two sets ensures that only those faculty members who participate in activities and are listed as advisors for students are included.
train.6775,activity_1,How many activities does Mark Giuliano participate in?,1,SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of faculty members who participate in activities, filtered by the first and last names of the faculty member. The placeholders in the WHERE clause represent the first and last names of the faculty member being queried."
train.6778,activity_1,What are the names of the activities Mark Giuliano is involved in,1,SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of activities in which a specific faculty member participates. The placeholders in the WHERE clause represent the first and last names of the faculty member.
train.6783,activity_1,What is the first and last name of the faculty participating in the most activities?,1,"SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first and last names of faculty members who participate in activities, sorted by the number of activities they are involved in. The placeholder in the LIMIT clause allows for specifying the maximum number of faculty members to return."
train.6785,activity_1,What is the name of the activity that has the most faculty members involved in?,1,SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of activity names from the 'Activity' table that are participated in by faculty members. The results are grouped by activity ID and ordered by the number of faculty members participating in each activity, with a limit on the number of results returned based on a specified number."
train.6787,activity_1,Show the ids of the students who don't participate in any activity.,1,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in,"This virtual table lists the unique identifiers of students from the 'Student' table who are not participating in any activities. The query uses the EXCEPT clause to exclude those students who are found in the 'Participates_in' table, effectively showing only those students who are not involved in any activities."
train.6790,activity_1,What are the ids of the students who are under 20 years old and are involved in at least one activity.,1,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies students who participate in activities and are below a certain age. The placeholder in the WHERE clause represents the age limit.
train.6791,activity_1,What is the first and last name of the student participating in the most activities?,1,"SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first and last names of students who participate in activities, sorted by the number of activities they are involved in. The placeholder in the LIMIT clause allows for specifying the maximum number of students to return."
train.6793,activity_1,What is the name of the activity with the most students?,1,SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of activity names from the 'Activity' table, showing the most participated activities based on the number of students involved. The placeholder in the LIMIT clause allows the user to specify how many top activities they want to retrieve."
train.6803,flight_4,Find the name of the airport in the city of Goroka.,1,SELECT name FROM airports WHERE city  =  'Goroka',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM airports WHERE city  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of airports located in a specific city from the 'airports' table. The placeholder in the WHERE clause represents the name of the city.
train.6805,flight_4,"Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",1,"SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the names, cities, countries, and elevations of airports from the 'airports' table that are located in a specific city. The placeholder in the WHERE clause represents the name of the city."
train.6807,flight_4,How many airlines are there?,1,SELECT count(*) FROM airlines,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM airlines,"This virtual table provides the total number of airlines recorded in the 'airlines' table. The query counts all entries in the table, which helps in understanding the scale of airline operations available in the database."
train.6809,flight_4,How many airlines does Russia has?,1,SELECT count(*) FROM airlines WHERE country  =  'Russia',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM airlines WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of airlines from the 'airlines' table that are based in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.6811,flight_4,What is the maximum elevation of all airports in the country of Iceland?,1,SELECT max(elevation) FROM airports WHERE country  =  'Iceland',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(elevation) FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the maximum elevation of airports located in a specific country from the 'airports' table. The placeholder in the WHERE clause represents the name of the country.
train.6813,flight_4,Find the name of the airports located in Cuba or Argentina.,1,SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING] OR country  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of airports located in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.
train.6815,flight_4,Find the country of the airlines whose name starts with 'Orbit'.,1,SELECT country FROM airlines WHERE name LIKE 'Orbit%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT country FROM airlines WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the country of airlines from the 'airlines' table that match a specific name pattern. The placeholder in the WHERE clause represents the airline's name to filter the results.
train.6817,flight_4,Find the name of airports whose altitude is between -50 and 50.,1,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM airports WHERE elevation BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of airports from the 'airports' table that are situated at an elevation within a specified range. The placeholders in the WHERE clause represent the minimum and maximum elevation values.
train.6819,flight_4,Which country is the airport that has the highest altitude located in?,1,SELECT country FROM airports ORDER BY elevation DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT country FROM airports ORDER BY elevation DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries from the 'airports' table, sorted by the elevation of the airports in descending order. The placeholder in the LIMIT clause indicates the maximum number of countries to return."
train.6821,flight_4,Find the number of airports whose name contain the word 'International'.,1,SELECT count(*) FROM airports WHERE name LIKE '%International%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM airports WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of airports from the 'airports' table that match a specific name pattern. The placeholder in the WHERE clause allows for flexible searching of airport names based on user input.
train.6823,flight_4,How many different cities do have some airport in the country of Greenland?,1,SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(DISTINCT city) FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct cities from the 'airports' table that are located in a specific country. The placeholder in the WHERE clause represents the name of the country.
train.6827,flight_4,Find the number of routes whose destination airports are in Canada.,1,SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of destination airports from the 'airports' table that are associated with routes in a specific country. The placeholder in the WHERE clause represents the country name.
train.6829,flight_4,"Find the name, city, and country of the airport that has the lowest altitude.",1,"SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of airport names along with their respective cities and countries from the 'airports' table, ordered by elevation. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
train.6832,flight_4,"What is the name, city, and country of the airport with the highest elevation?",1,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of airport names along with their respective cities and countries from the 'airports' table, sorted by elevation in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.6839,flight_4,Find the number of different airports which are the destinations of the American Airlines.,1,SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct destination airport IDs associated with a specific airline from the 'airlines' and 'routes' tables. The placeholder in the WHERE clause represents the name of the airline being queried.
train.6845,flight_4,List all countries and their number of airlines in the descending order of number of airlines.,1,"SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC","This virtual table summarizes the number of airlines grouped by their country of origin. The placeholder in the SELECT statement allows for counting the total number of airlines per country, and the results are ordered by the count in descending order."
train.6847,flight_4,How many airports are there per country? Order the countries by decreasing number of airports.,1,"SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC","This virtual table provides a count of airports grouped by their respective countries, sorted in descending order of the number of airports in each country. The placeholder in the SELECT clause represents the count of airports, while the GROUP BY clause organizes the results by country."
train.6849,flight_4,How many airports are there per city in the United States? Order the cities by decreasing number of airports.,1,"SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  city FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY city ORDER BY count(*) DESC","This virtual table provides a count of airports grouped by city from the 'airports' table, filtered by a specific country. The placeholder in the WHERE clause represents the name of the country."
train.6851,flight_4,Return the cities with more than 3 airports in the United States.,1,SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT city FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY city HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities from the 'airports' table that are located in a specific country. The results are grouped by city, and only those cities with more than a specified number of airports are included. The placeholders in the WHERE clause represent the country's name, and the HAVING clause represents the minimum count of airports required for a city to be included in the results."
train.6853,flight_4,How many cities are there that have more than 3 airports?,1,SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3),1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]),This virtual table counts the number of cities that have more than a specified number of airports. The placeholder in the HAVING clause represents the minimum number of airports required in a city for it to be included in the count.
train.6855,flight_4,List the cities which have more than one airport and number of airports.,1,"SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the number of airports located in each city from the 'airports' table. The placeholder in the HAVING clause represents the minimum count of airports that must be present in a city for it to be included in the results.
train.6861,flight_4,"Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",1,"SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC","This virtual table provides a count of routes originating from each airport, along with the airport names. The data is aggregated by airport name and sorted in descending order based on the number of routes. The placeholders in the query allow for dynamic adjustments to the selection criteria if needed."
train.6863,flight_4,Find the average elevation of all airports for each country.,1,"SELECT avg(elevation) ,  country FROM airports GROUP BY country",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(elevation) ,  country FROM airports GROUP BY country","This virtual table provides the average elevation of airports grouped by their respective countries. The placeholder in the SELECT clause represents the average elevation, while the country is used to categorize the results."
train.6865,flight_4,Find the cities which have exactly two airports.,1,SELECT city FROM airports GROUP BY city HAVING count(*)  =  2,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT city FROM airports GROUP BY city HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of cities that have a specific number of airports. The placeholder in the HAVING clause represents the count of airports in those cities.
train.6869,flight_4,Find the number of routes with destination airports in Italy.,1,SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of routes that lead to airports located in a specific country. The placeholder in the WHERE clause represents the name of the country being queried.
train.6871,flight_4,Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.,1,SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines',3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  [PLACEHOLDER-TYPE:STRING] AND T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of routes from the 'routes' table that connect to airports in a specific country and are operated by a specific airline. The placeholders in the WHERE clause represent the country and airline name respectively.
train.6875,flight_4,Find the number of routes from the United States to Canada.,1,SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING]) AND src_apid IN (SELECT apid FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of routes from the 'routes' table where the destination and source airports are located in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.
train.6877,flight_4,Find the id of routes whose source and destination airports are in the United States.,1,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING]) AND src_apid IN (SELECT apid FROM airports WHERE country  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the unique identifiers of routes from the 'routes' table that have both source and destination airports located in a specific country. The placeholders in the WHERE clause represent the country names for both the source and destination airports.
train.6882,flight_4,What is the name of the airport with the most number of routes that start in China?,1,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of airport names from the 'airports' table that are located in a specific country. It joins the 'airports' table with the 'routes' table to filter the airports based on their source airport ID. The results are grouped by airport name and ordered by the number of routes originating from those airports, with a limit on the number of results returned."
train.6885,tracking_orders,What is the id of the most recent order?,1,SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of order IDs from the 'Orders' table, sorted by the date the orders were placed in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of order IDs to retrieve."
train.6887,tracking_orders,what are the order id and customer id of the oldest order?,1,"SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of order IDs and their corresponding customer IDs from the 'Orders' table, sorted by the date the orders were placed. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
train.6889,tracking_orders,"Find the id of the order whose shipment tracking number is ""3452"".",1,SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT order_id FROM shipments WHERE shipment_tracking_number = [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of orders from the 'Shipments' table that are associated with a specific shipment tracking number. The placeholder in the WHERE clause represents the tracking number of the shipment.
train.6891,tracking_orders,Find the ids of all the order items whose product id is 11.,1,SELECT order_item_id FROM order_items WHERE product_id = 11,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT order_item_id FROM order_items WHERE product_id = [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the unique identifiers of order items from the 'Order_Items' table that are associated with a specific product. The placeholder in the WHERE clause represents the product's identifier.
train.6893,tracking_orders,"List the name of all the distinct customers who have orders with status ""Packing"".",1,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique customer names from the 'Customers' table who have placed orders with a specific status. The placeholder in the WHERE clause represents the order status being queried.
train.6897,tracking_orders,What is the name of the customer who has the most orders?,1,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have placed orders, sorted by the number of orders they have made in descending order. The placeholder in the LIMIT clause represents the maximum number of customer names to return."
train.6899,tracking_orders,What is the customer id of the customer who has the most orders?,1,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer IDs from the 'Customers' table who have placed orders, sorted by the number of orders in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of customer IDs to return."
train.6901,tracking_orders,"Give me a list of id and status of orders which belong to the customer named ""Jeramie"".",1,"SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = [PLACEHOLDER-TYPE:STRING]",This virtual table provides the order IDs and their current statuses for orders placed by a specific customer from the 'Customers' and 'Orders' tables. The placeholder in the WHERE clause represents the customer's name.
train.6903,tracking_orders,"Find the dates of orders which belong to the customer named ""Jeramie"".",1,SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the order placement dates for customers from the 'Customers' table based on a specific customer's name. The placeholder in the WHERE clause represents the customer's name.
train.6905,tracking_orders,Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.,1,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= '2009-01-01' AND T2.date_order_placed <= '2010-01-01',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= [PLACEHOLDER-TYPE:STRING] AND T2.date_order_placed <= [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of customers who have placed orders within a specific date range. The placeholders in the WHERE clause represent the start and end dates for filtering the orders based on when they were placed.
train.6907,tracking_orders,Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?,1,SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= '1975-01-01' AND T1.date_order_placed <= '1976-01-01',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= [PLACEHOLDER-TYPE:STRING] AND T1.date_order_placed <= [PLACEHOLDER-TYPE:STRING],This virtual table retrieves distinct product identifiers from the 'Order_Items' table for orders placed within a specific date range. The placeholders in the WHERE clause represent the start and end dates for filtering the orders.
train.6909,tracking_orders,"Find the names of the customers who have order status both ""On Road"" and ""Shipped"".",1,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of customers from the 'Customers' table who have placed orders with a specific status. The query uses an INTERSECT operation to find customers who have orders with two specified statuses, represented by placeholders in the WHERE clause."
train.6911,tracking_orders,"Find the id of the customers who have order status both ""On Road"" and ""Shipped"".",1,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = [PLACEHOLDER-TYPE:STRING],"This virtual table identifies customers who have placed orders with two specific statuses. The first part of the query selects customer IDs from the 'Customers' table that have orders with a certain status, and the second part does the same for another status. The intersection of these two sets of customer IDs will yield those customers who have orders with both statuses."
train.6913,tracking_orders,When was the order placed whose shipment tracking number is 3452? Give me the date.,1,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the dates when orders were placed from the 'Orders' table, specifically for those orders that have a corresponding shipment in the 'Shipments' table. The placeholder in the WHERE clause represents the tracking number of the shipment."
train.6915,tracking_orders,What is the placement date of the order whose invoice number is 10?,1,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the dates when orders were placed from the 'Orders' table that are associated with a specific shipment identified by its invoice number. The placeholder in the WHERE clause represents the invoice number linked to the shipment.
train.6917,tracking_orders,List the count and id of each product in all the orders.,1,"SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id","This virtual table provides a count of order items grouped by product ID from the 'Orders', 'Order_Items', and 'Products' tables. The placeholders in the query allow for dynamic filtering or additional conditions to be applied as needed."
train.6920,tracking_orders,"For each product, show its name and the number of times it was ordered.",1,"SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id","This virtual table provides a summary of the total number of orders for each product from the 'Products' table. It combines data from the 'Orders', 'Order_Items', and 'Products' tables, counting how many times each product has been ordered. The grouping is done by the product identifier to aggregate the order counts for each product."
train.6921,tracking_orders,Find the ids of orders which are shipped after 2000-01-01.,1,SELECT order_id FROM shipments WHERE shipment_date > '2000-01-01',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT order_id FROM shipments WHERE shipment_date > [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of order IDs from the 'Shipments' table for shipments that were sent after a specific date. The placeholder in the WHERE clause represents the date to filter the shipments.
train.6923,tracking_orders,Find the id of the order which is shipped most recently.,1,SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments),"This virtual table retrieves the order IDs from the 'Shipments' table for the most recent shipment date. The subquery identifies the maximum shipment date, ensuring that only the latest shipment's order ID is selected."
train.6925,tracking_orders,List the names of all distinct products in alphabetical order.,1,SELECT DISTINCT product_name FROM products ORDER BY product_name,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT product_name FROM products ORDER BY product_name,"This virtual table lists the unique names of products from the 'Products' table, sorted in alphabetical order. The absence of any filtering conditions means it retrieves all distinct product names available."
train.6927,tracking_orders,List the ids of all distinct orders ordered by placed date.,1,SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed,"This virtual table provides a list of unique order identifiers from the 'Orders' table, sorted by the date when each order was placed. The placeholder in the SELECT statement allows for the retrieval of distinct order IDs, ensuring that each order is represented only once in the result set."
train.6929,tracking_orders,What is the id of the order which has the most items?,1,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of order IDs from the 'Orders' table, grouped by each order ID and ordered by the number of items associated with each order in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of order IDs to retrieve."
train.6931,tracking_orders,What is the name of the customer who has the largest number of orders?,1,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have placed orders, sorted by the number of orders they have made in descending order. The placeholder in the LIMIT clause represents the maximum number of customer names to return."
train.6933,tracking_orders,Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.,1,SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT invoice_number FROM invoices WHERE invoice_date < [PLACEHOLDER-TYPE:STRING] OR invoice_date > [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the invoice numbers from the 'Invoices' table that were issued either before or after a specified date. The placeholders in the WHERE clause represent the date range for filtering the invoices.
train.6935,tracking_orders,Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.,1,SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < [PLACEHOLDER-TYPE:STRING] OR invoice_date > [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique invoice details from the 'Invoices' table that were issued either before or after specific dates. The placeholders in the WHERE clause represent the date values for filtering the invoices.
train.6937,tracking_orders,"For each customer who has at least two orders, find the customer name and number of orders made.",1,"SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of customers who have placed a certain number of orders. It displays the customer names along with the count of their orders, filtered to show only those customers who meet or exceed a specified order count. The placeholder in the HAVING clause represents the minimum number of orders a customer must have placed to be included in the results."
train.6939,tracking_orders,Find the name of the customers who have at most two orders.,1,SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the names of customers from the 'Customers' table who have placed a limited number of orders. The placeholder in the HAVING clause represents the maximum number of orders a customer can have to be included in the results.
train.6941,tracking_orders,"List the names of the customers who have once bought product ""food"".",1,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = [PLACEHOLDER-TYPE:STRING] GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of customers who have ordered a specific product from the 'Products' table. The query joins multiple tables: 'Customers', 'Orders', 'Order_Items', and 'Products' to filter customers based on the product name and count the number of orders they have placed for that product. The placeholders in the WHERE clause represent the product's name and the minimum count of orders required."
train.6943,tracking_orders,"List the names of customers who have once canceled the purchase of the product ""food"" (the item status is ""Cancel"").",1,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = [PLACEHOLDER-TYPE:STRING] AND T4.product_name = [PLACEHOLDER-TYPE:STRING] GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of customers who have ordered a specific product with a certain order item status. The query joins multiple tables: 'Customers', 'Orders', 'Order_Items', and 'Products' to filter customers based on the order item status and product name. The placeholders in the WHERE clause represent the order item status and product name, while the HAVING clause ensures that only customers with a minimum number of orders are included."
train.6945,architecture,How many architects are female?,1,SELECT count(*) FROM architect WHERE gender  =  'female',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM architect WHERE gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of architects from the 'architect' table filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the architects being queried.
train.6946,architecture,"List the name, nationality and id of all male architects ordered by their names lexicographically.",1,"SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  nationality ,  id FROM architect WHERE gender  =  [PLACEHOLDER-TYPE:STRING] ORDER BY name","This virtual table provides the names, nationalities, and unique identifiers of architects from the 'architect' table who are of a specific gender. The placeholder in the WHERE clause represents the gender of the architects being queried."
train.6948,architecture,What is the average length in feet of the bridges?,1,SELECT avg(length_feet) FROM bridge,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(length_feet) FROM bridge,This virtual table calculates the average length in feet of bridges from the 'bridge' table. The result provides insight into the overall size of bridges designed by various architects.
train.6949,architecture,What are the names and year of construction for the mills of 'Grondzeiler' type?,1,"SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  built_year FROM mill WHERE TYPE  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and built years of mills from the 'mill' table that belong to a specific type. The placeholder in the WHERE clause represents the type of the mill.
train.6950,architecture,What are the distinct names and nationalities of the architects who have ever built a mill?,1,"SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id","This virtual table provides a distinct list of architect names along with their nationalities from the 'architect' table, specifically for those architects who have designed mills. The join operation links the 'architect' table with the 'mill' table using the architect's unique identifier, ensuring that only architects associated with mills are included in the results."
train.6951,architecture,What are the names of the mills which are not located in 'Donceel'?,1,SELECT name FROM mill WHERE LOCATION != 'Donceel',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM mill WHERE LOCATION != [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of mills from the 'mill' table that are not located in a specified geographical location. The placeholder in the WHERE clause represents the location to be excluded.
train.6953,architecture,What are the ids and names of the architects who built at least 3 bridges ?,1,"SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table lists the unique identifiers and names of architects who have designed a number of bridges that meets or exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum count of bridges an architect must have designed.
train.6954,architecture,"What is the id, name and nationality of the architect who built most mills?",1,"SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of architects along with their unique identifiers and nationalities, specifically focusing on those who have designed mills. The results are grouped by architect ID and ordered by the number of mills they have designed, with a limit on the number of results returned based on a specified number."
train.6956,architecture,What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?,1,SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LOCATION FROM bridge WHERE name  =  [PLACEHOLDER-TYPE:STRING] OR name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the geographical locations of bridges from the 'bridge' table that match specific names. The placeholders in the WHERE clause represent the names of the bridges being queried.
train.6957,architecture,Which of the mill names contains the french word 'Moulin'?,1,SELECT name FROM mill WHERE name LIKE '%Moulin%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM mill WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of mills from the 'mill' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the mill names.
train.6958,architecture,What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?,1,SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct names of mills designed by architects who have also designed bridges longer than a specified length in meters. The placeholder in the WHERE clause represents the minimum length of the bridges.
train.6960,architecture,How many architects haven't built a mill before year 1850?,1,SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  [PLACEHOLDER-TYPE:NUMBER] );,This virtual table provides a count of architects who have not designed any mills built before a specific year. The placeholder in the query represents the year used to filter the mills.
train.6961,architecture,"show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",1,SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  [PLACEHOLDER-TYPE:STRING] ORDER BY t1.length_feet,"This virtual table lists the names of bridges designed by architects from a specific nationality. The placeholder in the WHERE clause represents the nationality of the architect, and the results are ordered by the length of the bridges in feet."
train.6962,culture_company,How many book clubs are there?,1,SELECT count(*) FROM book_club,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM book_club,"This virtual table provides a count of all entries in the 'book_club' table, which includes various discussions about books. The result will indicate the total number of book club discussions recorded."
train.6964,culture_company,"show the titles, and authors or editors for all books made after the year 1989.",1,"SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the titles and authors or editors of books from the 'book_club' table that were published or discussed after a specific year. The placeholder in the WHERE clause represents the year of interest.
train.6966,culture_company,Show all distinct publishers for books.,1,SELECT DISTINCT publisher FROM book_club,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT publisher FROM book_club,"This virtual table provides a list of unique publishers from the 'book_club' table. The query uses the DISTINCT keyword to ensure that each publisher is only listed once, regardless of how many times they appear in the table."
train.6970,culture_company,Show all publishers and the number of books for each publisher.,1,"SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT publisher ,  count(*) FROM book_club GROUP BY publisher","This virtual table summarizes the number of book club entries associated with each publisher from the 'book_club' table. The query groups the results by the publisher's name, allowing users to see how many books from each publisher were discussed in the book club."
train.6973,culture_company,Return the publisher that has published the most books.,1,SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of publishers from the 'book_club' table, grouped by the publisher's name. The results are ordered by the number of books published by each publisher in descending order, with a limit on the number of publishers returned as specified by the placeholder."
train.6974,culture_company,Show all book categories and the number of books in each category.,1,"SELECT category ,  count(*) FROM book_club GROUP BY category",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT category ,  count(*) FROM book_club GROUP BY category","This virtual table summarizes the number of book club entries categorized by genre or category. The placeholder in the SELECT statement allows for counting the entries in each category, providing insights into the distribution of book genres discussed in the book club."
train.6976,culture_company,List categories that have at least two books after year 1989.,1,SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT category FROM book_club WHERE YEAR  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY category HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the categories of books discussed in the 'book_club' table that were published after a specific year. The results are grouped by category, and only those categories with a minimum number of discussions are included, as specified by the placeholder."
train.6984,culture_company,How many movie directors are there?,1,SELECT COUNT (DISTINCT director) FROM movie,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT (DISTINCT director) FROM movie,This virtual table provides the count of distinct directors from the 'movie' table. The result will indicate how many unique directors have contributed to the movies listed in the database.
train.6986,culture_company,What is the title and director for the movie with highest worldwide gross in the year 2000 or before?,1,"SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT title ,  director FROM movie WHERE YEAR  <=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY gross_worldwide DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of movie titles and their directors from the 'movie' table, filtered to include only those movies released on or before a specific year. The results are ordered by the total worldwide gross revenue in descending order, and the number of results returned is limited to a specified amount."
train.6988,culture_company,Show all director names who have a movie in both year 1999 and 2000.,1,SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT director FROM movie WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT director FROM movie WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"The virtual table retrieves the directors of movies released in two specific years, providing a comparison of directors from those years. The placeholders in the WHERE clause represent the years of interest."
train.6992,culture_company,"What is the average, maximum, and minimum budget for all movies before 2000.",1,"SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the average, maximum, and minimum budget of movies from the 'movie' table that were released before a specific year. The placeholder in the WHERE clause represents the year threshold for filtering the movies."
train.6997,culture_company,What are the titles of movies and books corresponding to companies incorporated in China?,1,"SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the titles of movies and the corresponding book titles discussed in book clubs, filtered by the year a cultural company was incorporated. The placeholders in the WHERE clause represent the year of incorporation."
train.6998,culture_company,Show all company names with a movie directed in year 1999.,1,SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of cultural companies associated with movies released in a specific year. The placeholder in the WHERE clause represents the year of the movie's release.
dev.0,concert_singer,How many singers do we have?,1,SELECT count(*) FROM singer,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM singer,"This virtual table provides the total number of singers recorded in the 'singer' table. The query counts all entries in the table, which helps in understanding the size of the singer dataset."
dev.2,concert_singer,"Show name, country, age for all singers ordered by age from the oldest to the youngest.",1,"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","This virtual table provides a list of singers along with their country of origin and current age, sorted by age in descending order. The query retrieves data from the 'singer' table, focusing on the 'name', 'country', and 'age' columns."
dev.4,concert_singer,"What is the average, minimum, and maximum age of all singers from France?",1,"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  [PLACEHOLDER-TYPE:STRING]","This virtual table calculates the average, minimum, and maximum ages of singers from a specific country in the 'singer' table. The placeholder in the WHERE clause represents the country of origin of the singers."
dev.6,concert_singer,Show the name and the release year of the song by the youngest singer.,1,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of song titles and their release years from the 'singer' table, ordered by the age of the singers. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return."
dev.8,concert_singer,What are all distinct countries where singers above age 20 are from?,1,SELECT DISTINCT country FROM singer WHERE age  >  20,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT country FROM singer WHERE age  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique countries from which singers originate, filtered by a specified minimum age. The placeholder in the WHERE clause represents the age threshold for the singers."
dev.10,concert_singer,Show all countries and the number of singers in each country.,1,"SELECT country ,  count(*) FROM singer GROUP BY country",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT country ,  count(*) FROM singer GROUP BY country",This virtual table summarizes the number of singers from each country by counting the entries in the 'singer' table grouped by the 'Country' column. The result will show the country names alongside the total count of singers from each respective country.
dev.12,concert_singer,List all song names by singers above the average age.,1,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),This virtual table describes the titles of songs performed by singers who are older than the average age of all singers in the 'singer' table. The placeholder in the WHERE clause represents the condition for the age comparison.
dev.17,concert_singer,What is the average and maximum capacities for all stadiums ?,1,"select avg(capacity) ,  max(capacity) from stadium",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"select avg(capacity) ,  max(capacity) from stadium",This virtual table provides the average and maximum capacity of stadiums from the 'stadium' table. The placeholders in the SELECT clause represent the aggregate functions applied to the 'capacity' column.
dev.18,concert_singer,What is the name and capacity for the stadium with highest average attendance?,1,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and capacities of stadiums from the 'stadium' table, ordered by their average attendance in descending order. The placeholder in the LIMIT clause represents the maximum number of stadiums to be displayed."
dev.20,concert_singer,How many concerts are there in year 2014 or 2015?,1,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM concert WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of concerts that took place in specific years from the 'concert' table. The placeholders in the WHERE clause represent the years of interest.
dev.24,concert_singer,Show the stadium name and capacity with most number of concerts in year 2014 or after.,1,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and capacities of stadiums that hosted concerts in a specified year or later. The results are grouped by stadium and ordered by the number of concerts held, with a limit on the number of stadiums returned. The placeholders in the query allow users to specify the year and the maximum number of stadiums to display."
dev.25,concert_singer,What is the name and capacity of the stadium with the most concerts after 2013 ?,1,"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  [PLACEHOLDER-TYPE:NUMBER] group by t2.stadium_id order by count(*) desc limit [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and capacities of stadiums that hosted concerts after a specified year. The results are grouped by stadium and ordered by the number of concerts held at each stadium, with a limit on the number of results returned. The placeholders in the query allow users to specify the year and the maximum number of results they wish to retrieve."
dev.28,concert_singer,Show the stadium names without any concert.,1,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),This virtual table lists the names of stadiums from the 'stadium' table that have not hosted any concerts. The placeholder in the WHERE clause represents the unique identifier of the stadiums.
dev.31,concert_singer,Show names for all stadiums except for stadiums having a concert in year 2014.,1,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of stadiums that did not host any concerts in a specific year. The placeholder in the WHERE clause represents the year for which we want to check the concert schedule.
dev.33,concert_singer,Show the name and theme for all concerts and the number of singers in each concert.,1,"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","This virtual table provides a summary of concert events, including the concert name, theme, and the total number of singers performing at each concert. The placeholders in the query allow for dynamic filtering or modification based on specific concert criteria."
dev.34,concert_singer,"What are the names , themes , and number of singers for every concert ?",1,"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","This virtual table provides a summary of concert events, including the concert name, theme, and the number of singers performing at each concert. The data is aggregated from the 'singer_in_concert' and 'concert' tables, with a grouping based on the concert identifier to count the number of associated singers."
dev.37,concert_singer,List all singer names in concerts in year 2014.,1,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of singers who performed at concerts held in a specific year. The placeholders in the WHERE clause represent the year of the concert.
dev.39,concert_singer,what is the name and nation of the singer who have a song having 'Hey' in its name?,1,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  country FROM singer WHERE song_name LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and countries of singers from the 'singer' table who have performed songs with titles that match a specific pattern. The placeholder in the WHERE clause represents the song title pattern to search for.
dev.41,concert_singer,Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,1,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and locations of stadiums that hosted concerts in two specific years. The placeholders in the WHERE clause represent the years of interest for the concerts.
dev.43,concert_singer,Find the number of concerts happened in the stadium with the highest capacity .,1,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),2,high,False,True,False,False,False,False,False,False,False,True,False,False,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit [PLACEHOLDER-TYPE:NUMBER]),This virtual table provides the count of concerts held at the stadium with the highest capacity. The placeholder in the subquery limits the selection to the top stadium based on capacity.
dev.45,pets_1,Find the number of pets whose weight is heavier than 10.,1,SELECT count(*) FROM pets WHERE weight  >  10,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM pets WHERE weight  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of pets from the 'Pets' table that exceed a specified weight. The placeholder in the WHERE clause represents the weight threshold for filtering the pets.
dev.49,pets_1,Find the maximum weight for each type of pet. List the maximum weight and pet type.,1,"SELECT max(weight) ,  petType FROM pets GROUP BY petType",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","This virtual table provides the maximum weight of each type of pet from the 'Pets' table. The query groups the results by 'PetType', allowing for a summary of the heaviest pet for each category."
dev.51,pets_1,Find number of pets owned by students who are older than 20.,1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of students from the 'Student' table who own pets and are older than a specified age. The placeholder in the WHERE clause represents the age threshold for filtering the students.
dev.53,pets_1,Find the number of dog pets that are raised by female students (with sex F).,1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  [PLACEHOLDER-TYPE:STRING] AND T3.pettype  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of students who own pets, filtered by gender and pet type. The placeholders in the WHERE clause represent the gender of the students and the type of pet they own."
dev.55,pets_1,Find the number of distinct type of pets.,1,SELECT count(DISTINCT pettype) FROM pets,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT pettype) FROM pets,This virtual table provides the count of distinct pet types from the 'Pets' table. The query uses the COUNT function to aggregate the unique types of pets available.
dev.59,pets_1,Find the first name of students who have both cat and dog pets .,1,select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  [PLACEHOLDER-TYPE:STRING] intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students from the 'Student' table who own pets of a specific type. The query uses joins to connect the 'Student', 'Has_Pet', and 'Pets' tables, filtering for students who have pets of the specified type. The placeholder in the WHERE clause represents the type of pet."
dev.60,pets_1,What are the students' first names who have both cats and dogs as pets?,1,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students from the 'Student' table who own pets of a specific type. The query uses an intersection to find students who own two different types of pets, represented by placeholders in the WHERE clause for the pet types."
dev.64,pets_1,What are the ids of the students who do not own cats as pets?,1,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students from the 'Student' table who do not own a specific type of pet. The placeholder in the query represents the type of pet that is being excluded from the results.
dev.65,pets_1,Find the first name and age of students who have a dog but do not have a cat as a pet.,1,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  [PLACEHOLDER-TYPE:STRING] AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  [PLACEHOLDER-TYPE:STRING])","This virtual table provides the first names and ages of students who own a specific type of pet, while excluding those who also own another pet of the same type. The placeholders in the WHERE clause represent the type of pet being queried."
dev.68,pets_1,"What type of pet is the youngest animal, and how much does it weigh?",1,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of pet types and their corresponding weights from the 'Pets' table, ordered by the age of the pets. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
dev.69,pets_1,Find the id and weight of all pets whose age is older than 1.,1,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT petid ,  weight FROM pets WHERE pet_age  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the identifiers and weights of pets from the 'Pets' table that are older than a specified age. The placeholder in the WHERE clause represents the age threshold for filtering the pets.
dev.71,pets_1,Find the average and maximum age for each type of pet.,1,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",This virtual table provides the average and maximum age of pets grouped by their type from the 'Pets' table. The placeholders in the SELECT clause represent the calculated values for pet ages and the type of pet.
dev.73,pets_1,Find the average weight for each pet type.,1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","This virtual table provides the average weight of pets grouped by their type from the 'Pets' table. The query aggregates the weight of pets and categorizes them based on their type, allowing for an analysis of the average weight for each type of pet."
dev.76,pets_1,What are the different first names and ages of the students who do have pets?,1,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","This virtual table provides a list of distinct first names and ages of students from the 'Student' table who own pets. The join operation links the 'Student' table with the 'Has_Pet' table based on the unique student identifier, ensuring that only students with pets are included in the results."
dev.77,pets_1,Find the id of the pet owned by student whose last name is ‘Smith’.,1,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the identifiers of pets owned by students from the 'Student' table, specifically filtering for students with a given last name. The placeholder in the WHERE clause represents the last name of the student."
dev.79,pets_1,Find the number of pets for each student who has any pet and student id.,1,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","This virtual table provides a count of pets owned by each student from the 'Student' table. It joins the 'Student' table with the 'Has_Pet' table to link students with their pets, grouping the results by each student's unique identifier. The placeholder in the SELECT clause represents the count of pets for each student."
dev.80,pets_1,"For students who have pets , how many pets does each student have ? list their ids instead of names .",1,"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","This virtual table provides a count of pets owned by each student from the 'Student' table. It joins the 'Student' table with the 'Has_Pet' table to link students with their pets, grouping the results by each student's unique identifier. The placeholder in the SELECT clause represents the count of pets for each student."
dev.81,pets_1,Find the first name and gender of student who have more than one pet.,1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first names and genders of students from the 'Student' table who own more than a specified number of pets. The placeholder in the HAVING clause represents the minimum number of pets owned by the students.
dev.83,pets_1,Find the last name of the student who has a cat that is age 3.,1,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  [PLACEHOLDER-TYPE:NUMBER] AND T3.pettype  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of students from the 'Student' table who own pets of a specific type and age. The placeholders in the WHERE clause represent the pet's age and type.
dev.85,pets_1,Find the average age of students who do not have any pet .,1,select avg(age) from student where stuid not in (select stuid from has_pet),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,select avg(age) from student where stuid not in (select stuid from has_pet),"This virtual table calculates the average age of students from the 'Student' table who do not own any pets. The subquery identifies students who have pets, and the placeholder in the WHERE clause represents the condition of not being in that list."
dev.87,car_1,How many continents are there?,1,SELECT count(*) FROM CONTINENTS;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM CONTINENTS;,"This virtual table provides the total number of continents recorded in the 'continents' table. The query counts all entries in the table, which helps in understanding the diversity of continents represented."
dev.89,car_1,"How many countries does each continent have? List the continent id, continent name and the number of countries.",1,"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",This virtual table provides a summary of the number of countries associated with each continent. It retrieves the unique identifier and name of each continent from the 'continents' table and counts the number of countries that belong to each continent by joining with the 'countries' table. The result is grouped by the continent's identifier.
dev.91,car_1,How many countries are listed?,1,SELECT count(*) FROM COUNTRIES;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM COUNTRIES;,This virtual table provides the total number of countries listed in the 'countries' table. The query uses the COUNT function to aggregate the total entries without any specific filtering conditions.
dev.93,car_1,"How many models does each car maker produce? List maker full name, id and the number.",1,"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",This virtual table provides a summary of car makers along with their unique identifiers and the count of car models they produce. The placeholders in the SELECT statement allow for dynamic querying based on the car makers' identifiers.
dev.98,car_1,What is the model for the car with a weight smaller than the average?,1,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"The virtual table describes the car models from the 'car_names' table that are associated with car entries in the 'cars_data' table, where the weight of the cars is less than the average weight of all cars. The placeholder in the WHERE clause represents the condition for filtering based on the average weight."
dev.99,car_1,Find the name of the makers that produced some cars in the year of 1970?,1,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides a list of distinct car makers from the 'car_makers' table who have produced models in a specific year. The query joins multiple tables to ensure that only relevant car makers are included based on the models they have produced and the corresponding car data for that year. The placeholder in the WHERE clause represents the year of manufacture.
dev.105,car_1,How many car makers are there in each continents? List the continent name and the count.,1,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","This virtual table summarizes the number of car makers associated with each continent by joining the 'continents', 'countries', and 'car_makers' tables. The placeholder in the SELECT statement represents the continent's name, and the count function aggregates the number of car makers per continent."
dev.107,car_1,Which of the countries has the most car makers? List the country name.,1,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of country names from the 'countries' table, which are associated with car makers from the 'car_makers' table. The results are grouped by country to count the number of car makers per country, sorted in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to return."
dev.109,car_1,How many car models are produced by each maker ? Only list the count and the maker full name .,1,"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",This virtual table provides a count of car models grouped by their respective car makers. The placeholder in the SELECT statement represents the count of models associated with each car maker's full name.
dev.110,car_1,What is the number of car models that are produced by each maker and what is the id and full name of each maker?,1,"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","This virtual table provides a count of car models associated with each car maker from the 'model_list' and 'car_makers' tables. The placeholders represent the car maker's full name and unique identifier, allowing users to see how many models each maker has produced."
dev.117,car_1,What is the average miles per gallon(mpg) of the cars with 4 cylinders?,1,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  [PLACEHOLDER-TYPE:NUMBER];,This virtual table calculates the average miles per gallon (MPG) of cars from the 'cars_data' table that have a specific number of cylinders. The placeholder in the WHERE clause represents the number of cylinders in the car's engine.
dev.119,car_1,What is the smallest weight of the car produced with 8 cylinders on 1974 ?,1,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,select min(weight) from cars_data where cylinders  =  [PLACEHOLDER-TYPE:NUMBER] and year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the minimum weight of cars from the 'cars_data' table that have a specific number of cylinders and were manufactured in a particular year. The placeholders in the WHERE clause represent the number of cylinders and the year of manufacture.
dev.123,car_1,What are the countries having at least one car maker? List name and id.,1,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of countries along with their unique identifiers from the 'countries' table, specifically for those countries that have a certain number of car makers associated with them. The placeholder in the HAVING clause represents the minimum count of car makers required for a country to be included in the results."
dev.125,car_1,What is the number of the cars with horsepower more than 150?,1,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the count of car entries from the 'cars_data' table where the horsepower exceeds a specified value. The placeholder in the WHERE clause represents the horsepower threshold.
dev.132,car_1,What is the largest amount of horsepower for the models with 3 cylinders and what make is it?,1,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makes along with their horsepower from the 'car_names' and 'cars_data' tables. The results are filtered based on the number of cylinders in the car's engine, represented by a placeholder for numeric values. Additionally, the results are ordered by horsepower in descending order, and a limit is applied to the number of results returned, also represented by a numeric placeholder."
dev.135,car_1,What is the average horsepower of the cars before 1980?,1,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER];,This virtual table calculates the average horsepower of cars from the 'cars_data' table that were manufactured before a specific year. The placeholder in the WHERE clause represents the year of manufacture.
dev.136,car_1,What is the average horsepower for all cars produced before 1980 ?,1,select avg(horsepower) from cars_data where year  <  1980;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,select avg(horsepower) from cars_data where year  <  [PLACEHOLDER-TYPE:NUMBER];,This virtual table calculates the average horsepower of cars from the 'cars_data' table that were manufactured before a specific year. The placeholder in the WHERE clause represents the year of manufacture.
dev.137,car_1,What is the average edispl of the cars of model volvo?,1,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the average engine displacement of cars from the 'cars_data' table based on a specific car model from the 'car_names' table. The placeholder in the WHERE clause represents the name of the car model being queried.
dev.139,car_1,What is the maximum accelerate for different number of cylinders?,1,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","This virtual table provides the maximum acceleration times for cars grouped by the number of cylinders in their engines. The placeholder in the SELECT clause represents the maximum acceleration value, while the GROUP BY clause organizes the results based on the cylinder count."
dev.143,car_1,How many cars have more than 4 cylinders?,1,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the count of car entries from the 'cars_data' table that have a specified number of cylinders or more. The placeholder in the WHERE clause represents the minimum number of cylinders to filter the results.
dev.145,car_1,how many cars were produced in 1980?,1,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the total count of car entries from the 'cars_data' table for a specific manufacturing year. The placeholder in the WHERE clause represents the year of manufacture.
dev.147,car_1,How many car models were produced by the maker with full name American Motor Company?,1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of car models associated with a specific car maker from the 'car_makers' and 'model_list' tables. The placeholder in the WHERE clause represents the full name of the car maker.
dev.149,car_1,Which makers designed more than 3 car models? List full name and the id.,1,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makers along with their unique identifiers from the 'car_makers' table. It includes only those car makers that have produced more than a specified number of car models, as indicated by the placeholder in the HAVING clause."
dev.151,car_1,Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,1,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  [PLACEHOLDER-TYPE:STRING] OR T4.weight  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists distinct car models from the 'CAR_NAMES' table that are associated with a specific car maker or exceed a certain weight. The placeholders in the WHERE clause represent the car maker's full name and the weight threshold.
dev.155,car_1,What is the horsepower of the car with the largest accelerate?,1,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"The virtual table describes the horsepower of cars from the 'cars_data' table, ordered by the time taken to accelerate from 0 to 60 mph in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
dev.159,car_1,How many cars have a larger accelerate than the car with the largest horsepower?,1,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER] );,This virtual table provides a count of cars from the 'cars_data' table that have an acceleration time greater than the acceleration time of the top specified number of cars sorted by horsepower. The placeholder in the subquery represents the number of top cars to consider for the comparison.
dev.163,car_1,How many cars has over 6 cylinders?,1,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the count of car entries from the 'cars_data' table that have a specified number of cylinders. The placeholder in the WHERE clause represents the minimum number of cylinders to filter the results.
dev.167,car_1,"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",1,"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  [PLACEHOLDER-TYPE:NUMBER];",This virtual table provides a list of car makes and their identifiers from the 'CARS_DATA' and 'CAR_NAMES' tables. It filters the results to include only those cars with horsepower greater than the minimum horsepower recorded in the 'CARS_DATA' table and limits the results to cars with a specified number of cylinders. The placeholder in the WHERE clause represents the maximum number of cylinders allowed.
dev.169,car_1,What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?,1,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,select max(mpg) from cars_data where cylinders  =  [PLACEHOLDER-TYPE:NUMBER] or year  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the maximum miles per gallon (MPG) from the 'cars_data' table for cars that either have a specific number of cylinders or were manufactured before a certain year. The placeholders in the WHERE clause represent the number of cylinders and the year of manufacture.
dev.172,car_1,What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  [PLACEHOLDER-TYPE:NUMBER] AND T4.FullName != [PLACEHOLDER-TYPE:STRING];,"This virtual table provides a list of distinct car models from the 'model_list' table that meet specific criteria. It filters the results based on the weight of the cars from the 'cars_data' table, ensuring that only cars lighter than a specified weight are included. Additionally, it excludes car makers based on their full name from the 'car_makers' table, allowing users to focus on models from specific manufacturers. The placeholders in the WHERE clause represent the maximum weight and the name of the car maker to be excluded."
dev.173,car_1,What are the name of the countries where there is not a single car maker?,1,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"This virtual table lists the names of countries from the 'countries' table that do not have any associated car makers in the 'car_makers' table. The query uses an EXCEPT clause to filter out countries that are linked to car makers, ensuring only those without any car manufacturing presence are displayed."
dev.177,car_1,What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,1,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  [PLACEHOLDER-TYPE:STRING];","This virtual table provides a list of countries that have a significant number of car makers and also includes countries that produce a specific car model. The first part of the query retrieves countries with a count of car makers greater than a specified number, while the second part retrieves countries associated with a specific car model. The placeholders represent the minimum count of car makers and the name of the car model, respectively."
dev.178,car_1,What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?,1,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  [PLACEHOLDER-TYPE:NUMBER] union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  [PLACEHOLDER-TYPE:STRING];","This virtual table provides a list of countries along with their identifiers from the 'countries' table. It includes countries that have more than a specified number of car makers and also those that have car models matching a specific name. The placeholders in the HAVING and WHERE clauses represent the minimum number of car makers and the specific car model name, respectively."
dev.179,flight_2,"Which country does Airline ""JetBlue Airways"" belong to?",1,SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Country FROM AIRLINES WHERE Airline  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the country of an airline based on its name. The placeholder in the WHERE clause represents the specific airline's name for which the country is being queried.
dev.181,flight_2,"What is the abbreviation of Airline ""JetBlue Airways""?",1,SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Abbreviation FROM AIRLINES WHERE Airline  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the abbreviation of a specific airline from the 'airlines' table based on the airline's name. The placeholder in the WHERE clause represents the name of the airline.
dev.183,flight_2,"List all airline names and their abbreviations in ""USA"".",1,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and abbreviations of airlines from the 'airlines' table that are based in a specific country. The placeholder in the WHERE clause represents the name of the country.
dev.185,flight_2,List the airport code and name in the city of Anthony.,1,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the airport code and name of airports located in a specific city from the 'airports' table. The placeholder in the WHERE clause represents the name of the city.
dev.187,flight_2,How many airlines do we have?,1,SELECT count(*) FROM AIRLINES,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM AIRLINES,"This virtual table provides the total number of airlines recorded in the 'airlines' table. The query counts all entries in the table, which helps in understanding the scale of the airline data available."
dev.189,flight_2,How many airports do we have?,1,SELECT count(*) FROM AIRPORTS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM AIRPORTS,"This virtual table provides the total number of airports recorded in the 'airports' table. The query counts all entries in the table, which helps in understanding the scale of airport data available."
dev.191,flight_2,How many flights do we have?,1,SELECT count(*) FROM FLIGHTS,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM FLIGHTS,"This virtual table provides the total number of flights recorded in the 'flights' table. The count function is used to aggregate the total number of entries, which represents the total flights available."
dev.193,flight_2,Which airline has abbreviation 'UAL'?,1,SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Airline FROM AIRLINES WHERE Abbreviation  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of airlines from the 'airlines' table that match a specific abbreviation. The placeholder in the WHERE clause represents the abbreviation of the airline.
dev.195,flight_2,How many airlines are from USA?,1,SELECT count(*) FROM AIRLINES WHERE Country  =  'USA',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM AIRLINES WHERE Country  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of airlines based in a specific country from the 'airlines' table. The placeholder in the WHERE clause represents the name of the country.
dev.197,flight_2,Which city and country is the Alton airport at?,1,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the city and country information for airports from the 'airports' table that match a specific airport name. The placeholder in the WHERE clause represents the name of the airport being queried.
dev.199,flight_2,What is the airport name for airport 'AKO'?,1,SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the full name of an airport from the 'airports' table based on a specific airport code. The placeholder in the WHERE clause represents the airport code being queried.
dev.201,flight_2,What are airport names at City 'Aberdeen'?,1,SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT AirportName FROM AIRPORTS WHERE City = [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of airports from the 'airports' table that are located in a specific city. The placeholder in the WHERE clause represents the city's unique identifier.
dev.203,flight_2,How many flights depart from 'APG'?,1,SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of flights departing from a specific airport. The placeholder in the WHERE clause represents the airport code from which the flights are sourced.
dev.205,flight_2,How many flights have destination ATO?,1,SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of flights arriving at a specific airport from the 'flights' table. The placeholder in the WHERE clause represents the airport code for the destination airport.
dev.207,flight_2,How many flights depart from City Aberdeen?,1,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of flights departing from a specific city. It joins the 'flights' table with the 'airports' table based on the source airport code, filtering the results to include only those flights that originate from the specified city. The placeholder in the WHERE clause represents the city's name."
dev.209,flight_2,How many flights arriving in Aberdeen city?,1,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of flights arriving at a specific city by joining the 'flights' and 'airports' tables. The placeholder in the WHERE clause represents the city identifier for which the flight count is being queried.
dev.211,flight_2,How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,1,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  [PLACEHOLDER-TYPE:STRING] AND T3.City  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of flights that depart from one city and arrive at another city. The placeholders in the WHERE clause represent the unique identifiers for the source and destination cities.
dev.215,flight_2,How many 'United Airlines' flights go to Airport 'ASY'?,1,SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  [PLACEHOLDER-TYPE:STRING] AND T2.DestAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of flights operated by a specific airline to a specific destination airport. The placeholders in the WHERE clause represent the airline's name and the destination airport's code.
dev.217,flight_2,How many 'United Airlines' flights depart from Airport 'AHD'?,1,SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  [PLACEHOLDER-TYPE:STRING] AND T2.SourceAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of flights operated by a specific airline from a particular source airport. The placeholders in the WHERE clause represent the airline's name and the source airport's code.
dev.219,flight_2,How many United Airlines flights go to City 'Aberdeen'?,1,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  [PLACEHOLDER-TYPE:STRING] AND T3.Airline  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of flights arriving at a specific city from the 'flights' table, by joining with the 'airports' and 'airlines' tables. The placeholders in the WHERE clause represent the city and airline name for filtering the results."
dev.221,flight_2,Which city has most number of arriving flights?,1,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities that are served by the airports where flights arrive. The results are grouped by city and ordered by the number of flights arriving at each city, with a limit on the number of cities returned. The placeholder in the LIMIT clause represents the maximum number of cities to display."
dev.223,flight_2,Which city has most number of departing flights?,1,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities from which the most flights depart, based on the data from the 'airports' and 'flights' tables. The placeholder in the LIMIT clause allows the user to specify the number of top cities to retrieve."
dev.233,flight_2,What are airlines that have some flight departing from airport 'AHD'?,1,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the airlines operating flights from a specific source airport. The placeholder in the WHERE clause represents the airport code from which the flight departs.
dev.235,flight_2,What are airlines that have flights arriving at airport 'AHD'?,1,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the airlines that operate flights arriving at a specific airport. The placeholder in the WHERE clause represents the airport code for the destination.
dev.237,flight_2,Find all airlines that have flights from both airports 'APG' and 'CVO'.,1,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the airlines that operate flights departing from a specific source airport. The query uses an intersection to find airlines that have flights from the same source airport, represented by a placeholder for the airport code."
dev.239,flight_2,Find all airlines that have flights from airport 'CVO' but not from 'APG'.,1,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies airlines that operate flights from a specific source airport, excluding those that also operate flights from another specified source airport. The placeholders in the WHERE clause represent the airport codes for filtering the results."
dev.247,flight_2,"What are flight numbers of flights departing from Airport ""APG""?",1,SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unique flight numbers from the 'flights' table that are departing from a specific source airport. The placeholder in the WHERE clause represents the airport code from which the flight is originating.
dev.249,flight_2,"What are flight numbers of flights arriving at Airport ""APG""?",1,SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unique flight numbers from the 'flights' table for flights arriving at a specific destination airport. The placeholder in the WHERE clause represents the airport code of the destination.
dev.251,flight_2,"What are flight numbers of flights departing from City ""Aberdeen ""?",1,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the flight numbers from the 'flights' table that depart from airports located in a specific city. The placeholder in the WHERE clause represents the name of the city.
dev.253,flight_2,"What are flight numbers of flights arriving at City ""Aberdeen""?",1,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unique flight numbers from the 'flights' table that arrive at a specific city. The placeholder in the WHERE clause represents the name of the city where the airport is located.
dev.255,flight_2,Find the number of flights landing in the city of Aberdeen or Abilene.,1,SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  [PLACEHOLDER-TYPE:STRING] OR T2.city  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of flights arriving at specific airports located in designated cities. The placeholders in the WHERE clause represent the names of the cities being queried.
dev.257,flight_2,Find the name of airports which do not have any flight in and out.,1,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),This virtual table lists the names of airports from the 'Airports' table that do not serve as either source or destination for any flights. The placeholder in the WHERE clause represents the airport codes that are excluded from the results.
dev.261,employee_hire_evaluation,Sort employee names by their age in ascending order.,1,SELECT name FROM employee ORDER BY age,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM employee ORDER BY age,"This virtual table lists the names of employees from the 'employee' table, ordered by their age. The ordering allows for easy identification of employees from youngest to oldest."
dev.263,employee_hire_evaluation,What is the number of employees from each city?,1,"SELECT count(*) ,  city FROM employee GROUP BY city",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  city FROM employee GROUP BY city",This virtual table provides a count of employees grouped by their city of residence from the 'employee' table. The result will show the number of employees in each city.
dev.265,employee_hire_evaluation,Which cities do more than one employee under age 30 come from?,1,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT city FROM employee WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] GROUP BY city HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of cities where employees under a certain age are residing. The placeholders in the WHERE clause represent the maximum age limit and the minimum count of employees in each city.
dev.269,employee_hire_evaluation,Find the manager name and district of the shop whose number of products is the largest.,1,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of shop managers and their respective districts from the 'shop' table, ordered by the total number of products available in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
dev.271,employee_hire_evaluation,find the minimum and maximum number of products of all stores.,1,"SELECT min(Number_products) ,  max(Number_products) FROM shop",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT min(Number_products) ,  max(Number_products) FROM shop",This virtual table provides the minimum and maximum number of products available across all shops in the 'shop' table. The query aggregates the 'Number_products' column to give insights into the product range in the shops.
dev.275,employee_hire_evaluation,Find the names of stores whose number products is more than the average number of products.,1,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"This virtual table lists the names of shops from the 'shop' table that have a greater number of products than the average number of products across all shops. The subquery calculates the average number of products, and the main query filters shops based on this average."
dev.277,employee_hire_evaluation,find the name of employee who was awarded the most times in the evaluation.,1,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of employees from the 'employee' table who have undergone evaluations, sorted by the number of evaluations they have received. The placeholder in the LIMIT clause allows for specifying the maximum number of employee names to return."
dev.279,employee_hire_evaluation,Find the name of the employee who got the highest one time bonus.,1,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of employees from the 'employee' table who have received evaluations, ordered by the bonus amount awarded to them in descending order. The placeholder in the LIMIT clause represents the maximum number of employee names to be returned."
dev.281,employee_hire_evaluation,Find the names of employees who never won any award in the evaluation.,1,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),This virtual table lists the names of employees from the 'employee' table who have not received any evaluations. The placeholder in the subquery represents the employee identifiers that have been evaluated.
dev.283,employee_hire_evaluation,What is the name of the shop that is hiring the largest number of employees?,1,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of shops that have hired the most employees. It aggregates the data from the 'hiring' and 'shop' tables, counting the number of employees hired per shop and ordering the results to show the top shops based on the number of hires. The placeholder in the LIMIT clause allows the user to specify how many top shops to retrieve."
dev.285,employee_hire_evaluation,Find the name of the shops that do not hire any employee.,1,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"This virtual table lists the names of shops from the 'shop' table that do not have any employees hired from the 'hiring' table. The subquery checks for shop IDs that are present in the hiring records, and the main query filters out those shops."
dev.287,employee_hire_evaluation,Find the number of employees hired in each shop; show the shop name as well.,1,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","This virtual table provides a count of employees hired at each shop, along with the shop's name. The count is derived from the 'hiring' table, which is joined with the 'shop' table to associate each hire with the corresponding shop. The result is grouped by the shop's name to aggregate the number of hires per shop."
dev.289,employee_hire_evaluation,What is total bonus given in all evaluations?,1,SELECT sum(bonus) FROM evaluation,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(bonus) FROM evaluation,"This virtual table summarizes the total bonus amounts awarded to employees from the 'evaluation' table. The query aggregates the 'bonus' column to provide a cumulative total, which can be useful for understanding overall employee performance rewards."
dev.291,employee_hire_evaluation,Give me all the information about hiring.,1,SELECT * FROM hiring,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT * FROM hiring,"This virtual table provides a comprehensive view of the hiring records from the 'hiring' table, which includes details about the employees hired at various shops. The table captures the unique identifiers for both the shop and the employee, along with the start date of employment and whether the employee is full-time. This allows for an analysis of hiring patterns and employee statuses across different shops."
dev.293,employee_hire_evaluation,Which district has both stores with less than 3000 products and stores with more than 10000 products?,1,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT district FROM shop WHERE Number_products  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT district FROM shop WHERE Number_products  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies districts that have shops with a number of products below a certain threshold and above another threshold. The placeholders in the query represent the numeric values for the product counts.
dev.299,cre_Doc_Template_Mgt,"List document IDs, document names, and document descriptions for all documents.",1,"SELECT document_id ,  document_name ,  document_description FROM Documents",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_id ,  document_name ,  document_description FROM Documents","This virtual table describes the document ID, name, and description of documents from the 'Documents' table. The query retrieves all documents without any filtering conditions, allowing users to see all available documents in the database."
dev.301,cre_Doc_Template_Mgt,What is the document name and template id for document with description with the letter 'w' in it?,1,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and associated template IDs of documents from the 'Documents' table that contain a specific description. The placeholder in the WHERE clause represents a pattern to match the document's description.
dev.303,cre_Doc_Template_Mgt,"What is the document id, template id and description for document named ""Robbin CV""?",1,"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the document ID, template ID, and a brief description of documents from the 'Documents' table that match a specific document name. The placeholder in the WHERE clause represents the name of the document being queried."
dev.305,cre_Doc_Template_Mgt,How many different templates do all document use?,1,SELECT count(DISTINCT template_id) FROM Documents,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT template_id) FROM Documents,"This virtual table provides the count of distinct templates associated with documents in the 'Documents' table. The query counts unique 'Template_ID' values, indicating how many different templates are linked to the documents."
dev.307,cre_Doc_Template_Mgt,How many documents are using the template with type code 'PPT'?,1,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of documents associated with a specific type of template from the 'Documents' and 'Templates' tables. The placeholder in the WHERE clause represents the template type code that is used to filter the results.
dev.310,cre_Doc_Template_Mgt,"What are all different template ids used for documents, and how many times were each of them used?",1,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",This virtual table summarizes the number of documents associated with each template from the 'Documents' table. The placeholder in the SELECT clause represents the unique identifier of the template.
dev.313,cre_Doc_Template_Mgt,Show ids for all templates that are used by more than one document.,1,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique identifiers of templates from the 'Documents' table that are associated with more than a specified number of documents. The placeholder in the HAVING clause represents the minimum count of documents required for a template to be included in the results.
dev.315,cre_Doc_Template_Mgt,Show ids for all templates not used by any document.,1,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"This virtual table identifies the template IDs from the 'Templates' table that do not have any associated documents in the 'Documents' table. The query uses the EXCEPT clause to filter out template IDs that are present in the 'Documents' table, ensuring that only those templates without documents are returned."
dev.317,cre_Doc_Template_Mgt,How many templates do we have?,1,SELECT count(*) FROM Templates,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Templates,"This virtual table provides the total count of templates available in the 'Templates' table. It does not filter or group the results, thus giving a straightforward count of all entries."
dev.319,cre_Doc_Template_Mgt,"Show template ids, version numbers, and template type codes for all templates.",1,"SELECT template_id ,  version_number ,  template_type_code FROM Templates",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT template_id ,  version_number ,  template_type_code FROM Templates","This virtual table provides a list of template IDs, their version numbers, and the corresponding template type codes from the 'Templates' table. The placeholders represent the specific values that can be filtered or modified as needed."
dev.321,cre_Doc_Template_Mgt,Show all distinct template type codes for all templates.,1,SELECT DISTINCT template_type_code FROM Templates,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT DISTINCT template_type_code FROM Templates,This virtual table provides a list of unique template type codes from the 'Templates' table. The placeholder in the SELECT statement allows for the retrieval of distinct values for the template type code.
dev.323,cre_Doc_Template_Mgt,What are the ids of templates with template type code PP or PPT?,1,SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT template_id FROM Templates WHERE template_type_code  =  [PLACEHOLDER-TYPE:STRING] OR template_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the identifiers of templates from the 'Templates' table that match specific template type codes. The placeholders in the WHERE clause represent the template type codes to filter the results accordingly.
dev.325,cre_Doc_Template_Mgt,How many templates have template type code CV?,1,SELECT count(*) FROM Templates WHERE template_type_code  =  'CV',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Templates WHERE template_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of templates from the 'Templates' table that match a specific template type code. The placeholder in the WHERE clause represents the unique code for the template type.
dev.327,cre_Doc_Template_Mgt,What is the version number and template type code for the template with version number later than 5?,1,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the version numbers and template type codes of templates from the 'Templates' table that have a version number greater than a specified value. The placeholder in the WHERE clause represents the minimum version number to filter the results.
dev.329,cre_Doc_Template_Mgt,Show all template type codes and number of templates for each.,1,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","This virtual table summarizes the count of templates grouped by their type codes from the 'Templates' table. The placeholder in the SELECT clause represents the template type code, and the count indicates the number of templates associated with each type."
dev.331,cre_Doc_Template_Mgt,Which template type code has most number of templates?,1,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different template types used in the 'Templates' table, grouped by their unique codes. The placeholder in the LIMIT clause allows the user to specify the maximum number of template types to retrieve, sorted by their frequency of occurrence."
dev.333,cre_Doc_Template_Mgt,Show all template type codes with less than three templates.,1,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of template type codes from the 'Templates' table that have fewer than a specified number of associated templates. The placeholder in the HAVING clause represents the maximum count of templates allowed for each type code.
dev.337,cre_Doc_Template_Mgt,"What is the template type code of the template used by document with the name ""Data base""?",1,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the template type code from the 'Templates' table by joining it with the 'Documents' table. The join is based on the template ID, and the results are filtered to include only those documents that match a specific document name. The placeholder in the WHERE clause represents the name of the document being queried."
dev.339,cre_Doc_Template_Mgt,Show all document names using templates with template type code BK.,1,SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of documents associated with templates of a specific type from the 'Templates' and 'Documents' tables. The placeholder in the WHERE clause represents the template type code.
dev.343,cre_Doc_Template_Mgt,Which template type code is used by most number of documents?,1,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of template type codes from the 'Templates' table, which are associated with documents in the 'Documents' table. The results are grouped by the template type code and ordered by the count of documents associated with each template type, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of template types to return."
dev.347,cre_Doc_Template_Mgt,Show all template type codes and descriptions.,1,"SELECT template_type_code ,  template_type_description FROM Ref_template_types",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT template_type_code ,  template_type_description FROM Ref_template_types",This virtual table describes the unique codes and descriptions of template types from the 'Ref_Template_Types' table. The placeholders represent the specific template type code and its corresponding description.
dev.349,cre_Doc_Template_Mgt,"What is the template type descriptions for template type code ""AD"".",1,SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the template type description from the 'Ref_Template_Types' table for a specific template type code. The placeholder in the WHERE clause represents the unique code of the template type.
dev.351,cre_Doc_Template_Mgt,"What is the template type code for template type description ""Book"".",1,SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique code for a specific type of template from the 'Ref_Template_Types' table based on a given description. The placeholder in the WHERE clause represents the description of the template type.
dev.353,cre_Doc_Template_Mgt,What are the distinct template type descriptions for the templates ever used by any document?,1,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,"This virtual table provides a distinct list of template type descriptions from the 'Ref_Template_Types' table that are associated with templates in the 'Templates' table, which in turn are linked to documents in the 'Documents' table. The placeholders in the JOIN conditions represent the relationships between these tables."
dev.355,cre_Doc_Template_Mgt,"What are the template ids with template type description ""Presentation"".",1,SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique identifiers of templates from the 'Templates' table that correspond to a specific type of template as defined in the 'Ref_Template_Types' table. The placeholder in the WHERE clause represents the description of the template type.
dev.357,cre_Doc_Template_Mgt,How many paragraphs in total?,1,SELECT count(*) FROM Paragraphs,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Paragraphs,"This virtual table provides a count of all paragraphs from the 'Paragraphs' table. It does not filter or group the results, thus returning the total number of paragraphs available in the database."
dev.359,cre_Doc_Template_Mgt,How many paragraphs for the document with name 'Summer Show'?,1,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of paragraphs associated with a specific document from the 'Paragraphs' and 'Documents' tables. The placeholder in the WHERE clause represents the name of the document being queried.
dev.363,cre_Doc_Template_Mgt,Show all paragraph ids and texts for the document with name 'Welcome to NY'.,1,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the paragraph IDs and their corresponding text from the 'Paragraphs' table, specifically for paragraphs that belong to documents with a specified name. The placeholder in the WHERE clause represents the name of the document being queried."
dev.365,cre_Doc_Template_Mgt,"Show all paragraph texts for the document ""Customer reviews"".",1,SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the text content of paragraphs from the 'Paragraphs' table that are associated with a specific document. The placeholder in the WHERE clause represents the name of the document being queried.
dev.371,cre_Doc_Template_Mgt,List all document ids with at least two paragraphs.,1,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the unique identifiers of documents from the 'Paragraphs' table that contain a specified minimum number of paragraphs. The placeholder in the HAVING clause represents the minimum count of paragraphs required for a document to be included in the results.
dev.373,cre_Doc_Template_Mgt,What is the document id and name with greatest number of paragraphs?,1,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of document IDs and their corresponding names from the 'Documents' table, which are associated with paragraphs in the 'Paragraphs' table. The results are grouped by document ID and ordered by the count of paragraphs in descending order, with a limit specified by a placeholder for numeric values."
dev.375,cre_Doc_Template_Mgt,What is the document id with least number of paragraphs?,1,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of document IDs from the 'Paragraphs' table, grouped by each document ID. The results are ordered by the count of paragraphs associated with each document in ascending order, allowing the user to retrieve a specified number of document IDs based on the placeholder for numeric values."
dev.377,cre_Doc_Template_Mgt,What is the document id with 1 to 2 paragraphs?,1,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table retrieves the unique identifiers of documents from the 'Paragraphs' table that contain a specific range of paragraphs. The placeholders in the HAVING clause represent the minimum and maximum counts of paragraphs associated with each document.
dev.379,cre_Doc_Template_Mgt,Show the document id with paragraph text 'Brazil' and 'Ireland'.,1,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies documents that contain two specific paragraphs. The placeholders in the query represent the text content of the paragraphs being searched for, ensuring that only documents containing both specified paragraphs are returned."
dev.381,course_teach,How many teachers are there?,1,SELECT count(*) FROM teacher,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM teacher,"This virtual table provides a count of all teachers from the 'teacher' table. It does not filter or group the results, giving a total number of teachers available in the database."
dev.383,course_teach,List the names of teachers in ascending order of age.,1,SELECT Name FROM teacher ORDER BY Age ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM teacher ORDER BY Age ASC,"This virtual table lists the names of teachers from the 'teacher' table, ordered by their age in ascending order. This allows for a clear view of teachers starting from the youngest to the oldest."
dev.385,course_teach,What are the age and hometown of teachers?,1,"SELECT Age ,  Hometown FROM teacher",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Age ,  Hometown FROM teacher","This virtual table provides the age and hometown of teachers from the 'teacher' table. There are no filtering conditions applied, so it retrieves all records for these attributes."
dev.389,course_teach,Show the name of teachers aged either 32 or 33?,1,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM teacher WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of teachers from the 'teacher' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the teachers.
dev.391,course_teach,What is the hometown of the youngest teacher?,1,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of teachers' hometowns from the 'teacher' table, ordered by their age in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to retrieve."
dev.393,course_teach,Show different hometown of teachers and the number of teachers from each hometown.,1,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",This virtual table summarizes the number of teachers from each hometown. The placeholder in the COUNT function allows for aggregation of teacher records based on their hometowns.
dev.397,course_teach,Show the hometowns shared by at least two teachers.,1,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of hometowns from the 'teacher' table, grouped by each hometown. It includes only those hometowns that have a number of teachers greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum count of teachers required for a hometown to be included in the results."
dev.399,course_teach,Show names of teachers and the courses they are arranged to teach.,1,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",3+,low,False,False,False,False,False,True,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","This virtual table provides a list of teacher names along with the corresponding course titles they are assigned to. It combines data from the 'course', 'teacher', and 'course_arrange' tables, linking teachers to their respective courses through the course arrangement table."
dev.401,course_teach,Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,1,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","This virtual table provides a list of course names along with the names of the teachers assigned to them. The data is sourced from the 'course', 'teacher', and 'course_arrange' tables, with the relationships established through foreign keys. The results are ordered by the teacher's name."
dev.404,course_teach,What are the names of the people who teach math courses?,1,SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of teachers who are assigned to a specific course from the 'course' table. The placeholder in the WHERE clause represents the title of the course.
dev.407,course_teach,Show names of teachers that teach at least two courses.,1,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of teachers from the 'teacher' table who are assigned to teach a course, with the condition that they must teach at least a specified number of courses. The placeholder in the HAVING clause represents the minimum number of courses a teacher must be associated with."
dev.409,course_teach,List the names of teachers who have not been arranged to teach courses.,1,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"This virtual table lists the names of teachers from the 'teacher' table who are not assigned to any course in the 'course_arrange' table. The subquery identifies teachers that are linked to courses, and the main query filters out those teachers from the results."
dev.411,museum_visit,How many visitors below age 30 are there?,1,SELECT count(*) FROM visitor WHERE age  <  30,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM visitor WHERE age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of visitors from the 'visitor' table who are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the visitors.
dev.412,museum_visit,"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",1,SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM visitor WHERE Level_of_membership  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY Level_of_membership DESC,This virtual table describes the names of visitors from the 'visitor' table who have a membership level greater than a specified value. The placeholder in the WHERE clause represents the minimum membership level required to be included in the results.
dev.413,museum_visit,What is the average age of the visitors whose membership level is not higher than 4?,1,SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average age of visitors from the 'visitor' table who have a membership level that is less than or equal to a specified value. The placeholder in the WHERE clause represents the membership level.
dev.414,museum_visit,"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",1,"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY age DESC","This virtual table provides the names and membership levels of visitors from the 'visitor' table who have a membership level greater than a specified value. The results are ordered by the age of the visitors in descending order, with a placeholder for the membership level in the WHERE clause."
dev.415,museum_visit,Find the id and name of the museum that has the most staff members?,1,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists the unique identifiers and names of museums from the 'museum' table, ordered by the total number of staff employed at each museum in descending order. The placeholder in the LIMIT clause represents the maximum number of museums to be displayed."
dev.416,museum_visit,Find the average number of staff working for the museums that were open before 2009.,1,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average number of staff employed at museums that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.
dev.417,museum_visit,What are the opening year and staff number of the museum named Plaza Museum?,1,"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides information about the number of staff and the year a specific museum was established. The placeholder in the WHERE clause represents the name of the museum being queried.
dev.418,museum_visit,find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,1,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  [PLACEHOLDER-TYPE:NUMBER]),This virtual table lists the names of museums that have a number of staff greater than the minimum number of staff employed at museums established after a certain year. The placeholder in the subquery represents the year after which the museums were established.
dev.419,museum_visit,"find the id, name and age for visitors who visited some museums more than once.",1,"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of visitors who have made more than a specified number of visits to the museum. It includes the visitor's ID, name, and age. The placeholder in the HAVING clause represents the minimum number of visits required to be included in the results."
dev.421,museum_visit,What are the id and name of the museum visited most times?,1,"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of museum IDs along with their corresponding names, showing the most visited museums based on the number of visits. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
dev.422,museum_visit,What is the name of the museum that had no visitor yet?,1,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),This virtual table lists the names of museums from the 'museum' table that have not been visited by any visitors. The placeholder in the subquery represents the museum identifiers that are associated with visits.
dev.423,museum_visit,Find the name and age of the visitor who bought the most tickets at once.,1,"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and ages of visitors from the 'visitor' table who have made visits to museums, ordered by the number of tickets they purchased. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
dev.424,museum_visit,What are the average and maximum number of tickets bought in all visits?,1,"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",This virtual table provides the average and maximum number of tickets purchased during visits recorded in the 'visit' table. The placeholders represent the aggregated ticket data for analysis.
dev.425,museum_visit,What is the total ticket expense of the visitors whose membership level is 1?,1,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the total amount spent by visitors with a specific membership level. It joins the 'visitor' table with the 'visit' table based on the visitor's ID and filters the results based on the membership level using a placeholder for numeric values.
dev.426,museum_visit,What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,1,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011,3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the names of visitors who have visited museums established before a certain year and after another specified year. The placeholders in the WHERE clauses represent the years of establishment for filtering the museums.
dev.427,museum_visit,Find the number of visitors who did not visit any museum opened after 2010.,1,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),3+,high,False,True,False,False,False,False,False,False,False,False,False,True,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  [PLACEHOLDER-TYPE:NUMBER]),This virtual table counts the number of visitors who have not visited any museum that was established after a specific year. The placeholder in the WHERE clause represents the year of establishment of the museums.
dev.428,museum_visit,How many museums were opened after 2013 or before 2008?,1,SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM museum WHERE open_year  >  [PLACEHOLDER-TYPE:NUMBER] OR open_year  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of museums from the 'museum' table that were established either after or before a specific year. The placeholders in the WHERE clause represent the years to filter the museums based on their establishment year.
dev.429,wta_1,Find the total number of players.,1,SELECT count(*) FROM players,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM players,"This virtual table provides the total number of players in the 'players' table. The count function is used to aggregate the number of entries, giving a single numeric result representing the player count."
dev.431,wta_1,Find the total number of matches.,1,SELECT count(*) FROM matches,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM matches,"This virtual table provides the total number of matches recorded in the 'matches' table. It counts all entries, giving an overview of the match data available."
dev.433,wta_1,List the first name and birth date of all players from the country with code USA.,1,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first names and birth dates of players from the 'players' table who belong to a specific country. The placeholder in the WHERE clause represents the ISO code of the player's country.
dev.435,wta_1,Find the average age of losers and winners of all matches.,1,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",This virtual table calculates the average age of losing and winning players from the 'matches' table. The query aggregates the ages of both winners and losers to provide insights into the age distribution of players in matches.
dev.437,wta_1,Find the average rank of winners in all matches.,1,SELECT avg(winner_rank) FROM matches,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(winner_rank) FROM matches,This virtual table calculates the average rank of winning players from the 'matches' table. It provides insights into the performance of winners across various matches without specifying individual match details.
dev.440,wta_1,What is the best rank of losers across all matches?,1,SELECT min(loser_rank) FROM matches,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT min(loser_rank) FROM matches,This virtual table provides the minimum rank of losing players from the 'matches' table. The query aggregates the data to find the lowest rank among all losing players in the recorded matches.
dev.441,wta_1,find the number of distinct country codes of all players.,1,SELECT count(DISTINCT country_code) FROM players,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT country_code) FROM players,This virtual table provides the count of distinct countries represented by players in the 'players' table. The placeholder in the SELECT clause indicates that the result will be a numeric value representing the number of unique country codes.
dev.443,wta_1,Find the number of distinct name of losers.,1,SELECT count(DISTINCT loser_name) FROM matches,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT loser_name) FROM matches,"This virtual table provides the count of distinct names of losing players from the 'matches' table. It helps in understanding the variety of players who have lost in matches, without duplicating names."
dev.445,wta_1,Find the name of tourney that has more than 10 matches.,1,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of tournaments from the 'matches' table that have hosted more than a specified number of matches. The placeholder in the HAVING clause represents the minimum count of matches required to include a tournament's name in the results.
dev.447,wta_1,List the names of all winners who played in both 2013 and 2016.,1,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT winner_name FROM matches WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of the winning players from the 'matches' table for two specific years. The placeholders in the WHERE clause represent the years for which the winners are being queried.
dev.449,wta_1,List the number of all matches who played in years of 2013 or 2016.,1,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM matches WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of matches that took place in specific years from the 'matches' table. The placeholders represent the years for which the match count is being queried.
dev.451,wta_1,What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,1,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the country codes and first names of players who have won matches in a specific tournament. The query uses an INTERSECT operation to find players who have won in two different instances of the same tournament, with placeholders representing the tournament's name."
dev.453,wta_1,Find the first name and country code of the oldest player.,1,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first names and country codes of players from the 'players' table, ordered by their birth dates. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
dev.457,wta_1,List the first and last name of all players who are left / L hand in the order of birth date.,1,"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name FROM players WHERE hand  =  [PLACEHOLDER-TYPE:STRING] ORDER BY birth_date",This virtual table describes the first and last names of players from the 'players' table who play with a specific hand. The results are ordered by the players' birth dates. The placeholder in the WHERE clause represents the playing hand of the players.
dev.460,wta_1,What is the first name and country code of the player with the most tours?,1,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of players' first names along with their country codes, sorted by the number of tours or events they have participated in, as recorded in the rankings table. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
dev.463,wta_1,Find the name and rank points of the winner who won the most times.,1,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and ranking points of the winning players from the 'matches' table, grouped by the winner's name. The results are ordered by the number of matches won in descending order, with a limit on the number of results returned, specified by a placeholder for numeric values."
dev.465,wta_1,Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,1,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT winner_name FROM matches WHERE tourney_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY winner_rank_points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of the winning players from the 'matches' table for a specific tournament. The results are ordered by the ranking points of the winners in descending order, and the number of results returned is limited by a placeholder for numeric values."
dev.467,wta_1,find the names of loser and winner who played in the match with greatest number of minutes.,1,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of the winning and losing players from the 'matches' table, sorted by the duration of the match in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return."
dev.470,wta_1,"What are the first names of all players, and their average rankings?",1,"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","This virtual table calculates the average ranking of players and displays their first names. It combines data from the 'players' and 'rankings' tables, grouping the results by the players' first names to provide a summary of their average rankings."
dev.472,wta_1,"What are the first names of all players, and their total ranking points?",1,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","This virtual table summarizes the total ranking points for each player by their first name. It combines data from the 'players' and 'rankings' tables, grouping the results by the player's first name to provide a clear view of their accumulated ranking points."
dev.473,wta_1,find the number of players for each country.,1,"SELECT count(*) ,  country_code FROM players GROUP BY country_code",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  country_code FROM players GROUP BY country_code",This virtual table summarizes the number of players from each country represented in the 'players' table. The placeholder in the SELECT clause indicates that the count of players will be displayed alongside their respective country codes.
dev.477,wta_1,Find the codes of countries that have more than 50 players.,1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of country codes from the 'players' table, specifically for countries that have more players than a specified number. The placeholder in the HAVING clause represents the minimum count of players required for a country to be included in the results."
dev.483,wta_1,Find the name and rank of the 3 youngest winners across all matches.,1,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique winners' names and their corresponding ranks from the 'matches' table. The results are ordered by the age of the winners, and the number of results returned is limited by a specified placeholder value."
dev.487,wta_1,"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",1,"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first names, country codes, and birth dates of players who have won matches, sorted by their ranking points in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return."
dev.489,wta_1,Find the number of players for each hand type.,1,"SELECT count(*) ,  hand FROM players GROUP BY hand",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(*) ,  hand FROM players GROUP BY hand",This virtual table summarizes the number of players grouped by their playing hand (left or right) from the 'players' table. The count represents how many players fall into each category of hand preference.
dev.491,battle_death,How many ships ended up being 'Captured'?,1,SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM ship WHERE disposition_of_ship  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of ships from the 'ship' table that have a specific disposition status. The placeholder in the WHERE clause represents the condition of the ship, such as whether it is active, decommissioned, or under repair."
dev.492,battle_death,List the name and tonnage ordered by in descending alphaetical order for the names.,1,"SELECT name ,  tonnage FROM ship ORDER BY name DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT name ,  tonnage FROM ship ORDER BY name DESC","This virtual table provides the names and tonnage of ships from the 'ship' table, sorted in descending order by the ship's name. The placeholder in the ORDER BY clause indicates the sorting criteria."
dev.494,battle_death,What is maximum and minimum death toll caused each time?,1,"SELECT max(killed) ,  min(killed) FROM death",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(killed) ,  min(killed) FROM death",This virtual table provides the maximum and minimum number of individuals killed in battles recorded in the 'death' table. The placeholders in the SELECT clause represent the aggregate values for killed individuals.
dev.495,battle_death,What is the average number of injuries caused each time?,1,SELECT avg(injured) FROM death,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(injured) FROM death,"This virtual table calculates the average number of individuals injured in battles recorded in the 'death' table. The placeholder in the SELECT clause represents the average of the 'injured' column, which is a numeric value."
dev.496,battle_death,What are the death and injury situations caused by the ship with tonnage 't'?,1,"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides information on the number of individuals killed and injured in incidents recorded in the 'death' table, specifically for ships that meet a certain tonnage criterion. The placeholder in the WHERE clause represents the tonnage of the ship."
dev.498,battle_death,What are the different ids and names of the battles that lost any 'Brig' type shipes?,1,"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a list of unique identifiers and names of battles from the 'battle' table that correspond to ships of a specific type that were lost in those battles. The placeholder in the WHERE clause represents the type of ship being queried.
dev.501,battle_death,What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,1,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT name FROM battle WHERE bulgarian_commander  =  [PLACEHOLDER-TYPE:STRING] AND latin_commander  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of battles from the 'battle' table where specific commanders were involved. The placeholders in the WHERE clause represent the names of the Bulgarian and Latin commanders.
dev.503,battle_death,How many battles did not lose any ship with tonnage '225'?,1,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  [PLACEHOLDER-TYPE:STRING] );,"This virtual table provides a count of battles from the 'battle' table where the battle ID is not associated with any ship that was lost in battle, specifically filtering those ships based on their tonnage. The placeholder in the subquery represents the tonnage value of the ships."
dev.506,battle_death,What are the notes of the death events which has substring 'East'?,1,SELECT note FROM death WHERE note LIKE '%East%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT note FROM death WHERE note LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table provides access to the notes related to deaths recorded in the 'death' table, filtered by a specific keyword or phrase. The placeholder in the WHERE clause allows users to specify the desired note content they are interested in."
dev.507,student_transcripts_tracking,what are all the addresses including line 1 and line 2?,1,"SELECT line_1 ,  line_2 FROM addresses",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT line_1 ,  line_2 FROM addresses","The virtual table describes the primary and secondary address lines from the 'Addresses' table. This allows users to retrieve specific address details, with placeholders representing the values that can be modified as needed."
dev.509,student_transcripts_tracking,How many courses in total are listed?,1,SELECT count(*) FROM Courses,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Courses,This virtual table provides a count of all courses available in the 'Courses' table. The query uses the COUNT function to aggregate the total number of course entries.
dev.511,student_transcripts_tracking,How is the math course described?,1,SELECT course_description FROM Courses WHERE course_name  =  'math',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT course_description FROM Courses WHERE course_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a specific course from the 'Courses' table based on the course name. The placeholder in the WHERE clause represents the name of the course being queried.
dev.513,student_transcripts_tracking,What is the zip code of the address in the city Port Chelsea?,1,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT zip_postcode FROM Addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the postal codes of addresses from the 'Addresses' table that are located in a specific city. The placeholder in the WHERE clause represents the name of the city.
dev.515,student_transcripts_tracking,Which department offers the most number of degrees? List department name and id.,1,"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of degree programs grouped by their respective departments. It displays the department name and its unique identifier, sorted by the number of degree programs offered in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to retrieve."
dev.516,student_transcripts_tracking,What is the name and id of the department with the most number of degrees ?,1,"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of degree programs grouped by their respective departments. It lists the department names along with their unique identifiers, sorted by the number of degree programs offered in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to display."
dev.517,student_transcripts_tracking,How many departments offer any degree?,1,SELECT count(DISTINCT department_id) FROM Degree_Programs,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT department_id) FROM Degree_Programs,"This virtual table provides the count of distinct departments that offer degree programs from the 'Degree_Programs' table. The query uses a placeholder to represent the department identifier, ensuring that the count reflects unique departments."
dev.519,student_transcripts_tracking,How many different degree names are offered?,1,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,This virtual table provides a count of distinct degree program names from the 'Degree_Programs' table. The result will indicate how many unique degree programs are offered.
dev.521,student_transcripts_tracking,How many degrees does the engineering department offer?,1,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of degree programs offered by a specific department in the 'Departments' table. The placeholder in the WHERE clause represents the name of the department for which the count is being requested.
dev.523,student_transcripts_tracking,What are the names and descriptions of all the sections?,1,"SELECT section_name ,  section_description FROM Sections",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT section_name ,  section_description FROM Sections",This virtual table describes the names and descriptions of sections from the 'Sections' table. The placeholders can be used to filter or modify the query based on specific criteria related to sections.
dev.525,student_transcripts_tracking,What are the names and id of courses having at most 2 sections?,1,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of course names and their corresponding identifiers from the 'Courses' table, specifically for those courses that have a number of sections less than or equal to a specified threshold. The placeholder in the HAVING clause represents the maximum number of sections allowed for the courses listed."
dev.527,student_transcripts_tracking,List the section_name in reversed lexicographical order.,1,SELECT section_name FROM Sections ORDER BY section_name DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT section_name FROM Sections ORDER BY section_name DESC,"This virtual table lists the names of sections from the 'Sections' table, sorted in descending order. The absence of any filtering criteria means it retrieves all section names available in the database."
dev.529,student_transcripts_tracking,What is the semester which most student registered in? Show both the name and the id.,1,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of semester names and their corresponding identifiers from the 'Semesters' table. It joins with the 'Student_Enrolment' table to count the number of students enrolled in each semester, grouping the results by semester identifier. The output is ordered by the number of enrollments in descending order, and a placeholder is included to limit the number of results returned."
dev.531,student_transcripts_tracking,What is the description of the department whose name has the substring the computer?,1,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT department_description FROM Departments WHERE department_name LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table provides the description of a specific department from the 'Departments' table based on the department's name. The placeholder in the WHERE clause allows for filtering by the department's name, which can be partially matched."
dev.538,student_transcripts_tracking,What is the degree summary name that has the most number of students enrolled?,1,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of degree program names from the 'Degree_Programs' table, which are associated with student enrolments. The results are grouped by the degree program name and ordered by the number of enrolments in descending order, allowing users to see the most popular degree programs. The placeholder in the LIMIT clause represents the maximum number of results to return."
dev.540,student_transcripts_tracking,What is the program id and the summary of the degree that has the most students enrolled?,1,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of degree programs along with their unique identifiers from the 'Degree_Programs' table. It joins with the 'Student_Enrolment' table to count how many students are enrolled in each degree program. The results are grouped by the degree program ID and ordered by the number of students enrolled in descending order, with a limit on the number of results returned based on a specified number placeholder."
dev.543,student_transcripts_tracking,Which semesters do not have any student enrolled? List the semester name.,1,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),This virtual table lists the names of semesters from the 'Semesters' table that do not have any associated student enrolments. The placeholder in the WHERE clause represents the semester's identifier.
dev.545,student_transcripts_tracking,What are all the course names of the courses which ever have students enrolled in?,1,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"This virtual table lists the distinct course names from the 'Courses' table that students are enrolled in, as indicated by the 'Student_Enrolment_Courses' table. The join operation connects the two tables based on the course identifier, ensuring that only courses with student enrolments are included in the results."
dev.551,student_transcripts_tracking,Show the date and id of the transcript with at least 2 course results.,1,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a summary of transcripts and their issuance dates for courses that have been completed by students. The placeholder in the HAVING clause represents the minimum number of courses that must be associated with a transcript for it to be included in the results.
dev.553,student_transcripts_tracking,What is the phone number of the man with the first name Timmothy and the last name Ward?,1,SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT cell_mobile_number FROM Students WHERE first_name  =  [PLACEHOLDER-TYPE:STRING] AND last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the mobile phone numbers of students from the 'Students' table who match a specific first and last name. The placeholders in the WHERE clause represent the student's first and last names.
dev.555,student_transcripts_tracking,"Who is the first student to register? List the first name, middle name and last name.",1,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of students' first, middle, and last names from the 'Students' table, ordered by their registration date in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of students to retrieve."
dev.557,student_transcripts_tracking,"Who is the earliest graduate of the school? List the first name, middle name and last name.",1,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of students' first, middle, and last names from the 'Students' table, ordered by the date they left the institution. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
dev.559,student_transcripts_tracking,Whose permanent address is different from his or her current address? List his or her first name.,1,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,This virtual table describes the first names of students from the 'Students' table who have different current and permanent addresses. The placeholder in the WHERE clause indicates that the current address must not be the same as the permanent address.
dev.562,student_transcripts_tracking,"What is the id, line 1, and line 2 of the address with the most students?",1,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique addresses that are currently associated with students, including the address ID and primary and secondary address lines. The results are grouped by address ID and ordered by the number of students linked to each address, with a limit on the number of addresses returned based on a specified numeric value."
dev.563,student_transcripts_tracking,"On average, when were the transcripts printed?",1,SELECT avg(transcript_date) FROM Transcripts,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(transcript_date) FROM Transcripts,This virtual table calculates the average date of transcripts issued from the 'Transcripts' table. The placeholder in the SELECT clause represents the average of the transcript dates.
dev.565,student_transcripts_tracking,When is the first transcript released? List the date and details.,1,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of transcript issuance dates along with any additional details from the 'Transcripts' table. The results are ordered by the date of issuance in ascending order, and the number of records returned is limited by a placeholder for numeric values."
dev.567,student_transcripts_tracking,How many transcripts are released?,1,SELECT count(*) FROM Transcripts,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Transcripts,This virtual table provides a count of all transcripts available in the 'Transcripts' table. The query uses the COUNT function to aggregate the total number of transcript records.
dev.569,student_transcripts_tracking,What is the last transcript release date?,1,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of transcript issue dates from the 'Transcripts' table, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of most recent transcripts to retrieve."
dev.571,student_transcripts_tracking,How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.,1,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of how many times each student course appears in the transcripts, grouped by the course identifier. The result is ordered by the count in descending order, allowing users to see the most frequently recorded courses. The placeholder in the LIMIT clause represents the maximum number of results to return."
dev.573,student_transcripts_tracking,"Show the date of the transcript which shows the least number of results, also list the id.",1,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of transcript IDs along with their corresponding issue dates from the 'Transcripts' table. The results are grouped by transcript ID and ordered by the count of associated records in ascending order, with a limit on the number of results specified by a placeholder for numeric values."
dev.577,student_transcripts_tracking,How many different addresses do the students currently live?,1,SELECT count(DISTINCT current_address_id) FROM Students,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT current_address_id) FROM Students,This virtual table provides the count of distinct current addresses associated with students from the 'Students' table. The placeholder in the SELECT clause represents the unique current address identifiers.
dev.582,student_transcripts_tracking,What is the description for the section named h?,1,SELECT section_description FROM Sections WHERE section_name  =  'h',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT section_description FROM Sections WHERE section_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a specific section from the 'Sections' table based on the section's name. The placeholder in the WHERE clause represents the name of the section being queried.
dev.585,tvshow,List the title of all cartoons in alphabetical order.,1,SELECT Title FROM Cartoon ORDER BY title,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Title FROM Cartoon ORDER BY title,"This virtual table lists the titles of cartoons from the 'Cartoon' table, ordered alphabetically by title. The absence of any filtering conditions means it retrieves all available titles."
dev.588,tvshow,What are the names of all cartoons directed by Ben Jones?,1,SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Title FROM Cartoon WHERE Directed_by = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the titles of cartoons from the 'Cartoon' table that were directed by a specific individual. The placeholder in the WHERE clause represents the director's name.
dev.589,tvshow,"How many cartoons were written by ""Joseph Kuhr""?",1,SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Cartoon WHERE Written_by = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of cartoons from the 'Cartoon' table that were written by a specific individual. The placeholder in the WHERE clause represents the name of the writer.
dev.591,tvshow,list all cartoon titles and their directors ordered by their air date,1,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","This virtual table provides the titles and directors of cartoons from the 'Cartoon' table, ordered by their original air date. This allows users to see the progression of cartoon releases over time."
dev.593,tvshow,"List the title of all cartoon directed by ""Ben Jones"" or ""Brandon Vietti"".",1,SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Title FROM Cartoon WHERE Directed_by = [PLACEHOLDER-TYPE:STRING] OR Directed_by = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the titles of cartoons from the 'Cartoon' table that were directed by specific individuals. The placeholders in the WHERE clause represent the names of the directors being queried.
dev.595,tvshow,Which country has the most of TV Channels? List the country and number of TV Channels it has.,1,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];",This virtual table summarizes the number of TV channels available in each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to display based on the count of channels.
dev.597,tvshow,List the number of different series names and contents in the TV Channel table.,1,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",This virtual table provides a count of distinct TV series names and distinct content types available across all TV channels in the 'TV_Channel' table. The placeholders represent the aggregated counts of unique series and content types.
dev.599,tvshow,"What is the content of TV Channel with serial name ""Sky Radio""?",1,SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Content FROM TV_Channel WHERE series_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the type of content provided by a specific TV channel from the 'TV_Channel' table based on the name of the TV series it broadcasts. The placeholder in the WHERE clause represents the name of the series.
dev.601,tvshow,"What is the Package Option of TV Channel with serial name ""Sky Radio""?",1,SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Package_Option FROM TV_Channel WHERE series_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the available subscription packages for TV channels that broadcast a specific TV series. The placeholder in the WHERE clause represents the name of the TV series.
dev.603,tvshow,How many TV Channel using language English?,1,SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM TV_Channel WHERE LANGUAGE = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of TV channels from the 'TV_Channel' table that broadcast in a specific language. The placeholder in the WHERE clause represents the language of interest.
dev.609,tvshow,"What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.",1,SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of TV series from the 'TV_Channel' table that are associated with a specific cartoon title. The placeholder in the WHERE clause represents the title of the cartoon.
dev.611,tvshow,"List the title of all  Cartoons showed on TV Channel with series name ""Sky Radio"".",1,SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table describes the titles of cartoons that are broadcasted on a specific TV channel, identified by the series name. The placeholder in the WHERE clause represents the name of the TV series."
dev.615,tvshow,List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,1,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of episodes from the 'TV_series' table along with their viewer ratings. The results are ordered by the rating in descending order, and the number of episodes returned is limited by a placeholder for numeric values."
dev.617,tvshow,What is minimum and maximum share of TV series?,1,"SELECT max(SHARE) , min(SHARE) FROM TV_series;",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(SHARE) , min(SHARE) FROM TV_series;",This virtual table provides the maximum and minimum share percentages of viewers for episodes from the 'TV_series' table. The share percentage indicates the proportion of viewers watching a specific episode compared to the total TV viewers.
dev.619,tvshow,"What is the air date of TV series with Episode ""A Love of a Lifetime""?",1,SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Air_Date FROM TV_series WHERE Episode = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the air dates of episodes from the 'TV_series' table based on a specific episode number. The placeholder in the WHERE clause represents the episode number being queried.
dev.621,tvshow,"What is Weekly Rank of TV series with Episode ""A Love of a Lifetime""?",1,SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Weekly_Rank FROM TV_series WHERE Episode = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the weekly rank of a specific episode from the 'TV_series' table. The placeholder in the WHERE clause represents the episode number being queried.
dev.623,tvshow,"What is the TV Channel of TV series with Episode ""A Love of a Lifetime""? List the TV Channel's series name.",1,SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of TV series from the 'TV_Channel' table that correspond to a specific episode number from the 'TV_series' table. The placeholder in the WHERE clause represents the episode number being queried.
dev.625,tvshow,"List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".",1,SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the episodes of TV series broadcasted by a specific TV channel. The placeholder in the WHERE clause represents the name of the TV series for which the episodes are being queried.
dev.627,tvshow,Find the number of cartoons directed by each of the listed directors.,1,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",This virtual table provides a count of cartoons grouped by their directors from the 'Cartoon' table. The placeholder in the SELECT clause represents the count of cartoons directed by each director.
dev.629,tvshow,Find the production code and channel of the most recently aired cartoon .,1,"select production_code ,  channel from cartoon order by original_air_date desc limit 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"select production_code ,  channel from cartoon order by original_air_date desc limit [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the production codes and channels of cartoons from the 'Cartoon' table, ordered by their original air date in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
dev.633,tvshow,which countries' tv channels are playing some cartoon written by Todd Casey?,1,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of countries where TV channels that broadcast cartoons written by a specific writer are based. The placeholder in the WHERE clause represents the name of the writer.
dev.639,tvshow,find the pixel aspect ratio and nation of the tv channels that do not use English.,1,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != [PLACEHOLDER-TYPE:STRING]",This virtual table provides the pixel aspect ratio and the country of TV channels from the 'TV_Channel' table that broadcast in languages other than a specified language. The placeholder in the WHERE clause represents the language to be excluded.
dev.643,tvshow,find the id of tv channels that do not play any cartoon directed by Ben Jones.,1,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the unique identifiers of TV channels from the 'TV_Channel' table that do not broadcast any cartoons directed by a specific individual. The placeholder in the query represents the name of the director whose cartoons are being excluded from the results.
dev.647,poker_player,How many poker players are there?,1,SELECT count(*) FROM poker_player,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM poker_player,"This virtual table provides the total count of poker players from the 'poker_player' table. It does not filter or specify any conditions, thus returning the overall number of entries in the table."
dev.649,poker_player,List the earnings of poker players in descending order.,1,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"This virtual table provides a list of poker players' total monetary winnings from tournaments, sorted in descending order. The placeholder in the SELECT clause represents the earnings of the players."
dev.651,poker_player,List the final tables made and the best finishes of poker players.,1,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","This virtual table describes whether poker players reached the final table and their best finish in tournaments from the 'poker_player' table. The query does not filter by any specific criteria, allowing for a general overview of all players' performances."
dev.653,poker_player,What is the average earnings of poker players?,1,SELECT avg(Earnings) FROM poker_player,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Earnings) FROM poker_player,"This virtual table calculates the average earnings of poker players from the 'poker_player' table. The query uses the AVG function to compute the average of the 'Earnings' column, which represents the total monetary winnings of each player from tournaments."
dev.655,poker_player,What is the money rank of the poker player with the highest earnings?,1,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the money rank of poker players from the 'poker_player' table, ordered by their total earnings in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
dev.657,poker_player,What is the maximum number of final tables made among poker players with earnings less than 200000?,1,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the maximum value of 'Final_Table_Made' from the 'poker_player' table for players whose total earnings are below a specified amount. The placeholder in the WHERE clause represents the monetary threshold for filtering the players.
dev.659,poker_player,What are the names of poker players?,1,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"This virtual table describes the names of individuals from the 'people' table who are also poker players, as indicated by their presence in the 'poker_player' table. The join condition links the two tables through the 'People_ID' column, ensuring that only those who are both listed as people and as poker players are included."
dev.661,poker_player,What are the names of poker players whose earnings is higher than 300000?,1,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of individuals from the 'people' table who have earned more than a specified amount in poker tournaments. The placeholder in the WHERE clause represents the minimum earnings threshold.
dev.663,poker_player,List the names of poker players ordered by the final tables made in ascending order.,1,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"This virtual table provides the names of individuals from the 'people' table who are also poker players, sorted by whether they reached the final table in tournaments. The join condition links the poker players to their personal details using the People_ID."
dev.665,poker_player,What is the birth date of the poker player with the lowest earnings?,1,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the birth dates of poker players from the 'people' table, joined with their corresponding poker performance data from the 'poker_player' table. The results are ordered by the players' earnings in ascending order, and the number of results returned is limited by a placeholder for numeric values."
dev.667,poker_player,What is the money rank of the tallest poker player?,1,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the money rankings of poker players from the 'poker_player' table, ordered by the height of the players from the 'people' table in descending order. The placeholder in the LIMIT clause allows for specifying the number of rankings to retrieve."
dev.669,poker_player,What is the average earnings of poker players with height higher than 200?,1,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average earnings of poker players from the 'poker_player' table who are taller than a specified height. The placeholder in the WHERE clause represents the height in centimeters.
dev.671,poker_player,What are the names of poker players in descending order of earnings?,1,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"This virtual table provides a list of names of poker players from the 'people' table, who are linked to their performance in tournaments from the 'poker_player' table. The results are ordered by the total earnings of the players in descending order."
dev.673,poker_player,What are different nationalities of people and the corresponding number of people from each nation?,1,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",This virtual table summarizes the count of individuals grouped by their nationality from the 'people' table. The placeholder in the SELECT statement allows for potential filtering or further specification of the nationality if needed.
dev.677,poker_player,What are the nationalities that are shared by at least two people?,1,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of nationalities from the 'people' table that have a significant number of individuals associated with them. The placeholder in the HAVING clause represents the minimum count of people required to include a nationality in the results.
dev.679,poker_player,List the names and birth dates of people in ascending alphabetical order of name.,1,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","This virtual table provides the names and birth dates of individuals from the 'people' table, sorted in ascending order by name. The query retrieves relevant information about each person, allowing for easy reference and organization based on their names."
dev.681,poker_player,"Show names of people whose nationality is not ""Russia"".",1,SELECT Name FROM people WHERE Nationality != 'Russia',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM people WHERE Nationality != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of individuals from the 'people' table who do not belong to a specific nationality. The placeholder in the WHERE clause represents the nationality code that is to be excluded.
dev.683,poker_player,List the names of people that are not poker players.,1,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"This virtual table lists the names of individuals from the 'people' table who are not poker players, meaning they have not participated in any tournaments as indicated by the absence of their People_ID in the 'poker_player' table. The query uses a subquery to filter out those who are poker players."
dev.685,poker_player,How many distinct nationalities are there?,1,SELECT count(DISTINCT Nationality) FROM people,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Nationality) FROM people,This virtual table provides the count of distinct nationalities represented in the 'people' table. The placeholder in the SELECT clause indicates that the result will be a numeric value representing the number of unique nationalities.
dev.688,voter_1,"List the contestant numbers and names, ordered by contestant name descending.",1,"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","This virtual table provides a list of contestant numbers and names from the 'CONTESTANTS' table, sorted in descending order by the contestant's name. The query allows for easy identification of contestants based on their names."
dev.689,voter_1,"List the vote ids, phone numbers and states of all votes.",1,"SELECT vote_id ,  phone_number ,  state FROM votes",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT vote_id ,  phone_number ,  state FROM votes","This virtual table provides a list of votes cast, including the unique identifier for each vote, the voter's phone number, and the state from which the vote was cast. The placeholders in the SELECT statement allow for further filtering or modification based on specific criteria."
dev.690,voter_1,What are the maximum and minimum values of area codes?,1,"SELECT max(area_code) ,  min(area_code) FROM area_code_state",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT max(area_code) ,  min(area_code) FROM area_code_state",This virtual table provides the maximum and minimum telephone area codes from the 'AREA_CODE_STATE' table. The placeholders in the SELECT statement represent the area codes being aggregated.
dev.691,voter_1,What is last date created of votes from the state 'CA'?,1,SELECT max(created) FROM votes WHERE state  =  'CA',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(created) FROM votes WHERE state  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the most recent vote timestamp from the 'votes' table for a specific state. The placeholder in the WHERE clause represents the name of the state for which the latest vote is being queried.
dev.692,voter_1,What are the names of the contestants whose names are not 'Jessie Alloway',1,SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT contestant_name FROM contestants WHERE contestant_name != [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of contestants from the 'CONTESTANTS' table, excluding a specific contestant's name. The placeholder in the WHERE clause represents the name of the contestant to be excluded."
dev.693,voter_1,What are the distinct states and create time of all votes?,1,"SELECT DISTINCT state ,  created FROM votes",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT DISTINCT state ,  created FROM votes",This virtual table provides a distinct list of states along with the timestamps of when votes were cast from the 'votes' table. The placeholder in the SELECT statement allows for the retrieval of unique state names and their corresponding vote creation times.
dev.694,voter_1,What are the contestant numbers and names of the contestants who had at least two votes?,1,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of contestants along with their unique identifiers from the 'contestants' table who have received a minimum number of votes. The placeholder in the HAVING clause represents the minimum vote count required for a contestant to be included in the results.
dev.695,voter_1,"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",1,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of contestants along with their unique identifiers from the 'contestants' table. The results are filtered based on the votes they received, joining the 'contestants' and 'votes' tables. The contestants are grouped by their unique identifier, and the results are ordered by the number of votes in ascending order, with a limit specified by a placeholder for numeric values."
dev.696,voter_1,What are the number of votes from state 'NY' or 'CA'?,1,SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM votes WHERE state  =  [PLACEHOLDER-TYPE:STRING] OR state  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of votes cast in a specific state or in another specified state. The placeholders in the WHERE clause represent the names of the states being queried.
dev.697,voter_1,How many contestants did not get voted?,1,SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),"This virtual table provides the count of contestants from the 'contestants' table who have not received any votes. The subquery checks for contestant numbers that exist in the 'votes' table, and the main query counts those not included in that list."
dev.699,voter_1,"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",1,"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the creation timestamp, state, and phone number of voters who voted for a specific contestant in the contest. The placeholder in the WHERE clause represents the name of the contestant for whom the votes are being queried."
dev.701,voter_1,Return the names of the contestants whose names contain the substring 'Al' .,1,select contestant_name from contestants where contestant_name like '%al%',1,low,False,False,False,False,False,True,False,True,False,False,False,False,select contestant_name from contestants where contestant_name like [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of contestants from the 'CONTESTANTS' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the contestant names.
dev.702,world_1,What are the names of all the countries that became independent after 1950?,1,SELECT Name FROM country WHERE IndepYear  >  1950,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM country WHERE IndepYear  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of countries from the 'country' table that gained independence after a specific year. The placeholder in the WHERE clause represents the year of independence.
dev.706,world_1,What is the total surface area of the countries in the Caribbean region?,1,SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(SurfaceArea) FROM country WHERE Region  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total surface area of countries from the 'country' table that belong to a specific region. The placeholder in the WHERE clause represents the region's name.
dev.708,world_1,Which continent is Anguilla in?,1,SELECT Continent FROM country WHERE Name  =  'Anguilla',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Continent FROM country WHERE Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the continent of a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country for which the continent is being queried.
dev.710,world_1,Which region is the city Kabul located in?,1,SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the geographical region of a country based on the name of a city. It joins the 'country' and 'city' tables using the country code to filter the results. The placeholder in the WHERE clause represents the name of the city for which the region is being queried.
dev.712,world_1,Which language is the most popular in Aruba?,1,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY Percentage DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the languages spoken in a specific country, retrieved from the 'country' and 'countrylanguage' tables. The placeholder in the WHERE clause represents the name of the country, while the placeholder in the LIMIT clause indicates the maximum number of languages to return, sorted by the percentage of the population that speaks each language in descending order."
dev.714,world_1,What are the population and life expectancies in Brazil?,1,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the population and life expectancy of a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country being queried.
dev.716,world_1,What are the region and population of Angola?,1,"SELECT Population ,  Region FROM country WHERE Name  =  'Angola'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Population ,  Region FROM country WHERE Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the population and region of a specific country from the 'country' table based on the country's name. The placeholder in the WHERE clause represents the name of the country being queried.
dev.718,world_1,What is the average expected life expectancy for countries in the region of Central Africa?,1,SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(LifeExpectancy) FROM country WHERE Region  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average life expectancy of countries from the 'country' table that belong to a specific region. The placeholder in the WHERE clause represents the region's name.
dev.720,world_1,What is the name of country that has the shortest life expectancy in Asia?,1,SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING] ORDER BY LifeExpectancy LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of countries from the 'country' table that are located in a specific continent. The results are ordered by the average life expectancy of the countries, and the number of results returned is limited by a placeholder for numeric values."
dev.722,world_1,What is the total population and maximum GNP in Asia?,1,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]",This virtual table summarizes the total population and the maximum Gross National Product (GNP) of countries located in a specific continent. The placeholder in the WHERE clause represents the continent's name.
dev.726,world_1,What is the total surface area of the continents Asia and Europe?,1,SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(SurfaceArea) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING] OR Continent  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total surface area of countries from the 'country' table that are located in specific continents. The placeholders in the WHERE clause represent the names of the continents being queried.
dev.728,world_1,How many people live in Gelderland district?,1,SELECT sum(Population) FROM city WHERE District  =  'Gelderland',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT sum(Population) FROM city WHERE District  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total population of cities located in a specific district from the 'city' table. The placeholder in the WHERE clause represents the name of the district.
dev.738,world_1,How many official languages does Afghanistan have?,1,SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING] AND IsOfficial  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of languages spoken in a specific country that are recognized as official languages. The placeholders in the WHERE clause represent the country's name and the official status of the language.
dev.740,world_1,What is name of the country that speaks the largest number of languages?,1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of countries that have the most languages spoken, based on the data from the 'country' and 'countrylanguage' tables. The placeholder in the LIMIT clause represents the maximum number of countries to be returned."
dev.744,world_1,How many countries speak both English and Dutch?,1,SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch'),2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of countries where two specified languages are spoken. The placeholders in the query represent the names of the languages being compared.
dev.747,world_1,Give the names of nations that speak both English and French.,1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies countries that have two specific languages spoken within their borders. The placeholders in the WHERE clause represent the names of the languages being queried.
dev.748,world_1,What are the names of nations where both English and French are official languages?,1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T',2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND T2.IsOfficial  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND T2.IsOfficial  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies countries that have two specific languages as official languages. The placeholders in the WHERE clause represent the names of the languages being queried.
dev.750,world_1,What is the number of distinct continents where Chinese is spoken?,1,SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of distinct continents where a specific language is spoken. It joins the 'country' table with the 'countrylanguage' table based on the country code, filtering the results to include only those countries where the specified language is spoken. The placeholder in the WHERE clause represents the language name."
dev.752,world_1,What are the regions that use English or Dutch?,1,SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] OR T2.Language  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct regions from the 'country' table where a specific language is spoken. The placeholders in the WHERE clause represent the names of the languages being queried.
dev.757,world_1,What is the language that is used by the largest number of Asian nations?,1,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of languages spoken in countries located on a specific continent. The placeholder in the WHERE clause represents the continent's name, while the placeholder in the LIMIT clause indicates the maximum number of languages to return, sorted by the number of speakers in descending order."
dev.761,world_1,What is the most populace city that speaks English?,1,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and populations of cities from the 'city' table that have a specific language spoken, as indicated in the 'countrylanguage' table. The placeholder in the WHERE clause represents the language name, while the placeholder in the LIMIT clause specifies the maximum number of results to return."
dev.762,world_1,"Find the name, population and expected life length of asian country with the largest area?",1,"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING] ORDER BY SurfaceArea DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of countries, including their names, populations, and life expectancies, filtered by a specific continent. The results are ordered by the surface area of the countries in descending order, and the number of results returned is limited by a specified number."
dev.764,world_1,What is average life expectancy in the countries where English is not the official language?,1,SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T'),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND T2.IsOfficial  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the average life expectancy of countries that do not have a specific language as an official language. The placeholders in the subquery represent the language name and its official status.
dev.768,world_1,What is the official language spoken in the country whose head of state is Beatrix?,1,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  [PLACEHOLDER-TYPE:STRING] AND T2.IsOfficial  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of languages spoken in countries where the head of state matches a specified name. The query joins the 'country' and 'countrylanguage' tables based on the country code, filtering for official languages and a specific head of state."
dev.770,world_1,What is the total number of unique official languages spoken in the countries that are founded before 1930?,1,SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  [PLACEHOLDER-TYPE:NUMBER] AND T2.IsOfficial  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct languages spoken in countries that gained independence before a specified year and have a specific language marked as official. The placeholders in the WHERE clause represent the year of independence and the official language status.
dev.775,world_1,Which African countries have a smaller population than that of any country in Asia?,1,SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  'Asia'),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Name FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of countries from the 'country' table that are located in a specific continent and have a population smaller than the minimum population of any country within the same continent. The placeholders in the WHERE clause represent the continent's name.
dev.776,world_1,Which Asian countries have a population that is larger than any country in Africa?,1,SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  'Africa'),1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Name FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of countries from the 'country' table that are located in a specific continent and have a population greater than the maximum population of any country within the same continent. The placeholders in the WHERE clause represent the continent's name.
dev.780,world_1,What are the country codes of countries where people use languages other than English?,1,SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != [PLACEHOLDER-TYPE:STRING],"The virtual table retrieves distinct country codes from the 'countrylanguage' table, filtering out countries where a specific language is spoken. The placeholder in the WHERE clause represents the language to be excluded."
dev.787,world_1,Return the different names of cities that are in Asia and for which Chinese is the official language.,1,SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  'Asia',3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  [PLACEHOLDER-TYPE:STRING] AND T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND T1.Continent  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct city names from the 'city' table that are located in countries where a specific language is officially spoken. The query filters the results based on whether the language is official, the name of the language, and the continent the country belongs to. The placeholders in the WHERE clause represent the official status of the language, the language name, and the continent."
dev.790,world_1,"What are the population, name and leader of the country with the largest area?",1,"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of countries, displaying their names, populations, and heads of state, ordered by the surface area of the countries in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to retrieve."
dev.792,world_1,Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,1,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of languages spoken in each country from the 'country' table, along with the country's name. The query joins the 'country' table with the 'countrylanguage' table based on the country code, grouping the results by country name. The placeholder in the HAVING clause represents the minimum number of languages that must be spoken in a country for it to be included in the results."
dev.794,world_1,Find the number of cities in each district whose population is greater than the average population of cities?,1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","This virtual table provides the count of cities grouped by district, specifically for those districts where the population of the cities exceeds the average population of all cities. The query uses a subquery to calculate the average population and filters the results accordingly."
dev.798,world_1,Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,1,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table summarizes the total population and average life expectancy of countries grouped by continent. It filters the results to only include continents where the average life expectancy is below a specified threshold. The placeholder in the HAVING clause represents the life expectancy limit.
dev.800,world_1,What are the names and areas of countries with the top 5 largest area?,1,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of country names along with their surface areas, sorted in descending order by surface area. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
dev.802,world_1,What are names of countries with the top 3 largest population?,1,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM country ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of countries from the 'country' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of countries to be displayed."
dev.804,world_1,What are the names of the nations with the 3 lowest populations?,1,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM country ORDER BY Population ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of countries from the 'country' table, ordered by their population in ascending order. The placeholder in the LIMIT clause represents the maximum number of countries to be returned."
dev.806,world_1,how many countries are in Asia?,1,SELECT count(*) FROM country WHERE continent  =  'Asia',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM country WHERE continent  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of countries located within a specific continent from the 'country' table. The placeholder in the WHERE clause represents the name of the continent.
dev.808,world_1,What are the names of the countries that are in the continent of Europe and have a population of 80000?,1,SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM country WHERE continent  =  [PLACEHOLDER-TYPE:STRING] AND Population  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of countries from the 'country' table that are located in a specific continent and have a specified population. The placeholders in the WHERE clause represent the continent's name and the population count.
dev.813,world_1,Return the names of cities that have a population between 160000 and 900000 .,1,select name from city where population between 160000 and 900000,1,low,False,False,False,False,False,True,False,True,False,False,False,False,select name from city where population between [PLACEHOLDER-TYPE:NUMBER] and [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of cities from the 'city' table that have a population within a specified range. The placeholders in the WHERE clause represent the lower and upper limits of the population range.
dev.814,world_1,Which language is spoken by the largest number of countries?,1,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of languages spoken in various countries, grouped by language and ordered by the number of countries that speak each language. The placeholder in the LIMIT clause allows the user to specify the maximum number of languages to retrieve."
dev.822,orchestra,How many conductors are there?,1,SELECT count(*) FROM conductor,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM conductor,"This virtual table provides the total number of conductors recorded in the 'conductor' table. The query counts all entries in the table, which helps in understanding the size of the conductor dataset."
dev.824,orchestra,List the names of conductors in ascending order of age.,1,SELECT Name FROM conductor ORDER BY Age ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM conductor ORDER BY Age ASC,"This virtual table lists the names of conductors from the 'conductor' table, sorted by their age in ascending order. This allows users to see the conductors starting from the youngest to the oldest."
dev.826,orchestra,"What are the names of conductors whose nationalities are not ""USA""?",1,SELECT Name FROM conductor WHERE Nationality != 'USA',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM conductor WHERE Nationality != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of conductors from the 'conductor' table who are not from a specific nationality. The placeholder in the WHERE clause represents the nationality to be excluded.
dev.829,orchestra,"Return the record companies of orchestras, sorted descending by the years in which they were founded.",1,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"This virtual table provides a list of record companies associated with orchestras, sorted by the year each orchestra was founded in descending order. The placeholder in the SELECT statement represents the record company information."
dev.830,orchestra,What is the average attendance of shows?,1,SELECT avg(Attendance) FROM SHOW,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(Attendance) FROM SHOW,This virtual table calculates the average attendance of shows from the 'show' table. The result provides insights into the overall audience engagement for the performances.
dev.832,orchestra,"What are the maximum and minimum share of performances whose type is not ""Live final"".",1,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != [PLACEHOLDER-TYPE:STRING]","This virtual table provides the maximum and minimum market share values of performances from the 'performance' table, excluding a specific type of performance. The placeholder in the WHERE clause represents the type of performance to be filtered out."
dev.834,orchestra,How many different nationalities do conductors have?,1,SELECT count(DISTINCT Nationality) FROM conductor,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT Nationality) FROM conductor,This virtual table provides the count of distinct nationalities represented by conductors in the 'conductor' table. The query uses a placeholder to ensure flexibility in counting unique nationalities.
dev.836,orchestra,List names of conductors in descending order of years of work.,1,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"This virtual table lists the names of conductors from the 'conductor' table, ordered by the year they started working, with the most recent first. This allows users to see the most current conductors based on their start year."
dev.840,orchestra,Show the names of conductors and the orchestras they have conducted.,1,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",This virtual table provides the names of conductors along with the orchestras they lead. It combines data from the 'conductor' and 'orchestra' tables by linking them through the 'Conductor_ID'.
dev.842,orchestra,Show the names of conductors that have conducted more than one orchestras.,1,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of conductors who have conducted more than a specified number of orchestras. The placeholder in the HAVING clause represents the minimum count of orchestras a conductor must have conducted to be included in the results.
dev.844,orchestra,Show the name of the conductor that has conducted the most number of orchestras.,1,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of conductors from the 'conductor' table, grouped by their unique identifier. It joins the 'conductor' table with the 'orchestra' table to associate each conductor with their orchestras. The results are ordered by the count of orchestras each conductor is associated with, in descending order, and limited to a specified number of conductors. The placeholder in the LIMIT clause represents the maximum number of conductors to return."
dev.846,orchestra,Please show the name of the conductor that has conducted orchestras founded after 2008.,1,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of conductors from the 'conductor' table who are associated with orchestras founded after a specific year. The placeholder in the WHERE clause represents the year of foundation of the orchestras.
dev.848,orchestra,Please show the different record companies and the corresponding number of orchestras.,1,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","This virtual table summarizes the number of orchestras associated with each record company from the 'orchestra' table. The placeholder in the SELECT clause represents the record company's identifier, and the COUNT function is used to aggregate the number of orchestras per record company."
dev.854,orchestra,List the names of orchestras that have no performance.,1,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"This virtual table lists the names of orchestras from the 'orchestra' table that have not performed any performances. The subquery checks for orchestras that are linked to any performance, and the placeholder in the WHERE clause represents the condition for filtering orchestras without performances."
dev.857,orchestra,What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?,1,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies record companies associated with orchestras that were founded before a certain year and after another specified year. The placeholders in the WHERE clauses represent the years for filtering the orchestras based on their founding dates.
dev.858,orchestra,"Find the number of orchestras whose record format is ""CD"" or ""DVD"".",1,SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  [PLACEHOLDER-TYPE:STRING] OR Major_Record_Format  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of orchestras from the 'orchestra' table that produce recordings in specific major formats. The placeholders in the WHERE clause represent the major recording formats being queried.
dev.860,orchestra,Show the years in which orchestras that have given more than one performance are founded.,1,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the years in which orchestras were founded, specifically for those orchestras that have performed more than a specified number of performances. The placeholder in the HAVING clause represents the minimum count of performances required for the orchestras to be included in the results."
dev.862,network_1,How many high schoolers are there?,1,SELECT count(*) FROM Highschooler,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Highschooler,"This virtual table provides the total number of high school students from the 'Highschooler' table. The query counts all entries in the table, which represents the total student population."
dev.864,network_1,Show the names and grades of each high schooler.,1,"SELECT name ,  grade FROM Highschooler",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT name ,  grade FROM Highschooler","This virtual table describes the names and grade levels of high school students from the 'Highschooler' table. There are no filtering conditions applied, so it retrieves all students' names and grades."
dev.866,network_1,Show all the grades of the high schoolers.,1,SELECT grade FROM Highschooler,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT grade FROM Highschooler,"This virtual table describes the current grade levels of high school students from the 'Highschooler' table. The query selects the 'grade' column, which indicates the grade level of each student."
dev.868,network_1,What grade is Kyle in?,1,SELECT grade FROM Highschooler WHERE name  =  'Kyle',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT grade FROM Highschooler WHERE name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the grade level of a high school student from the 'Highschooler' table based on their full name. The placeholder in the WHERE clause represents the student's name.
dev.870,network_1,Show the names of all high schoolers in grade 10.,1,SELECT name FROM Highschooler WHERE grade  =  10,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT name FROM Highschooler WHERE grade  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of high school students from the 'Highschooler' table who are currently in a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.
dev.872,network_1,Show the ID of the high schooler named Kyle.,1,SELECT ID FROM Highschooler WHERE name  =  'Kyle',1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT ID FROM Highschooler WHERE name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of high school students from the 'Highschooler' table who have a specific name. The placeholder in the WHERE clause represents the student's name.
dev.874,network_1,How many high schoolers are there in grade 9 or 10?,1,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Highschooler WHERE grade  =  [PLACEHOLDER-TYPE:NUMBER] OR grade  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table counts the number of high school students from the 'Highschooler' table who are in specific grade levels. The placeholders in the WHERE clause represent the grade levels being queried.
dev.876,network_1,Show the number of high schoolers for each grade.,1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",This virtual table summarizes the number of high school students in each grade level from the 'Highschooler' table. The query groups the results by the 'grade' column and counts the total number of students in each grade.
dev.879,network_1,Return the grade that has the greatest number of high schoolers.,1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the grade levels of high school students from the 'Highschooler' table, grouping them by grade and ordering the results by the number of students in each grade in descending order. The placeholder in the LIMIT clause represents the maximum number of grade levels to return."
dev.880,network_1,Show me all grades that have at least 4 students.,1,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,1,high,False,True,False,False,False,False,False,True,False,False,False,False,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the grades of high school students from the 'Highschooler' table, grouping them by grade level. The placeholder in the HAVING clause represents the minimum number of students required in each grade to be included in the results."
dev.882,network_1,Show the student IDs and numbers of friends corresponding to each.,1,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","This virtual table summarizes the number of friends each high school student has by counting the entries in the 'Friend' table. The placeholder in the SELECT clause represents the student identifier, while the count function aggregates the total number of friends for each student."
dev.886,network_1,What is the name of the high schooler who has the greatest number of friends?,1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the names of the most popular high school students based on the number of friends they have. The placeholder in the LIMIT clause allows for specifying the maximum number of names to retrieve.
dev.888,network_1,Show the names of high schoolers who have at least 3 friends.,1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of high school students who have a certain number of friends. The placeholder in the HAVING clause represents the minimum count of friends a student must have to be included in the results.
dev.890,network_1,Show the names of all of the high schooler Kyle's friends.,1,SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of friends of a specific high school student from the 'Highschooler' table. The placeholder in the WHERE clause represents the name of the student whose friends are being queried.
dev.892,network_1,How many friends does the high school student Kyle have?,1,SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table counts the number of friends for a specific high school student identified by their name. The query joins the 'Friend' table with the 'Highschooler' table to match the student ID with the student's name, using a placeholder for the name in the WHERE clause."
dev.894,network_1,Show ids of all students who do not have any friends.,1,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,This virtual table identifies high school students who do not have any friends listed in the 'Friend' table. The placeholder in the SELECT statement represents the unique identifiers of students who are not associated with any friendships.
dev.896,network_1,Show names of all high school students who do not have any friends.,1,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,This virtual table describes the names of high school students from the 'Highschooler' table who do not have any friends listed in the 'Friend' table. The query uses an EXCEPT clause to exclude names of students who are identified as friends.
dev.898,network_1,Show the ids of high schoolers who have friends and are also liked by someone else.,1,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,This virtual table identifies the unique identifiers of high school students who are both friends with other students and are liked by someone. The placeholders in the query represent the student identifiers involved in these relationships.
dev.900,network_1,Show name of all students who have some friends and also are liked by someone else.,1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,3+,low,False,False,False,False,False,True,False,False,False,False,False,True,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,This virtual table describes the names of high school students who are both friends with a specific student and are also liked by that student. The placeholders in the query represent the identifiers for the specific student.
dev.902,network_1,Count the number of likes for each student id.,1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","This virtual table summarizes the number of likes each high school student has received from their peers. The placeholder in the SELECT statement represents the student identifier, while the count function aggregates the total number of likes for each student."
dev.905,network_1,"What are the names of high schoolers who have likes, and how many likes does each have?",1,"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","This virtual table provides the names of high school students along with the count of how many students like each of them. The data is sourced from the 'Likes' table, which tracks student preferences, and the 'Highschooler' table, which contains student details. The placeholder in the GROUP BY clause represents the student identifier, allowing for aggregation of likes per student."
dev.906,network_1,What is the name of the high schooler who has the greatest number of likes?,1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of high school students who are liked by other students, based on the data from the 'Likes' and 'Highschooler' tables. The results are grouped by each student who likes someone, ordered by the number of likes they have received, and limited to a specified number of top students."
dev.908,network_1,Show the names of students who have at least 2 likes.,1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of high school students who have received likes from a specified number of other students. The placeholder in the HAVING clause represents the minimum count of likes required for a student to be included in the results.
dev.910,network_1,Show the names of students who have a grade higher than 5 and have at least 2 friends.,1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.student_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of friends of high school students who are in a grade level higher than a specified number. The placeholders in the WHERE clause represent the grade level and the minimum number of friends required for the selection.
dev.912,network_1,How many likes does Kyle have?,1,SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle',2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of students who have expressed their liking towards others from the 'Highschooler' table, filtered by a specific student's name. The placeholder in the WHERE clause represents the name of the student whose likes are being counted."
dev.914,network_1,Find the average grade of all students who have some friends.,1,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),This virtual table calculates the average grade of high school students who have friends in the 'Highschooler' table. The placeholder in the query allows for filtering based on the student IDs of those who have friends.
dev.916,network_1,Find the minimum grade of students who have no friends.,1,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"This virtual table calculates the minimum grade level of high school students from the 'Highschooler' table who do not have any friends listed in the 'Friend' table. The subquery identifies students who have friends, and the main query filters out these students to find the minimum grade among those without friends."
dev.918,dog_kennels,Which states have both owners and professionals living there?,1,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,2,low,False,False,False,False,False,True,False,False,False,True,False,False,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"This virtual table identifies the states where both owners and professionals reside. The placeholder in the SELECT clause represents the state information from both tables, ensuring that only states common to both groups are included."
dev.922,dog_kennels,"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",1,"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of professionals, including their unique identifier, last name, and cell number, filtered by a specific state. Additionally, it includes professionals who have administered more than a specified number of treatments, ensuring that only those with significant involvement in treatment are included."
dev.926,dog_kennels,Which first names are used for professionals or owners but are not used as dog names?,1,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,3+,mid,False,False,False,True,False,False,False,False,False,False,False,True,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,"This virtual table provides a list of first names from both the 'Professionals' and 'Owners' tables, excluding any names that are already present in the 'Dogs' table. The placeholders in the query allow for dynamic adjustments to the selection criteria if needed."
dev.928,dog_kennels,"Which professional did not operate any treatment on dogs? List the professional's id, role and email.",1,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","This virtual table lists the identifiers, roles, and email addresses of professionals from the 'Professionals' table who have not administered any treatments. The query uses an EXCEPT clause to exclude those professionals who are linked to any treatment records in the 'Treatments' table."
dev.930,dog_kennels,"Which owner owns the most dogs? List the owner id, first name and last name.",1,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique owners along with their first and last names from the 'Owners' table, based on the dogs they own from the 'Dogs' table. The results are grouped by owner ID and ordered by the number of dogs owned in descending order, with a limit specified by a placeholder for numeric values."
dev.932,dog_kennels,"Which professionals have done at least two treatments? List the professional's id, role, and first name.",1,"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of professionals along with their identifiers and roles who have administered a minimum number of treatments. The placeholder in the HAVING clause represents the minimum count of treatments that a professional must have administered to be included in the results.
dev.934,dog_kennels,What is the name of the breed with the most dogs?,1,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of dog breeds from the 'Breeds' table, showing the most common breeds based on the number of dogs associated with each breed. The placeholder in the LIMIT clause allows the user to specify the maximum number of breeds to return."
dev.938,dog_kennels,What is the description of the treatment type that costs the least money in total?,1,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of treatment type descriptions from the 'Treatment_Types' table, joined with the 'Treatments' table. It groups the results by treatment type code and orders them by the total cost of treatments in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
dev.940,dog_kennels,Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,1,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",3+,high,False,True,False,False,False,False,False,False,False,False,False,True,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique owners along with their postal codes, sorted by the total cost of treatments administered to their dogs. The placeholder in the LIMIT clause allows for specifying the maximum number of owners to retrieve based on the highest treatment costs."
dev.946,dog_kennels,"List the date of each treatment, together with the first name of the professional who operated it.",1,"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","This virtual table provides a list of treatment dates along with the first names of the professionals who administered those treatments. The data is sourced from the 'Treatments' table, which records treatment details, and the 'Professionals' table, which contains information about the professionals. The join operation links these two tables based on the professional's identifier, ensuring that each treatment is associated with the correct professional."
dev.948,dog_kennels,List the cost of each treatment and the corresponding treatment type description.,1,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",This virtual table provides the cost of treatments along with their descriptions from the 'Treatments' and 'Treatment_Types' tables. The join operation links the treatment records to their corresponding treatment types using the treatment type code.
dev.952,dog_kennels,List pairs of the owner's first name and the dogs's name.,1,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","This virtual table describes the first names of dog owners along with the names of their dogs. The data is retrieved by joining the 'Owners' table with the 'Dogs' table based on the owner ID, which links each dog to its respective owner."
dev.955,dog_kennels,Which dogs are of the rarest breed? Show their names and treatment dates.,1,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER] )","This virtual table provides the names of dogs along with the dates of their treatments from the 'Dogs' and 'Treatments' tables. It filters the results to include only those dogs that belong to the least common breed, as determined by the breed code, using a subquery that counts the occurrences of each breed and limits the results to a specified number."
dev.956,dog_kennels,Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,1,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",2,mid,False,False,False,True,False,False,False,False,False,True,False,False,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first names of dog owners and the names of their dogs from the 'Owners' and 'Dogs' tables, respectively. The placeholder in the WHERE clause represents the state where the owners reside."
dev.959,dog_kennels,Find the arriving date and the departing date of the dogs that received a treatment.,1,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","This virtual table provides a list of unique arrival and departure dates for dogs from the 'Dogs' table, along with their associated treatment records from the 'Treatments' table. The placeholders in the query allow for filtering or further specification of the data as needed."
dev.962,dog_kennels,List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.,1,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT email_address FROM Professionals WHERE state  =  [PLACEHOLDER-TYPE:STRING] OR state  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the email addresses of professionals from the 'Professionals' table who are located in specific states. The placeholders in the WHERE clause represent the states being queried.
dev.964,dog_kennels,What are the arriving date and the departing date of all the dogs?,1,"SELECT date_arrived ,  date_departed FROM Dogs",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT date_arrived ,  date_departed FROM Dogs",This virtual table provides information about the arrival and departure dates of dogs from the 'Dogs' table. The placeholders in the SELECT statement can be used to filter or modify the query as needed.
dev.966,dog_kennels,How many dogs went through any treatments?,1,SELECT count(DISTINCT dog_id) FROM Treatments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT dog_id) FROM Treatments,"This virtual table provides the count of unique dogs that have received treatments from the 'Treatments' table. The query uses the DISTINCT keyword to ensure that each dog is only counted once, regardless of how many treatments they have received."
dev.968,dog_kennels,How many professionals have performed any treatment to dogs?,1,SELECT count(DISTINCT professional_id) FROM Treatments,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(DISTINCT professional_id) FROM Treatments,"This virtual table provides the count of unique professionals who have administered treatments, as recorded in the 'Treatments' table. The query uses a DISTINCT clause to ensure that each professional is only counted once, regardless of how many treatments they have provided."
dev.970,dog_kennels,"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",1,"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table describes the role, street address, city, and state of professionals from the 'Professionals' table who are located in a specific city. The placeholder in the WHERE clause represents the name of the city."
dev.972,dog_kennels,"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",1,"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first and last names, along with the email addresses of dog owners from the 'Owners' table who reside in a specific state. The placeholder in the WHERE clause represents the state name."
dev.974,dog_kennels,How many dogs have an age below the average?,1,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),"This virtual table provides the count of dogs from the 'Dogs' table that are younger than the average age of all dogs. The subquery calculates the average age, and the main query counts the number of dogs that meet the age condition."
dev.976,dog_kennels,How much does the most recent treatment cost?,1,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of treatment costs from the 'Treatments' table, ordered by the date of treatment in descending order. The placeholder in the LIMIT clause allows the user to specify the number of records to retrieve."
dev.978,dog_kennels,How many dogs have not gone through any treatment?,1,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),"This virtual table provides a count of dogs from the 'Dogs' table that have not received any treatments. The subquery identifies the dog IDs that have treatments recorded, and the main query counts the dogs whose IDs are not in that list."
dev.979,dog_kennels,Tell me the number of dogs that have not received any treatment .,1,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),"This virtual table provides a count of dogs from the 'Dogs' table that have not received any treatments. The subquery identifies the dog IDs that have associated treatment records, and the main query counts the dogs whose IDs are not in that list."
dev.980,dog_kennels,How many owners temporarily do not have any dogs?,1,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"This virtual table counts the number of owners from the 'Owners' table who do not have any associated dogs in the 'Dogs' table. The subquery identifies owners who have dogs, and the main query counts those who are not included in that list."
dev.982,dog_kennels,How many professionals did not operate any treatment on dogs?,1,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"This virtual table provides a count of professionals from the 'Professionals' table who have not administered any treatments. The subquery identifies professionals who have records in the 'Treatments' table, and the main query counts those not included in that list."
dev.984,dog_kennels,"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",1,"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the names, ages, and weights of dogs from the 'Dogs' table that are either abandoned or not abandoned, based on a specified condition. The placeholder in the WHERE clause represents the abandonment status of the dogs."
dev.986,dog_kennels,What is the average age of all the dogs?,1,SELECT avg(age) FROM Dogs,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT avg(age) FROM Dogs,This virtual table calculates the average age of dogs from the 'Dogs' table. The result provides insight into the overall age distribution of the dogs in the database.
dev.988,dog_kennels,What is the age of the oldest dog?,1,SELECT max(age) FROM Dogs,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(age) FROM Dogs,"This virtual table provides the maximum age of dogs from the 'Dogs' table. The query retrieves the highest value from the 'age' column, which represents the age of each dog in years."
dev.990,dog_kennels,How much does each charge type costs? List both charge type and amount.,1,"SELECT charge_type ,  charge_amount FROM Charges",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT charge_type ,  charge_amount FROM Charges","This virtual table describes the types and amounts of charges from the 'Charges' table. It provides information on various charge types, such as adoption fees or treatment costs, along with their corresponding amounts."
dev.992,dog_kennels,How much does the most expensive charge type costs?,1,SELECT max(charge_amount) FROM Charges,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT max(charge_amount) FROM Charges,"This virtual table provides the maximum charge amount from the 'Charges' table. The placeholder in the SELECT clause represents the charge amount, which can be modified to retrieve specific values or conditions if needed."
dev.994,dog_kennels,"List the email, cell phone and home phone of all the professionals.",1,"SELECT email_address ,  cell_number ,  home_phone FROM professionals",1,mid,False,False,False,True,False,False,False,True,False,False,False,False,"SELECT email_address ,  cell_number ,  home_phone FROM professionals","This virtual table provides the email address, cell number, and home phone number of professionals from the 'Professionals' table. The placeholders in the SELECT statement allow for further filtering or modification based on specific criteria."
dev.1002,singer,List the name of singers in ascending order of net worth.,1,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,"This virtual table lists the names of singers from the 'singer' table, ordered by their estimated net worth in millions in ascending order. The query retrieves the 'Name' column and sorts the results based on the 'Net_Worth_Millions' column."
dev.1004,singer,What are the birth year and citizenship of singers?,1,"SELECT Birth_Year ,  Citizenship FROM singer",1,low,False,False,False,False,False,True,False,True,False,False,False,False,"SELECT Birth_Year ,  Citizenship FROM singer","This virtual table provides the birth year and citizenship of singers from the 'singer' table. There are no conditions applied, allowing for a complete list of all singers' birth years and their respective countries of citizenship."
dev.1006,singer,"List the name of singers whose citizenship is not ""France"".",1,SELECT Name FROM singer WHERE Citizenship != 'France',1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM singer WHERE Citizenship != [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of singers from the 'singer' table who are not citizens of a specified country. The placeholder in the WHERE clause represents the country of citizenship to be excluded.
dev.1008,singer,Show the name of singers whose birth year is either 1948 or 1949?,1,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,1,mid,False,False,False,True,False,False,False,True,False,False,False,False,SELECT Name FROM singer WHERE Birth_Year  =  [PLACEHOLDER-TYPE:NUMBER] OR Birth_Year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of singers from the 'singer' table who were born in specific years. The placeholders in the WHERE clause represent the years of birth being queried.
dev.1010,singer,What is the name of the singer with the largest net worth?,1,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of singers from the 'singer' table, ordered by their estimated net worth in millions, showing the top results as specified by a placeholder for the number of entries to return."
dev.1012,singer,Show different citizenship of singers and the number of singers of each citizenship.,1,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",This virtual table summarizes the number of singers grouped by their country of citizenship from the 'singer' table. The result will show each citizenship along with the count of singers from that country.
dev.1016,singer,Show different citizenships and the maximum net worth of singers of each citizenship.,1,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",1,high,False,True,False,False,False,False,False,True,False,False,False,False,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","This virtual table summarizes the maximum estimated net worth of singers grouped by their country of citizenship. The placeholder in the SELECT clause represents the citizenship of the singers, while the aggregation function calculates the highest net worth for each group."
dev.1018,singer,Show titles of songs and names of singers.,1,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",2,low,False,False,False,False,False,True,False,False,False,True,False,False,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","This virtual table describes the titles of songs along with the names of the singers from the 'singer' and 'song' tables. The join operation links the two tables based on the Singer_ID, allowing us to retrieve the relevant information about each song and its corresponding singer."
dev.1020,singer,Show distinct names of singers that have songs with sales more than 300000.,1,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique singer names from the 'singer' table who have songs with sales exceeding a specified amount. The placeholder in the WHERE clause represents the sales figure that needs to be surpassed.
dev.1022,singer,Show the names of singers that have more than one song.,1,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,2,high,False,True,False,False,False,False,False,False,False,True,False,False,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of singers from the 'singer' table who have released more than a specified number of songs. The placeholder in the HAVING clause represents the minimum count of songs a singer must have released.
dev.1024,singer,Show the names of singers and the total sales of their songs.,1,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",2,high,False,True,False,False,False,False,False,False,False,True,False,False,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","This virtual table summarizes the total sales figures for each singer by joining the 'singer' and 'song' tables. The placeholder in the SELECT clause represents the singer's name, and the sum of sales is calculated for each singer based on their associated songs."
dev.1026,singer,List the name of singers that do not have any song.,1,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"This virtual table lists the names of singers from the 'singer' table who have not released any songs. The subquery in the WHERE clause identifies singers who have associated songs, and the placeholder represents the condition for filtering out those singers."
dev.1030,real_estate_properties,How many available features are there in total?,1,SELECT count(*) FROM Other_Available_Features,1,low,False,False,False,False,False,True,False,True,False,False,False,False,SELECT count(*) FROM Other_Available_Features,This virtual table provides a count of all available features from the 'Other_Available_Features' table. It gives an overview of the total number of features that can be utilized.
dev.1031,real_estate_properties,What is the feature type name of feature AirCon?,1,SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  'AirCon',2,mid,False,False,False,True,False,False,False,False,False,True,False,False,SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of feature types associated with a specific feature from the 'Other_Available_Features' table. The placeholder in the WHERE clause represents the name of the feature being queried.
